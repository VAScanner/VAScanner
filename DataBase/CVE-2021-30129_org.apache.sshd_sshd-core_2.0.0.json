{
    "org.apache.sshd.common.channel.BufferedIoOutputStream:void startWriting()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.sshd.common.channel.BufferedIoOutputStream$1:void finishWrite()",
            "org.apache.sshd.common.channel.BufferedIoOutputStream:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.sshd.server.channel.AbstractServerChannel:org.apache.sshd.client.future.OpenFuture open(int,long,long,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.BufferedIoOutputStream$1:void finishWrite()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.BufferedIoOutputStream$1:void operationComplete(org.apache.sshd.common.io.IoWriteFuture)"
        ]
    },
    "org.apache.sshd.common.channel.BufferedIoOutputStream:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.ChannelOutputStream:void flush()",
            "org.apache.sshd.common.channel.BufferedIoOutputStream:void startWriting()",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void doWriteIfPossible(boolean)"
        ]
    },
    "org.apache.sshd.server.channel.AbstractServerChannel:org.apache.sshd.client.future.OpenFuture open(int,long,long,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelOpen(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.BufferedIoOutputStream$1:void operationComplete(org.apache.sshd.common.io.IoWriteFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.BufferedIoOutputStream$1:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.UnknownCommand:void run()",
            "org.apache.sshd.server.shell.InvertedShellWrapper:boolean pumpStream(java.io.InputStream,java.io.OutputStream,byte[])",
            "org.apache.sshd.server.channel.ChannelSession:void closeShell(int)",
            "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.server.forward.TcpipServerChannel$1:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.agent.local.ChannelAgentForwarding$AgentClient:void reply(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.AgentForwardedChannel:org.apache.sshd.common.util.buffer.Buffer request(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.unix.AgentForwardedChannel:void run()",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:void lambda$doInit$0(int)",
            "org.apache.sshd.common.channel.ChannelOutputStream:void write(byte[],int,int)",
            "org.apache.sshd.common.channel.ChannelOutputStream:void close()",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void lambda$messageReceived$1(org.apache.sshd.common.forward.TcpipClientChannel,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.common.forward.SocksProxy$Proxy:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteExtendedData(byte[],int,long)",
            "org.apache.sshd.client.channel.ChannelSession:void pumpInputStream()"
        ]
    },
    "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void doWriteIfPossible(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream$1:void handleOperationCompleted()",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void onWindowExpanded()",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelOpen(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.BufferedIoOutputStream$1:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.server.shell.UnknownCommand:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.server.shell.InvertedShellWrapper:boolean pumpStream(java.io.InputStream,java.io.OutputStream,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void pumpStreams()"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:void closeShell(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:void lambda$prepareCommand$0(int,java.lang.String)"
        ]
    },
    "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void handleReadCycleCompletion(java.nio.ByteBuffer,org.apache.sshd.common.util.Readable,org.apache.sshd.common.io.nio2.Nio2CompletionHandler,java.lang.Integer,java.lang.Object)"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel$1:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void handleReadCycleCompletion(java.nio.ByteBuffer,org.apache.sshd.common.util.Readable,org.apache.sshd.common.io.nio2.Nio2CompletionHandler,java.lang.Integer,java.lang.Object)"
        ]
    },
    "org.apache.sshd.agent.local.ChannelAgentForwarding$AgentClient:void reply(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AbstractAgentClient:void messageReceived(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.local.AgentForwardedChannel:org.apache.sshd.common.util.buffer.Buffer request(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.AgentForwardedChannel$1:org.apache.sshd.common.util.buffer.Buffer request(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.unix.AgentForwardedChannel:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.agent.unix.ChannelAgentForwarding:void lambda$doInit$0(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.unix.ChannelAgentForwarding$lambda_doInit_0__181:void run()"
        ]
    },
    "org.apache.sshd.common.channel.ChannelOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void writeRawOutput(byte[],int,int)",
            "org.apache.sshd.server.shell.InvertedShellWrapper:boolean pumpStream(java.io.InputStream,java.io.OutputStream,byte[])",
            "org.apache.sshd.server.channel.PipeDataReceiver:int data(org.apache.sshd.server.channel.ChannelSession,byte[],int,int)",
            "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.server.forward.TcpipServerChannel$1:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.agent.local.ChannelAgentForwarding$AgentClient:void reply(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.AgentForwardedChannel:org.apache.sshd.common.util.buffer.Buffer request(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.unix.AgentForwardedChannel:void run()",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:void lambda$doInit$0(int)",
            "org.apache.sshd.common.util.io.IoUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.sshd.common.util.io.LoggingFilterOutputStream:void write(byte[],int,int)",
            "org.apache.sshd.common.util.buffer.BufferUtils:void writeUInt(java.io.OutputStream,long,byte[],int,int)",
            "org.apache.sshd.common.config.keys.KeyEntryResolver:int writeRLEBytes(java.io.OutputStream,byte[],int,int)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:void writeCoordinate(java.io.OutputStream,java.lang.String,java.math.BigInteger,int)",
            "org.apache.sshd.common.channel.ChannelOutputStream:void write(int)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void lambda$messageReceived$1(org.apache.sshd.common.forward.TcpipClientChannel,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.common.forward.SocksProxy$Proxy:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteExtendedData(byte[],int,long)",
            "org.apache.sshd.client.channel.ChannelSession:void pumpInputStream()"
        ]
    },
    "org.apache.sshd.common.channel.ChannelOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:boolean pumpStream(java.io.InputStream,java.io.OutputStream,byte[])",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:void writeKeyPair(java.security.KeyPair,java.nio.file.Path,java.nio.file.OpenOption[])",
            "org.apache.sshd.server.channel.PipeDataReceiver:void close()",
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.io.IoUtils:java.io.IOException closeQuietly(java.io.Closeable[])",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void writeHostConfigEntries(java.nio.file.Path,java.util.Collection,java.nio.file.OpenOption[])",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void releaseKeys()",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry updateKnownHostsFile(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:void close()",
            "org.apache.sshd.client.session.ClientSession:void executeRemoteCommand(java.lang.String,java.io.OutputStream,java.io.OutputStream,java.nio.charset.Charset)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void handleReadCycleCompletion(java.nio.ByteBuffer,org.apache.sshd.common.util.Readable,org.apache.sshd.common.io.nio2.Nio2CompletionHandler,java.lang.Integer,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void lambda$messageReceived$1(org.apache.sshd.common.forward.TcpipClientChannel,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.OpenFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler$lambda_messageReceived_1__171:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.common.forward.SocksProxy$Proxy:void onMessage(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.SocksProxy$Socks4:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.forward.SocksProxy$Socks5:void onMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteData(byte[],int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleData(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteExtendedData(byte[],int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleExtendedData(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelSession:void pumpInputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.ChannelSession$pumpInputStream__108:void run()"
        ]
    },
    "org.apache.sshd.common.channel.ChannelAsyncOutputStream$1:void handleOperationCompleted()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream$1:void operationComplete(org.apache.sshd.common.io.IoWriteFuture)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void onWindowExpanded()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:void handleWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelAsyncOutputStream:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.ChannelOutputStream:void flush()",
            "org.apache.sshd.common.channel.BufferedIoOutputStream:void startWriting()",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void doWriteIfPossible(boolean)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void process(int,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.SimpleCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)"
        ]
    },
    "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.SimpleCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)"
        ]
    },
    "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.future.DefaultSshFuture:org.apache.sshd.common.future.SshFuture addListener(org.apache.sshd.common.future.SshFutureListener)",
            "org.apache.sshd.common.future.DefaultSshFuture:void notifyListeners()"
        ]
    },
    "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.io.IoWriteFuture sendResponse(org.apache.sshd.common.util.buffer.Buffer,java.lang.String,org.apache.sshd.common.channel.RequestHandler$Result,boolean)"
        ]
    },
    "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.SimpleCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.ChannelSubsystem$lambda_onClose_0__99:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.server.shell.InvertedShellWrapper:void pumpStreams()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper$pumpStreams__174:void run()"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:void lambda$prepareCommand$0(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession$lambda_prepareCommand_0__154:void onExit(int,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Session:void handleReadCycleCompletion(java.nio.ByteBuffer,org.apache.sshd.common.util.Readable,org.apache.sshd.common.io.nio2.Nio2CompletionHandler,java.lang.Integer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session$1:void onCompleted(java.lang.Integer,java.lang.Object)"
        ]
    },
    "org.apache.sshd.agent.common.AbstractAgentClient:void messageReceived(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.ChannelAgentForwarding:void doWriteData(byte[],int,long)",
            "org.apache.sshd.agent.unix.AgentServer$SshAgentSession:void run()"
        ]
    },
    "org.apache.sshd.agent.local.AgentForwardedChannel$1:org.apache.sshd.common.util.buffer.Buffer request(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AbstractAgentProxy:java.util.List getIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentProxy:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void addIdentity(java.security.KeyPair,java.lang.String)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void removeIdentity(java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void removeAllIdentities()"
        ]
    },
    "org.apache.sshd.agent.unix.ChannelAgentForwarding$lambda_doInit_0__181:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.server.shell.TtyFilterOutputStream:void writeRawOutput(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.sshd.server.channel.PipeDataReceiver:int data(org.apache.sshd.server.channel.ChannelSession,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:void doWriteData(byte[],int,long)"
        ]
    },
    "org.apache.sshd.common.util.io.IoUtils:long copy(java.io.InputStream,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:long copy(java.io.InputStream,java.io.OutputStream)"
        ]
    },
    "org.apache.sshd.common.util.io.LoggingFilterOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void writeRawOutput(byte[],int,int)",
            "org.apache.sshd.server.shell.InvertedShellWrapper:boolean pumpStream(java.io.InputStream,java.io.OutputStream,byte[])",
            "org.apache.sshd.server.channel.PipeDataReceiver:int data(org.apache.sshd.server.channel.ChannelSession,byte[],int,int)",
            "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.server.forward.TcpipServerChannel$1:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.agent.local.ChannelAgentForwarding$AgentClient:void reply(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.AgentForwardedChannel:org.apache.sshd.common.util.buffer.Buffer request(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.unix.AgentForwardedChannel:void run()",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:void lambda$doInit$0(int)",
            "org.apache.sshd.common.util.io.IoUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.sshd.common.util.io.LoggingFilterOutputStream:void write(int)",
            "org.apache.sshd.common.util.io.LoggingFilterOutputStream:void write(byte[],int,int)",
            "org.apache.sshd.common.util.buffer.BufferUtils:void writeUInt(java.io.OutputStream,long,byte[],int,int)",
            "org.apache.sshd.common.config.keys.KeyEntryResolver:int writeRLEBytes(java.io.OutputStream,byte[],int,int)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:void writeCoordinate(java.io.OutputStream,java.lang.String,java.math.BigInteger,int)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void lambda$messageReceived$1(org.apache.sshd.common.forward.TcpipClientChannel,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.common.forward.SocksProxy$Proxy:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteExtendedData(byte[],int,long)",
            "org.apache.sshd.client.channel.ChannelSession:void pumpInputStream()"
        ]
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:void writeUInt(java.io.OutputStream,long,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.BufferUtils:void writeInt(java.io.OutputStream,int,byte[])",
            "org.apache.sshd.common.util.buffer.BufferUtils:void writeInt(java.io.OutputStream,int,byte[],int,int)",
            "org.apache.sshd.common.util.buffer.BufferUtils:void writeUInt(java.io.OutputStream,long,byte[])"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyEntryResolver:int writeRLEBytes(java.io.OutputStream,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyEntryResolver:int writeRLEBytes(java.io.OutputStream,byte[])"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:void writeCoordinate(java.io.OutputStream,java.lang.String,java.math.BigInteger,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression$3:void writeECPoint(java.io.OutputStream,java.lang.String,java.security.spec.ECPoint)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.UnknownCommand:void run()",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void writeRawOutput(int)",
            "org.apache.sshd.common.util.buffer.BufferUtils:int decodeHex(java.io.OutputStream,char,java.lang.CharSequence,int,int)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression$3:void writeECPoint(java.io.OutputStream,java.lang.String,java.security.spec.ECPoint)",
            "org.apache.sshd.common.channel.SttySupport:int copyStream(java.io.InputStream,java.io.OutputStream)"
        ]
    },
    "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:void writeKeyPair(java.security.KeyPair,java.nio.file.Path,java.nio.file.OpenOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair resolveKeyPair(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.server.channel.PipeDataReceiver:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:java.io.IOException closeQuietly(java.io.Closeable[])",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void releaseKeys()"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.common.future.CloseFuture close(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelOpenFailure(org.apache.sshd.client.future.OpenFuture,java.lang.Throwable)",
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleWriteDataFailure(byte,byte[],int,int,java.lang.Throwable)",
            "org.apache.sshd.server.forward.TcpipServerChannel$1:void sessionClosed(org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.server.forward.TcpipServerChannel$1:void exceptionCaught(org.apache.sshd.common.io.IoSession,java.lang.Throwable)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Session:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:void handleClosePacketWriteFailure(org.apache.sshd.common.channel.Channel,boolean,java.lang.Throwable)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleClose()",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.Closeable:void close(org.apache.sshd.common.Closeable)"
        ]
    },
    "org.apache.sshd.common.util.io.IoUtils:java.io.IOException closeQuietly(java.io.Closeable[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.ProcessShell:void destroy()",
            "org.apache.sshd.server.channel.ChannelSession$CommandCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.server.channel.ChannelSession:void doCloseImmediately()",
            "org.apache.sshd.server.channel.ChannelSession:void handleEof()",
            "org.apache.sshd.common.channel.AbstractChannel:void preClose()",
            "org.apache.sshd.client.channel.AbstractClientChannel:void lambda$getInnerCloseable$1()"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:void writeHostConfigEntries(java.nio.file.Path,java.util.Collection,java.nio.file.OpenOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void writeHostConfigEntries(java.io.File,java.util.Collection)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void releaseKeys()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void init(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void destroy()"
        ]
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry updateKnownHostsFile(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.nio.file.Path,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptUnknownHostKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:java.io.IOException closeQuietly(java.io.Closeable[])",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void releaseKeys()",
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:void close()"
        ]
    },
    "org.apache.sshd.client.session.ClientSession:void executeRemoteCommand(java.lang.String,java.io.OutputStream,java.io.OutputStream,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler$lambda_messageReceived_1__171:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.common.forward.SocksProxy$Socks4:void onMessage(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.SocksProxy:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)"
        ]
    },
    "org.apache.sshd.common.forward.SocksProxy$Socks5:void onMessage(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.SocksProxy:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void handleData(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelData(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void handleExtendedData(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelExtendedData(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelSession$pumpInputStream__108:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelAsyncOutputStream$1:void operationComplete(org.apache.sshd.common.io.IoWriteFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream$1:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:void handleWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.AbstractClientChannel:void handleWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.closeable.SimpleCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Session:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.Closeable:void close(org.apache.sshd.common.Closeable)"
        ]
    },
    "org.apache.sshd.common.future.DefaultSshFuture:org.apache.sshd.common.future.SshFuture addListener(org.apache.sshd.common.future.SshFutureListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession$CommandCloseable:void addCloseFutureListener(org.apache.sshd.common.future.SshFutureListener)",
            "org.apache.sshd.server.channel.ChannelSession$CommandCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.server.session.AbstractServerSession:boolean readIdentification(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.ChannelAgentForwarding:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:void doCloseImmediately()",
            "org.apache.sshd.common.util.closeable.AbstractCloseable:void addCloseFutureListener(org.apache.sshd.common.future.SshFutureListener)",
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.SimpleCloseable:void addCloseFutureListener(org.apache.sshd.common.future.SshFutureListener)",
            "org.apache.sshd.common.channel.BufferedIoOutputStream:void startWriting()",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:void addCloseFutureListener(org.apache.sshd.common.future.SshFutureListener)",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void doWriteIfPossible(boolean)",
            "org.apache.sshd.common.forward.SocksProxy$Socks4:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void sessionCreated(org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.common.forward.SocksProxy$Socks5:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer,long,java.util.concurrent.TimeUnit)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void disconnect(int,java.lang.String)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelOpen(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void onClose(java.lang.Runnable)",
            "org.apache.sshd.client.session.ClientConnectionService:org.apache.sshd.common.io.IoWriteFuture sendHeartBeat()",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture doConnect(java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)"
        ]
    },
    "org.apache.sshd.common.future.DefaultSshFuture:void notifyListeners()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.future.DefaultSshFuture:void setValue(java.lang.Object)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.io.IoWriteFuture sendResponse(org.apache.sshd.common.util.buffer.Buffer,java.lang.String,org.apache.sshd.common.channel.RequestHandler$Result,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleUnknownChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelSubsystem$lambda_onClose_0__99:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.server.shell.InvertedShellWrapper$pumpStreams__174:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession$lambda_prepareCommand_0__154:void onExit(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.UnknownCommand:void run()",
            "org.apache.sshd.server.shell.InvertedShellWrapper:void pumpStreams()",
            "org.apache.sshd.server.command.AbstractCommandSupport:void onExit(int,java.lang.String)",
            "org.apache.sshd.server.ExitCallback:void onExit(int)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Session$1:void onCompleted(java.lang.Integer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session$1:void onCompleted(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.sshd.agent.local.ChannelAgentForwarding:void doWriteData(byte[],int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleData(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.unix.AgentServer$SshAgentSession:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.agent.unix.AgentServer:void lambda$start$0()",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.agent.common.AbstractAgentProxy:java.util.List getIdentities()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AgentDelegate:java.util.List getIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:void <init>(org.apache.sshd.client.session.ClientSession,org.apache.sshd.agent.SshAgent)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:void <init>(org.apache.sshd.client.session.ClientSession,org.apache.sshd.common.signature.SignatureFactoriesManager)"
        ]
    },
    "org.apache.sshd.agent.common.AbstractAgentProxy:byte[] sign(java.security.PublicKey,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AgentDelegate:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.KeyAgentIdentity:byte[] sign(byte[])"
        ]
    },
    "org.apache.sshd.agent.common.AbstractAgentProxy:void addIdentity(java.security.KeyPair,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AgentDelegate:void addIdentity(java.security.KeyPair,java.lang.String)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.common.AbstractAgentProxy:void removeIdentity(java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AgentDelegate:void removeIdentity(java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.common.AbstractAgentProxy:void removeAllIdentities()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AgentDelegate:void removeAllIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.shell.TtyFilterOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void writeRawOutput(byte[],int,int)",
            "org.apache.sshd.server.shell.InvertedShellWrapper:boolean pumpStream(java.io.InputStream,java.io.OutputStream,byte[])",
            "org.apache.sshd.server.channel.PipeDataReceiver:int data(org.apache.sshd.server.channel.ChannelSession,byte[],int,int)",
            "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.server.forward.TcpipServerChannel$1:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.agent.local.ChannelAgentForwarding$AgentClient:void reply(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.AgentForwardedChannel:org.apache.sshd.common.util.buffer.Buffer request(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.unix.AgentForwardedChannel:void run()",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:void lambda$doInit$0(int)",
            "org.apache.sshd.common.util.io.IoUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.sshd.common.util.io.LoggingFilterOutputStream:void write(byte[],int,int)",
            "org.apache.sshd.common.util.buffer.BufferUtils:void writeUInt(java.io.OutputStream,long,byte[],int,int)",
            "org.apache.sshd.common.config.keys.KeyEntryResolver:int writeRLEBytes(java.io.OutputStream,byte[],int,int)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:void writeCoordinate(java.io.OutputStream,java.lang.String,java.math.BigInteger,int)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void lambda$messageReceived$1(org.apache.sshd.common.forward.TcpipClientChannel,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.common.forward.SocksProxy$Proxy:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteExtendedData(byte[],int,long)",
            "org.apache.sshd.client.channel.ChannelSession:void pumpInputStream()"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:void doWriteData(byte[],int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.server.command.Command prepareCommand(java.lang.String,org.apache.sshd.server.command.Command)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleData(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.io.IoUtils:long copy(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:byte[] toByteArray(java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.util.io.LoggingFilterOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.UnknownCommand:void run()",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void writeRawOutput(int)",
            "org.apache.sshd.common.util.buffer.BufferUtils:int decodeHex(java.io.OutputStream,char,java.lang.CharSequence,int,int)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression$3:void writeECPoint(java.io.OutputStream,java.lang.String,java.security.spec.ECPoint)",
            "org.apache.sshd.common.channel.SttySupport:int copyStream(java.io.InputStream,java.io.OutputStream)"
        ]
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:void writeInt(java.io.OutputStream,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:void writeInt(java.io.OutputStream,int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:void writeUInt(java.io.OutputStream,long,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.KeyEntryResolver:int writeRLEBytes(java.io.OutputStream,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:java.lang.String encodePrivateKey(java.io.OutputStream,net.i2p.crypto.eddsa.EdDSAPrivateKey)",
            "org.apache.sshd.common.util.security.eddsa.Ed25519PublicKeyDecoder:java.lang.String encodePublicKey(java.io.OutputStream,net.i2p.crypto.eddsa.EdDSAPublicKey)",
            "org.apache.sshd.common.config.keys.KeyEntryResolver:int encodeString(java.io.OutputStream,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyEntryResolver:int encodeBigInt(java.io.OutputStream,java.math.BigInteger)"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves$ECPointCompression$3:void writeECPoint(java.io.OutputStream,java.lang.String,java.security.spec.ECPoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.interfaces.ECPublicKey)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:byte[] ecPointToOctetString(java.lang.String,java.security.spec.ECPoint)"
        ]
    },
    "org.apache.sshd.server.shell.TtyFilterOutputStream:void writeRawOutput(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void write(int)",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void handleCR()",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void handleLF()"
        ]
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:int decodeHex(java.io.OutputStream,char,java.lang.CharSequence,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.BufferUtils:int decodeHex(java.io.OutputStream,char,java.lang.CharSequence)"
        ]
    },
    "org.apache.sshd.common.channel.SttySupport:int copyStream(java.io.InputStream,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.SttySupport:java.lang.String exec(java.lang.String[])"
        ]
    },
    "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair resolveKeyPair(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.util.List loadKeys()"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelOpenFailure(org.apache.sshd.client.future.OpenFuture,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelConnectResult(org.apache.sshd.client.future.OpenFuture,org.apache.sshd.common.io.IoConnectFuture)"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel:void handleWriteDataFailure(byte,byte[],int,int,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:void lambda$doWriteData$3(org.apache.sshd.common.util.buffer.Buffer,long,org.apache.sshd.common.io.IoWriteFuture)"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel$1:void sessionClosed(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Connector$1:void onCompleted(java.lang.Void,java.lang.Object)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onCompleted(java.nio.channels.AsynchronousSocketChannel,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel$1:void exceptionCaught(org.apache.sshd.common.io.IoSession,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void exceptionCaught(java.lang.Throwable)"
        ]
    },
    "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:org.apache.sshd.common.future.CloseFuture doCloseGracefully()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)"
        ]
    },
    "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:void doCloseImmediately()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractCloseable:void lambda$close$0(boolean,org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void doCloseImmediately()",
            "org.apache.sshd.common.channel.AbstractChannel:void doCloseImmediately()"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Session:org.apache.sshd.common.future.CloseFuture doCloseGracefully()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Session:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.Closeable:void close(org.apache.sshd.common.Closeable)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:void handleClosePacketWriteFailure(org.apache.sshd.common.channel.Channel,boolean,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:void lambda$close$0(org.apache.sshd.common.channel.Channel,boolean,org.apache.sshd.common.io.IoWriteFuture)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void handleClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelClose(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelAsyncOutputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.client.channel.ChannelSession$1:org.apache.sshd.common.future.CloseFuture doCloseGracefully()"
        ]
    },
    "org.apache.sshd.common.channel.ChannelAsyncInputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)"
        ]
    },
    "org.apache.sshd.common.Closeable:void close(org.apache.sshd.common.Closeable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.Closeable:void close()"
        ]
    },
    "org.apache.sshd.server.shell.ProcessShell:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void destroy()",
            "org.apache.sshd.server.shell.InvertedShellWrapper:void pumpStreams()"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession$CommandCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Session:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.Closeable:void close(org.apache.sshd.common.Closeable)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:void doCloseImmediately()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractCloseable:void lambda$close$0(boolean,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:void handleEof()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelEof(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void preClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)"
        ]
    },
    "org.apache.sshd.client.channel.AbstractClientChannel:void lambda$getInnerCloseable$1()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.AbstractClientChannel$lambda_getInnerCloseable_1__110:void run()"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:void writeHostConfigEntries(java.io.File,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void init(org.apache.sshd.client.session.ClientSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientUserAuthService:void tryNext(int)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientUserAuthService:org.apache.sshd.client.future.AuthFuture auth(java.lang.String)",
            "org.apache.sshd.client.session.ClientUserAuthService:void processUserAuth(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.ClientUserAuthService:void tryNext(int)"
        ]
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptUnknownHostKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptKnownHostEntries(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,org.apache.sshd.client.config.hosts.KnownHostEntry)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptIncompleteHostKeys(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.lang.Throwable)"
        ]
    },
    "org.apache.sshd.common.forward.SocksProxy:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void handleReadCycleCompletion(java.nio.ByteBuffer,org.apache.sshd.common.util.Readable,org.apache.sshd.common.io.nio2.Nio2CompletionHandler,java.lang.Integer,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelData(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelExtendedData(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelAsyncOutputStream$1:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void handleMessage(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void decode()"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession$CommandCloseable:void addCloseFutureListener(org.apache.sshd.common.future.SshFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.forward.TcpipServerChannel:void doWriteData(byte[],int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleData(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.session.AbstractServerSession:boolean readIdentification(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void messageReceived(org.apache.sshd.common.util.Readable)"
        ]
    },
    "org.apache.sshd.agent.local.ChannelAgentForwarding:org.apache.sshd.common.future.CloseFuture close(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Session:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:void handleClosePacketWriteFailure(org.apache.sshd.common.channel.Channel,boolean,java.lang.Throwable)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleClose()",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.Closeable:void close(org.apache.sshd.common.Closeable)"
        ]
    },
    "org.apache.sshd.agent.unix.ChannelAgentForwarding:org.apache.sshd.common.future.CloseFuture close(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:void lambda$doInit$0(int)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Session:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:void handleClosePacketWriteFailure(org.apache.sshd.common.channel.Channel,boolean,java.lang.Throwable)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleClose()",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.Closeable:void close(org.apache.sshd.common.Closeable)"
        ]
    },
    "org.apache.sshd.common.util.closeable.AbstractCloseable:void addCloseFutureListener(org.apache.sshd.common.future.SshFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.AsyncDataReceiver:void close()",
            "org.apache.sshd.server.x11.ChannelForwardedX11:void handleEof()",
            "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void close()",
            "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void exceptionCaught(org.apache.sshd.common.io.IoSession,java.lang.Throwable)",
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void lambda$null$1(boolean,boolean,boolean,java.util.concurrent.ExecutorService)",
            "org.apache.sshd.server.session.AbstractServerSession:void lambda$readIdentification$0(org.apache.sshd.common.io.IoWriteFuture)",
            "org.apache.sshd.server.SshServer:void stop(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.io.nio2.Nio2Session:void exceptionCaught(java.lang.Throwable)",
            "org.apache.sshd.common.io.nio2.Nio2Session:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.io.nio2.Nio2Session:void handleReadCycleCompletion(java.nio.ByteBuffer,org.apache.sshd.common.util.Readable,org.apache.sshd.common.io.nio2.Nio2CompletionHandler,java.lang.Integer,java.lang.Object)",
            "org.apache.sshd.common.io.nio2.Nio2Service:void dispose()",
            "org.apache.sshd.common.channel.AbstractChannel:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void exceptionCaught(org.apache.sshd.common.io.IoSession,java.lang.Throwable)",
            "org.apache.sshd.common.forward.SocksProxy:void exceptionCaught(org.apache.sshd.common.io.IoSession,java.lang.Throwable)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleDisconnect(int,java.lang.String,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void exceptionCaught(java.lang.Throwable)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void lambda$disconnect$5(int,java.lang.String,org.apache.sshd.common.io.IoWriteFuture)",
            "org.apache.sshd.common.session.helpers.AbstractSessionIoHandler:void sessionClosed(org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.Closeable:void close(org.apache.sshd.common.Closeable)",
            "org.apache.sshd.client.SshClient$1:void operationComplete(org.apache.sshd.common.io.IoConnectFuture)",
            "org.apache.sshd.client.SshClient:void stop()"
        ]
    },
    "org.apache.sshd.common.util.closeable.SimpleCloseable:void addCloseFutureListener(org.apache.sshd.common.future.SshFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:void addCloseFutureListener(org.apache.sshd.common.future.SshFutureListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void sessionCreated(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Connector$1:void onCompleted(java.lang.Void,java.lang.Object)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onCompleted(java.nio.channels.AsynchronousSocketChannel,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void disconnect(int,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void disconnect(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:void handleServiceAccept(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:boolean handleServiceRequest(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void exceptionCaught(java.lang.Throwable)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void checkForTimeouts()"
        ]
    },
    "org.apache.sshd.client.channel.ChannelSubsystem:void onClose(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.session.ClientConnectionService:org.apache.sshd.common.io.IoWriteFuture sendHeartBeat()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientConnectionService$sendHeartBeat__218:void run()"
        ]
    },
    "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture doConnect(java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.net.SocketAddress)",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(org.apache.sshd.client.config.hosts.HostConfigEntry)"
        ]
    },
    "org.apache.sshd.common.future.DefaultSshFuture:void setValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.io.nio2.Nio2Connector$DefaultIoConnectFuture:void setSession(org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.io.nio2.Nio2Connector$DefaultIoConnectFuture:void setException(java.lang.Throwable)",
            "org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture:void setWritten()",
            "org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture:void setException(java.lang.Throwable)",
            "org.apache.sshd.common.channel.BufferedIoOutputStream$1:void operationComplete(org.apache.sshd.common.io.IoWriteFuture)",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream$1:void handleOperationCompleted()",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream$1:void handleOperationFailed(java.lang.Throwable)",
            "org.apache.sshd.common.channel.AbstractChannel$1:void <init>(org.apache.sshd.common.channel.AbstractChannel,java.lang.Object,java.lang.Object)",
            "org.apache.sshd.common.channel.AbstractChannel$2:void <init>(org.apache.sshd.common.channel.AbstractChannel,java.lang.Object,java.lang.Object)",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void doWriteIfPossible(boolean)",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:org.apache.sshd.common.io.IoReadFuture read(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:void preClose()",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:void doRead(boolean)",
            "org.apache.sshd.common.future.DefaultCloseFuture:void setClosed()",
            "org.apache.sshd.common.future.DefaultSshFuture:void cancel()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void preClose()",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.future.KeyExchangeFuture requestNewKeysExchange()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void lambda$writePacket$3(long,java.util.concurrent.TimeUnit,org.apache.sshd.common.future.DefaultSshFuture)",
            "org.apache.sshd.common.session.helpers.PendingWriteFuture:void setWritten()",
            "org.apache.sshd.common.session.helpers.PendingWriteFuture:void setException(java.lang.Throwable)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService$1:void <init>(org.apache.sshd.common.session.helpers.AbstractConnectionService,java.lang.Object,java.lang.Object)",
            "org.apache.sshd.client.future.DefaultAuthFuture:void setAuthed(boolean)",
            "org.apache.sshd.client.future.DefaultAuthFuture:void setException(java.lang.Throwable)",
            "org.apache.sshd.client.future.DefaultOpenFuture:void setOpened()",
            "org.apache.sshd.client.future.DefaultOpenFuture:void setException(java.lang.Throwable)",
            "org.apache.sshd.client.future.DefaultConnectFuture:void setSession(org.apache.sshd.client.session.ClientSession)",
            "org.apache.sshd.client.future.DefaultConnectFuture:void setException(java.lang.Throwable)",
            "org.apache.sshd.client.session.ClientConnectionService$1:void <init>(org.apache.sshd.client.session.ClientConnectionService,java.lang.Object,java.lang.Object,java.lang.Throwable)",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.future.KeyExchangeFuture switchToNoneCipher()"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleRequest(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void handleUnknownChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.command.AbstractCommandSupport:void onExit(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.ExitCallback:void onExit(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.io.nio2.Nio2Session$1:void onCompleted(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2CompletionHandler:java.lang.Object lambda$completed$0(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.sshd.agent.unix.AgentServer:void lambda$start$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.unix.AgentServer$lambda_start_0__184:void run()"
        ]
    },
    "org.apache.sshd.agent.common.AgentDelegate:java.util.List getIdentities()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AgentDelegate:java.util.List getIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:void <init>(org.apache.sshd.client.session.ClientSession,org.apache.sshd.agent.SshAgent)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:void <init>(org.apache.sshd.client.session.ClientSession,org.apache.sshd.common.signature.SignatureFactoriesManager)"
        ]
    },
    "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AbstractAgentClient:void messageReceived(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:void <init>(org.apache.sshd.client.session.ClientSession,org.apache.sshd.agent.SshAgent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:void <init>(org.apache.sshd.client.session.ClientSession,org.apache.sshd.common.signature.SignatureFactoriesManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void init(org.apache.sshd.client.session.ClientSession,java.lang.String)"
        ]
    },
    "org.apache.sshd.agent.common.AgentDelegate:byte[] sign(java.security.PublicKey,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AgentDelegate:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.KeyAgentIdentity:byte[] sign(byte[])"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.KeyAgentIdentity:byte[] sign(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.common.AgentDelegate:void addIdentity(java.security.KeyPair,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AgentDelegate:void addIdentity(java.security.KeyPair,java.lang.String)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.common.AgentDelegate:void removeIdentity(java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AgentDelegate:void removeIdentity(java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.common.AgentDelegate:void removeAllIdentities()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AgentDelegate:void removeAllIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.server.command.Command prepareCommand(java.lang.String,org.apache.sshd.server.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result prepareChannelCommand(java.lang.String,org.apache.sshd.server.command.Command)"
        ]
    },
    "org.apache.sshd.common.util.io.IoUtils:byte[] toByteArray(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String loadWelcomeBanner(org.apache.sshd.server.session.ServerSession,java.net.URL,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:java.lang.String encodePrivateKey(java.io.OutputStream,net.i2p.crypto.eddsa.EdDSAPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:java.lang.String encodePrivateKey(java.io.OutputStream,java.security.PrivateKey)"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.Ed25519PublicKeyDecoder:java.lang.String encodePublicKey(java.io.OutputStream,net.i2p.crypto.eddsa.EdDSAPublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.Ed25519PublicKeyDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyEntryResolver:int encodeString(java.io.OutputStream,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyEntryResolver:int encodeString(java.io.OutputStream,java.lang.String)",
            "org.apache.sshd.common.config.keys.KeyEntryResolver:int encodeString(java.io.OutputStream,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyEntryResolver:int encodeBigInt(java.io.OutputStream,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.RSAPublicKeyDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.interfaces.RSAPublicKey)",
            "org.apache.sshd.common.config.keys.impl.DSSPublicKeyEntryDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.interfaces.DSAPublicKey)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:java.lang.String encodePrivateKey(java.io.OutputStream,java.security.interfaces.DSAPrivateKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.interfaces.ECPublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:byte[] ecPointToOctetString(java.lang.String,java.security.spec.ECPoint)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.shell.TtyFilterOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.UnknownCommand:void run()",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void writeRawOutput(int)",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void write(byte[],int,int)",
            "org.apache.sshd.common.util.buffer.BufferUtils:int decodeHex(java.io.OutputStream,char,java.lang.CharSequence,int,int)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression$3:void writeECPoint(java.io.OutputStream,java.lang.String,java.security.spec.ECPoint)",
            "org.apache.sshd.common.channel.SttySupport:int copyStream(java.io.InputStream,java.io.OutputStream)"
        ]
    },
    "org.apache.sshd.server.shell.TtyFilterOutputStream:void handleCR()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void write(int)"
        ]
    },
    "org.apache.sshd.server.shell.TtyFilterOutputStream:void handleLF()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void write(int)"
        ]
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:int decodeHex(java.io.OutputStream,char,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.SttySupport:java.lang.String exec(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.SttySupport:java.lang.String exec(java.lang.String)"
        ]
    },
    "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.util.List loadKeys()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.lang.Iterable loadKeys()"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelConnectResult(org.apache.sshd.client.future.OpenFuture,org.apache.sshd.common.io.IoConnectFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:void lambda$doInit$0(org.apache.sshd.client.future.OpenFuture,org.apache.sshd.common.io.IoConnectFuture)"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel:void lambda$doWriteData$3(org.apache.sshd.common.util.buffer.Buffer,long,org.apache.sshd.common.io.IoWriteFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel$lambda_doWriteData_3__168:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Session:void doCloseImmediately()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractCloseable:void lambda$close$0(boolean,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Connector$1:void onCompleted(java.lang.Void,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Connector$1:void onCompleted(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onCompleted(java.nio.channels.AsynchronousSocketChannel,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onCompleted(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Session:void exceptionCaught(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.io.nio2.Nio2Session:void handleReadCycleFailure(java.nio.ByteBuffer,org.apache.sshd.common.util.Readable,java.lang.Throwable,java.lang.Object)",
            "org.apache.sshd.common.io.nio2.Nio2Session:void handleWriteCycleFailure(org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture,java.nio.channels.AsynchronousSocketChannel,java.nio.ByteBuffer,int,java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.common.util.closeable.AbstractCloseable:void lambda$close$0(boolean,org.apache.sshd.common.future.CloseFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable$lambda_close_0__104:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Acceptor:void doCloseImmediately()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractCloseable:void lambda$close$0(boolean,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void doCloseImmediately()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:void doCloseImmediately()",
            "org.apache.sshd.agent.unix.AgentForwardedChannel:void doCloseImmediately()",
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractCloseable:void lambda$close$0(boolean,org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenFailure(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.ChannelSession:void doCloseImmediately()"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:void lambda$close$0(org.apache.sshd.common.channel.Channel,boolean,org.apache.sshd.common.io.IoWriteFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable$lambda_close_0__96:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelClose(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelSession$1:org.apache.sshd.common.future.CloseFuture doCloseGracefully()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)"
        ]
    },
    "org.apache.sshd.common.Closeable:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.shell.InvertedShellWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:void doCloseImmediately()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelEof(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.AbstractClientChannel$lambda_getInnerCloseable_1__110:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.client.session.ClientUserAuthService:void tryNext(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientUserAuthService:void processUserAuth(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.session.ClientUserAuthService:org.apache.sshd.client.future.AuthFuture auth(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientSessionImpl:org.apache.sshd.client.future.AuthFuture auth()"
        ]
    },
    "org.apache.sshd.client.session.ClientUserAuthService:void processUserAuth(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptKnownHostEntries(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean verifyServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,org.apache.sshd.client.config.hosts.KnownHostEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptKnownHostEntries(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.util.Collection)"
        ]
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptIncompleteHostKeys(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean verifyServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void decode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void messageReceived(org.apache.sshd.common.util.Readable)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void messageReceived(org.apache.sshd.common.util.Readable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSessionIoHandler:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)"
        ]
    },
    "org.apache.sshd.server.channel.AsyncDataReceiver:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:java.io.IOException closeQuietly(java.io.Closeable[])",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void releaseKeys()"
        ]
    },
    "org.apache.sshd.server.x11.ChannelForwardedX11:void handleEof()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelEof(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.x11.DefaultX11ForwardSupport:java.lang.String createDisplay(boolean,java.lang.String,java.lang.String,int)",
            "org.apache.sshd.common.util.io.IoUtils:java.io.IOException closeQuietly(java.io.Closeable[])",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void releaseKeys()",
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:void close()"
        ]
    },
    "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void exceptionCaught(org.apache.sshd.common.io.IoSession,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void exceptionCaught(java.lang.Throwable)"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel:void lambda$null$1(boolean,boolean,boolean,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel$lambda_null_1__169:void run()"
        ]
    },
    "org.apache.sshd.server.session.AbstractServerSession:void lambda$readIdentification$0(org.apache.sshd.common.io.IoWriteFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession$lambda_readIdentification_0__148:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.server.SshServer:void stop(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.SshServer:void stop()"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Acceptor:org.apache.sshd.common.future.CloseFuture close(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Session:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.io.nio2.Nio2Service:void dispose()",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.Closeable:void close(org.apache.sshd.common.Closeable)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Service:void dispose()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.AbstractChannel:org.apache.sshd.common.future.CloseFuture close(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:void closeShell(int)",
            "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void sessionClosed(org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.agent.local.AgentForwardedChannel$1:void close()",
            "org.apache.sshd.agent.local.ChannelAgentForwarding:void closeImmediately0()",
            "org.apache.sshd.agent.local.ChannelAgentForwarding:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.agent.unix.AgentForwardedChannel:void run()",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:void closeImmediately0()",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Session:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:void handleClosePacketWriteFailure(org.apache.sshd.common.channel.Channel,boolean,java.lang.Throwable)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleClose()",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.common.forward.SocksProxy$Socks4:void onChannelOpened(org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void sessionClosed(org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void lambda$sessionCreated$0(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.forward.TcpipClientChannel,org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.common.forward.SocksProxy$Proxy:void close()",
            "org.apache.sshd.common.forward.SocksProxy$Socks5:void onChannelOpened(org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.common.Closeable:void close(org.apache.sshd.common.Closeable)",
            "org.apache.sshd.client.channel.ChannelShell:void handleFailure()",
            "org.apache.sshd.client.channel.ChannelExec:void handleFailure()",
            "org.apache.sshd.client.channel.ChannelSubsystem:void handleFailure()",
            "org.apache.sshd.client.channel.ChannelSession:void pumpInputStream()"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.client.session.AbstractClientSession:void stopDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void exceptionCaught(org.apache.sshd.common.io.IoSession,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void exceptionCaught(java.lang.Throwable)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void lambda$messageReceived$1(org.apache.sshd.common.forward.TcpipClientChannel,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.OpenFuture)"
        ]
    },
    "org.apache.sshd.common.forward.SocksProxy:void exceptionCaught(org.apache.sshd.common.io.IoSession,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void exceptionCaught(java.lang.Throwable)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void handleDisconnect(int,java.lang.String,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleDisconnect(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.ClientSessionImpl:void handleDisconnect(int,java.lang.String,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void exceptionCaught(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleWriteDataSuccess(byte,byte[],int,int)",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:void doRead(boolean)",
            "org.apache.sshd.common.session.helpers.AbstractSessionIoHandler:void exceptionCaught(org.apache.sshd.common.io.IoSession,java.lang.Throwable)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void lambda$channelOpen$0(org.apache.sshd.common.channel.Channel,boolean,int,int,org.apache.sshd.common.session.Session,org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.client.channel.ChannelSession$1:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.client.session.ClientSessionImpl:void exceptionCaught(java.lang.Throwable)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void lambda$disconnect$5(int,java.lang.String,org.apache.sshd.common.io.IoWriteFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession$lambda_disconnect_5__138:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSessionIoHandler:void sessionClosed(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Connector$1:void onCompleted(java.lang.Void,java.lang.Object)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onCompleted(java.nio.channels.AsynchronousSocketChannel,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.client.SshClient$1:void operationComplete(org.apache.sshd.common.io.IoConnectFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient$1:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.client.SshClient:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient$2:void close()"
        ]
    },
    "org.apache.sshd.server.session.AbstractServerSession:void handleServiceAccept(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleServiceAccept(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void asyncAuth(int,org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:boolean handleServiceRequest(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:boolean handleServiceRequest(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleServiceRequest(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void checkForTimeouts()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.SessionTimeoutListener:void run()"
        ]
    },
    "org.apache.sshd.client.session.ClientConnectionService$sendHeartBeat__218:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(org.apache.sshd.client.config.hosts.HostConfigEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:org.apache.sshd.client.future.ConnectFuture connect(org.apache.sshd.client.config.hosts.HostConfigEntry)",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.lang.String,int)",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Connector$DefaultIoConnectFuture:void setSession(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Connector$1:void onCompleted(java.lang.Void,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Connector$DefaultIoConnectFuture:void setException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Connector:org.apache.sshd.common.io.IoConnectFuture connect(java.net.SocketAddress)",
            "org.apache.sshd.common.io.nio2.Nio2Connector$1:void onCompleted(java.lang.Void,java.lang.Object)",
            "org.apache.sshd.common.io.nio2.Nio2Connector$1:void onFailed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture:void setWritten()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void startWriting()",
            "org.apache.sshd.common.io.nio2.Nio2Session:void handleCompletedWriteCycle(org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture,java.nio.channels.AsynchronousSocketChannel,java.nio.ByteBuffer,int,org.apache.sshd.common.io.nio2.Nio2CompletionHandler,java.lang.Integer,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture:void setException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.io.nio2.Nio2Session:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Session:void handleWriteCycleFailure(org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture,java.nio.channels.AsynchronousSocketChannel,java.nio.ByteBuffer,int,java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelAsyncOutputStream$1:void handleOperationFailed(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream$1:void operationComplete(org.apache.sshd.common.io.IoWriteFuture)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel$1:void <init>(org.apache.sshd.common.channel.AbstractChannel,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:org.apache.sshd.common.io.IoWriteFuture sendResponse(org.apache.sshd.common.util.buffer.Buffer,java.lang.String,org.apache.sshd.common.channel.RequestHandler$Result,boolean)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel$2:void <init>(org.apache.sshd.common.channel.AbstractChannel,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelAsyncInputStream:org.apache.sshd.common.io.IoReadFuture read(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.ChannelAsyncInputStream:void preClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelAsyncInputStream:void doRead(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:void write(org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:org.apache.sshd.common.io.IoReadFuture read(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.future.DefaultCloseFuture:void setClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession$CommandCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.server.channel.ChannelSession$CommandCloseable$1:void run()",
            "org.apache.sshd.server.channel.ChannelSession:void closeShell(int)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void lambda$doClose$0(java.util.concurrent.atomic.AtomicInteger,boolean,boolean,org.apache.sshd.common.future.SshFuture)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void lambda$doClose$0(java.util.concurrent.atomic.AtomicInteger,boolean,boolean,org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.AbstractCloseable:void doCloseImmediately()",
            "org.apache.sshd.common.util.closeable.SimpleCloseable:void doClose(boolean)",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:void handleClosePacketWritten(org.apache.sshd.common.channel.Channel,boolean)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleClose()",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenFailure(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void lambda$getInnerCloseable$1()"
        ]
    },
    "org.apache.sshd.common.future.DefaultSshFuture:void cancel()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient$1:void operationComplete(org.apache.sshd.common.io.IoConnectFuture)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void preClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.client.session.ClientSessionImpl:void preClose()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.future.KeyExchangeFuture requestNewKeysExchange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.future.KeyExchangeFuture reExchangeKeys()",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.future.KeyExchangeFuture checkRekey()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void lambda$writePacket$3(long,java.util.concurrent.TimeUnit,org.apache.sshd.common.future.DefaultSshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession$lambda_writePacket_3__136:void run()"
        ]
    },
    "org.apache.sshd.common.session.helpers.PendingWriteFuture:void setWritten()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.PendingWriteFuture:void operationComplete(org.apache.sshd.common.io.IoWriteFuture)"
        ]
    },
    "org.apache.sshd.common.session.helpers.PendingWriteFuture:void setException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.PendingWriteFuture:void operationComplete(org.apache.sshd.common.io.IoWriteFuture)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService$1:void <init>(org.apache.sshd.common.session.helpers.AbstractConnectionService,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture sendGlobalResponse(org.apache.sshd.common.util.buffer.Buffer,java.lang.String,org.apache.sshd.common.channel.RequestHandler$Result,boolean)"
        ]
    },
    "org.apache.sshd.client.future.DefaultAuthFuture:void setAuthed(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientUserAuthService:void processUserAuth(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.ClientSessionImpl:void <init>(org.apache.sshd.client.ClientFactoryManager,org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.client.future.DefaultAuthFuture:void setException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientUserAuthService:org.apache.sshd.client.future.AuthFuture auth(java.lang.String)",
            "org.apache.sshd.client.session.ClientUserAuthService:void tryNext(int)",
            "org.apache.sshd.client.session.ClientUserAuthService:void preClose()",
            "org.apache.sshd.client.session.ClientSessionImpl:void signalAuthFailure(org.apache.sshd.client.future.AuthFuture,java.lang.Throwable)"
        ]
    },
    "org.apache.sshd.client.future.DefaultOpenFuture:void setOpened()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.AbstractServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelOpenSuccess(org.apache.sshd.client.future.OpenFuture,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.agent.local.ChannelAgentForwarding:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.future.DefaultOpenFuture:void setException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.AbstractServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelConnectResult(org.apache.sshd.client.future.OpenFuture,org.apache.sshd.common.io.IoConnectFuture)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelOpenSuccess(org.apache.sshd.client.future.OpenFuture,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelOpenFailure(org.apache.sshd.client.future.OpenFuture,java.lang.Throwable)",
            "org.apache.sshd.agent.local.ChannelAgentForwarding:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenFailure(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.future.DefaultConnectFuture:void setSession(org.apache.sshd.client.session.ClientSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)"
        ]
    },
    "org.apache.sshd.client.future.DefaultConnectFuture:void setException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient$1:void operationComplete(org.apache.sshd.common.io.IoConnectFuture)"
        ]
    },
    "org.apache.sshd.client.session.ClientConnectionService$1:void <init>(org.apache.sshd.client.session.ClientConnectionService,java.lang.Object,java.lang.Object,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientConnectionService:org.apache.sshd.common.io.IoWriteFuture sendHeartBeat()"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.future.KeyExchangeFuture switchToNoneCipher()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.AbstractChannel:void handleRequest(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelRequest(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2CompletionHandler:java.lang.Object lambda$completed$0(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2CompletionHandler$lambda_completed_0__199:java.lang.Object run()"
        ]
    },
    "org.apache.sshd.agent.unix.AgentServer$lambda_start_0__184:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result prepareChannelCommand(java.lang.String,org.apache.sshd.server.command.Command)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleExec(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleSubsystem(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String loadWelcomeBanner(org.apache.sshd.server.session.ServerSession,java.net.URL,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String resolveWelcomeBanner(org.apache.sshd.server.session.ServerSession)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,byte[])"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:java.lang.String encodePrivateKey(java.io.OutputStream,java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.security.eddsa.Ed25519PublicKeyDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.PublicKeyEntry:java.lang.Appendable appendPublicKeyEntry(java.lang.Appendable,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyEntryResolver:int encodeString(java.io.OutputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.Ed25519PublicKeyDecoder:java.lang.String encodePublicKey(java.io.OutputStream,net.i2p.crypto.eddsa.EdDSAPublicKey)",
            "org.apache.sshd.common.config.keys.impl.RSAPublicKeyDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.interfaces.RSAPublicKey)",
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.interfaces.ECPublicKey)",
            "org.apache.sshd.common.config.keys.impl.DSSPublicKeyEntryDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.interfaces.DSAPublicKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyEntryResolver:int encodeString(java.io.OutputStream,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.impl.RSAPublicKeyDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.interfaces.RSAPublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.RSAPublicKeyDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.DSSPublicKeyEntryDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.interfaces.DSAPublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.DSSPublicKeyEntryDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:java.lang.String encodePrivateKey(java.io.OutputStream,java.security.interfaces.DSAPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:java.lang.String encodePrivateKey(java.io.OutputStream,java.security.PrivateKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.PublicKeyEntry:java.lang.Appendable appendPublicKeyEntry(java.lang.Appendable,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.channel.SttySupport:java.lang.String exec(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.SttySupport:java.lang.String stty(java.lang.String)"
        ]
    },
    "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.lang.Iterable loadKeys()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.keyprovider.KeyIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.keyprovider.KeyIdentityProvider:java.lang.Iterable lambda$static$0(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.common.keyprovider.KeyIdentityProvider$loadKeys__77:java.lang.Object get()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator$loadKeys__123:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel:void lambda$doInit$0(org.apache.sshd.client.future.OpenFuture,org.apache.sshd.common.io.IoConnectFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel$lambda_doInit_0__166:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel$lambda_doWriteData_3__168:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Connector$1:void onCompleted(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2CompletionHandler:java.lang.Object lambda$completed$0(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onCompleted(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2CompletionHandler:java.lang.Object lambda$completed$0(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Session:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.x11.ChannelForwardedX11:void doWriteData(byte[],int,long)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.server.session.AbstractServerSession:boolean readIdentification(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.ChannelOutputStream:void flush()",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void doWriteIfPossible(boolean)",
            "org.apache.sshd.common.forward.TcpipClientChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.common.forward.SocksProxy$Socks4:void onChannelOpened(org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.common.forward.SocksProxy$Socks5:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.forward.SocksProxy$Socks5:void onChannelOpened(org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendIdentification(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Session:void handleReadCycleFailure(java.nio.ByteBuffer,org.apache.sshd.common.util.Readable,java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session$1:void onFailed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Session:void handleWriteCycleFailure(org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture,java.nio.channels.AsynchronousSocketChannel,java.nio.ByteBuffer,int,java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session$2:void onFailed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.closeable.SequentialCloseable:void doClose(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.SimpleCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)"
        ]
    },
    "org.apache.sshd.common.util.closeable.AbstractCloseable$lambda_close_0__104:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.agent.unix.AgentForwardedChannel:void doCloseImmediately()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractCloseable:void lambda$close$0(boolean,org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenFailure(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelOpenConfirmation(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenFailure(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelOpenFailure(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelSession:void doCloseImmediately()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractCloseable:void lambda$close$0(boolean,org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenFailure(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable$lambda_close_0__96:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.client.session.ClientSessionImpl:org.apache.sshd.client.future.AuthFuture auth()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession authSession(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.client.session.ClientUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean verifyServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptUnknownHostKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.keyverifier.DelegatingServerKeyVerifier:boolean verifyServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.session.AbstractClientSession:void checkKeys()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSessionIoHandler:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void handleReadCycleCompletion(java.nio.ByteBuffer,org.apache.sshd.common.util.Readable,org.apache.sshd.common.io.nio2.Nio2CompletionHandler,java.lang.Integer,java.lang.Object)"
        ]
    },
    "org.apache.sshd.server.x11.DefaultX11ForwardSupport:java.lang.String createDisplay(boolean,java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleX11Forwarding(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel$lambda_null_1__169:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.server.session.AbstractServerSession$lambda_readIdentification_0__148:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.server.SshServer:void stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void sessionClosed(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Connector$1:void onCompleted(java.lang.Void,java.lang.Object)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onCompleted(java.nio.channels.AsynchronousSocketChannel,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.agent.local.AgentForwardedChannel$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.ChannelAgentForwarding:void handleEof()",
            "org.apache.sshd.agent.local.ChannelAgentForwarding:void closeImmediately0()",
            "org.apache.sshd.agent.unix.AgentServer:void close()",
            "org.apache.sshd.common.util.io.IoUtils:java.io.IOException closeQuietly(java.io.Closeable[])",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:void closeAgent()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void releaseKeys()",
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:void close()"
        ]
    },
    "org.apache.sshd.agent.local.ChannelAgentForwarding:void closeImmediately0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.ChannelAgentForwarding:void lambda$close$0(org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.agent.unix.ChannelAgentForwarding:void closeImmediately0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:void lambda$close$1(org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.common.forward.SocksProxy$Socks4:void onChannelOpened(org.apache.sshd.client.future.OpenFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.SocksProxy$Socks4$onChannelOpened__173:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void sessionClosed(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Connector$1:void onCompleted(java.lang.Void,java.lang.Object)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onCompleted(java.nio.channels.AsynchronousSocketChannel,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void lambda$sessionCreated$0(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.forward.TcpipClientChannel,org.apache.sshd.client.future.OpenFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler$lambda_sessionCreated_0__170:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.common.forward.SocksProxy$Proxy:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:java.io.IOException closeQuietly(java.io.Closeable[])",
            "org.apache.sshd.common.forward.SocksProxy:void sessionClosed(org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void releaseKeys()"
        ]
    },
    "org.apache.sshd.common.forward.SocksProxy$Socks5:void onChannelOpened(org.apache.sshd.client.future.OpenFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.SocksProxy$Socks5$onChannelOpened__172:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelShell:void handleFailure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelFailure(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelExec:void handleFailure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelFailure(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelSubsystem:void handleFailure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelFailure(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.util.net.SshdSocketAddress startDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:void stopDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.forward.DynamicPortForwardingTracker:void close()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void handleDisconnect(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.session.ClientSessionImpl:void handleDisconnect(int,java.lang.String,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleDisconnect(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel:void handleWriteDataSuccess(byte,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:void lambda$doWriteData$3(org.apache.sshd.common.util.buffer.Buffer,long,org.apache.sshd.common.io.IoWriteFuture)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSessionIoHandler:void exceptionCaught(org.apache.sshd.common.io.IoSession,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void exceptionCaught(java.lang.Throwable)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void lambda$channelOpen$0(org.apache.sshd.common.channel.Channel,boolean,int,int,org.apache.sshd.common.session.Session,org.apache.sshd.client.future.OpenFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService$lambda_channelOpen_0__153:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.client.session.ClientSessionImpl:void exceptionCaught(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleWriteDataSuccess(byte,byte[],int,int)",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:void doRead(boolean)",
            "org.apache.sshd.common.session.helpers.AbstractSessionIoHandler:void exceptionCaught(org.apache.sshd.common.io.IoSession,java.lang.Throwable)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void lambda$channelOpen$0(org.apache.sshd.common.channel.Channel,boolean,int,int,org.apache.sshd.common.session.Session,org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.client.channel.ChannelSession$1:org.apache.sshd.common.future.CloseFuture doCloseGracefully()",
            "org.apache.sshd.client.session.ClientConnectionService:org.apache.sshd.common.io.IoWriteFuture sendHeartBeat()",
            "org.apache.sshd.client.session.ClientConnectionService:void futureDone(org.apache.sshd.common.io.IoWriteFuture)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession$lambda_disconnect_5__138:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.client.SshClient$1:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.client.SshClient$2:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:java.io.IOException closeQuietly(java.io.Closeable[])",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void releaseKeys()",
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:void close()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void handleServiceAccept(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.session.ServerUserAuthService:void asyncAuth(int,org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:void lambda$process$1(int,org.apache.sshd.common.util.buffer.Buffer,java.lang.Boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void lambda$process$0(int,org.apache.sshd.common.util.buffer.Buffer,java.lang.Boolean)"
        ]
    },
    "org.apache.sshd.server.session.AbstractServerSession:boolean handleServiceRequest(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleServiceRequest(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void handleServiceRequest(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.SessionTimeoutListener:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession sessionLogin(java.net.SocketAddress,java.lang.String,java.lang.String)",
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession sessionLogin(java.net.SocketAddress,java.lang.String,java.security.KeyPair)",
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:org.apache.sshd.client.future.ConnectFuture connect(org.apache.sshd.client.config.hosts.HostConfigEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:org.apache.sshd.client.future.ConnectFuture connect(org.apache.sshd.client.config.hosts.HostConfigEntry)"
        ]
    },
    "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.lang.String,int)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Connector:org.apache.sshd.common.io.IoConnectFuture connect(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture doConnect(java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Connector$1:void onFailed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2CompletionHandler:java.lang.Object lambda$failed$1(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Session:void startWriting()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.io.nio2.Nio2Session:void finishWrite(org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Session:void handleCompletedWriteCycle(org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture,java.nio.channels.AsynchronousSocketChannel,java.nio.ByteBuffer,int,org.apache.sshd.common.io.nio2.Nio2CompletionHandler,java.lang.Integer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session$2:void onCompleted(java.lang.Integer,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:org.apache.sshd.common.io.IoWriteFuture sendResponse(org.apache.sshd.common.util.buffer.Buffer,java.lang.String,org.apache.sshd.common.channel.RequestHandler$Result,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.io.IoWriteFuture sendResponse(org.apache.sshd.common.util.buffer.Buffer,java.lang.String,org.apache.sshd.common.channel.RequestHandler$Result,boolean)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleUnknownChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.AbstractServerChannel:void sendExitStatus(int)",
            "org.apache.sshd.server.x11.ChannelForwardedX11:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.common.channel.ChannelOutputStream:void flush()",
            "org.apache.sshd.common.channel.AbstractChannel:void handleExtendedData(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.AbstractChannel:void sendEof()",
            "org.apache.sshd.common.channel.AbstractChannel:void sendWindowAdjust(long)",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void doWriteIfPossible(boolean)",
            "org.apache.sshd.common.forward.TcpipClientChannel:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.client.channel.ChannelDirectTcpip:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void sendWindowChange(int,int,int,int)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.channel.ChannelShell:void doOpen()",
            "org.apache.sshd.client.channel.ChannelExec:void doOpen()",
            "org.apache.sshd.client.channel.AbstractClientChannel:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.client.channel.ChannelSubsystem:void doOpen()"
        ]
    },
    "org.apache.sshd.common.channel.ChannelAsyncInputStream:void write(org.apache.sshd.common.util.Readable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.AsyncDataReceiver:int data(org.apache.sshd.server.channel.ChannelSession,byte[],int,int)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteExtendedData(byte[],int,long)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession$CommandCloseable$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.common.util.closeable.FuturesCloseable:void lambda$doClose$0(java.util.concurrent.atomic.AtomicInteger,boolean,boolean,org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable$lambda_doClose_0__119:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.common.util.closeable.ParallelCloseable:void lambda$doClose$0(java.util.concurrent.atomic.AtomicInteger,boolean,boolean,org.apache.sshd.common.future.CloseFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.ParallelCloseable$lambda_doClose_0__120:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.common.util.closeable.AbstractCloseable:void doCloseImmediately()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.DefaultAgentForwardSupport:void doCloseImmediately()",
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:void access$001(org.apache.sshd.common.util.closeable.AbstractInnerCloseable)",
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractCloseable:void lambda$close$0(boolean,org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.io.nio2.Nio2Session:void doCloseImmediately()",
            "org.apache.sshd.common.io.AbstractIoServiceFactory:void doCloseImmediately()"
        ]
    },
    "org.apache.sshd.common.util.closeable.SimpleCloseable:void doClose(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SimpleCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:void handleClosePacketWritten(org.apache.sshd.common.channel.Channel,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:void lambda$close$0(org.apache.sshd.common.channel.Channel,boolean,org.apache.sshd.common.io.IoWriteFuture)"
        ]
    },
    "org.apache.sshd.client.session.ClientSessionImpl:void preClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.future.KeyExchangeFuture reExchangeKeys()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.future.KeyExchangeFuture checkRekey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession$lambda_writePacket_3__136:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.common.session.helpers.PendingWriteFuture:void operationComplete(org.apache.sshd.common.io.IoWriteFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.PendingWriteFuture:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture sendGlobalResponse(org.apache.sshd.common.util.buffer.Buffer,java.lang.String,org.apache.sshd.common.channel.RequestHandler$Result,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture handleUnknownRequest(org.apache.sshd.common.util.buffer.Buffer,java.lang.String,boolean)"
        ]
    },
    "org.apache.sshd.client.session.ClientSessionImpl:void <init>(org.apache.sshd.client.ClientFactoryManager,org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.SessionFactory:org.apache.sshd.client.session.ClientSessionImpl doCreateSession(org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.client.session.ClientUserAuthService:void preClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)"
        ]
    },
    "org.apache.sshd.client.session.ClientSessionImpl:void signalAuthFailure(org.apache.sshd.client.future.AuthFuture,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientSessionImpl:void exceptionCaught(java.lang.Throwable)",
            "org.apache.sshd.client.session.ClientSessionImpl:void preClose()",
            "org.apache.sshd.client.session.ClientSessionImpl:void handleDisconnect(int,java.lang.String,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.channel.AbstractServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.AbstractServerChannel:org.apache.sshd.client.future.OpenFuture open(int,long,long,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelOpenSuccess(org.apache.sshd.client.future.OpenFuture,org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelConnectResult(org.apache.sshd.client.future.OpenFuture,org.apache.sshd.common.io.IoConnectFuture)"
        ]
    },
    "org.apache.sshd.agent.local.ChannelAgentForwarding:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.AbstractServerChannel:org.apache.sshd.client.future.OpenFuture open(int,long,long,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.unix.ChannelAgentForwarding:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.AbstractServerChannel:org.apache.sshd.client.future.OpenFuture open(int,long,long,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient$1:void operationComplete(org.apache.sshd.common.io.IoConnectFuture)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelRequest(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2CompletionHandler$lambda_completed_0__199:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2CompletionHandler:void completed(java.lang.Object,java.lang.Object)",
            "org.apache.sshd.common.io.nio2.Nio2CompletionHandler:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.AbstractUserAuth:boolean process(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleInternalRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleExec(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleInternalRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleSubsystem(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleInternalRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String resolveWelcomeBanner(org.apache.sshd.server.session.ServerSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:org.apache.sshd.common.io.IoWriteFuture sendWelcomeBanner(org.apache.sshd.server.session.ServerSession)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)"
        ]
    },
    "org.apache.sshd.common.config.keys.PublicKeyEntry:java.lang.Appendable appendPublicKeyEntry(java.lang.Appendable,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.PublicKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.common.config.keys.PublicKeyEntry:java.lang.String toString(java.security.PublicKey)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.lang.String prepareModifiedServerKeyLine(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.config.hosts.KnownHostEntry,java.lang.String,java.security.PublicKey,java.security.PublicKey)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.RSAPublicKeyDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.PublicKeyEntry:java.lang.Appendable appendPublicKeyEntry(java.lang.Appendable,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.DSSPublicKeyEntryDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.PublicKeyEntry:java.lang.Appendable appendPublicKeyEntry(java.lang.Appendable,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:java.lang.String encodePrivateKey(java.io.OutputStream,java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.SttySupport:java.lang.String stty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.SttySupport:java.lang.String getTtyProps()"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.Appendable combine(java.lang.Appendable,char,org.apache.sshd.common.keyprovider.KeyIdentityProvider)"
        ]
    },
    "org.apache.sshd.common.keyprovider.KeyIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.common.keyprovider.KeyIdentityProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.KeyIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.client.session.ClientSession)",
            "org.apache.sshd.common.keyprovider.KeyIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.common.keyprovider.KeyIdentityProvider,org.apache.sshd.common.keyprovider.KeyIdentityProvider)"
        ]
    },
    "org.apache.sshd.common.keyprovider.KeyIdentityProvider:java.lang.Iterable lambda$static$0(org.apache.sshd.common.keyprovider.KeyIdentityProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.KeyIdentityProvider$lambda_static_0__78:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.keyprovider.KeyPairProvider:java.security.KeyPair loadKey(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.keyprovider.KeyPairProvider:java.lang.Iterable getKeyTypes()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.keyprovider.KeyIdentityProvider$loadKeys__77:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.GenericUtils:java.util.Map flipMap(java.util.Map,java.util.function.Supplier,boolean)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.util.stream.Stream lambda$null$9(java.util.function.Supplier)",
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:org.apache.sshd.client.config.keys.ClientIdentityLoader getClientIdentityLoader()",
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:org.apache.sshd.common.config.keys.FilePasswordProvider getFilePasswordProvider()"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator$loadKeys__123:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel$lambda_doInit_0__166:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.server.x11.ChannelForwardedX11:void doWriteData(byte[],int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleData(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.forward.TcpipClientChannel:void doWriteData(byte[],int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleData(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.List sendPendingPackets(java.util.Queue)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendIdentification(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:org.apache.sshd.common.io.IoWriteFuture sendServerIdentification(java.lang.String[])",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.io.IoWriteFuture sendClientIdentification()"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Session$1:void onFailed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2CompletionHandler:java.lang.Object lambda$failed$1(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Session$2:void onFailed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2CompletionHandler:java.lang.Object lambda$failed$1(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelOpenConfirmation(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelOpenFailure(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession authSession(org.apache.sshd.client.session.ClientSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession authSession(org.apache.sshd.client.future.ConnectFuture,java.lang.String)",
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession authSession(org.apache.sshd.client.future.ConnectFuture,java.security.KeyPair)"
        ]
    },
    "org.apache.sshd.client.keyverifier.DelegatingServerKeyVerifier:boolean verifyServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptUnknownHostKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.keyverifier.DelegatingServerKeyVerifier:boolean verifyServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.session.AbstractClientSession:void checkKeys()"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:void checkKeys()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexMessage(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleX11Forwarding(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleInternalRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.local.ChannelAgentForwarding:void handleEof()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelEof(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.unix.AgentServer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:java.io.IOException closeQuietly(java.io.Closeable[])",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void releaseKeys()"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:void closeAgent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:void <init>(org.apache.sshd.client.session.ClientSession,org.apache.sshd.common.signature.SignatureFactoriesManager)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:void close()"
        ]
    },
    "org.apache.sshd.agent.local.ChannelAgentForwarding:void lambda$close$0(org.apache.sshd.common.future.CloseFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.ChannelAgentForwarding$lambda_close_0__180:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.agent.unix.ChannelAgentForwarding:void lambda$close$1(org.apache.sshd.common.future.CloseFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.unix.ChannelAgentForwarding$lambda_close_1__182:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.common.forward.SocksProxy$Socks4$onChannelOpened__173:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler$lambda_sessionCreated_0__170:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.common.forward.SocksProxy:void sessionClosed(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Connector$1:void onCompleted(java.lang.Void,java.lang.Object)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onCompleted(java.nio.channels.AsynchronousSocketChannel,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.common.forward.SocksProxy$Socks5$onChannelOpened__172:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelFailure(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.util.net.SshdSocketAddress startDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientSession:org.apache.sshd.client.session.forward.DynamicPortForwardingTracker createDynamicPortForwardingTracker(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.client.session.forward.DynamicPortForwardingTracker:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:java.io.IOException closeQuietly(java.io.Closeable[])",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void releaseKeys()",
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:void close()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService$lambda_channelOpen_0__153:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.client.session.ClientConnectionService:void futureDone(org.apache.sshd.common.io.IoWriteFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientConnectionService$futureDone__219:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.server.session.ServerUserAuthService:void lambda$process$1(int,org.apache.sshd.common.util.buffer.Buffer,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService$lambda_process_1__149:void accept(java.lang.Object)"
        ]
    },
    "org.apache.sshd.server.session.ServerUserAuthService:void lambda$process$0(int,org.apache.sshd.common.util.buffer.Buffer,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService$lambda_process_0__150:void accept(java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession sessionLogin(java.net.SocketAddress,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.SimpleSessionClient:org.apache.sshd.client.session.ClientSession sessionLogin(java.net.InetAddress,int,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession sessionLogin(java.net.SocketAddress,java.lang.String,java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.SimpleSessionClient:org.apache.sshd.client.session.ClientSession sessionLogin(java.net.InetAddress,int,java.lang.String,java.security.KeyPair)"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.lang.String,int)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2CompletionHandler:java.lang.Object lambda$failed$1(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2CompletionHandler$lambda_failed_1__200:java.lang.Object run()"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Session:void finishWrite(org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void handleCompletedWriteCycle(org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture,java.nio.channels.AsynchronousSocketChannel,java.nio.ByteBuffer,int,org.apache.sshd.common.io.nio2.Nio2CompletionHandler,java.lang.Integer,java.lang.Object)",
            "org.apache.sshd.common.io.nio2.Nio2Session:void handleWriteCycleFailure(org.apache.sshd.common.io.nio2.Nio2DefaultIoWriteFuture,java.nio.channels.AsynchronousSocketChannel,java.nio.ByteBuffer,int,java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Session$2:void onCompleted(java.lang.Integer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session$2:void onCompleted(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.sshd.server.channel.AbstractServerChannel:void sendExitStatus(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:void closeShell(int)"
        ]
    },
    "org.apache.sshd.server.x11.ChannelForwardedX11:org.apache.sshd.client.future.OpenFuture open()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void sessionCreated(org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void sendEof()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:void closeShell(int)",
            "org.apache.sshd.common.channel.ChannelOutputStream:void close()",
            "org.apache.sshd.client.channel.ChannelSession:void pumpInputStream()",
            "org.apache.sshd.client.channel.ChannelSession:void access$000(org.apache.sshd.client.channel.ChannelSession)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void sendWindowAdjust(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.Window:void check(long)"
        ]
    },
    "org.apache.sshd.common.forward.TcpipClientChannel:org.apache.sshd.client.future.OpenFuture open()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.SocksProxy$Socks4:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void sessionCreated(org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.forward.SocksProxy$Socks5:void onMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelDirectTcpip:org.apache.sshd.client.future.OpenFuture open()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.channel.PtyCapableChannelSession:void sendWindowChange(int,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void sendWindowChange(int,int)"
        ]
    },
    "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.ChannelShell:void doOpen()",
            "org.apache.sshd.client.channel.ChannelExec:void doOpen()"
        ]
    },
    "org.apache.sshd.client.channel.ChannelShell:void doOpen()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelExec:void doOpen()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.AbstractClientChannel:org.apache.sshd.client.future.OpenFuture open()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.AgentServerProxy:org.apache.sshd.agent.SshAgent createClient()",
            "org.apache.sshd.agent.unix.AgentServerProxy:void lambda$new$0()",
            "org.apache.sshd.client.session.ClientSession:void executeRemoteCommand(java.lang.String,java.io.OutputStream,java.io.OutputStream,java.nio.charset.Charset)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelSubsystem:void doOpen()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.channel.AsyncDataReceiver:int data(org.apache.sshd.server.channel.ChannelSession,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:void doWriteData(byte[],int,long)"
        ]
    },
    "org.apache.sshd.common.util.closeable.FuturesCloseable$lambda_doClose_0__119:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.common.util.closeable.ParallelCloseable$lambda_doClose_0__120:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.agent.common.DefaultAgentForwardSupport:void doCloseImmediately()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractCloseable:void lambda$close$0(boolean,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:void access$001(org.apache.sshd.common.util.closeable.AbstractInnerCloseable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:void lambda$doCloseImmediately$0(org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.common.io.AbstractIoServiceFactory:void doCloseImmediately()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2ServiceFactory:void doCloseImmediately()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.password.UserAuthPassword:java.lang.Boolean handleServerPasswordChangeRequest(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,org.apache.sshd.server.auth.password.PasswordChangeRequiredException)",
            "org.apache.sshd.server.auth.gss.UserAuthGSS:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:void sendPublicKeyResponse(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.security.PublicKey,byte[],int,int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractive:java.lang.Boolean doInitialAuth(org.apache.sshd.server.session.ServerSession,java.lang.String,org.apache.sshd.server.auth.keyboard.KeyboardInteractiveAuthenticator,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.global.TcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.global.CancelTcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:org.apache.sshd.common.io.IoWriteFuture sendWelcomeBanner(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.common.channel.ChannelOutputStream:void flush()",
            "org.apache.sshd.common.channel.AbstractChannel:org.apache.sshd.common.io.IoWriteFuture sendResponse(org.apache.sshd.common.util.buffer.Buffer,java.lang.String,org.apache.sshd.common.channel.RequestHandler$Result,boolean)",
            "org.apache.sshd.common.channel.AbstractChannel:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void doWriteIfPossible(boolean)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendIgnoreMessage(byte[])",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendDebugMessage(boolean,java.lang.Object,java.lang.String)",
            "org.apache.sshd.common.session.helpers.AbstractSession:boolean handleServiceRequest(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer,long,java.util.concurrent.TimeUnit)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer request(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,long,java.util.concurrent.TimeUnit)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendNewKeys()",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendNotImplemented(long)",
            "org.apache.sshd.common.session.helpers.DefaultUnknownChannelReferenceHandler:org.apache.sshd.common.io.IoWriteFuture sendFailureResponse(org.apache.sshd.common.session.ConnectionService,byte,int)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture sendChannelOpenFailure(org.apache.sshd.common.util.buffer.Buffer,int,int,java.lang.String,java.lang.String)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture sendGlobalResponse(org.apache.sshd.common.util.buffer.Buffer,java.lang.String,org.apache.sshd.common.channel.RequestHandler$Result,boolean)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void lambda$channelOpen$0(org.apache.sshd.common.channel.Channel,boolean,int,int,org.apache.sshd.common.session.Session,org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:org.apache.sshd.common.io.IoWriteFuture sendPassword(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGClient:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.client.kex.DHGEXClient:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.ClientUserAuthService:org.apache.sshd.client.future.AuthFuture auth(java.lang.String)",
            "org.apache.sshd.client.session.ClientConnectionService:org.apache.sshd.common.io.IoWriteFuture sendHeartBeat()",
            "org.apache.sshd.client.session.ClientSessionImpl:void sendInitialServiceRequest()"
        ]
    },
    "org.apache.sshd.common.session.helpers.PendingWriteFuture:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture handleUnknownRequest(org.apache.sshd.common.util.buffer.Buffer,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.session.SessionFactory:org.apache.sshd.client.session.ClientSessionImpl doCreateSession(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.SessionFactory:org.apache.sshd.common.session.helpers.AbstractSession doCreateSession(org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2CompletionHandler:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.io.nio2.Nio2CompletionHandler:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void handleReadCycleCompletion(java.nio.ByteBuffer,org.apache.sshd.common.util.Readable,org.apache.sshd.common.io.nio2.Nio2CompletionHandler,java.lang.Integer,java.lang.Object)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onCompleted(java.nio.channels.AsynchronousSocketChannel,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.client.auth.AbstractUserAuth:boolean process(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientUserAuthService:void processUserAuth(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.ClientUserAuthService:void tryNext(int)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleInternalRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleUnknownChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.session.ServerUserAuthService:org.apache.sshd.common.io.IoWriteFuture sendWelcomeBanner(org.apache.sshd.server.session.ServerSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:boolean handleServiceRequest(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils$1:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceLoader:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.BufferedReader)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)"
        ]
    },
    "org.apache.sshd.common.config.keys.PublicKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)"
        ]
    },
    "org.apache.sshd.common.config.keys.PublicKeyEntry:java.lang.String toString(java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.lang.String prepareModifiedServerKeyLine(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.config.hosts.KnownHostEntry,java.lang.String,java.security.PublicKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void updateModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair,java.security.PublicKey,java.nio.file.Path,java.util.Collection)"
        ]
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry updateKnownHostsFile(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.nio.file.Path,java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.channel.SttySupport:java.lang.String getTtyProps()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.SttySupport:java.util.Map getUnixPtyModes()",
            "org.apache.sshd.common.channel.SttySupport:int getTerminalProperty(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.Appendable combine(java.lang.Appendable,char,org.apache.sshd.common.keyprovider.KeyIdentityProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.String combine(char,org.apache.sshd.common.keyprovider.KeyIdentityProvider)"
        ]
    },
    "org.apache.sshd.common.keyprovider.KeyIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.client.session.ClientSession)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.keyprovider.KeyIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.common.keyprovider.KeyIdentityProvider,org.apache.sshd.common.keyprovider.KeyIdentityProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.keyprovider.KeyIdentityProvider$lambda_static_0__78:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.util.Map flipMap(java.util.Map,java.util.function.Supplier,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.util.stream.Stream lambda$null$9(java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.GenericUtils$lambda_null_9__11:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:org.apache.sshd.client.config.keys.ClientIdentityLoader getClientIdentityLoader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:java.security.KeyPair reloadClientIdentity(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:org.apache.sshd.common.config.keys.FilePasswordProvider getFilePasswordProvider()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:java.security.KeyPair reloadClientIdentity(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:void throwIllegalArgumentException(java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:void throwIllegalStateException(java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue fromString(java.lang.String)",
            "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.server.auth.keyboard.InteractiveChallenge clone()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromEnumName(java.lang.String)",
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.server.session.AbstractServerSession:int getActiveSessionCountForUser(java.lang.String)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.SshServer:void start()",
            "org.apache.sshd.server.SshServer:java.util.List getActiveSessions()",
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,java.util.Collection)",
            "org.apache.sshd.server.StandardEnvironment:void removeSignalListener(org.apache.sshd.server.SignalListener)",
            "org.apache.sshd.server.StandardEnvironment:void signal(org.apache.sshd.server.Signal)",
            "org.apache.sshd.agent.local.AgentImpl:java.util.Map$Entry getKeyPair(java.util.Collection,java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.security.SecurityUtils:java.security.KeyPair loadKeyPairIdentity(java.lang.String,java.io.InputStream,org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromTypeValue(int)",
            "org.apache.sshd.common.util.io.IoUtils:boolean isWindowsExecutable(java.lang.String)",
            "org.apache.sshd.common.util.io.IoUtils:java.nio.file.attribute.PosixFilePermission validateExcludedPermissions(java.util.Collection,java.util.Collection)",
            "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Iterable,java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map generateMnemonicMap(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map getAmbiguousMenmonics(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:boolean isKeyTypeSupported(java.lang.String)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:boolean isValidMessageStructure(java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,java.lang.CharSequence)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Set of(java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:boolean containsAny(java.util.Collection,java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.util.EventListenerUtils:java.lang.Object lambda$proxyWrapper$1(java.lang.Iterable,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.sshd.common.util.NumberUtils:boolean isPowerOf2(long)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromString(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.util.Collection)",
            "org.apache.sshd.common.file.util.BasePath:boolean isNormal()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath normalize()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath resolve(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.BasePath:java.lang.String asString()",
            "org.apache.sshd.common.file.root.RootedPath:java.io.File toFile()",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:java.nio.file.Path next()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void registerPrivateKeyEntryDecoder(org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:boolean canExtractKeyPairs(java.lang.String,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:int resolveKeyLength(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List resolveAuthorizedKeys(org.apache.sshd.common.config.keys.PublicKeyEntryResolver,java.util.Collection)",
            "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromAlgorithm(java.lang.String)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyType(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.Appendable combine(java.lang.Appendable,char,java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyUtils:void registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map loadVersionProperties(java.lang.Class,java.lang.ClassLoader)",
            "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig fromValueChar(char)",
            "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.util.Map)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromString(java.lang.String)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Service:java.nio.channels.NetworkChannel setSocketOptions(java.nio.channels.NetworkChannel)",
            "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryClass(java.lang.Class)",
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory tryLoad(java.util.ServiceLoader)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromKeyType(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveSize(int)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOIDValue(java.util.List)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOID(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression fromIndicatorValue(int)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromString(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.util.Collection)",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.util.Collection)",
            "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption fromName(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:void resetCacheMap(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean setNextObject()",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)",
            "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result fromName(java.lang.String)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(java.util.Collection)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,java.util.Collection)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromString(java.lang.String)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.util.Collection)",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.util.Collection)",
            "org.apache.sshd.common.forward.LocalForwardingEntry:org.apache.sshd.common.forward.LocalForwardingEntry findMatchingEntry(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.Service getService(java.lang.Class)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer,java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map negotiate()",
            "org.apache.sshd.common.session.helpers.SessionTimeoutListener:void run()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.SyspropsMapWrapper:boolean containsValue(java.lang.Object)",
            "org.apache.sshd.common.SyspropsMapWrapper:java.util.Set entrySet()",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:org.apache.sshd.common.PropertyResolver toPropertyResolver(java.util.Properties)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getBuiltinIdentitiesPaths(java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List findMatchingEntries(java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:boolean isHostMatch(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.Map updateGlobalProperties(java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean updateGlobalIdentities(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperties(java.lang.Appendable,java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyValues(java.lang.Appendable,java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry normalizeEntry(org.apache.sshd.client.config.hosts.HostConfigEntry,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.BufferedReader)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.util.Iterator)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendHostConfigEntries(java.lang.Appendable,java.util.Collection)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:org.apache.sshd.client.auth.pubkey.KeyAgentIdentity next()",
            "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:org.apache.sshd.client.auth.pubkey.KeyPairIdentity next()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:org.apache.sshd.client.auth.pubkey.PublicKeyIdentity next()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String getCurrentPasswordCandidate()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.util.Collection selectIdentities(java.lang.Class)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void updateModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair findKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.session.ClientUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.AbstractIoWriteFuture:org.apache.sshd.common.io.IoWriteFuture verify(long)",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream$IoReadFutureImpl:int getRead()",
            "org.apache.sshd.common.future.DefaultKeyExchangeFuture:org.apache.sshd.common.future.KeyExchangeFuture verify(long)",
            "org.apache.sshd.common.future.DefaultSshFuture:java.lang.Object await0(long,boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:boolean awaitUninterruptibly(long)",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Object verifyResult(java.lang.Class,long)",
            "org.apache.sshd.client.future.DefaultAuthFuture:org.apache.sshd.client.future.AuthFuture verify(long)",
            "org.apache.sshd.client.future.DefaultOpenFuture:org.apache.sshd.client.future.OpenFuture verify(long)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher$lambda_safeMap_1__206:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map loadIdentities(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:java.util.List sendPendingPackets(java.util.Queue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.session.AbstractServerSession:org.apache.sshd.common.io.IoWriteFuture sendServerIdentification(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerSessionImpl:void <init>(org.apache.sshd.server.ServerFactoryManager,org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.io.IoWriteFuture sendClientIdentification()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientSessionImpl:void <init>(org.apache.sshd.client.ClientFactoryManager,org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession authSession(org.apache.sshd.client.future.ConnectFuture,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession loginSession(org.apache.sshd.client.future.ConnectFuture,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession authSession(org.apache.sshd.client.future.ConnectFuture,java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession loginSession(org.apache.sshd.client.future.ConnectFuture,java.security.KeyPair)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexMessage(int,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:java.io.IOException closeQuietly(java.io.Closeable[])",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void releaseKeys()",
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:void close()"
        ]
    },
    "org.apache.sshd.agent.local.ChannelAgentForwarding$lambda_close_0__180:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.agent.unix.ChannelAgentForwarding$lambda_close_1__182:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.client.session.ClientSession:org.apache.sshd.client.session.forward.DynamicPortForwardingTracker createDynamicPortForwardingTracker(org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.session.ClientConnectionService$futureDone__219:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.server.session.ServerUserAuthService$lambda_process_1__149:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.AsyncAuthException:void setAuthed(boolean)",
            "org.apache.sshd.server.auth.AsyncAuthException:void addListener(java.util.function.Consumer)",
            "org.apache.sshd.common.util.logging.LoggingUtils:void logExceptionStackTrace(java.lang.Throwable,int,java.util.function.Consumer)"
        ]
    },
    "org.apache.sshd.server.session.ServerUserAuthService$lambda_process_0__150:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.AsyncAuthException:void setAuthed(boolean)",
            "org.apache.sshd.server.auth.AsyncAuthException:void addListener(java.util.function.Consumer)",
            "org.apache.sshd.common.util.logging.LoggingUtils:void logExceptionStackTrace(java.lang.Throwable,int,java.util.function.Consumer)"
        ]
    },
    "org.apache.sshd.client.simple.SimpleSessionClient:org.apache.sshd.client.session.ClientSession sessionLogin(java.net.InetAddress,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.simple.SimpleSessionClient:org.apache.sshd.client.session.ClientSession sessionLogin(java.net.InetAddress,int,java.lang.String,java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.io.nio2.Nio2CompletionHandler$lambda_failed_1__200:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2CompletionHandler:void completed(java.lang.Object,java.lang.Object)",
            "org.apache.sshd.common.io.nio2.Nio2CompletionHandler:void failed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Session$2:void onCompleted(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2CompletionHandler:java.lang.Object lambda$completed$0(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void sessionCreated(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Connector$1:void onCompleted(java.lang.Void,java.lang.Object)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onCompleted(java.nio.channels.AsynchronousSocketChannel,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelSession:void access$000(org.apache.sshd.client.channel.ChannelSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.ChannelSession$1:org.apache.sshd.common.future.CloseFuture doCloseGracefully()"
        ]
    },
    "org.apache.sshd.common.channel.Window:void check(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.Window:void consumeAndCheck(long)"
        ]
    },
    "org.apache.sshd.client.channel.PtyCapableChannelSession:void sendWindowChange(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.agent.local.AgentServerProxy:org.apache.sshd.agent.SshAgent createClient()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.ProxyAgentFactory:org.apache.sshd.agent.SshAgent createClient(org.apache.sshd.common.FactoryManager)"
        ]
    },
    "org.apache.sshd.agent.unix.AgentServerProxy:void lambda$new$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.unix.AgentServerProxy$lambda_new_0__179:void run()"
        ]
    },
    "org.apache.sshd.common.util.closeable.AbstractInnerCloseable:void lambda$doCloseImmediately$0(org.apache.sshd.common.future.CloseFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractInnerCloseable$lambda_doCloseImmediately_0__87:void operationComplete(org.apache.sshd.common.future.SshFuture)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2ServiceFactory:void doCloseImmediately()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.AbstractCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.closeable.AbstractCloseable:void lambda$close$0(boolean,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.server.auth.password.UserAuthPassword:java.lang.Boolean handleServerPasswordChangeRequest(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,org.apache.sshd.server.auth.password.PasswordChangeRequiredException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.password.UserAuthPassword:java.lang.Boolean checkPassword(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.sshd.server.auth.gss.UserAuthGSS:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.AbstractUserAuth:java.lang.Boolean auth(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.auth.AbstractUserAuth:java.lang.Boolean next(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:void sendPublicKeyResponse(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.security.PublicKey,byte[],int,int,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractive:java.lang.Boolean doInitialAuth(org.apache.sshd.server.session.ServerSession,java.lang.String,org.apache.sshd.server.auth.keyboard.KeyboardInteractiveAuthenticator,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractive:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.server.kex.DHGServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexMessage(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexMessage(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.global.TcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.global.TcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionServiceRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.ConnectionServiceRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.global.AbstractOpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.global.CancelTcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.global.CancelTcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionServiceRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.ConnectionServiceRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void asyncAuth(int,org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.client.session.AbstractClientSession:void stopRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendIgnoreMessage(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendDebugMessage(boolean,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer request(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.client.session.AbstractClientSession:byte[] sendKexInit(java.util.Map)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendNewKeys()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexMessage(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendNotImplemented(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture notImplemented()"
        ]
    },
    "org.apache.sshd.common.session.helpers.DefaultUnknownChannelReferenceHandler:org.apache.sshd.common.io.IoWriteFuture sendFailureResponse(org.apache.sshd.common.session.ConnectionService,byte,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.DefaultUnknownChannelReferenceHandler:org.apache.sshd.common.channel.Channel handleUnknownChannelCommand(org.apache.sshd.common.session.ConnectionService,byte,int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture sendChannelOpenFailure(org.apache.sshd.common.util.buffer.Buffer,int,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelOpen(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void lambda$channelOpen$0(org.apache.sshd.common.channel.Channel,boolean,int,int,org.apache.sshd.common.session.Session,org.apache.sshd.client.future.OpenFuture)"
        ]
    },
    "org.apache.sshd.client.auth.password.UserAuthPassword:org.apache.sshd.common.io.IoWriteFuture sendPassword(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.password.UserAuthPassword:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.AbstractUserAuth:boolean process(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.AbstractUserAuth:boolean process(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.AbstractUserAuth:boolean process(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.AbstractUserAuth:boolean process(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.kex.DHGClient:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.kex.DHGEXClient:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexMessage(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.session.ClientSessionImpl:void sendInitialServiceRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientSessionImpl:void signalSessionEvent(org.apache.sshd.common.session.SessionListener$Event)"
        ]
    },
    "org.apache.sshd.client.session.SessionFactory:org.apache.sshd.common.session.helpers.AbstractSession doCreateSession(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSessionFactory:org.apache.sshd.common.session.helpers.AbstractSession createSession(org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils$1:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils$1:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceLoader:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.BufferedReader)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils$1:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceLoader:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.BufferedReader)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.KeyPairResourceLoader:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.BufferedReader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void updateModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair,java.security.PublicKey,java.nio.file.Path,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptKnownHostEntries(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.channel.SttySupport:java.util.Map getUnixPtyModes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void setupSensibleDefaultPty()"
        ]
    },
    "org.apache.sshd.common.channel.SttySupport:int getTerminalProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.SttySupport:int getTerminalWidth()",
            "org.apache.sshd.common.channel.SttySupport:int getTerminalHeight()"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.String combine(char,org.apache.sshd.common.keyprovider.KeyIdentityProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String resolveWelcomeBanner(org.apache.sshd.server.session.ServerSession)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.GenericUtils$lambda_null_9__11:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:java.security.KeyPair reloadClientIdentity(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:java.security.KeyPair getClientIdentity()"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:void throwIllegalArgumentException(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.SelectorUtils:java.lang.String translateToFileSystemPath(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.sshd.common.util.ValidateUtils:void checkTrue(boolean,java.lang.String)",
            "org.apache.sshd.common.util.ValidateUtils:void checkTrue(boolean,java.lang.String,long)",
            "org.apache.sshd.common.util.ValidateUtils:void checkTrue(boolean,java.lang.String,java.lang.Object)",
            "org.apache.sshd.common.util.ValidateUtils:void checkTrue(boolean,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:void lambda$flipMap$5(java.util.Map,boolean,java.lang.Object,java.lang.Object)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String resolveIdentityFilePath(java.lang.String,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry lambda$toHostConfigEntryResolver$0(java.util.Collection,java.lang.String,int,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:void throwIllegalStateException(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:void checkState(boolean,java.lang.String)",
            "org.apache.sshd.common.util.ValidateUtils:void checkState(boolean,java.lang.String,long)",
            "org.apache.sshd.common.util.ValidateUtils:void checkState(boolean,java.lang.String,java.lang.Object)",
            "org.apache.sshd.common.util.ValidateUtils:void checkState(boolean,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.forward.TcpForwardingFilter resolveTcpForwardingFilter(org.apache.sshd.common.PropertyResolver)"
        ]
    },
    "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.server.auth.keyboard.InteractiveChallenge clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:java.lang.Object clone()"
        ]
    },
    "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.lang.String[])",
            "org.apache.sshd.server.ServerAuthenticationManager:void setUserAuthFactoriesNames(java.util.Collection)"
        ]
    },
    "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromEnumName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromString(java.lang.String)"
        ]
    },
    "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:java.lang.String resolveAvailableSignaturesProposal()"
        ]
    },
    "org.apache.sshd.server.session.AbstractServerSession:int getActiveSessionCountForUser(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthServiceFactory:org.apache.sshd.common.Service create(org.apache.sshd.common.session.Session)"
        ]
    },
    "org.apache.sshd.server.SshServer:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.SshServer:void open()"
        ]
    },
    "org.apache.sshd.server.SshServer:java.util.List getActiveSessions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,org.apache.sshd.server.Signal[])",
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener)"
        ]
    },
    "org.apache.sshd.server.StandardEnvironment:void removeSignalListener(org.apache.sshd.server.SignalListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.StandardEnvironment:void signal(org.apache.sshd.server.Signal)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleWindowChange(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleSignal(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleBreak(org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.agent.local.AgentImpl:java.util.Map$Entry getKeyPair(java.util.Collection,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.AgentImpl:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.local.AgentImpl:void removeIdentity(java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:java.security.KeyPair loadKeyPairIdentity(java.lang.String,java.io.InputStream,org.apache.sshd.common.config.keys.FilePasswordProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair doReadKeyPair(java.lang.String,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:java.security.KeyPair doLoadKey(java.lang.String,java.io.InputStream,org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.client.config.keys.ClientIdentityLoader$1:java.security.KeyPair loadClientIdentity(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider)"
        ]
    },
    "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromTypeValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromDERValue(int)"
        ]
    },
    "org.apache.sshd.common.util.io.IoUtils:boolean isWindowsExecutable(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:boolean isExecutable(java.io.File)"
        ]
    },
    "org.apache.sshd.common.util.io.IoUtils:java.nio.file.attribute.PosixFilePermission validateExcludedPermissions(java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:java.nio.file.Path validateFilePath(java.nio.file.Path,java.util.Collection,java.util.Collection)",
            "org.apache.sshd.common.util.io.ModifiableFileWatcher:java.util.AbstractMap$SimpleImmutableEntry validateStrictConfigFilePermissions(java.nio.file.Path,java.nio.file.LinkOption[])",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry validateStrictKeyFilePermissions(java.nio.file.Path,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Iterable,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Class,java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map generateMnemonicMap(java.lang.Class,java.util.function.Predicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.SshAgentConstants$LazyMessagesMapHolder:void <clinit>()",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map generateMnemonicMap(java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.SshConstants$LazyMessagesMapHolder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map getAmbiguousMenmonics(java.lang.Class,java.util.function.Predicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map getAmbiguousMenmonics(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:boolean isKeyTypeSupported(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:boolean isKeyTypeSupported(java.lang.String)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getRawPublicKey(org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getRawPublicKey(org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:boolean isValidMessageStructure(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:boolean isValidMessageStructure(java.lang.Class[])"
        ]
    },
    "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.Invoker:java.lang.Void lambda$wrapAll$0(java.util.Collection,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.Invoker:java.lang.Void lambda$wrapFirst$1(java.util.Collection,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.lang.Iterable,char)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.lang.Iterable,java.lang.CharSequence)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.util.Set of(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterInputStream:void <init>(java.io.InputStream,java.util.Collection)",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void <init>(java.io.OutputStream,org.apache.sshd.server.shell.TtyFilterInputStream,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Set of(java.lang.Enum[])"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:boolean containsAny(java.util.Collection,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.EventListenerUtils:java.lang.Object lambda$proxyWrapper$1(java.lang.Iterable,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.NumberUtils:boolean isPowerOf2(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.SignatureFactoriesManager:void setSignatureFactoriesNames(java.util.Collection)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.lang.String[])"
        ]
    },
    "org.apache.sshd.common.file.util.BasePath:boolean isNormal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath normalize()"
        ]
    },
    "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath normalize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.util.BasePath:java.nio.file.Path normalize()"
        ]
    },
    "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath resolve(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath resolve(java.lang.String)",
            "org.apache.sshd.common.file.util.BasePath:java.nio.file.Path resolveSibling(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath toAbsolutePath()",
            "org.apache.sshd.common.file.util.BasePath:java.nio.file.Path resolve(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.file.util.BasePath:java.lang.String asString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.util.BasePath:java.lang.String toString()"
        ]
    },
    "org.apache.sshd.common.file.root.RootedPath:java.io.File toFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:java.util.Set getPermissions(java.nio.file.Path,java.nio.file.LinkOption[])",
            "org.apache.sshd.common.util.io.IoUtils:void setPermissions(java.nio.file.Path,java.util.Set)",
            "org.apache.sshd.common.file.util.BasePath:java.net.URI toUri()",
            "org.apache.sshd.common.file.root.RootedPath:java.io.File toFile()"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.FileSystem getFileSystem(java.net.URI)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.FileStore getFileStore(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:java.nio.file.Path next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:java.lang.Object next()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void registerPrivateKeyEntryDecoder(org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.security.Key)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:boolean canExtractKeyPairs(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils$1:boolean canExtractKeyPairs(java.lang.String,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:boolean canExtractKeyPairs(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:int resolveKeyLength(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.AbstractPrivateKeyObfuscator:byte[] generateInitializationVector(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,boolean)"
        ]
    },
    "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List resolveAuthorizedKeys(org.apache.sshd.common.config.keys.PublicKeyEntryResolver,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator fromAuthorizedEntries(org.apache.sshd.common.config.keys.PublicKeyEntryResolver,java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.ServerIdentity:java.util.Map loadIdentities(java.util.Properties,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map loadIdentities(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromAlgorithm(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyType(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKey(java.security.Key)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.Appendable combine(java.lang.Appendable,char,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.String combine(char,java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.Appendable combine(java.lang.Appendable,char,org.apache.sshd.common.keyprovider.KeyIdentityProvider)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:void registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.security.Key)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.KeySetPublickeyAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession,java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.security.PublicKey[])"
        ]
    },
    "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map loadVersionProperties(java.lang.Class,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map loadVersionProperties(java.lang.Class)"
        ]
    },
    "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue fromName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue fromName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.compression.CompressionFactory getCompression(org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureCompression(org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.PropertyResolver,boolean,boolean)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureCompression(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue fromName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig fromValueChar(char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.TimeValueConfig:java.util.Map parse(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromAlgorithm(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind()",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind(java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Service:java.nio.channels.NetworkChannel setSocketOptions(java.nio.channels.NetworkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Connector:org.apache.sshd.common.io.IoConnectFuture connect(java.net.SocketAddress)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onCompleted(java.nio.channels.AsynchronousSocketChannel,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryClass(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory tryLoad(java.util.ServiceLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory newInstance(java.lang.Class)"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromKeyType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.ECBufferPublicKeyParser:java.security.interfaces.ECPublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:java.security.KeyPair getKeyPair()",
            "org.apache.sshd.common.signature.SignatureECDSA:boolean verify(byte[])",
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.security.interfaces.ECPublicKey decodePublicKey(java.lang.String,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:java.security.interfaces.ECPrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveSize(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.security.KeyPair generateKeyPair(int)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:java.security.KeyPair generateKeyPair(int)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveParameters(java.security.spec.ECParameterSpec)"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOIDValue(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.security.spec.ECPrivateKeySpec decodeECPrivateKeySpec(org.apache.sshd.common.util.io.der.DERParser)"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOID(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression fromIndicatorValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.ECCurves:java.security.spec.ECPoint octetStringToEcPoint(byte[])"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.lang.String[])",
            "org.apache.sshd.common.kex.KexFactoryManager:void setCipherFactoriesNames(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.lang.String[])"
        ]
    },
    "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption fromName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.AbstractServerSession:java.security.KeyPair getHostKey()"
        ]
    },
    "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)"
        ]
    },
    "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:void resetCacheMap(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.FileKeyPairProvider:void setPaths(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean setNextObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean hasNext()",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:java.security.KeyPair next()"
        ]
    },
    "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:void <init>(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result fromName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.PuttyRequestHandler:java.util.Map resolveShellTtyOptions(java.util.Map)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(org.apache.sshd.common.channel.PtyMode[])"
        ]
    },
    "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterInputStream:void <init>(java.io.InputStream,java.util.Map)",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void <init>(java.io.OutputStream,org.apache.sshd.server.shell.TtyFilterInputStream,java.util.Map)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,org.apache.sshd.common.channel.PtyMode[])"
        ]
    },
    "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.KexFactoryManager:void setMacFactoriesNames(java.util.Collection)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.lang.String[])"
        ]
    },
    "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.KexFactoryManager:void setCompressionFactoriesNames(java.util.Collection)",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.lang.String[])"
        ]
    },
    "org.apache.sshd.common.forward.LocalForwardingEntry:org.apache.sshd.common.forward.LocalForwardingEntry findMatchingEntry(java.lang.String,int,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void localPortForwardingCancelled(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignaller(org.apache.sshd.common.util.Invoker)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignaller(org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress localPortForwardingRequested(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.Service getService(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.session.ClientUserAuthService getUserAuthService()",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.session.ConnectionService getConnectionService()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map negotiate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.SyspropsMapWrapper:boolean containsValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.SyspropsMapWrapper:java.util.Set entrySet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.util.Map)",
            "org.apache.sshd.common.io.nio2.Nio2Service:java.nio.channels.NetworkChannel setSocketOptions(java.nio.channels.NetworkChannel)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.Map updateGlobalProperties(java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperties(java.lang.Appendable,java.util.Map)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:org.apache.sshd.common.PropertyResolver toPropertyResolver(java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.OptionalFeature$lambda_any_1__45:boolean isSupported()"
        ]
    },
    "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.OptionalFeature$lambda_all_0__44:boolean isSupported()"
        ]
    },
    "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getBuiltinIdentitiesPaths(java.nio.file.Path,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:void <init>(java.nio.file.Path,java.util.Collection,boolean,java.util.function.Supplier,java.util.function.Supplier,boolean)",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getDefaultBuiltinIdentitiesPaths(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List findMatchingEntries(java.lang.String,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List findMatchingEntries(java.lang.String,org.apache.sshd.client.config.hosts.HostConfigEntry[])",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry lambda$toHostConfigEntryResolver$0(java.util.Collection,java.lang.String,int,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostPatternsHolder:boolean isHostMatch(java.lang.String,int,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:boolean isHostMatch(java.lang.String,int)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.lang.CharSequence[])",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void setHost(java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void setHost(java.util.Collection)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.Map updateGlobalProperties(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean processGlobalValues(org.apache.sshd.client.config.hosts.HostConfigEntry)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean updateGlobalIdentities(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean processGlobalValues(org.apache.sshd.client.config.hosts.HostConfigEntry)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.BufferedReader)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperties(java.lang.Appendable,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable append(java.lang.Appendable)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyValues(java.lang.Appendable,java.lang.String,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable append(java.lang.Appendable)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyValues(java.lang.Appendable,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry normalizeEntry(org.apache.sshd.client.config.hosts.HostConfigEntry,java.lang.String,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry lambda$toHostConfigEntryResolver$0(java.util.Collection,java.lang.String,int,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.BufferedReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.Reader,boolean)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.lang.Iterable)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendHostConfigEntries(java.lang.Appendable,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void writeHostConfigEntries(java.io.OutputStream,boolean,java.util.Collection)"
        ]
    },
    "org.apache.sshd.client.auth.password.UserAuthPassword:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.AbstractUserAuth:boolean process(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:org.apache.sshd.client.auth.pubkey.KeyAgentIdentity next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:java.lang.Object next()"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:org.apache.sshd.client.auth.pubkey.KeyPairIdentity next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:java.lang.Object next()"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:org.apache.sshd.client.auth.pubkey.PublicKeyIdentity next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:java.lang.Object next()"
        ]
    },
    "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String getCurrentPasswordCandidate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String[] getUserResponses(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],boolean[])"
        ]
    },
    "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.lang.String[])",
            "org.apache.sshd.client.ClientAuthenticationManager:void setUserAuthFactoriesNames(java.util.Collection)"
        ]
    },
    "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.util.Collection selectIdentities(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.lang.Iterable loadKeys()",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.lang.Iterable loadPasswords()",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.lang.Iterable loadIdentities()"
        ]
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.DefaultKnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean verifyServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair findKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptKnownHostEntries(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.util.Collection)"
        ]
    },
    "org.apache.sshd.client.session.ClientUserAuthService:void <init>(org.apache.sshd.common.session.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientUserAuthServiceFactory:org.apache.sshd.common.Service create(org.apache.sshd.common.session.Session)"
        ]
    },
    "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(org.apache.sshd.client.config.hosts.HostConfigEntry)"
        ]
    },
    "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)"
        ]
    },
    "org.apache.sshd.common.io.AbstractIoWriteFuture:org.apache.sshd.common.io.IoWriteFuture verify(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.AbstractIoWriteFuture:java.lang.Object verify(long)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelAsyncInputStream$IoReadFutureImpl:int getRead()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.future.DefaultKeyExchangeFuture:org.apache.sshd.common.future.KeyExchangeFuture verify(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.future.DefaultKeyExchangeFuture:java.lang.Object verify(long)"
        ]
    },
    "org.apache.sshd.common.future.DefaultSshFuture:java.lang.Object await0(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.future.AbstractSshFuture:boolean await(long)",
            "org.apache.sshd.common.future.AbstractSshFuture:boolean awaitUninterruptibly(long)",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Object verifyResult(java.lang.Class,long)"
        ]
    },
    "org.apache.sshd.common.future.AbstractSshFuture:boolean awaitUninterruptibly(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.future.WaitableFuture:boolean awaitUninterruptibly()",
            "org.apache.sshd.common.future.WaitableFuture:boolean awaitUninterruptibly(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Object verifyResult(java.lang.Class,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.AbstractIoWriteFuture:org.apache.sshd.common.io.IoWriteFuture verify(long)",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream$IoReadFutureImpl:org.apache.sshd.common.io.IoReadFuture verify(long)",
            "org.apache.sshd.common.future.DefaultKeyExchangeFuture:org.apache.sshd.common.future.KeyExchangeFuture verify(long)",
            "org.apache.sshd.client.future.DefaultAuthFuture:org.apache.sshd.client.future.AuthFuture verify(long)",
            "org.apache.sshd.client.future.DefaultOpenFuture:org.apache.sshd.client.future.OpenFuture verify(long)",
            "org.apache.sshd.client.future.DefaultConnectFuture:org.apache.sshd.client.future.ConnectFuture verify(long)"
        ]
    },
    "org.apache.sshd.client.future.DefaultAuthFuture:org.apache.sshd.client.future.AuthFuture verify(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.future.DefaultAuthFuture:java.lang.Object verify(long)"
        ]
    },
    "org.apache.sshd.client.future.DefaultOpenFuture:org.apache.sshd.client.future.OpenFuture verify(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.future.DefaultOpenFuture:java.lang.Object verify(long)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher$lambda_safeMap_1__206:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map loadIdentities(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map loadDefaultIdentities(java.nio.file.Path,boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.server.session.ServerSessionImpl:void <init>(org.apache.sshd.server.ServerFactoryManager,org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.SessionFactory:org.apache.sshd.server.session.ServerSessionImpl doCreateSession(org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession loginSession(org.apache.sshd.client.future.ConnectFuture,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession sessionLogin(java.net.SocketAddress,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession loginSession(org.apache.sshd.client.future.ConnectFuture,java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession sessionLogin(java.net.SocketAddress,java.lang.String,java.security.KeyPair)"
        ]
    },
    "org.apache.sshd.server.auth.AsyncAuthException:void setAuthed(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.auth.AsyncAuthException:void addListener(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.logging.LoggingUtils:void logExceptionStackTrace(java.lang.Throwable,int,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.logging.LoggingUtils:void logExceptionStackTrace(org.slf4j.Logger,java.util.logging.Level,java.lang.Throwable,int)"
        ]
    },
    "org.apache.sshd.common.channel.Window:void consumeAndCheck(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:void doWriteData(byte[],int,long)",
            "org.apache.sshd.server.x11.ChannelForwardedX11:void doWriteData(byte[],int,long)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleWriteDataSuccess(byte,byte[],int,int)",
            "org.apache.sshd.agent.local.AgentForwardedChannel:org.apache.sshd.common.util.buffer.Buffer request(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.unix.AgentForwardedChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.common.channel.ChannelPipedInputStream:int read(byte[],int,int)",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:void doRead(boolean)",
            "org.apache.sshd.common.forward.TcpipClientChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.client.channel.ChannelDirectTcpip:void doWriteData(byte[],int,long)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteExtendedData(byte[],int,long)"
        ]
    },
    "org.apache.sshd.agent.local.ProxyAgentFactory:org.apache.sshd.agent.SshAgent createClient(org.apache.sshd.common.FactoryManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.ChannelAgentForwarding:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:void <init>(org.apache.sshd.client.session.ClientSession,org.apache.sshd.common.signature.SignatureFactoriesManager)"
        ]
    },
    "org.apache.sshd.agent.unix.AgentServerProxy$lambda_new_0__179:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.common.util.closeable.AbstractInnerCloseable$lambda_doCloseImmediately_0__87:void operationComplete(org.apache.sshd.common.future.SshFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.future.AbstractSshFuture:void notifyListener(org.apache.sshd.common.future.SshFutureListener)"
        ]
    },
    "org.apache.sshd.server.auth.password.UserAuthPassword:java.lang.Boolean checkPassword(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.password.UserAuthPassword:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.server.auth.AbstractUserAuth:java.lang.Boolean auth(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.auth.AbstractUserAuth:java.lang.Boolean next(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.AbstractUserAuth:java.lang.Boolean auth(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.auth.AbstractUserAuth:java.lang.Boolean next(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractive:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.AbstractUserAuth:java.lang.Boolean auth(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.auth.AbstractUserAuth:java.lang.Boolean next(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.global.TcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionServiceRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.ConnectionServiceRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.global.AbstractOpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.global.AbstractOpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionServiceRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.ConnectionServiceRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.global.CancelTcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.util.net.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:void stopRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.forward.ExplicitPortForwardingTracker:void close()"
        ]
    },
    "org.apache.sshd.server.session.AbstractServerSession:byte[] sendKexInit(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit()"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:byte[] sendKexInit(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit()",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.future.KeyExchangeFuture switchToNoneCipher()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture notImplemented()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.helpers.DefaultUnknownChannelReferenceHandler:org.apache.sshd.common.channel.Channel handleUnknownChannelCommand(org.apache.sshd.common.session.ConnectionService,byte,int,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.channel.Channel getChannel(byte,int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.auth.password.UserAuthPassword:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.AbstractUserAuth:boolean process(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.session.ClientSessionImpl:void signalSessionEvent(org.apache.sshd.common.session.SessionListener$Event)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void setAuthenticated()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSessionFactory:org.apache.sshd.common.session.helpers.AbstractSession createSession(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSessionIoHandler:void sessionCreated(org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.client.channel.PtyCapableChannelSession:void setupSensibleDefaultPty()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.SttySupport:int getTerminalWidth()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void setupSensibleDefaultPty()"
        ]
    },
    "org.apache.sshd.common.channel.SttySupport:int getTerminalHeight()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void setupSensibleDefaultPty()"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:java.security.KeyPair getClientIdentity()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.security.KeyPair doGetKeyPair(org.apache.sshd.client.config.keys.ClientIdentityProvider)"
        ]
    },
    "org.apache.sshd.common.util.SelectorUtils:java.lang.String translateToFileSystemPath(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.SelectorUtils:java.lang.String translateToLocalFileSystemPath(java.lang.String,char,java.lang.String)",
            "org.apache.sshd.common.util.SelectorUtils:java.lang.String translateToFileSystemPath(java.lang.String,java.lang.String,java.nio.file.FileSystem)"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:void checkTrue(boolean,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.password.UserAuthPassword:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.shell.ProcessShell:void setSession(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.agent.local.AgentForwardedChannel:void doOpen()",
            "org.apache.sshd.agent.unix.AgentForwardedChannel:void doOpen()",
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleRandom:void <init>()",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:net.i2p.crypto.eddsa.EdDSAPublicKey recoverEDDSAPublicKey(java.security.PrivateKey)",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.signature.Signature getEDDSASignature()",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getEDDSAPublicKeyEntryDecoder()",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getOpenSSHEDDSAPrivateKeyEntryDecoder()",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.util.buffer.Buffer putRawEDDSAPublicKey(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey)",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.util.buffer.Buffer putEDDSAKeyPair(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey,java.security.PrivateKey)",
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider createGeneratorHostKeyProvider(java.nio.file.Path)",
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.config.keys.loader.KeyPairResourceParser getBouncycastleKeyPairResourceParser()",
            "org.apache.sshd.common.util.Int2IntFunction:java.util.function.IntUnaryOperator div(int)",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkNotNull(java.lang.Object,java.lang.String)",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.String checkNotNullAndNotEmpty(java.lang.String,java.lang.String)",
            "org.apache.sshd.common.util.ValidateUtils:byte[] checkNotNullAndNotEmpty(byte[],java.lang.String)",
            "org.apache.sshd.common.util.ValidateUtils:char[] checkNotNullAndNotEmpty(char[],java.lang.String)",
            "org.apache.sshd.common.util.ValidateUtils:int[] checkNotNullAndNotEmpty(int[],java.lang.String)",
            "org.apache.sshd.common.util.SshdEventListener:org.apache.sshd.common.util.SshdEventListener validateListener(org.apache.sshd.common.util.SshdEventListener,java.lang.String)",
            "org.apache.sshd.common.signature.SignatureRSA:boolean verify(byte[])",
            "org.apache.sshd.common.config.keys.loader.AbstractPrivateKeyObfuscator:java.lang.Appendable appendPrivateKeyEncryptionContext(java.lang.Appendable,org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)",
            "org.apache.sshd.common.config.keys.loader.AbstractPrivateKeyObfuscator:byte[] deriveEncryptionKey(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,int)",
            "org.apache.sshd.common.config.keys.loader.AbstractPrivateKeyObfuscator:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,int,byte[],boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.session.AbstractClientSession:void addPasswordIdentity(java.lang.String)",
            "org.apache.sshd.client.session.AbstractClientSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.client.SshClient:void addPasswordIdentity(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:void checkTrue(boolean,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void <init>(org.apache.sshd.server.shell.InvertedShell,java.util.concurrent.Executor,boolean,int)",
            "org.apache.sshd.server.shell.InvertedShellWrapper:void setSession(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.channel.ChannelSession:void doWriteData(byte[],int,long)",
            "org.apache.sshd.server.x11.ChannelForwardedX11:void doWriteData(byte[],int,long)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.agent.local.AgentForwardedChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.agent.local.ChannelAgentForwarding:void doWriteData(byte[],int,long)",
            "org.apache.sshd.agent.unix.AgentForwardedChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:void doWriteData(byte[],int,long)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:void <init>(java.lang.String,int)",
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleRandom:int random(int)",
            "org.apache.sshd.common.util.security.SecurityUtils:int getMaxDHGroupExchangeKeySize()",
            "org.apache.sshd.common.util.security.SecurityUtils:boolean isDHGroupExchangeSupported(int)",
            "org.apache.sshd.common.util.io.der.DERWriter:void writeLength(int)",
            "org.apache.sshd.common.util.buffer.ByteArrayBuffer:void putRawBytes(byte[],int,int)",
            "org.apache.sshd.common.util.buffer.ByteArrayBuffer:void ensureCapacity(int,java.util.function.IntUnaryOperator)",
            "org.apache.sshd.common.util.buffer.BufferUtils:byte[] decodeHex(char,java.lang.CharSequence,int,int)",
            "org.apache.sshd.common.util.buffer.BufferUtils:int decodeHex(java.io.OutputStream,char,java.lang.CharSequence,int,int)",
            "org.apache.sshd.common.util.buffer.BufferUtils:int updateLengthPlaceholder(org.apache.sshd.common.util.buffer.Buffer,int)",
            "org.apache.sshd.common.util.buffer.BufferUtils:long validateInt32Value(long,java.lang.String)",
            "org.apache.sshd.common.util.buffer.BufferUtils:long validateUint32Value(long,java.lang.String)",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,long)",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkInstanceOf(java.lang.Object,java.lang.Class,java.lang.String,long)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.lang.String,int,byte[])",
            "org.apache.sshd.common.digest.BaseDigest:void <init>(java.lang.String,int)",
            "org.apache.sshd.common.channel.Window:void init(long,long,org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.common.channel.Window:void expand(int)",
            "org.apache.sshd.common.channel.Window:void waitForCondition(java.util.function.Predicate,long)",
            "org.apache.sshd.common.channel.ChannelOutputStream:void <init>(org.apache.sshd.common.channel.AbstractChannel,org.apache.sshd.common.channel.Window,long,org.slf4j.Logger,byte,boolean)",
            "org.apache.sshd.common.channel.ChannelOutputStream:void write(byte[],int,int)",
            "org.apache.sshd.common.future.DefaultSshFuture:java.lang.Object await0(long,boolean)",
            "org.apache.sshd.common.forward.TcpipClientChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer request(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,long,java.util.concurrent.TimeUnit)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer validateTargetBuffer(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String resolveIdentityFilePath(java.lang.String,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:void init(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:void setConnectTimeout(long)",
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:void setAuthenticationTimeout(long)",
            "org.apache.sshd.client.channel.ChannelDirectTcpip:void doWriteData(byte[],int,long)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteExtendedData(byte[],int,long)",
            "org.apache.sshd.client.channel.ChannelSession:void pumpInputStream()",
            "org.apache.sshd.client.session.ClientSessionImpl:void <init>(org.apache.sshd.client.ClientFactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.net.SocketAddress)",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(org.apache.sshd.client.config.hosts.HostConfigEntry)"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:void checkTrue(boolean,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.ServerIdentity:java.util.Map findIdentities(java.util.Properties,java.nio.file.LinkOption[])",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.ServerAuthenticationManager:void setUserAuthFactoriesNames(java.util.Collection)",
            "org.apache.sshd.server.SshServer:void checkConfig()",
            "org.apache.sshd.common.util.security.eddsa.SignatureEd25519:boolean verify(byte[])",
            "org.apache.sshd.common.util.buffer.keys.ECBufferPublicKeyParser:java.security.interfaces.ECPublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.keys.RSABufferPublicKeyParser:java.security.interfaces.RSAPublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.keys.ED25519BufferPublicKeyParser:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.keys.DSSBufferPublicKeyParser:java.security.interfaces.DSAPublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.BufferUtils:long validateInt32Value(long,java.lang.String,java.lang.Object)",
            "org.apache.sshd.common.util.buffer.BufferUtils:long validateUint32Value(long,java.lang.String,java.lang.Object)",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.String checkNotNullAndNotEmpty(java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkInstanceOf(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object)",
            "org.apache.sshd.common.util.VersionInfo:org.apache.sshd.common.util.VersionInfo parse(java.lang.String)",
            "org.apache.sshd.common.util.EventListenerUtils:org.apache.sshd.common.util.SshdEventListener proxyWrapper(java.lang.Class,java.lang.ClassLoader,java.lang.Iterable)",
            "org.apache.sshd.common.signature.SignatureFactoriesManager:void setSignatureFactoriesNames(java.util.Collection)",
            "org.apache.sshd.common.signature.SignatureRSA:boolean verify(byte[])",
            "org.apache.sshd.common.signature.SignatureDSA:boolean verify(byte[])",
            "org.apache.sshd.common.signature.BuiltinSignatures:void registerExtension(org.apache.sshd.common.signature.SignatureFactory)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path resolveLocalPath(org.apache.sshd.common.file.root.RootedPath)",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext parseAlgorithmInfo(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,java.lang.String)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:org.apache.sshd.common.config.keys.AuthorizedKeyEntry parseAuthorizedKeyEntry(java.lang.String)",
            "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.digest.DigestFactory getDefaultFingerPrintFactory()",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureCompression(org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.PropertyResolver,boolean,boolean)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:void registerExtension(org.apache.sshd.common.cipher.CipherFactory)",
            "org.apache.sshd.common.kex.BuiltinDHFactories:void registerExtension(org.apache.sshd.common.kex.DHFactory)",
            "org.apache.sshd.common.kex.KexFactoryManager:void setCipherFactoriesNames(java.util.Collection)",
            "org.apache.sshd.common.kex.KexFactoryManager:void setCompressionFactoriesNames(java.util.Collection)",
            "org.apache.sshd.common.kex.KexFactoryManager:void setMacFactoriesNames(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)",
            "org.apache.sshd.common.channel.AbstractChannel:java.util.Date addPendingRequest(java.lang.String,boolean)",
            "org.apache.sshd.common.mac.BuiltinMacs:void registerExtension(org.apache.sshd.common.mac.MacFactory)",
            "org.apache.sshd.common.compression.BuiltinCompressions:void registerExtension(org.apache.sshd.common.compression.CompressionFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress localPortForwardingRequested(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.hosts.KnownHostEntry:org.apache.sshd.client.config.hosts.KnownHostEntry parseKnownHostEntry(org.apache.sshd.client.config.hosts.KnownHostEntry,java.lang.String)",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:org.apache.sshd.client.config.hosts.KnownHostHashValue parse(java.lang.String,org.apache.sshd.client.config.hosts.KnownHostHashValue)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:org.apache.sshd.client.config.hosts.HostPatternValue toPattern(java.lang.CharSequence)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String resolveIdentityFilePath(java.lang.String,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void updateModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.lang.String prepareModifiedServerKeyLine(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.config.hosts.KnownHostEntry,java.lang.String,java.security.PublicKey,java.security.PublicKey)",
            "org.apache.sshd.client.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.ClientAuthenticationManager:void setUserAuthFactoriesNames(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:void checkTrue(boolean,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.BufferUtils:long validateInt32Value(long,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.buffer.BufferUtils:long validateUint32Value(long,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.String checkNotNullAndNotEmpty(java.lang.String,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:java.util.Map checkNotNullAndNotEmpty(java.util.Map,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:java.util.Collection checkNotNullAndNotEmpty(java.util.Collection,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Iterable checkNotNullAndNotEmpty(java.lang.Iterable,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:byte[] checkNotNullAndNotEmpty(byte[],java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:char[] checkNotNullAndNotEmpty(char[],java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:int[] checkNotNullAndNotEmpty(int[],java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Object[] checkNotNullAndNotEmpty(java.lang.Object[],java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkInstanceOf(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:void <init>(java.util.List,java.util.List)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureCiphers(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureSignatures(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureMacs(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureKeyExchanges(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,java.util.function.Function,boolean)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureCompression(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:org.apache.sshd.client.config.hosts.HostPatternValue toPattern(java.lang.CharSequence)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:void lambda$flipMap$5(java.util.Map,boolean,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String resolveIdentityFilePath(java.lang.String,java.lang.String,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry normalizeEntry(org.apache.sshd.client.config.hosts.HostConfigEntry,java.lang.String,int,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry lambda$toHostConfigEntryResolver$0(java.util.Collection,java.lang.String,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry$lambda_toHostConfigEntryResolver_0__118:org.apache.sshd.client.config.hosts.HostConfigEntry resolveEffectiveHost(java.lang.String,int,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:void checkState(boolean,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.ValidateUtils:void checkState(boolean,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.ValidateUtils:void checkState(boolean,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.Service getService(java.lang.Class)"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:void checkState(boolean,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.forward.TcpForwardingFilter resolveTcpForwardingFilter(org.apache.sshd.common.PropertyResolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.forward.ForwardingFilter resolveServerForwarding(org.apache.sshd.common.PropertyResolver)"
        ]
    },
    "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue[] values()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories[] values()",
            "org.apache.sshd.server.auth.WelcomeBannerPhase:org.apache.sshd.server.auth.WelcomeBannerPhase[] values()",
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type[] values()",
            "org.apache.sshd.server.Signal:org.apache.sshd.server.Signal[] values()",
            "org.apache.sshd.common.util.io.der.ASN1Object:org.apache.sshd.common.util.io.der.ASN1Object clone()",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class[] values()",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type[] values()",
            "org.apache.sshd.common.util.io.IoUtils:byte[] getEOLBytes()",
            "org.apache.sshd.common.util.io.IoUtils:java.nio.file.LinkOption[] getLinkOptions(boolean)",
            "org.apache.sshd.common.util.io.ModifiableFileWatcher:void <init>(java.nio.file.Path,java.nio.file.LinkOption[])",
            "org.apache.sshd.common.util.closeable.AbstractCloseable$State:org.apache.sshd.common.util.closeable.AbstractCloseable$State[] values()",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures[] values()",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext clone()",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities[] values()",
            "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue[] values()",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue[] values()",
            "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue[] values()",
            "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig[] values()",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests[] values()",
            "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories[] values()",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves[] values()",
            "org.apache.sshd.common.cipher.Cipher$Mode:org.apache.sshd.common.cipher.Cipher$Mode[] values()",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression[] values()",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers[] values()",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories[] values()",
            "org.apache.sshd.common.kex.DHGroupData:byte[] getOakleyGroupPrimeValue(java.lang.String)",
            "org.apache.sshd.common.kex.KexState:org.apache.sshd.common.kex.KexState[] values()",
            "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption[] values()",
            "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result[] values()",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulState:org.apache.sshd.common.channel.AbstractChannel$GracefulState[] values()",
            "org.apache.sshd.common.channel.PtyMode:org.apache.sshd.common.channel.PtyMode[] values()",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs[] values()",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions[] values()",
            "org.apache.sshd.common.compression.Compression$Type:org.apache.sshd.common.compression.Compression$Type[] values()",
            "org.apache.sshd.common.forward.TcpipClientChannel$Type:org.apache.sshd.common.forward.TcpipClientChannel$Type[] values()",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] getSessionId()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void receiveNewKeys()",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] getClientKexData()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void setClientKexData(byte[])",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] getServerKexData()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void setServerKexData(byte[])",
            "org.apache.sshd.common.session.Session$TimeoutStatus:org.apache.sshd.common.session.Session$TimeoutStatus[] values()",
            "org.apache.sshd.common.session.SessionListener$Event:org.apache.sshd.common.session.SessionListener$Event[] values()",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.client.config.hosts.KnownHostDigest[] values()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories[] values()",
            "org.apache.sshd.client.channel.ClientChannelEvent:org.apache.sshd.client.channel.ClientChannelEvent[] values()",
            "org.apache.sshd.client.channel.ClientChannel$Streaming:org.apache.sshd.client.channel.ClientChannel$Streaming[] values()",
            "org.apache.sshd.client.session.ClientSession$ClientSessionEvent:org.apache.sshd.client.session.ClientSession$ClientSessionEvent[] values()"
        ]
    },
    "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.lang.String)"
        ]
    },
    "org.apache.sshd.server.ServerAuthenticationManager:void setUserAuthFactoriesNames(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:java.lang.String resolveAvailableSignaturesProposal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit()"
        ]
    },
    "org.apache.sshd.server.session.ServerUserAuthServiceFactory:org.apache.sshd.common.Service create(org.apache.sshd.common.session.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.ServiceFactory:org.apache.sshd.common.Service create(java.util.Collection,java.lang.String,org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.session.ClientSessionImpl:void <init>(org.apache.sshd.client.ClientFactoryManager,org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.server.SshServer:void open()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,org.apache.sshd.server.Signal[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleWindowChange(org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleInternalRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleSignal(org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleInternalRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleBreak(org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleInternalRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.local.AgentImpl:byte[] sign(java.security.PublicKey,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AgentDelegate:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.KeyAgentIdentity:byte[] sign(byte[])"
        ]
    },
    "org.apache.sshd.agent.local.AgentImpl:void removeIdentity(java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AgentDelegate:void removeIdentity(java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair doReadKeyPair(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair readKeyPair(java.nio.file.Path,java.nio.file.OpenOption[])"
        ]
    },
    "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:java.security.KeyPair doLoadKey(java.lang.String,java.io.InputStream,org.apache.sshd.common.config.keys.FilePasswordProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:java.security.KeyPair doLoadKey(java.lang.String,java.lang.Object,org.apache.sshd.common.config.keys.FilePasswordProvider)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentityLoader$1:java.security.KeyPair loadClientIdentity(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:java.security.KeyPair reloadClientIdentity(java.nio.file.Path)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromDERValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.der.ASN1Object:void <init>(byte,int,byte[])"
        ]
    },
    "org.apache.sshd.common.util.io.IoUtils:boolean isExecutable(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:java.util.Set getPermissionsFromFile(java.io.File)"
        ]
    },
    "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:java.nio.file.Path validateFilePath(java.nio.file.Path,java.util.Collection,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.io.ModifiableFileWatcher:java.util.AbstractMap$SimpleImmutableEntry validateStrictConfigFilePermissions(java.nio.file.Path,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.DefaultConfigFileHostEntryResolver:java.util.List reloadHostConfigEntries(java.nio.file.Path,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.keyverifier.DefaultKnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry validateStrictKeyFilePermissions(java.nio.file.Path,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:java.util.Collection reloadAuthorizedKeys(java.nio.file.Path,java.lang.String,org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:java.security.KeyPair reloadClientIdentity(java.nio.file.Path)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Class,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityProviderChoice:java.security.Provider createProviderInstance(java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.security.SecurityUtils:void register()"
        ]
    },
    "org.apache.sshd.agent.SshAgentConstants$LazyMessagesMapHolder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.SshAgentConstants:java.lang.String getCommandMessageName(int)",
            "org.apache.sshd.agent.SshAgentConstants$LazyMessagesMapHolder:java.util.Map access$000()",
            "org.apache.sshd.agent.SshAgentConstants$LazyMessagesMapHolder:void <clinit>()",
            "org.apache.sshd.agent.SshAgentConstants$LazyMessagesMapHolder$lambda_static_0__183:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map generateMnemonicMap(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.KeyExchange:void <clinit>()",
            "org.apache.sshd.common.SshConstants$LazyReasonsMapHolder:void <clinit>()",
            "org.apache.sshd.common.SshConstants$LazyOpenCodesMapHolder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.SshConstants$LazyMessagesMapHolder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.SshConstants$LazyMessagesMapHolder:java.util.Map access$100()",
            "org.apache.sshd.common.SshConstants$LazyMessagesMapHolder:void <clinit>()",
            "org.apache.sshd.common.SshConstants:java.lang.String getCommandMessageName(int)",
            "org.apache.sshd.common.SshConstants$LazyMessagesMapHolder$lambda_static_0__72:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map getAmbiguousMenmonics(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.SshConstants$LazyAmbiguousOpcodesHolder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getRawPublicKey(org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getPublicKey(org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)",
            "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getRawPublicKey()"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:boolean isValidMessageStructure(java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleIgnore(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleUnimplemented(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleDebug(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.Invoker:java.lang.Void lambda$wrapAll$0(java.util.Collection,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.Invoker$lambda_wrapAll_0__88:java.lang.Object invoke(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.Invoker:java.lang.Void lambda$wrapFirst$1(java.util.Collection,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.Invoker$lambda_wrapFirst_1__89:java.lang.Object invoke(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.lang.Iterable,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.ProcessShellFactory:java.util.List resolveEffectiveCommand(java.util.List)",
            "org.apache.sshd.server.shell.ProcessShell:void <init>(java.util.Collection)",
            "org.apache.sshd.server.shell.ProcessShell:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.security.SecurityUtils:void register()",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.lang.Object[],char)",
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.security.PrivateKey decodePEMPrivateKeyPKCS8(java.util.List,byte[],org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser:java.lang.String joinDataLines(java.util.Collection)",
            "org.apache.sshd.common.config.ListParseResult:java.lang.String toString()",
            "org.apache.sshd.common.config.NamedResourceListParseResult:java.lang.String toString()",
            "org.apache.sshd.common.config.NamedFactoriesListParseResult:java.lang.String toString()",
            "org.apache.sshd.common.NamedResource:java.lang.String getNames(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void setHost(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.lang.Iterable,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.lang.Object[],java.lang.CharSequence)"
        ]
    },
    "org.apache.sshd.server.shell.TtyFilterInputStream:void <init>(java.io.InputStream,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterInputStream:void <init>(java.io.InputStream,java.util.Map)"
        ]
    },
    "org.apache.sshd.server.shell.TtyFilterOutputStream:void <init>(java.io.OutputStream,org.apache.sshd.server.shell.TtyFilterInputStream,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void <init>(java.io.OutputStream,org.apache.sshd.server.shell.TtyFilterInputStream,java.util.Map)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.util.Set of(java.lang.Enum[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(org.apache.sshd.common.channel.PtyMode[])",
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,org.apache.sshd.common.channel.PtyMode[])"
        ]
    },
    "org.apache.sshd.common.signature.SignatureFactoriesManager:void setSignatureFactoriesNames(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.file.util.BasePath:java.nio.file.Path normalize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path resolveLocalPath(org.apache.sshd.common.file.root.RootedPath)",
            "org.apache.sshd.common.file.nativefs.NativeFileSystemFactory:java.nio.file.FileSystem createFileSystem(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.common.config.keys.IdentityUtils$LazyDefaultUserHomeFolderHolder:void <clinit>()",
            "org.apache.sshd.client.config.keys.ClientIdentityLoader$1:java.nio.file.Path toPath(java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void addIdentity(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath resolve(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.util.BasePath:java.nio.file.Path resolve(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.file.util.BasePath:java.nio.file.Path resolveSibling(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.util.BasePath:java.nio.file.Path resolveSibling(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath toAbsolutePath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.util.BasePath:java.io.File toFile()",
            "org.apache.sshd.common.file.util.BasePath:java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[],java.nio.file.WatchEvent$Modifier[])",
            "org.apache.sshd.common.file.util.BasePath:java.nio.file.Path toAbsolutePath()",
            "org.apache.sshd.common.file.root.RootedPath:java.io.File toFile()",
            "org.apache.sshd.common.file.root.RootedPath:org.apache.sshd.common.file.root.RootedPath toRealPath(java.nio.file.LinkOption[])",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path resolveLocalPath(org.apache.sshd.common.file.root.RootedPath)"
        ]
    },
    "org.apache.sshd.common.file.util.BasePath:java.nio.file.Path resolve(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.file.util.BasePath:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:java.nio.file.Path validateFilePath(java.nio.file.Path,java.util.Collection,java.util.Collection)",
            "org.apache.sshd.server.config.keys.ServerIdentity:java.util.Map findIdentities(java.util.Properties,java.nio.file.LinkOption[])",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair readKeyPair(java.nio.file.Path,java.nio.file.OpenOption[])",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:void writeKeyPair(java.security.KeyPair,java.nio.file.Path,java.nio.file.OpenOption[])",
            "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String resolveWelcomeBanner(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.common.file.util.BaseFileSystem:boolean lambda$getPathMatcher$0(java.util.regex.Pattern,java.nio.file.Path)",
            "org.apache.sshd.common.file.util.MockPath:boolean startsWith(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.MockPath:boolean endsWith(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.MockPath:java.nio.file.Path resolve(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.MockPath:java.nio.file.Path resolveSibling(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.MockPath:int compareTo(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path root(org.apache.sshd.common.file.root.RootedFileSystem,java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path resolveLocalPath(org.apache.sshd.common.file.root.RootedPath)",
            "org.apache.sshd.common.file.root.RootedFileSystem:java.lang.String toString()",
            "org.apache.sshd.common.file.nativefs.NativeFileSystemFactory:java.nio.file.FileSystem createFileSystem(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceLoader:java.util.Collection loadKeyPairs(java.nio.file.Path,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.charset.Charset,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.PropertyResolverUtils:long toLong(java.lang.Object,long)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long toLong(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:int toInteger(java.lang.Object,int)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer toInteger(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean toBoolean(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset toCharset(java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:java.security.KeyPair reloadClientIdentity(java.nio.file.Path)",
            "org.apache.sshd.client.config.keys.ClientIdentityLoader$1:java.security.KeyPair loadClientIdentity(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void addIdentity(java.nio.file.Path)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.StringBuilder appendUserHome(java.lang.StringBuilder,java.nio.file.Path)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.common.util.io.IoUtils:java.util.Set getPermissions(java.nio.file.Path,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.ModifiableFileWatcher:java.util.AbstractMap$SimpleImmutableEntry validateStrictConfigFilePermissions(java.nio.file.Path,java.nio.file.LinkOption[])",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry validateStrictKeyFilePermissions(java.nio.file.Path,java.nio.file.LinkOption[])",
            "org.apache.sshd.common.util.io.FileInfoExtractor$getPermissions__195:java.lang.Object infoOf(java.nio.file.Path,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.util.io.IoUtils:void setPermissions(java.nio.file.Path,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.file.util.BasePath:java.net.URI toUri()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String resolveWelcomeBanner(org.apache.sshd.server.session.ServerSession)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.FileSystem getFileSystem(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path getPath(java.net.URI)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.FileStore getFileStore(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue fromString(java.lang.String)",
            "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.server.auth.keyboard.InteractiveChallenge clone()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromEnumName(java.lang.String)",
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.server.session.AbstractServerSession:int getActiveSessionCountForUser(java.lang.String)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.SshServer:void start()",
            "org.apache.sshd.server.SshServer:java.util.List getActiveSessions()",
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,java.util.Collection)",
            "org.apache.sshd.server.StandardEnvironment:void removeSignalListener(org.apache.sshd.server.SignalListener)",
            "org.apache.sshd.server.StandardEnvironment:void signal(org.apache.sshd.server.Signal)",
            "org.apache.sshd.agent.local.AgentImpl:java.util.Map$Entry getKeyPair(java.util.Collection,java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.security.SecurityUtils:java.security.KeyPair loadKeyPairIdentity(java.lang.String,java.io.InputStream,org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromTypeValue(int)",
            "org.apache.sshd.common.util.io.IoUtils:boolean isWindowsExecutable(java.lang.String)",
            "org.apache.sshd.common.util.io.IoUtils:java.nio.file.attribute.PosixFilePermission validateExcludedPermissions(java.util.Collection,java.util.Collection)",
            "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Iterable,java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map generateMnemonicMap(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map getAmbiguousMenmonics(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:boolean isKeyTypeSupported(java.lang.String)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:boolean isValidMessageStructure(java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,java.lang.CharSequence)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Set of(java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:boolean containsAny(java.util.Collection,java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.util.EventListenerUtils:java.lang.Object lambda$proxyWrapper$1(java.lang.Iterable,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.sshd.common.util.NumberUtils:boolean isPowerOf2(long)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromString(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.util.Collection)",
            "org.apache.sshd.common.file.util.BasePath:boolean isNormal()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath normalize()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath resolve(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.BasePath:java.lang.String asString()",
            "org.apache.sshd.common.file.root.RootedPath:java.io.File toFile()",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:java.nio.file.Path next()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void registerPrivateKeyEntryDecoder(org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:boolean canExtractKeyPairs(java.lang.String,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:int resolveKeyLength(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List resolveAuthorizedKeys(org.apache.sshd.common.config.keys.PublicKeyEntryResolver,java.util.Collection)",
            "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromAlgorithm(java.lang.String)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyType(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.Appendable combine(java.lang.Appendable,char,java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyUtils:void registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map loadVersionProperties(java.lang.Class,java.lang.ClassLoader)",
            "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig fromValueChar(char)",
            "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.util.Map)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromString(java.lang.String)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Service:java.nio.channels.NetworkChannel setSocketOptions(java.nio.channels.NetworkChannel)",
            "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryClass(java.lang.Class)",
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory tryLoad(java.util.ServiceLoader)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromKeyType(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveSize(int)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOIDValue(java.util.List)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOID(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression fromIndicatorValue(int)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromString(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.util.Collection)",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.util.Collection)",
            "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption fromName(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:void resetCacheMap(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean setNextObject()",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)",
            "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result fromName(java.lang.String)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(java.util.Collection)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,java.util.Collection)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromString(java.lang.String)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.util.Collection)",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.util.Collection)",
            "org.apache.sshd.common.forward.LocalForwardingEntry:org.apache.sshd.common.forward.LocalForwardingEntry findMatchingEntry(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.Service getService(java.lang.Class)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer,java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map negotiate()",
            "org.apache.sshd.common.session.helpers.SessionTimeoutListener:void run()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.SyspropsMapWrapper:boolean containsValue(java.lang.Object)",
            "org.apache.sshd.common.SyspropsMapWrapper:java.util.Set entrySet()",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:org.apache.sshd.common.PropertyResolver toPropertyResolver(java.util.Properties)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getBuiltinIdentitiesPaths(java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List findMatchingEntries(java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:boolean isHostMatch(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.Map updateGlobalProperties(java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean updateGlobalIdentities(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperties(java.lang.Appendable,java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyValues(java.lang.Appendable,java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry normalizeEntry(org.apache.sshd.client.config.hosts.HostConfigEntry,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.BufferedReader)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.util.Iterator)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendHostConfigEntries(java.lang.Appendable,java.util.Collection)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:org.apache.sshd.client.auth.pubkey.KeyAgentIdentity next()",
            "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:org.apache.sshd.client.auth.pubkey.KeyPairIdentity next()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:org.apache.sshd.client.auth.pubkey.PublicKeyIdentity next()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String getCurrentPasswordCandidate()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.util.Collection selectIdentities(java.lang.Class)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void updateModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair findKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.session.ClientUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,byte[])"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.config.keys.loader.KeyPairResourceParser getKeyPairResourceParser()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void <init>()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.AbstractMap$SimpleImmutableEntry readPrivateKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.io.InputStream validateStreamMagicMarker(java.lang.String,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void registerPrivateKeyEntryDecoder(org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.lang.String)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.security.KeyPair)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.security.Key)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.security.KeyPair)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils$1:boolean canExtractKeyPairs(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils$1:boolean canExtractKeyPairs(java.lang.String,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:boolean canExtractKeyPairs(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.AbstractPrivateKeyObfuscator:byte[] generateInitializationVector(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,boolean)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,boolean)"
        ]
    },
    "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator fromAuthorizedEntries(org.apache.sshd.common.config.keys.PublicKeyEntryResolver,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator resolvePublickeyAuthenticator(java.lang.String,org.apache.sshd.server.session.ServerSession)"
        ]
    },
    "org.apache.sshd.server.config.keys.ServerIdentity:java.util.Map loadIdentities(java.util.Properties,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.ServerIdentity:org.apache.sshd.common.keyprovider.KeyPairProvider loadKeyPairProvider(java.util.Properties,boolean,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKey(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyPair(java.security.KeyPair)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.String combine(char,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.KeyUtils:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:java.util.Collection reloadAuthorizedKeys(java.nio.file.Path,java.lang.String,org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.hostbased.StaticHostBasedAuthenticator:void handleAcceptance(org.apache.sshd.server.session.ServerSession,java.lang.String,java.security.PublicKey,java.lang.String,java.lang.String,java.util.List)",
            "org.apache.sshd.server.auth.hostbased.StaticHostBasedAuthenticator:void handleRejection(org.apache.sshd.server.session.ServerSession,java.lang.String,java.security.PublicKey,java.lang.String,java.lang.String,java.util.List)",
            "org.apache.sshd.server.auth.pubkey.StaticPublickeyAuthenticator:void handleAcceptance(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.auth.pubkey.StaticPublickeyAuthenticator:void handleRejection(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:boolean verifySignature(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.signature.Signature,byte[])",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:void sendPublicKeyResponse(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.security.PublicKey,byte[],int,int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.auth.pubkey.KeySetPublickeyAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession,java.util.Collection)",
            "org.apache.sshd.server.auth.pubkey.CachingPublicKeyAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:void clearLoadedKeys()",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair resolveKeyPair(java.nio.file.Path)",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair loadFromFile(java.lang.String,java.nio.file.Path)",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:void writeKeyPair(java.security.KeyPair,java.nio.file.Path,java.nio.file.OpenOption[])",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.AgentImpl:java.util.Map$Entry getKeyPair(java.util.Collection,java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:java.util.List getIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentProxy:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void addIdentity(java.security.KeyPair,java.lang.String)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void removeIdentity(java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:java.security.interfaces.DSAPublicKey recoverPublicKey(java.security.interfaces.DSAPrivateKey)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHRSAPrivateKeyDecoder:java.security.interfaces.RSAPublicKey recoverPublicKey(java.security.interfaces.RSAPrivateKey)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.security.PublicKey readPublicKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:org.apache.sshd.common.config.keys.AuthorizedKeyEntry parseAuthorizedKeyEntry(java.lang.String)",
            "org.apache.sshd.common.config.keys.IdentityUtils:void lambda$createKeyPairProvider$0(boolean,java.util.Map,java.lang.String,java.security.KeyPair)",
            "org.apache.sshd.common.config.keys.PublicKeyEntry:java.security.PublicKey resolvePublicKey(org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.common.config.keys.PublicKeyEntry:java.lang.Appendable appendPublicKeyEntry(java.lang.Appendable,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.digest.Digest)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry validateStrictKeyFilePermissions(java.nio.file.Path,java.nio.file.LinkOption[])",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.KeyPair generateKeyPair(java.lang.String,int)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.KeyPair cloneKeyPair(java.lang.String,java.security.KeyPair)",
            "org.apache.sshd.common.config.keys.KeyUtils:void registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.lang.String)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.security.KeyPair)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.security.Key)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.digest.DigestFactory getDefaultFingerPrintFactory()",
            "org.apache.sshd.common.config.keys.KeyUtils:void setDefaultFingerPrintFactory(org.apache.sshd.common.digest.DigestFactory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(java.lang.String)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest,java.lang.String)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.digest.Digest,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getKeyType(java.security.KeyPair)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.security.PublicKey[])",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyUtils:boolean compareKeyPairs(java.security.KeyPair,java.security.KeyPair)",
            "org.apache.sshd.common.config.keys.KeyUtils:boolean compareKeys(java.security.PublicKey,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey recoverPublicKey(java.security.PrivateKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:boolean compareKeys(java.security.PrivateKey,java.security.PrivateKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.interfaces.RSAPublicKey recoverRSAPublicKey(java.security.interfaces.RSAPrivateKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.interfaces.RSAPublicKey recoverFromRSAPrivateCrtKey(java.security.interfaces.RSAPrivateCrtKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.interfaces.RSAPublicKey recoverRSAPublicKey(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)",
            "org.apache.sshd.common.config.keys.KeyUtils:boolean compareDSAKeys(java.security.interfaces.DSAPublicKey,java.security.interfaces.DSAPublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:boolean compareDSAKeys(java.security.interfaces.DSAPrivateKey,java.security.interfaces.DSAPrivateKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:boolean compareECKeys(java.security.interfaces.ECPrivateKey,java.security.interfaces.ECPrivateKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:boolean compareECKeys(java.security.interfaces.ECPublicKey,java.security.interfaces.ECPublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:void <clinit>()",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:java.security.KeyPair doLoadKey(java.lang.Object)",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider:boolean lambda$loadKey$0(java.lang.String,java.security.KeyPair)",
            "org.apache.sshd.common.global.AbstractOpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:java.security.KeyPair getClientIdentity()",
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:java.security.KeyPair reloadClientIdentity(java.nio.file.Path)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:boolean isSupported(java.security.KeyPair)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,byte[],java.lang.String,java.lang.String,org.apache.sshd.common.signature.Signature,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.KeyAgentIdentity:java.lang.String toString()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.KeyPairIdentity:byte[] sign(byte[])",
            "org.apache.sshd.client.auth.pubkey.KeyPairIdentity:java.lang.String toString()",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider:int lambda$static$1(java.lang.Object,java.lang.Object)",
            "org.apache.sshd.client.keyverifier.StaticServerKeyVerifier:void handleAcceptance(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.keyverifier.StaticServerKeyVerifier:void handleRejection(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.security.PublicKey resolveHostKey(org.apache.sshd.client.config.hosts.KnownHostEntry,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptKnownHostEntries(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,org.apache.sshd.client.config.hosts.KnownHostEntry)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptUnknownHostKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void handleKnownHostsFileUpdateFailure(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.nio.file.Path,java.util.Collection,java.lang.Throwable)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry updateKnownHostsFile(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.config.hosts.KnownHostEntry,java.security.PublicKey,java.security.PublicKey)",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.AbstractClientSession:void addPasswordIdentity(java.lang.String)",
            "org.apache.sshd.client.session.AbstractClientSession:void addPublicKeyIdentity(java.security.KeyPair)",
            "org.apache.sshd.client.session.AbstractClientSession:void checkKeys()",
            "org.apache.sshd.client.SshClient:void addPasswordIdentity(java.lang.String)",
            "org.apache.sshd.client.SshClient:void addPublicKeyIdentity(java.security.KeyPair)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$getKeyType__68:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.PublicKeyEntry:java.lang.Appendable appendPublicKeyEntry(java.lang.Appendable,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.security.KeyPair)"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.KeySetPublickeyAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.KeySetPublickeyAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.security.PublicKey[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map loadVersionProperties(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.compression.CompressionFactory getCompression(org.apache.sshd.common.PropertyResolver)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureCompression(org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.PropertyResolver,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configure(org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.PropertyResolver,boolean,boolean)"
        ]
    },
    "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureCompression(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.TimeValueConfig:java.util.Map parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromAlgorithm(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromDigest(org.apache.sshd.common.digest.Digest)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.x11.DefaultX11ForwardSupport:java.lang.String createDisplay(boolean,java.lang.String,java.lang.String,int)",
            "org.apache.sshd.server.SshServer:void start()",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:org.apache.sshd.common.future.CloseFuture close(boolean)"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void localPortForwardingCancelled(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory newInstance(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory getIoServiceProvider()"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.ECBufferPublicKeyParser:java.security.interfaces.ECPublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.ECBufferPublicKeyParser:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:java.security.KeyPair getKeyPair()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.signature.SignatureECDSA:boolean verify(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:boolean verifySignature(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.signature.Signature,byte[])",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.security.interfaces.ECPublicKey decodePublicKey(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.security.PublicKey decodePublicKey(java.lang.String,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:java.security.interfaces.ECPrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:java.security.PrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.security.KeyPair generateKeyPair(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.KeyPair generateKeyPair(java.lang.String,int)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:java.security.KeyPair generateKeyPair(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveParameters(java.security.spec.ECParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:void putRawPublicKey(java.security.PublicKey)",
            "org.apache.sshd.common.util.buffer.Buffer:void putKeyPair(java.security.KeyPair)",
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.interfaces.ECPublicKey)",
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.util.AbstractMap$SimpleImmutableEntry decodeECPrivateKeySpec(java.io.InputStream,boolean)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getKeyType(java.security.Key)",
            "org.apache.sshd.common.config.keys.KeyUtils:int getKeySize(java.security.Key)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromECKey(java.security.interfaces.ECKey)",
            "org.apache.sshd.common.kex.ECDH:org.apache.sshd.common.digest.Digest getHash()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.security.spec.ECPrivateKeySpec decodeECPrivateKeySpec(org.apache.sshd.common.util.io.der.DERParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.util.AbstractMap$SimpleImmutableEntry decodeECPrivateKeySpec(java.io.InputStream,boolean)"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves:java.security.spec.ECPoint octetStringToEcPoint(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.ECBufferPublicKeyParser:java.security.interfaces.ECPublicKey getRawECKey(java.lang.String,java.security.spec.ECParameterSpec,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:java.security.KeyPair extractEC(java.lang.String,java.security.spec.ECParameterSpec)",
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.security.interfaces.ECPublicKey decodePublicKey(java.lang.String,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.security.spec.ECPoint decodeECPublicKeyValue(org.apache.sshd.common.cipher.ECCurves,org.apache.sshd.common.util.io.der.DERParser)",
            "org.apache.sshd.common.kex.ECDH:void setF(byte[])"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.kex.KexFactoryManager:void setCipherFactoriesNames(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.lang.String)"
        ]
    },
    "org.apache.sshd.server.session.AbstractServerSession:java.security.KeyPair getHostKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.AbstractDHServerKeyExchange:java.security.PublicKey getServerKey()",
            "org.apache.sshd.server.kex.DHGServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.keyprovider.FileKeyPairProvider:void setPaths(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.FileKeyPairProvider:void setFiles(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue fromString(java.lang.String)",
            "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.server.auth.keyboard.InteractiveChallenge clone()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromEnumName(java.lang.String)",
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.server.session.AbstractServerSession:int getActiveSessionCountForUser(java.lang.String)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.SshServer:java.util.List getActiveSessions()",
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,java.util.Collection)",
            "org.apache.sshd.server.StandardEnvironment:void removeSignalListener(org.apache.sshd.server.SignalListener)",
            "org.apache.sshd.server.StandardEnvironment:void signal(org.apache.sshd.server.Signal)",
            "org.apache.sshd.agent.local.AgentImpl:java.util.Map$Entry getKeyPair(java.util.Collection,java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromTypeValue(int)",
            "org.apache.sshd.common.util.io.IoUtils:boolean isWindowsExecutable(java.lang.String)",
            "org.apache.sshd.common.util.io.IoUtils:java.nio.file.attribute.PosixFilePermission validateExcludedPermissions(java.util.Collection,java.util.Collection)",
            "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Iterable,java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map generateMnemonicMap(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map getAmbiguousMenmonics(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:boolean isKeyTypeSupported(java.lang.String)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:boolean isValidMessageStructure(java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,java.lang.CharSequence)",
            "org.apache.sshd.common.util.GenericUtils:boolean isEmpty(java.util.Iterator)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Set of(java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:boolean containsAny(java.util.Collection,java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:boolean hasNext()",
            "org.apache.sshd.common.util.EventListenerUtils:java.lang.Object lambda$proxyWrapper$1(java.lang.Iterable,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.sshd.common.util.NumberUtils:boolean isPowerOf2(long)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromString(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.util.Collection)",
            "org.apache.sshd.common.file.util.BasePath:boolean isNormal()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath normalize()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath resolve(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.BasePath:java.lang.String asString()",
            "org.apache.sshd.common.file.root.RootedPath:java.io.File toFile()",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:boolean hasNext()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void registerPrivateKeyEntryDecoder(org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:boolean canExtractKeyPairs(java.lang.String,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:int resolveKeyLength(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List resolveAuthorizedKeys(org.apache.sshd.common.config.keys.PublicKeyEntryResolver,java.util.Collection)",
            "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromAlgorithm(java.lang.String)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyType(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.Appendable combine(java.lang.Appendable,char,java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyUtils:void registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map loadVersionProperties(java.lang.Class,java.lang.ClassLoader)",
            "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig fromValueChar(char)",
            "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.util.Map)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromString(java.lang.String)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Service:java.nio.channels.NetworkChannel setSocketOptions(java.nio.channels.NetworkChannel)",
            "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryClass(java.lang.Class)",
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory tryLoad(java.util.ServiceLoader)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromKeyType(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveSize(int)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOIDValue(java.util.List)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOID(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression fromIndicatorValue(int)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromString(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.util.Collection)",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.util.Collection)",
            "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption fromName(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:void resetCacheMap(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean setNextObject()",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)",
            "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result fromName(java.lang.String)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(java.util.Collection)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,java.util.Collection)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromString(java.lang.String)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.util.Collection)",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.util.Collection)",
            "org.apache.sshd.common.forward.LocalForwardingEntry:org.apache.sshd.common.forward.LocalForwardingEntry findMatchingEntry(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.Service getService(java.lang.Class)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer,java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map negotiate()",
            "org.apache.sshd.common.session.helpers.SessionTimeoutListener:void run()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.SyspropsMapWrapper:boolean containsValue(java.lang.Object)",
            "org.apache.sshd.common.SyspropsMapWrapper:java.util.Set entrySet()",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:org.apache.sshd.common.PropertyResolver toPropertyResolver(java.util.Properties)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getBuiltinIdentitiesPaths(java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List findMatchingEntries(java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:boolean isHostMatch(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.Map updateGlobalProperties(java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean updateGlobalIdentities(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperties(java.lang.Appendable,java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyValues(java.lang.Appendable,java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry normalizeEntry(org.apache.sshd.client.config.hosts.HostConfigEntry,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.BufferedReader)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.util.Iterator)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendHostConfigEntries(java.lang.Appendable,java.util.Collection)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String getCurrentPasswordCandidate()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.util.Collection selectIdentities(java.lang.Class)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void updateModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair findKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.session.ClientUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:java.security.KeyPair next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:java.lang.Object next()"
        ]
    },
    "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:void <init>(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:void <init>(java.security.KeyPair[])"
        ]
    },
    "org.apache.sshd.server.channel.PuttyRequestHandler:java.util.Map resolveShellTtyOptions(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.ProcessShell:java.util.Map resolveShellTtyOptions(java.util.Map)"
        ]
    },
    "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(org.apache.sshd.common.channel.PtyMode[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.shell.TtyFilterInputStream:void <init>(java.io.InputStream,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.ProcessShell:void start(org.apache.sshd.server.Environment)"
        ]
    },
    "org.apache.sshd.server.shell.TtyFilterOutputStream:void <init>(java.io.OutputStream,org.apache.sshd.server.shell.TtyFilterInputStream,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.ProcessShell:void start(org.apache.sshd.server.Environment)"
        ]
    },
    "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,org.apache.sshd.common.channel.PtyMode[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.kex.KexFactoryManager:void setMacFactoriesNames(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.kex.KexFactoryManager:void setCompressionFactoriesNames(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void localPortForwardingCancelled(org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.global.CancelTcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress localPortForwardingRequested(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignaller(org.apache.sshd.common.util.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void signalTearingDownExplicitTunnel(org.apache.sshd.common.util.net.SshdSocketAddress,boolean)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void signalTornDownExplicitTunnel(org.apache.sshd.common.util.net.SshdSocketAddress,boolean,java.lang.Throwable)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void signalEstablishedDynamicTunnel(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress,java.lang.Throwable)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void signalEstablishingDynamicTunnel(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void signalTearingDownDynamicTunnel(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void signalTornDownDynamicTunnel(org.apache.sshd.common.util.net.SshdSocketAddress,java.lang.Throwable)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void signalEstablishingExplicitTunnel(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress,boolean)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void signalEstablishedExplicitTunnel(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress,boolean,org.apache.sshd.common.util.net.SshdSocketAddress,java.lang.Throwable)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.util.net.SshdSocketAddress startLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress localPortForwardingRequested(org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.global.TcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.session.ClientUserAuthService getUserAuthService()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientSessionImpl:org.apache.sshd.client.future.AuthFuture auth()"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.session.ConnectionService getConnectionService()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ChannelExec createExecChannel(java.lang.String)",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ChannelSubsystem createSubsystemChannel(java.lang.String)",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ChannelDirectTcpip createDirectTcpipChannel(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.forward.ForwardingFilter getForwardingFilter()",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ChannelShell createShellChannel()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.OptionalFeature$lambda_any_1__45:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.OptionalFeature$lambda_all_0__44:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)"
        ]
    },
    "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:void <init>(java.nio.file.Path,java.util.Collection,boolean,java.util.function.Supplier,java.util.function.Supplier,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:void <init>(java.nio.file.Path,java.util.Collection,boolean,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider,boolean)",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:void <init>(java.nio.file.Path,boolean,java.util.function.Supplier,java.util.function.Supplier,boolean)"
        ]
    },
    "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getDefaultBuiltinIdentitiesPaths(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher:java.util.List getDefaultBuiltinIdentitiesPaths()"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List findMatchingEntries(java.lang.String,org.apache.sshd.client.config.hosts.HostConfigEntry[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.hosts.HostPatternsHolder:boolean isHostMatch(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostEntry:boolean isHostMatch(java.lang.String,int)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List findMatchingEntries(java.lang.String,java.util.Collection)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.lang.CharSequence[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostEntry:org.apache.sshd.client.config.hosts.KnownHostEntry parseKnownHostEntry(org.apache.sshd.client.config.hosts.KnownHostEntry,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:void setHost(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void <init>(java.lang.String,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry normalizeEntry(org.apache.sshd.client.config.hosts.HostConfigEntry,java.lang.String,int,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:void setHost(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.BufferedReader)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean processGlobalValues(org.apache.sshd.client.config.hosts.HostConfigEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.BufferedReader)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable append(java.lang.Appendable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendHostConfigEntries(java.lang.Appendable,java.util.Collection)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyValues(java.lang.Appendable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperty(java.lang.Appendable,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.Reader,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.InputStream,boolean)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry lambda$toHostConfigEntryResolver$0(java.util.Collection,java.lang.String,int,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:void writeHostConfigEntries(java.io.OutputStream,boolean,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void writeHostConfigEntries(java.nio.file.Path,java.util.Collection,java.nio.file.OpenOption[])"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue fromString(java.lang.String)",
            "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.server.auth.keyboard.InteractiveChallenge clone()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromEnumName(java.lang.String)",
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.server.session.AbstractServerSession:int getActiveSessionCountForUser(java.lang.String)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.SshServer:void start()",
            "org.apache.sshd.server.SshServer:java.util.List getActiveSessions()",
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,java.util.Collection)",
            "org.apache.sshd.server.StandardEnvironment:void removeSignalListener(org.apache.sshd.server.SignalListener)",
            "org.apache.sshd.server.StandardEnvironment:void signal(org.apache.sshd.server.Signal)",
            "org.apache.sshd.agent.local.AgentImpl:java.util.Map$Entry getKeyPair(java.util.Collection,java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.security.SecurityUtils:java.security.KeyPair loadKeyPairIdentity(java.lang.String,java.io.InputStream,org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromTypeValue(int)",
            "org.apache.sshd.common.util.io.IoUtils:boolean isWindowsExecutable(java.lang.String)",
            "org.apache.sshd.common.util.io.IoUtils:java.nio.file.attribute.PosixFilePermission validateExcludedPermissions(java.util.Collection,java.util.Collection)",
            "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Iterable,java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map generateMnemonicMap(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map getAmbiguousMenmonics(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:boolean isKeyTypeSupported(java.lang.String)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:boolean isValidMessageStructure(java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,java.lang.CharSequence)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Set of(java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:boolean containsAny(java.util.Collection,java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.util.EventListenerUtils:java.lang.Object lambda$proxyWrapper$1(java.lang.Iterable,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.sshd.common.util.NumberUtils:boolean isPowerOf2(long)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromString(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.util.Collection)",
            "org.apache.sshd.common.file.util.BasePath:boolean isNormal()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath normalize()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath resolve(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.BasePath:java.lang.String asString()",
            "org.apache.sshd.common.file.root.RootedPath:java.io.File toFile()",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:java.nio.file.Path next()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void registerPrivateKeyEntryDecoder(org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:boolean canExtractKeyPairs(java.lang.String,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:int resolveKeyLength(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List resolveAuthorizedKeys(org.apache.sshd.common.config.keys.PublicKeyEntryResolver,java.util.Collection)",
            "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromAlgorithm(java.lang.String)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyType(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.Appendable combine(java.lang.Appendable,char,java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyUtils:void registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map loadVersionProperties(java.lang.Class,java.lang.ClassLoader)",
            "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig fromValueChar(char)",
            "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.util.Map)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromString(java.lang.String)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Service:java.nio.channels.NetworkChannel setSocketOptions(java.nio.channels.NetworkChannel)",
            "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryClass(java.lang.Class)",
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory tryLoad(java.util.ServiceLoader)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromKeyType(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveSize(int)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOIDValue(java.util.List)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOID(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression fromIndicatorValue(int)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromString(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.util.Collection)",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.util.Collection)",
            "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption fromName(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:void resetCacheMap(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean setNextObject()",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)",
            "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result fromName(java.lang.String)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(java.util.Collection)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,java.util.Collection)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromString(java.lang.String)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.util.Collection)",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.util.Collection)",
            "org.apache.sshd.common.forward.LocalForwardingEntry:org.apache.sshd.common.forward.LocalForwardingEntry findMatchingEntry(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.Service getService(java.lang.Class)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer,java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map negotiate()",
            "org.apache.sshd.common.session.helpers.SessionTimeoutListener:void run()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.SyspropsMapWrapper:boolean containsValue(java.lang.Object)",
            "org.apache.sshd.common.SyspropsMapWrapper:java.util.Set entrySet()",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:org.apache.sshd.common.PropertyResolver toPropertyResolver(java.util.Properties)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getBuiltinIdentitiesPaths(java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List findMatchingEntries(java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:boolean isHostMatch(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.Map updateGlobalProperties(java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean updateGlobalIdentities(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperties(java.lang.Appendable,java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyValues(java.lang.Appendable,java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry normalizeEntry(org.apache.sshd.client.config.hosts.HostConfigEntry,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.BufferedReader)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.util.Iterator)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendHostConfigEntries(java.lang.Appendable,java.util.Collection)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:org.apache.sshd.client.auth.pubkey.KeyAgentIdentity next()",
            "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:org.apache.sshd.client.auth.pubkey.KeyPairIdentity next()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:org.apache.sshd.client.auth.pubkey.PublicKeyIdentity next()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String getCurrentPasswordCandidate()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.util.Collection selectIdentities(java.lang.Class)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void updateModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair findKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.session.ClientUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue fromString(java.lang.String)",
            "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.server.auth.keyboard.InteractiveChallenge clone()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromEnumName(java.lang.String)",
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.server.session.AbstractServerSession:int getActiveSessionCountForUser(java.lang.String)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.SshServer:void start()",
            "org.apache.sshd.server.SshServer:java.util.List getActiveSessions()",
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,java.util.Collection)",
            "org.apache.sshd.server.StandardEnvironment:void removeSignalListener(org.apache.sshd.server.SignalListener)",
            "org.apache.sshd.server.StandardEnvironment:void signal(org.apache.sshd.server.Signal)",
            "org.apache.sshd.agent.local.AgentImpl:java.util.Map$Entry getKeyPair(java.util.Collection,java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.security.SecurityUtils:java.security.KeyPair loadKeyPairIdentity(java.lang.String,java.io.InputStream,org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromTypeValue(int)",
            "org.apache.sshd.common.util.io.IoUtils:boolean isWindowsExecutable(java.lang.String)",
            "org.apache.sshd.common.util.io.IoUtils:java.nio.file.attribute.PosixFilePermission validateExcludedPermissions(java.util.Collection,java.util.Collection)",
            "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Iterable,java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map generateMnemonicMap(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map getAmbiguousMenmonics(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:boolean isKeyTypeSupported(java.lang.String)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:boolean isValidMessageStructure(java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,java.lang.CharSequence)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Set of(java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:boolean containsAny(java.util.Collection,java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.util.EventListenerUtils:java.lang.Object lambda$proxyWrapper$1(java.lang.Iterable,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.sshd.common.util.NumberUtils:boolean isPowerOf2(long)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromString(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.util.Collection)",
            "org.apache.sshd.common.file.util.BasePath:boolean isNormal()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath normalize()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath resolve(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.BasePath:java.lang.String asString()",
            "org.apache.sshd.common.file.root.RootedPath:java.io.File toFile()",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:java.nio.file.Path next()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void registerPrivateKeyEntryDecoder(org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:boolean canExtractKeyPairs(java.lang.String,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:int resolveKeyLength(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List resolveAuthorizedKeys(org.apache.sshd.common.config.keys.PublicKeyEntryResolver,java.util.Collection)",
            "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromAlgorithm(java.lang.String)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyType(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.Appendable combine(java.lang.Appendable,char,java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyUtils:void registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map loadVersionProperties(java.lang.Class,java.lang.ClassLoader)",
            "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig fromValueChar(char)",
            "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.util.Map)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromString(java.lang.String)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Service:java.nio.channels.NetworkChannel setSocketOptions(java.nio.channels.NetworkChannel)",
            "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryClass(java.lang.Class)",
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory tryLoad(java.util.ServiceLoader)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromKeyType(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveSize(int)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOIDValue(java.util.List)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOID(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression fromIndicatorValue(int)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromString(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.util.Collection)",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.util.Collection)",
            "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption fromName(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:void resetCacheMap(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean setNextObject()",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)",
            "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result fromName(java.lang.String)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(java.util.Collection)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,java.util.Collection)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromString(java.lang.String)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.util.Collection)",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.util.Collection)",
            "org.apache.sshd.common.forward.LocalForwardingEntry:org.apache.sshd.common.forward.LocalForwardingEntry findMatchingEntry(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.Service getService(java.lang.Class)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer,java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map negotiate()",
            "org.apache.sshd.common.session.helpers.SessionTimeoutListener:void run()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.SyspropsMapWrapper:boolean containsValue(java.lang.Object)",
            "org.apache.sshd.common.SyspropsMapWrapper:java.util.Set entrySet()",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:org.apache.sshd.common.PropertyResolver toPropertyResolver(java.util.Properties)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getBuiltinIdentitiesPaths(java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List findMatchingEntries(java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:boolean isHostMatch(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.Map updateGlobalProperties(java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean updateGlobalIdentities(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperties(java.lang.Appendable,java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyValues(java.lang.Appendable,java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry normalizeEntry(org.apache.sshd.client.config.hosts.HostConfigEntry,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.BufferedReader)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.util.Iterator)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendHostConfigEntries(java.lang.Appendable,java.util.Collection)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:org.apache.sshd.client.auth.pubkey.KeyAgentIdentity next()",
            "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:org.apache.sshd.client.auth.pubkey.KeyPairIdentity next()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:org.apache.sshd.client.auth.pubkey.PublicKeyIdentity next()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String getCurrentPasswordCandidate()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.util.Collection selectIdentities(java.lang.Class)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void updateModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair findKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.session.ClientUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue fromString(java.lang.String)",
            "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.server.auth.keyboard.InteractiveChallenge clone()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromEnumName(java.lang.String)",
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.server.session.AbstractServerSession:int getActiveSessionCountForUser(java.lang.String)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.SshServer:void start()",
            "org.apache.sshd.server.SshServer:java.util.List getActiveSessions()",
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,java.util.Collection)",
            "org.apache.sshd.server.StandardEnvironment:void removeSignalListener(org.apache.sshd.server.SignalListener)",
            "org.apache.sshd.server.StandardEnvironment:void signal(org.apache.sshd.server.Signal)",
            "org.apache.sshd.agent.local.AgentImpl:java.util.Map$Entry getKeyPair(java.util.Collection,java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.security.SecurityUtils:java.security.KeyPair loadKeyPairIdentity(java.lang.String,java.io.InputStream,org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromTypeValue(int)",
            "org.apache.sshd.common.util.io.IoUtils:boolean isWindowsExecutable(java.lang.String)",
            "org.apache.sshd.common.util.io.IoUtils:java.nio.file.attribute.PosixFilePermission validateExcludedPermissions(java.util.Collection,java.util.Collection)",
            "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Iterable,java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map generateMnemonicMap(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map getAmbiguousMenmonics(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:boolean isKeyTypeSupported(java.lang.String)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:boolean isValidMessageStructure(java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,java.lang.CharSequence)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Set of(java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:boolean containsAny(java.util.Collection,java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.util.EventListenerUtils:java.lang.Object lambda$proxyWrapper$1(java.lang.Iterable,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.sshd.common.util.NumberUtils:boolean isPowerOf2(long)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromString(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.util.Collection)",
            "org.apache.sshd.common.file.util.BasePath:boolean isNormal()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath normalize()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath resolve(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.BasePath:java.lang.String asString()",
            "org.apache.sshd.common.file.root.RootedPath:java.io.File toFile()",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:java.nio.file.Path next()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void registerPrivateKeyEntryDecoder(org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:boolean canExtractKeyPairs(java.lang.String,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:int resolveKeyLength(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List resolveAuthorizedKeys(org.apache.sshd.common.config.keys.PublicKeyEntryResolver,java.util.Collection)",
            "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromAlgorithm(java.lang.String)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyType(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.Appendable combine(java.lang.Appendable,char,java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyUtils:void registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map loadVersionProperties(java.lang.Class,java.lang.ClassLoader)",
            "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig fromValueChar(char)",
            "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.util.Map)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromString(java.lang.String)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Service:java.nio.channels.NetworkChannel setSocketOptions(java.nio.channels.NetworkChannel)",
            "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryClass(java.lang.Class)",
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory tryLoad(java.util.ServiceLoader)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromKeyType(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveSize(int)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOIDValue(java.util.List)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOID(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression fromIndicatorValue(int)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromString(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.util.Collection)",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.util.Collection)",
            "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption fromName(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:void resetCacheMap(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean setNextObject()",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)",
            "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result fromName(java.lang.String)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(java.util.Collection)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,java.util.Collection)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromString(java.lang.String)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.util.Collection)",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.util.Collection)",
            "org.apache.sshd.common.forward.LocalForwardingEntry:org.apache.sshd.common.forward.LocalForwardingEntry findMatchingEntry(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.Service getService(java.lang.Class)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer,java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map negotiate()",
            "org.apache.sshd.common.session.helpers.SessionTimeoutListener:void run()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.SyspropsMapWrapper:boolean containsValue(java.lang.Object)",
            "org.apache.sshd.common.SyspropsMapWrapper:java.util.Set entrySet()",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:org.apache.sshd.common.PropertyResolver toPropertyResolver(java.util.Properties)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getBuiltinIdentitiesPaths(java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List findMatchingEntries(java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:boolean isHostMatch(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.Map updateGlobalProperties(java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean updateGlobalIdentities(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperties(java.lang.Appendable,java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyValues(java.lang.Appendable,java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry normalizeEntry(org.apache.sshd.client.config.hosts.HostConfigEntry,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.BufferedReader)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.util.Iterator)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendHostConfigEntries(java.lang.Appendable,java.util.Collection)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:org.apache.sshd.client.auth.pubkey.KeyAgentIdentity next()",
            "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:org.apache.sshd.client.auth.pubkey.KeyPairIdentity next()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:org.apache.sshd.client.auth.pubkey.PublicKeyIdentity next()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String getCurrentPasswordCandidate()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.util.Collection selectIdentities(java.lang.Class)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void updateModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair findKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.session.ClientUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String[] getUserResponses(java.lang.String,java.lang.String,java.lang.String,java.lang.String[],boolean[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.lang.String)"
        ]
    },
    "org.apache.sshd.client.ClientAuthenticationManager:void setUserAuthFactoriesNames(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.lang.Iterable loadKeys()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.keyprovider.KeyIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.keyprovider.KeyIdentityProvider:java.lang.Iterable lambda$static$0(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.keyprovider.KeyIdentityProvider$loadKeys__77:java.lang.Object get()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator$loadKeys__123:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.lang.Iterable loadPasswords()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.password.PasswordIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.client.auth.password.PasswordIdentityProvider)",
            "org.apache.sshd.client.auth.password.PasswordIdentityProvider:java.lang.Iterable lambda$static$0(org.apache.sshd.client.auth.password.PasswordIdentityProvider)",
            "org.apache.sshd.client.auth.password.PasswordIdentityProvider$loadPasswords__102:java.lang.Object get()"
        ]
    },
    "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.lang.Iterable loadIdentities()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.client.keyverifier.DefaultKnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean verifyServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.session.ClientUserAuthServiceFactory:org.apache.sshd.common.Service create(org.apache.sshd.common.session.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.ServiceFactory:org.apache.sshd.common.Service create(java.util.Collection,java.lang.String,org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.session.ClientSessionImpl:void <init>(org.apache.sshd.client.ClientFactoryManager,org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.common.io.AbstractIoWriteFuture:java.lang.Object verify(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.future.VerifiableFuture:java.lang.Object verify()",
            "org.apache.sshd.common.future.VerifiableFuture:java.lang.Object verify(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.sshd.common.future.DefaultKeyExchangeFuture:java.lang.Object verify(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.future.VerifiableFuture:java.lang.Object verify()",
            "org.apache.sshd.common.future.VerifiableFuture:java.lang.Object verify(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.sshd.common.future.AbstractSshFuture:boolean await(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.SshServer:void stop(boolean)",
            "org.apache.sshd.common.io.nio2.Nio2Service:void dispose()",
            "org.apache.sshd.common.future.WaitableFuture:boolean await()",
            "org.apache.sshd.common.future.WaitableFuture:boolean await(long,java.util.concurrent.TimeUnit)",
            "org.apache.sshd.common.Closeable:void close(org.apache.sshd.common.Closeable)",
            "org.apache.sshd.client.SshClient:void stop()"
        ]
    },
    "org.apache.sshd.common.future.WaitableFuture:boolean awaitUninterruptibly()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.future.WaitableFuture:boolean awaitUninterruptibly(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.ChannelAsyncInputStream$IoReadFutureImpl:org.apache.sshd.common.io.IoReadFuture verify(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.ChannelAsyncInputStream$IoReadFutureImpl:java.lang.Object verify(long)"
        ]
    },
    "org.apache.sshd.client.future.DefaultConnectFuture:org.apache.sshd.client.future.ConnectFuture verify(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.future.DefaultConnectFuture:java.lang.Object verify(long)"
        ]
    },
    "org.apache.sshd.client.future.DefaultAuthFuture:java.lang.Object verify(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.future.VerifiableFuture:java.lang.Object verify()",
            "org.apache.sshd.common.future.VerifiableFuture:java.lang.Object verify(long,java.util.concurrent.TimeUnit)",
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession authSession(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.client.future.DefaultOpenFuture:java.lang.Object verify(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void sessionCreated(org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.agent.local.AgentServerProxy:org.apache.sshd.agent.SshAgent createClient()",
            "org.apache.sshd.agent.unix.AgentServerProxy:void lambda$new$0()",
            "org.apache.sshd.common.future.VerifiableFuture:java.lang.Object verify()",
            "org.apache.sshd.common.future.VerifiableFuture:java.lang.Object verify(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map loadDefaultIdentities(java.nio.file.Path,boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentity:org.apache.sshd.common.keyprovider.KeyPairProvider loadDefaultKeyPairProvider(java.nio.file.Path,boolean,boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map loadDefaultIdentities(boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.server.session.SessionFactory:org.apache.sshd.server.session.ServerSessionImpl doCreateSession(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.SessionFactory:org.apache.sshd.common.session.helpers.AbstractSession doCreateSession(org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.common.util.logging.LoggingUtils:void logExceptionStackTrace(org.slf4j.Logger,java.util.logging.Level,java.lang.Throwable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.logging.LoggingUtils:void logExceptionStackTrace(org.slf4j.Logger,java.util.logging.Level,java.lang.Throwable)"
        ]
    },
    "org.apache.sshd.agent.unix.AgentForwardedChannel:void doWriteData(byte[],int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleData(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelPipedInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterInputStream:int read(byte[],int,int)",
            "org.apache.sshd.common.util.io.IoUtils:int read(java.io.InputStream,byte[],int,int)",
            "org.apache.sshd.common.channel.ChannelPipedInputStream:int read()",
            "org.apache.sshd.client.channel.ChannelSession:int securedRead(java.io.InputStream,byte[],int,int)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelDirectTcpip:void doWriteData(byte[],int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleData(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.auth.password.UserAuthPassword:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.AbstractUserAuth:java.lang.Boolean auth(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.auth.AbstractUserAuth:java.lang.Boolean next(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.global.AbstractOpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.util.net.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientSession:org.apache.sshd.client.session.forward.ExplicitPortForwardingTracker createRemotePortForwardingTracker(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.client.session.forward.ExplicitPortForwardingTracker:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:java.io.IOException closeQuietly(java.io.Closeable[])",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void releaseKeys()",
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:void close()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:boolean readIdentification(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.future.KeyExchangeFuture requestNewKeysExchange()",
            "org.apache.sshd.client.session.ClientSessionImpl:void <init>(org.apache.sshd.client.ClientFactoryManager,org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.channel.Channel getChannel(byte,int,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.channel.Channel getChannel(byte,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void setAuthenticated()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.ClientUserAuthService:void processUserAuth(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSessionIoHandler:void sessionCreated(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Connector$1:void onCompleted(java.lang.Void,java.lang.Object)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onCompleted(java.nio.channels.AsynchronousSocketChannel,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.security.KeyPair doGetKeyPair(org.apache.sshd.client.config.keys.ClientIdentityProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher$doGetKeyPair__210:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.SelectorUtils:java.lang.String translateToLocalFileSystemPath(java.lang.String,char,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.SelectorUtils:java.lang.String translateToLocalFileSystemPath(java.lang.String,char,java.nio.file.FileSystem)"
        ]
    },
    "org.apache.sshd.common.util.SelectorUtils:java.lang.String translateToFileSystemPath(java.lang.String,java.lang.String,java.nio.file.FileSystem)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.AbstractUserAuth:java.lang.Boolean auth(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.auth.AbstractUserAuth:java.lang.Boolean next(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.shell.ProcessShell:void setSession(org.apache.sshd.server.session.ServerSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void setSession(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.server.command.Command prepareCommand(java.lang.String,org.apache.sshd.server.command.Command)"
        ]
    },
    "org.apache.sshd.agent.local.AgentForwardedChannel:void doOpen()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.unix.AgentForwardedChannel:void doOpen()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleRandom:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleRandomFactory:org.apache.sshd.common.random.Random create()"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:net.i2p.crypto.eddsa.EdDSAPublicKey recoverEDDSAPublicKey(java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:net.i2p.crypto.eddsa.EdDSAPublicKey recoverPublicKey(net.i2p.crypto.eddsa.EdDSAPrivateKey)",
            "org.apache.sshd.common.util.security.SecurityUtils:java.security.PublicKey recoverEDDSAPublicKey(java.security.PrivateKey)"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.signature.Signature getEDDSASignature()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.signature.Signature getEDDSASigner()"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getEDDSAPublicKeyEntryDecoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getEDDSAPublicKeyEntryDecoder()"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getOpenSSHEDDSAPrivateKeyEntryDecoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getOpenSSHEDDSAPrivateKeyEntryDecoder()"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.util.buffer.Buffer putRawEDDSAPublicKey(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.buffer.Buffer putRawEDDSAPublicKey(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.util.buffer.Buffer putEDDSAKeyPair(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey,java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.buffer.Buffer putEDDSAKeyPair(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey,java.security.PrivateKey)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider createGeneratorHostKeyProvider(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.config.keys.loader.KeyPairResourceParser getBouncycastleKeyPairResourceParser()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.Int2IntFunction:java.util.function.IntUnaryOperator div(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkNotNull(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.String checkNotNullAndNotEmpty(java.lang.String,java.lang.String)",
            "org.apache.sshd.common.util.ValidateUtils:byte[] checkNotNullAndNotEmpty(byte[],java.lang.String)",
            "org.apache.sshd.common.util.ValidateUtils:char[] checkNotNullAndNotEmpty(char[],java.lang.String)",
            "org.apache.sshd.common.util.ValidateUtils:int[] checkNotNullAndNotEmpty(int[],java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:java.lang.String checkNotNullAndNotEmpty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(java.lang.String,java.nio.file.Path,boolean,java.nio.file.LinkOption[])",
            "org.apache.sshd.server.auth.AbstractUserAuth:void <init>(java.lang.String)",
            "org.apache.sshd.server.shell.UnknownCommand:void <init>(java.lang.String)",
            "org.apache.sshd.server.command.AbstractDelegatingCommandFactory:void <init>(java.lang.String)",
            "org.apache.sshd.server.session.AbstractServerSession:void startService(java.lang.String)",
            "org.apache.sshd.server.StandardEnvironment:void set(java.lang.String,java.lang.String)",
            "org.apache.sshd.agent.local.ChannelAgentForwardingFactory:void <init>(java.lang.String)",
            "org.apache.sshd.agent.unix.ChannelAgentForwardingFactory:void <init>(java.lang.String)",
            "org.apache.sshd.common.util.security.SecurityProviderChoice:org.apache.sshd.common.util.security.SecurityProviderChoice toSecurityProviderChoice(java.lang.String)",
            "org.apache.sshd.common.util.security.SecurityUtils:boolean isAPrioriDisabledProvider(java.lang.String)",
            "org.apache.sshd.common.util.security.SecurityUtils:void setAPrioriDisabledProvider(java.lang.String,boolean)",
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.security.SecurityProviderRegistrar getRegisteredProvider(java.lang.String)",
            "org.apache.sshd.common.util.security.AbstractSecurityProviderRegistrar:void <init>(java.lang.String)",
            "org.apache.sshd.common.util.security.SecurityEntityFactory:org.apache.sshd.common.util.security.SecurityEntityFactory toNamedProviderFactory(java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.SelectorUtils:java.lang.String translateToFileSystemPath(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.sshd.common.util.OsUtils:java.lang.String getCurrentUser()",
            "org.apache.sshd.common.util.OsUtils:org.apache.sshd.common.util.VersionInfo getJavaVersion()",
            "org.apache.sshd.common.signature.AbstractSignature:void <init>(java.lang.String)",
            "org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory:void setUserHomeDir(java.lang.String,java.nio.file.Path)",
            "org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory:java.nio.file.Path getUserHomeDir(java.lang.String)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path resolveLocalPath(org.apache.sshd.common.file.root.RootedPath)",
            "org.apache.sshd.common.file.nativefs.NativeFileSystemFactory:void setUsersHomeDir(java.lang.String)",
            "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:void <init>(java.lang.String,java.lang.String,java.util.List,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:void registerPEMResourceParser(org.apache.sshd.common.config.keys.loader.pem.KeyPairPEMResourceParser)",
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.security.PrivateKey decodePEMPrivateKeyPKCS8(java.lang.String,byte[],org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.common.config.keys.loader.AbstractPrivateKeyObfuscator:void <init>(java.lang.String)",
            "org.apache.sshd.common.config.keys.loader.AbstractPrivateKeyObfuscator:byte[] deriveEncryptionKey(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,int)",
            "org.apache.sshd.common.config.keys.loader.AbstractPrivateKeyObfuscator:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,int,byte[],boolean)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser:boolean containsMarkerLine(java.util.List,java.lang.String)",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator registerPrivateKeyObfuscator(java.lang.String,org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator)",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:boolean unregisterPrivateKeyObfuscator(org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator)",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator unregisterPrivateKeyObfuscator(java.lang.String)",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext parseAlgorithmInfo(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,java.lang.String)",
            "org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder:java.security.PrivateKey resolve(java.lang.String,byte[])",
            "org.apache.sshd.common.config.keys.PublicKeyEntryDecoder:java.security.PublicKey resolve(java.lang.String,byte[])",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.lang.String,int,byte[])",
            "org.apache.sshd.common.config.keys.IdentityUtils$LazyDefaultUserHomeFolderHolder:void <clinit>()",
            "org.apache.sshd.common.auth.AbstractUserAuthMethodFactory:void <init>(java.lang.String)",
            "org.apache.sshd.common.auth.AbstractUserAuthServiceFactory:void <init>(java.lang.String)",
            "org.apache.sshd.common.digest.DigestUtils:boolean checkSupported(java.lang.String)",
            "org.apache.sshd.common.digest.BaseDigest:void <init>(java.lang.String,int)",
            "org.apache.sshd.common.cipher.ECCurves:void <init>(java.lang.String,int,java.lang.String,int[],java.security.spec.ECParameterSpec,int,org.apache.sshd.common.digest.DigestFactory)",
            "org.apache.sshd.common.cipher.Cipher:boolean checkSupported(java.lang.String,int)",
            "org.apache.sshd.common.cipher.BaseCipher:void <init>(int,int,java.lang.String,java.lang.String)",
            "org.apache.sshd.common.keyprovider.ClassLoadableResourceKeyPairProvider:void <init>(java.lang.String)",
            "org.apache.sshd.common.keyprovider.ClassLoadableResourceKeyPairProvider:void <init>(java.lang.ClassLoader,java.lang.String)",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:void resetCacheMap(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:java.security.KeyPair doLoadKey(java.lang.Object)",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.compression.BaseCompression:void <init>(java.lang.String)",
            "org.apache.sshd.common.random.AbstractRandomFactory:void <init>(java.lang.String)",
            "org.apache.sshd.common.global.AbstractOpenSshHostKeysHandler:void <init>(java.lang.String,org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)",
            "org.apache.sshd.common.forward.LocalForwardingEntry:void <init>(java.lang.String,java.lang.String,int)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object resolvePropertyValue(java.util.Map,java.lang.String)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object updateProperty(java.util.Map,java.lang.String,java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object resolvePropertyValue(org.apache.sshd.common.PropertyResolver,java.lang.String)",
            "org.apache.sshd.common.PropertyResolverUtils:java.util.Map resolvePropertiesSource(org.apache.sshd.common.PropertyResolver,java.lang.String)",
            "org.apache.sshd.client.config.keys.ClientIdentityLoader$1:java.nio.file.Path toPath(java.lang.String)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:void <init>(java.lang.String,int,java.lang.String,org.apache.sshd.common.Factory)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void addIdentity(java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String getProperty(java.lang.String,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String appendPropertyValue(java.lang.String,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String setProperty(java.lang.String,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String removeProperty(java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable append(java.lang.Appendable)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyValues(java.lang.Appendable,java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String resolveIdentityFilePath(java.lang.String,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.auth.AbstractUserAuth:void <init>(java.lang.String)",
            "org.apache.sshd.client.auth.AbstractUserAuth:void init(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void updateModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.simple.SimpleSessionClient:org.apache.sshd.client.session.ClientSession sessionLogin(java.lang.String,int,java.lang.String,java.lang.String)",
            "org.apache.sshd.client.simple.SimpleSessionClient:org.apache.sshd.client.session.ClientSession sessionLogin(java.lang.String,int,java.lang.String,java.security.KeyPair)",
            "org.apache.sshd.client.channel.ChannelExec:void <init>(java.lang.String)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void <init>(java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void <init>(java.lang.String)",
            "org.apache.sshd.client.session.ClientUserAuthService:org.apache.sshd.client.future.AuthFuture auth(java.lang.String)",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.net.SocketAddress)",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(org.apache.sshd.client.config.hosts.HostConfigEntry)"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:byte[] checkNotNullAndNotEmpty(byte[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.gss.UserAuthGSS:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.common.kex.dh.AbstractDHKeyExchange:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.common.session.helpers.AbstractSession:void setClientKexData(byte[])",
            "org.apache.sshd.common.session.helpers.AbstractSession:void setServerKexData(byte[])"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:char[] checkNotNullAndNotEmpty(char[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.ValidateUtils:int[] checkNotNullAndNotEmpty(int[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.ECCurves:void <init>(java.lang.String,int,java.lang.String,int[],java.security.spec.ECParameterSpec,int,org.apache.sshd.common.digest.DigestFactory)"
        ]
    },
    "org.apache.sshd.common.util.SshdEventListener:org.apache.sshd.common.util.SshdEventListener validateListener(org.apache.sshd.common.util.SshdEventListener,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.SignalListener:org.apache.sshd.server.SignalListener validateListener(org.apache.sshd.server.SignalListener)",
            "org.apache.sshd.common.channel.ChannelListener:org.apache.sshd.common.channel.ChannelListener validateListener(org.apache.sshd.common.channel.ChannelListener)",
            "org.apache.sshd.common.forward.PortForwardingEventListener:org.apache.sshd.common.forward.PortForwardingEventListener validateListener(org.apache.sshd.common.forward.PortForwardingEventListener)",
            "org.apache.sshd.common.session.SessionListener:org.apache.sshd.common.session.SessionListener validateListener(org.apache.sshd.common.session.SessionListener)"
        ]
    },
    "org.apache.sshd.common.signature.SignatureRSA:boolean verify(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:boolean verifySignature(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.signature.Signature,byte[])",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.AbstractPrivateKeyObfuscator:java.lang.Appendable appendPrivateKeyEncryptionContext(java.lang.Appendable,org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.loader.AbstractPrivateKeyObfuscator:byte[] deriveEncryptionKey(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.DESPrivateKeyObfuscator:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,boolean)",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,boolean)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.AbstractPrivateKeyObfuscator:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,int,byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.DESPrivateKeyObfuscator:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,boolean)",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,boolean)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:void addPasswordIdentity(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession authSession(org.apache.sshd.client.future.ConnectFuture,java.lang.String)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:java.lang.String resolveAvailableSignaturesProposal()"
        ]
    },
    "org.apache.sshd.client.SshClient:void addPasswordIdentity(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.shell.InvertedShellWrapper:void <init>(org.apache.sshd.server.shell.InvertedShell,java.util.concurrent.Executor,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void <init>(org.apache.sshd.server.shell.InvertedShell,int)"
        ]
    },
    "org.apache.sshd.server.shell.InvertedShellWrapper:void setSession(org.apache.sshd.server.session.ServerSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.server.command.Command prepareCommand(java.lang.String,org.apache.sshd.server.command.Command)"
        ]
    },
    "org.apache.sshd.agent.local.AgentForwardedChannel:void doWriteData(byte[],int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleData(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.unix.ChannelAgentForwarding:void doWriteData(byte[],int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleData(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.global.TcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.global.CancelTcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:void <init>(int)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:org.apache.sshd.common.util.net.SshdSocketAddress toSshdSocketAddress(java.net.SocketAddress)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:void <clinit>()",
            "org.apache.sshd.common.forward.LocalForwardingEntry:void <init>(org.apache.sshd.common.util.net.SshdSocketAddress,java.net.InetSocketAddress)",
            "org.apache.sshd.common.forward.LocalForwardingEntry:void <init>(java.lang.String,java.lang.String,int)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress localPortForwardingRequested(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.SocksProxy$Socks4:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.forward.SocksProxy$Socks5:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.ChannelDirectTcpip:void <init>(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleRandom:int random(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.common.random.SingletonRandomFactory:int random(int)",
            "org.apache.sshd.common.session.helpers.AbstractSession:int resolveIgnoreBufferDataLength()",
            "org.apache.sshd.common.session.helpers.AbstractSession:long calculateNextIgnorePacketCount(org.apache.sshd.common.random.Random,long,int)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:int getMaxDHGroupExchangeKeySize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.common.util.security.SecurityUtils:boolean isDHGroupExchangeSupported()",
            "org.apache.sshd.common.util.security.SecurityUtils:boolean isDHOakelyGroupSupported(int)",
            "org.apache.sshd.client.kex.DHGEXClient:void <init>(org.apache.sshd.common.kex.DHFactory)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:boolean isDHGroupExchangeSupported(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:int getMaxDHGroupExchangeKeySize()"
        ]
    },
    "org.apache.sshd.common.util.io.der.DERWriter:void writeLength(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.der.DERWriter:void writeBigInteger(byte[],int,int)",
            "org.apache.sshd.common.util.io.der.DERWriter:void writeObject(byte,int,byte[])",
            "org.apache.sshd.common.signature.SignatureDSA:boolean verify(byte[])",
            "org.apache.sshd.common.signature.SignatureECDSA:boolean verify(byte[])"
        ]
    },
    "org.apache.sshd.common.util.buffer.ByteArrayBuffer:void putRawBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:void sendPublicKeyResponse(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.security.PublicKey,byte[],int,int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.shell.TtyFilterInputStream:int read(byte[],int,int)",
            "org.apache.sshd.server.channel.ChannelSession:void doWriteData(byte[],int,long)",
            "org.apache.sshd.common.util.buffer.Buffer:void putByte(byte)",
            "org.apache.sshd.common.util.buffer.Buffer:void putShort(int)",
            "org.apache.sshd.common.util.buffer.Buffer:void putInt(long)",
            "org.apache.sshd.common.util.buffer.Buffer:void putLong(long)",
            "org.apache.sshd.common.util.buffer.Buffer:void putBytes(byte[],int,int)",
            "org.apache.sshd.common.util.buffer.Buffer:void putRawBytes(byte[])",
            "org.apache.sshd.common.channel.ChannelOutputStream:void write(byte[],int,int)",
            "org.apache.sshd.common.channel.ChannelOutputStream:void flush()",
            "org.apache.sshd.common.channel.ChannelPipedInputStream:void receive(byte[],int,int)",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void doWriteIfPossible(boolean)",
            "org.apache.sshd.common.compression.CompressionZlib:void compress(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.compression.CompressionZlib:void uncompress(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.buffer.ByteArrayBuffer:void ensureCapacity(int,java.util.function.IntUnaryOperator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:void ensureCapacity(int)"
        ]
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:byte[] decodeHex(char,java.lang.CharSequence,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.BufferUtils:byte[] decodeHex(char,java.lang.CharSequence)"
        ]
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:int updateLengthPlaceholder(org.apache.sshd.common.util.buffer.Buffer,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:long validateInt32Value(long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:void putInt(long)"
        ]
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:long validateUint32Value(long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.Window:void init(long,long,org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.common.channel.Window:void consume(long)",
            "org.apache.sshd.common.channel.Window:void check(long)"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkInstanceOf(java.lang.Object,java.lang.Class,java.lang.String,long)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer validateTargetBuffer(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkInstanceOf(java.lang.Object,java.lang.Class,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void handleChannelRegistrationFailure(org.apache.sshd.common.channel.Channel,int)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.lang.String,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.digest.Digest)"
        ]
    },
    "org.apache.sshd.common.digest.BaseDigest:void <init>(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.Digest create()"
        ]
    },
    "org.apache.sshd.common.channel.Window:void init(long,long,org.apache.sshd.common.PropertyResolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.AbstractServerChannel:org.apache.sshd.client.future.OpenFuture open(int,long,long,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.Window:void init(org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.Window:void expand(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.Window:void waitForCondition(java.util.function.Predicate,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.Window:void waitAndConsume(long,long)",
            "org.apache.sshd.common.channel.Window:long waitForSpace(long)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelOutputStream:void <init>(org.apache.sshd.common.channel.AbstractChannel,org.apache.sshd.common.channel.Window,long,org.slf4j.Logger,byte,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.ChannelOutputStream:void <init>(org.apache.sshd.common.channel.AbstractChannel,org.apache.sshd.common.channel.Window,org.slf4j.Logger,byte,boolean)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer validateTargetBuffer(int,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer prepareBuffer(byte,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:void init(org.apache.sshd.client.session.ClientSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientUserAuthService:void tryNext(int)"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:void setConnectTimeout(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:void <init>(long,long)"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:void setAuthenticationTimeout(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:void <init>(long,long)"
        ]
    },
    "org.apache.sshd.server.config.keys.ServerIdentity:java.util.Map findIdentities(java.util.Properties,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.ServerIdentity:java.util.Map loadIdentities(java.util.Properties,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.server.SshServer:void checkConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.SshServer:void start()"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.SignatureEd25519:boolean verify(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:boolean verifySignature(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.signature.Signature,byte[])",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.RSABufferPublicKeyParser:java.security.interfaces.RSAPublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.RSABufferPublicKeyParser:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.ED25519BufferPublicKeyParser:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getRawPublicKey(org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.DSSBufferPublicKeyParser:java.security.interfaces.DSAPublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.DSSBufferPublicKeyParser:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:long validateInt32Value(long,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:long validateUint32Value(long,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.Window:void waitAndConsume(long,long)",
            "org.apache.sshd.common.channel.Window:void updateSize(long)"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.kex.DHGServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.AgentImpl:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:java.security.KeyPair loadKeyPair(java.lang.String,java.io.InputStream,org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.util.buffer.Buffer putRawEDDSAPublicKey(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey)",
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean registerSecurityProvider(org.apache.sshd.common.util.security.SecurityProviderRegistrar)",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.String checkNotNullAndNotEmpty(java.lang.String,java.lang.String,java.lang.Object)",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkInstanceOf(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object)",
            "org.apache.sshd.common.util.OsUtils:org.apache.sshd.common.util.VersionInfo getJavaVersion()",
            "org.apache.sshd.common.signature.SignatureECDSA:boolean verify(byte[])",
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.digest.DigestFactory getDefaultFingerPrintFactory()",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Connector:org.apache.sshd.common.io.IoConnectFuture connect(java.net.SocketAddress)",
            "org.apache.sshd.common.cipher.ECCurves:void <init>(java.lang.String,int,java.lang.String,int[],java.security.spec.ECParameterSpec,int,org.apache.sshd.common.digest.DigestFactory)",
            "org.apache.sshd.common.kex.ECDH:void <init>(java.lang.String)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void receiveNewKeys()",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.future.KeyExchangeFuture reExchangeKeys()",
            "org.apache.sshd.common.session.helpers.AbstractSessionIoHandler:void sessionCreated(org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.forward.ForwardingFilter getForwardingFilter()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.server.x11.X11ForwardSupport getX11ForwardSupport()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.agent.common.AgentForwardSupport getAgentForwardSupport()",
            "org.apache.sshd.client.config.hosts.KnownHostEntry:org.apache.sshd.client.config.hosts.KnownHostEntry parseKnownHostEntry(org.apache.sshd.client.config.hosts.KnownHostEntry,java.lang.String)",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:org.apache.sshd.client.config.hosts.KnownHostHashValue parse(java.lang.String,org.apache.sshd.client.config.hosts.KnownHostHashValue)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.util.Collection)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.KeyPairIdentity:byte[] sign(byte[])",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.security.PublicKey resolveHostKey(org.apache.sshd.client.config.hosts.KnownHostEntry,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.ClientSessionImpl:org.apache.sshd.client.future.AuthFuture auth()"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:java.lang.String checkNotNullAndNotEmpty(java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:java.security.KeyPair loadKeyPair(java.lang.String,java.io.InputStream,org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean registerSecurityProvider(org.apache.sshd.common.util.security.SecurityProviderRegistrar)"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkInstanceOf(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.AbstractDHServerKeyExchange:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.server.session.ServerConnectionServiceFactory:org.apache.sshd.common.Service create(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.agent.local.ProxyAgentFactory:org.apache.sshd.agent.SshAgentServer createServer(org.apache.sshd.common.session.ConnectionService)",
            "org.apache.sshd.agent.unix.UnixAgentFactory:org.apache.sshd.agent.SshAgentServer createServer(org.apache.sshd.common.session.ConnectionService)",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.util.buffer.Buffer putRawEDDSAPublicKey(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey)",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.util.buffer.Buffer putEDDSAKeyPair(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey,java.security.PrivateKey)",
            "org.apache.sshd.common.kex.dh.AbstractDHKeyExchange:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.client.kex.AbstractDHClientKeyExchange:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.client.session.ClientUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.session.ClientConnectionServiceFactory:org.apache.sshd.common.Service create(org.apache.sshd.common.session.Session)"
        ]
    },
    "org.apache.sshd.common.util.VersionInfo:org.apache.sshd.common.util.VersionInfo parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.OsUtils:org.apache.sshd.common.util.VersionInfo getJavaVersion()"
        ]
    },
    "org.apache.sshd.common.util.EventListenerUtils:org.apache.sshd.common.util.SshdEventListener proxyWrapper(java.lang.Class,java.lang.ClassLoader,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.EventListenerUtils:org.apache.sshd.common.util.SshdEventListener proxyWrapper(java.lang.Class,java.lang.Iterable)",
            "org.apache.sshd.common.channel.AbstractChannel:void <init>(java.lang.String,boolean,java.util.Collection)",
            "org.apache.sshd.common.helpers.AbstractFactoryManager:void <init>()",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void <init>(org.apache.sshd.common.session.ConnectionService)",
            "org.apache.sshd.common.forward.DefaultForwarderFactory:void <init>()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void <init>(org.apache.sshd.common.session.helpers.AbstractSession)",
            "org.apache.sshd.common.session.AbstractConnectionServiceFactory:void <init>()"
        ]
    },
    "org.apache.sshd.common.signature.SignatureDSA:boolean verify(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:boolean verifySignature(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.signature.Signature,byte[])",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures:void registerExtension(org.apache.sshd.common.signature.SignatureFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path resolveLocalPath(org.apache.sshd.common.file.root.RootedPath)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path unroot(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext parseAlgorithmInfo(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext parseAlgorithmInfo(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:org.apache.sshd.common.config.keys.AuthorizedKeyEntry parseAuthorizedKeyEntry(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List readAuthorizedKeys(java.io.BufferedReader)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:org.apache.sshd.common.config.keys.AuthorizedKeyEntry parseAuthorizedKeyEntry(java.lang.String)",
            "org.apache.sshd.client.config.hosts.KnownHostEntry:org.apache.sshd.client.config.hosts.KnownHostEntry parseKnownHostEntry(org.apache.sshd.client.config.hosts.KnownHostEntry,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.digest.DigestFactory getDefaultFingerPrintFactory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers:void registerExtension(org.apache.sshd.common.cipher.CipherFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories:void registerExtension(org.apache.sshd.common.kex.DHFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.AbstractChannel:java.util.Date addPendingRequest(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.ChannelShell:void doOpen()",
            "org.apache.sshd.client.channel.ChannelExec:void doOpen()",
            "org.apache.sshd.client.channel.ChannelSubsystem:void doOpen()"
        ]
    },
    "org.apache.sshd.common.mac.BuiltinMacs:void registerExtension(org.apache.sshd.common.mac.MacFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.compression.BuiltinCompressions:void registerExtension(org.apache.sshd.common.compression.CompressionFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.hosts.KnownHostEntry:org.apache.sshd.client.config.hosts.KnownHostEntry parseKnownHostEntry(org.apache.sshd.client.config.hosts.KnownHostEntry,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostEntry:org.apache.sshd.client.config.hosts.KnownHostEntry parseKnownHostEntry(java.lang.String)"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostHashValue:org.apache.sshd.client.config.hosts.KnownHostHashValue parse(java.lang.String,org.apache.sshd.client.config.hosts.KnownHostHashValue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:org.apache.sshd.client.config.hosts.KnownHostHashValue parse(java.lang.String)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostPatternsHolder:org.apache.sshd.client.config.hosts.HostPatternValue toPattern(java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.util.Collection)"
        ]
    },
    "org.apache.sshd.client.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.global.AbstractOpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:long validateInt32Value(long,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:long validateUint32Value(long,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkNotNull(java.lang.Object,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.forward.TcpForwardingFilter resolveTcpForwardingFilter(org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.String checkNotNullAndNotEmpty(java.lang.String,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:java.util.Map checkNotNullAndNotEmpty(java.util.Map,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:java.util.Collection checkNotNullAndNotEmpty(java.util.Collection,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Iterable checkNotNullAndNotEmpty(java.lang.Iterable,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:byte[] checkNotNullAndNotEmpty(byte[],java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:char[] checkNotNullAndNotEmpty(char[],java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:int[] checkNotNullAndNotEmpty(int[],java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Object[] checkNotNullAndNotEmpty(java.lang.Object[],java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkInstanceOf(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:java.lang.String checkNotNullAndNotEmpty(java.lang.String,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.ValidateUtils:java.util.Map checkNotNullAndNotEmpty(java.util.Map,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:void <init>(java.util.Map)"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:java.util.Collection checkNotNullAndNotEmpty(java.util.Collection,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.shell.ProcessShellFactory:void <init>(java.util.List)",
            "org.apache.sshd.server.shell.ProcessShellFactory:void setCommand(java.util.List)",
            "org.apache.sshd.server.shell.ProcessShell:void <init>(java.util.Collection)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.ServerAuthenticationManager:void setUserAuthFactoriesNames(java.util.Collection)",
            "org.apache.sshd.server.SshServer:void checkConfig()",
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,java.util.Collection)",
            "org.apache.sshd.common.util.buffer.keys.AbstractBufferPublicKeyParser:void <init>(java.lang.Class,java.util.Collection)",
            "org.apache.sshd.common.signature.SignatureFactoriesManager:void setSignatureFactoriesNames(java.util.Collection)",
            "org.apache.sshd.common.config.keys.impl.AbstractIdentityResourceLoader:void <init>(java.lang.Class,java.lang.Class,java.util.Collection)",
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.security.PrivateKey decodePEMPrivateKeyPKCS8(java.util.List,byte[],org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void registerPrivateKeyEntryDecoder(org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:void <init>(java.util.List,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser:org.apache.sshd.common.config.keys.loader.KeyPairResourceParser aggregate(java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyUtils:void registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureCiphers(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureSignatures(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureMacs(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureKeyExchanges(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,java.util.function.Function,boolean)",
            "org.apache.sshd.common.kex.KexFactoryManager:void setCipherFactoriesNames(java.util.Collection)",
            "org.apache.sshd.common.kex.KexFactoryManager:void setCompressionFactoriesNames(java.util.Collection)",
            "org.apache.sshd.common.kex.KexFactoryManager:void setMacFactoriesNames(java.util.Collection)",
            "org.apache.sshd.common.helpers.AbstractFactoryManager:void checkConfig()",
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map createProposal(java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void setHost(java.util.Collection)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.KeyPairIdentity:void <init>(org.apache.sshd.common.signature.SignatureFactoriesManager,org.apache.sshd.common.signature.SignatureFactoriesManager,java.security.KeyPair)",
            "org.apache.sshd.client.session.ClientUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.ClientAuthenticationManager:void setUserAuthFactoriesNames(java.util.Collection)",
            "org.apache.sshd.client.SshClient:void setUserAuthFactories(java.util.List)",
            "org.apache.sshd.client.SshClient:void checkConfig()"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:java.lang.Iterable checkNotNullAndNotEmpty(java.lang.Iterable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.ValidateUtils:byte[] checkNotNullAndNotEmpty(byte[],java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.ValidateUtils:char[] checkNotNullAndNotEmpty(char[],java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.ValidateUtils:int[] checkNotNullAndNotEmpty(int[],java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.ValidateUtils:java.lang.Object[] checkNotNullAndNotEmpty(java.lang.Object[],java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,org.apache.sshd.server.Signal[])",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser:org.apache.sshd.common.config.keys.loader.KeyPairResourceParser aggregate(org.apache.sshd.common.config.keys.loader.KeyPairResourceParser[])"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkInstanceOf(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkInstanceOf(java.lang.Object,java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:void <init>(java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:void <init>()",
            "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:void <init>(java.lang.String,java.lang.String,java.util.List,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void <init>()"
        ]
    },
    "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureCiphers(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureCiphers(org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.PropertyResolver,boolean,boolean)"
        ]
    },
    "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureSignatures(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureSignatures(org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.PropertyResolver,boolean,boolean)"
        ]
    },
    "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureMacs(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureMacs(org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.PropertyResolver,boolean,boolean)"
        ]
    },
    "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureKeyExchanges(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,java.util.function.Function,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureKeyExchanges(org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.PropertyResolver,boolean,java.util.function.Function,boolean)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry$lambda_toHostConfigEntryResolver_0__118:org.apache.sshd.client.config.hosts.HostConfigEntry resolveEffectiveHost(java.lang.String,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.ConfigFileHostEntryResolver:org.apache.sshd.client.config.hosts.HostConfigEntry resolveEffectiveHost(java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.lang.String,int)",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.forward.ForwardingFilter resolveServerForwarding(org.apache.sshd.common.PropertyResolver)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.auth.WelcomeBannerPhase:org.apache.sshd.server.auth.WelcomeBannerPhase[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel$2:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.Signal:org.apache.sshd.server.Signal[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.io.der.ASN1Object:org.apache.sshd.common.util.io.der.ASN1Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.der.ASN1Object:java.lang.Object clone()"
        ]
    },
    "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.der.ASN1Class:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.der.ASN1Object$1:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.io.IoUtils:byte[] getEOLBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry updateKnownHostsFile(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.nio.file.Path,java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.util.io.IoUtils:java.nio.file.LinkOption[] getLinkOptions(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(java.io.File,boolean)",
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(java.lang.String,java.io.File,boolean)",
            "org.apache.sshd.server.config.keys.ServerIdentity:org.apache.sshd.server.SshServer setKeyPairProvider(org.apache.sshd.server.SshServer,java.util.Properties,boolean)",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair loadFromFile(java.lang.String,java.nio.file.Path)",
            "org.apache.sshd.common.util.io.ModifiableFileWatcher:void <init>(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path ensureDirectory(java.nio.file.Path)",
            "org.apache.sshd.client.config.hosts.DefaultConfigFileHostEntryResolver:void <init>(java.io.File,boolean)",
            "org.apache.sshd.client.keyverifier.DefaultKnownHostsServerKeyVerifier:void <init>(org.apache.sshd.client.keyverifier.ServerKeyVerifier,boolean)",
            "org.apache.sshd.client.keyverifier.DefaultKnownHostsServerKeyVerifier:void <init>(org.apache.sshd.client.keyverifier.ServerKeyVerifier,boolean,java.io.File)"
        ]
    },
    "org.apache.sshd.common.util.io.ModifiableFileWatcher:void <init>(java.nio.file.Path,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:void <init>(java.nio.file.Path,java.nio.file.LinkOption[])",
            "org.apache.sshd.common.util.io.ModifiableFileWatcher:void <init>(java.nio.file.Path)",
            "org.apache.sshd.client.config.hosts.ConfigFileHostEntryResolver:void <init>(java.nio.file.Path,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void <init>(org.apache.sshd.client.keyverifier.ServerKeyVerifier,java.nio.file.Path,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.util.closeable.AbstractCloseable$State:org.apache.sshd.common.util.closeable.AbstractCloseable$State[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.DESPrivateKeyObfuscator:org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext resolveEffectiveContext(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:java.lang.Object clone()"
        ]
    },
    "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.cipher.Cipher$Mode:org.apache.sshd.common.cipher.Cipher$Mode[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.kex.DHGroupData:byte[] getOakleyGroupPrimeValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.DHGroupData:byte[] getP15()",
            "org.apache.sshd.common.kex.DHGroupData:byte[] getP16()",
            "org.apache.sshd.common.kex.DHGroupData:byte[] getP17()",
            "org.apache.sshd.common.kex.DHGroupData:byte[] getP18()"
        ]
    },
    "org.apache.sshd.common.kex.KexState:org.apache.sshd.common.kex.KexState[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.AbstractChannel$GracefulState:org.apache.sshd.common.channel.AbstractChannel$GracefulState[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.PtyMode:org.apache.sshd.common.channel.PtyMode[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.SttySupport:java.util.Map parsePtyModes(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.compression.Compression$Type:org.apache.sshd.common.compression.Compression$Type[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.forward.TcpipClientChannel$Type:org.apache.sshd.common.forward.TcpipClientChannel$Type[] values()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.TcpipClientChannel$1:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:byte[] getSessionId()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.gss.UserAuthGSS:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:boolean verifySignature(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.signature.Signature,byte[])",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,byte[],java.lang.String,java.lang.String,org.apache.sshd.common.signature.Signature,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void receiveNewKeys()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:byte[] getClientKexData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void setClientKexData(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:void receiveKexInit(java.util.Map,byte[])",
            "org.apache.sshd.client.session.AbstractClientSession:void setKexSeed(byte[])"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:byte[] getServerKexData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void setServerKexData(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:void setKexSeed(byte[])",
            "org.apache.sshd.client.session.AbstractClientSession:void receiveKexInit(java.util.Map,byte[])"
        ]
    },
    "org.apache.sshd.common.session.Session$TimeoutStatus:org.apache.sshd.common.session.Session$TimeoutStatus[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.SessionListener$Event:org.apache.sshd.common.session.SessionListener$Event[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.client.config.hosts.KnownHostDigest[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.channel.ClientChannelEvent:org.apache.sshd.client.channel.ClientChannelEvent[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.channel.ClientChannel$Streaming:org.apache.sshd.client.channel.ClientChannel$Streaming[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.session.ClientSession$ClientSessionEvent:org.apache.sshd.client.session.ClientSession$ClientSessionEvent[] values()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.ServiceFactory:org.apache.sshd.common.Service create(java.util.Collection,java.lang.String,org.apache.sshd.common.session.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:void startService(java.lang.String)"
        ]
    },
    "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair readKeyPair(java.nio.file.Path,java.nio.file.OpenOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair loadFromFile(java.lang.String,java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:java.security.KeyPair doLoadKey(java.lang.String,java.lang.Object,org.apache.sshd.common.config.keys.FilePasswordProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:java.security.KeyPair doLoadKey(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.io.der.ASN1Object:void <init>(byte,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.der.DERParser:org.apache.sshd.common.util.io.der.ASN1Object readObject()"
        ]
    },
    "org.apache.sshd.common.util.io.IoUtils:java.util.Set getPermissionsFromFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:java.util.Set getPermissions(java.nio.file.Path,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.client.config.hosts.DefaultConfigFileHostEntryResolver:java.util.List reloadHostConfigEntries(java.nio.file.Path,java.lang.String,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.ConfigFileHostEntryResolver:org.apache.sshd.client.config.hosts.HostConfigEntryResolver resolveEffectiveResolver(java.lang.String,int,java.lang.String)"
        ]
    },
    "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:java.util.Collection reloadAuthorizedKeys(java.nio.file.Path,java.lang.String,org.apache.sshd.server.session.ServerSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator resolvePublickeyAuthenticator(java.lang.String,org.apache.sshd.server.session.ServerSession)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityProviderChoice:java.security.Provider createProviderInstance(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.AbstractSecurityProviderRegistrar:java.security.Provider createProviderInstance(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:void register()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:boolean isBouncyCastleRegistered()",
            "org.apache.sshd.common.util.security.SecurityUtils:boolean isEDDSACurveSupported()",
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.security.SecurityEntityFactory createSecurityEntityFactory(java.lang.Class,java.util.function.Predicate)"
        ]
    },
    "org.apache.sshd.agent.SshAgentConstants:java.lang.String getCommandMessageName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AbstractAgentProxy:java.util.List getIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentProxy:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void addIdentity(java.security.KeyPair,java.lang.String)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void removeIdentity(java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void removeAllIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.SshAgentConstants$LazyMessagesMapHolder:java.util.Map access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.SshAgentConstants:java.lang.String getCommandMessageName(int)"
        ]
    },
    "org.apache.sshd.agent.SshAgentConstants$LazyMessagesMapHolder$lambda_static_0__183:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean lambda$findSecurityProviderRegistrarBySecurityEntity$0(java.util.function.Predicate,org.apache.sshd.common.util.security.SecurityProviderRegistrar)",
            "org.apache.sshd.common.util.logging.LoggingUtils:boolean lambda$getMnemonicFields$2(java.util.function.Predicate,java.lang.reflect.Field)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.channel.Window:void waitForCondition(java.util.function.Predicate,long)"
        ]
    },
    "org.apache.sshd.common.kex.KeyExchange:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.kex.KeyExchange:java.lang.String getGroupKexOpcodeName(int)",
            "org.apache.sshd.common.kex.KeyExchange:java.lang.String getSimpleKexOpcodeName(int)",
            "org.apache.sshd.common.kex.KeyExchange:void <clinit>()",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.SshConstants$LazyReasonsMapHolder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.SshConstants$LazyReasonsMapHolder:java.util.Map access$200()",
            "org.apache.sshd.common.SshConstants$LazyReasonsMapHolder:void <clinit>()",
            "org.apache.sshd.common.SshConstants:java.lang.String getDisconnectReasonName(int)"
        ]
    },
    "org.apache.sshd.common.SshConstants$LazyOpenCodesMapHolder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.SshConstants:java.lang.String getOpenErrorCodeName(int)",
            "org.apache.sshd.common.SshConstants$LazyOpenCodesMapHolder:java.util.Map access$300()",
            "org.apache.sshd.common.SshConstants$LazyOpenCodesMapHolder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.SshConstants$LazyMessagesMapHolder:java.util.Map access$100()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.SshConstants:java.lang.String getCommandMessageName(int)"
        ]
    },
    "org.apache.sshd.common.SshConstants:java.lang.String getCommandMessageName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.gss.UserAuthGSS:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractive:java.lang.Boolean doValidateAuthResponse(org.apache.sshd.server.session.ServerSession,java.lang.String,org.apache.sshd.server.auth.keyboard.KeyboardInteractiveAuthenticator,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleWriteDataSuccess(byte,byte[],int,int)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleWriteDataFailure(byte,byte[],int,int,java.lang.Throwable)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationInProgress(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.kex.KeyExchange:java.lang.String getGroupKexOpcodeName(int)",
            "org.apache.sshd.common.kex.KeyExchange:java.lang.String getSimpleKexOpcodeName(int)",
            "org.apache.sshd.common.channel.ChannelOutputStream:void flush()",
            "org.apache.sshd.common.channel.ChannelOutputStream:java.lang.String toString()",
            "org.apache.sshd.common.channel.AbstractChannel:long validateIncomingDataSize(int,long)",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void <init>(org.apache.sshd.common.channel.Channel,byte)",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void doWriteIfPossible(boolean)",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:java.lang.String toString()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:boolean handleFirstKexPacketFollows(int,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void validateKexState(int,org.apache.sshd.common.kex.KexState)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture writePacket(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer encode(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.DefaultUnknownChannelReferenceHandler:org.apache.sshd.common.channel.Channel handleUnknownChannelCommand(org.apache.sshd.common.session.ConnectionService,byte,int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.DefaultUnknownChannelReferenceHandler:org.apache.sshd.common.io.IoWriteFuture sendFailureResponse(org.apache.sshd.common.session.ConnectionService,byte,int)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.channel.Channel getChannel(byte,int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String getAuthCommandName(int)",
            "org.apache.sshd.client.session.ClientUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.ClientUserAuthService:void processUserAuth(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.SshConstants$LazyMessagesMapHolder$lambda_static_0__72:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean lambda$findSecurityProviderRegistrarBySecurityEntity$0(java.util.function.Predicate,org.apache.sshd.common.util.security.SecurityProviderRegistrar)",
            "org.apache.sshd.common.util.logging.LoggingUtils:boolean lambda$getMnemonicFields$2(java.util.function.Predicate,java.lang.reflect.Field)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.channel.Window:void waitForCondition(java.util.function.Predicate,long)"
        ]
    },
    "org.apache.sshd.common.SshConstants$LazyAmbiguousOpcodesHolder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.SshConstants:java.util.Set getAmbiguousOpcodes()",
            "org.apache.sshd.common.SshConstants$LazyAmbiguousOpcodesHolder:java.util.Set access$000()",
            "org.apache.sshd.common.SshConstants$LazyAmbiguousOpcodesHolder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getPublicKey(org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getPublicKey()",
            "org.apache.sshd.common.global.AbstractOpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getRawPublicKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void handleIgnore(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void handleUnimplemented(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void handleDebug(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.Invoker$lambda_wrapAll_0__88:java.lang.Object invoke(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.channel.AbstractChannel:void invokeChannelSignaller(org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void invokeSessionSignaller(org.apache.sshd.common.util.Invoker)"
        ]
    },
    "org.apache.sshd.common.util.Invoker$lambda_wrapFirst_1__89:java.lang.Object invoke(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.channel.AbstractChannel:void invokeChannelSignaller(org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void invokeSessionSignaller(org.apache.sshd.common.util.Invoker)"
        ]
    },
    "org.apache.sshd.server.shell.ProcessShellFactory:java.util.List resolveEffectiveCommand(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.ProcessShellFactory:org.apache.sshd.server.shell.InvertedShell createInvertedShell()"
        ]
    },
    "org.apache.sshd.server.shell.ProcessShell:void <init>(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.ProcessShellFactory:org.apache.sshd.server.shell.InvertedShell createInvertedShell()",
            "org.apache.sshd.server.shell.ProcessShell:void <init>(java.lang.String[])"
        ]
    },
    "org.apache.sshd.server.shell.ProcessShell:void start(org.apache.sshd.server.Environment)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.lang.Object[],char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:java.lang.String toString()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.security.PrivateKey decodePEMPrivateKeyPKCS8(java.util.List,byte[],org.apache.sshd.common.config.keys.FilePasswordProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser:java.lang.String joinDataLines(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser:byte[] extractDataBytes(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.config.ListParseResult:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.NamedResourceListParseResult:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String resolveWelcomeBanner(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.common.PropertyResolverUtils:long toLong(java.lang.Object,long)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long toLong(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:int toInteger(java.lang.Object,int)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer toInteger(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean toBoolean(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset toCharset(java.lang.Object)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.common.config.NamedFactoriesListParseResult:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String resolveWelcomeBanner(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.common.PropertyResolverUtils:long toLong(java.lang.Object,long)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long toLong(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:int toInteger(java.lang.Object,int)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer toInteger(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean toBoolean(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset toCharset(java.lang.Object)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.common.NamedResource:java.lang.String getNames(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.ServerAuthenticationManager:java.lang.String getUserAuthFactoriesNameList()",
            "org.apache.sshd.common.signature.SignatureFactoriesManager:java.lang.String getSignatureFactoriesNameList()",
            "org.apache.sshd.common.config.NamedResourceListParseResult:java.lang.String toString()",
            "org.apache.sshd.common.config.NamedFactoriesListParseResult:java.lang.String toString()",
            "org.apache.sshd.common.kex.KexFactoryManager:java.lang.String getCipherFactoriesNameList()",
            "org.apache.sshd.common.kex.KexFactoryManager:java.lang.String getCompressionFactoriesNameList()",
            "org.apache.sshd.common.kex.KexFactoryManager:java.lang.String getMacFactoriesNameList()",
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map createProposal(java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.KeyPairIdentity:java.lang.String toString()",
            "org.apache.sshd.client.session.AbstractClientSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.client.ClientAuthenticationManager:java.lang.String getUserAuthFactoriesNameList()"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.lang.Object[],java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:org.apache.sshd.common.io.IoWriteFuture sendServerIdentification(java.lang.String[])"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult getSignatures(org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureSignatures(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.sshd.common.file.nativefs.NativeFileSystemFactory:java.nio.file.FileSystem createFileSystem(org.apache.sshd.common.session.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.server.command.Command prepareCommand(java.lang.String,org.apache.sshd.server.command.Command)"
        ]
    },
    "org.apache.sshd.common.config.keys.IdentityUtils$LazyDefaultUserHomeFolderHolder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.IdentityUtils:java.nio.file.Path getUserHomeFolder()",
            "org.apache.sshd.common.config.keys.IdentityUtils$LazyDefaultUserHomeFolderHolder:java.nio.file.Path access$000()",
            "org.apache.sshd.common.config.keys.IdentityUtils$LazyDefaultUserHomeFolderHolder:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentityLoader$1:java.nio.file.Path toPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentityLoader$1:boolean isValidLocation(java.lang.String)",
            "org.apache.sshd.client.config.keys.ClientIdentityLoader$1:java.security.KeyPair loadClientIdentity(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:void addIdentity(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void addIdentity(java.io.File)"
        ]
    },
    "org.apache.sshd.common.file.util.BasePath:java.nio.file.Path resolve(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator$LazyDefaultAuthorizedKeysFileHolder:void <clinit>()",
            "org.apache.sshd.common.file.root.RootedPath:java.io.File toFile()",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path resolveLocalPath(org.apache.sshd.common.file.root.RootedPath)",
            "org.apache.sshd.common.config.keys.PublicKeyEntry$LazyDefaultKeysFolderHolder:void <clinit>()",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getBuiltinIdentitiesPaths(java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry$LazyDefaultConfigFileHolder:void <clinit>()",
            "org.apache.sshd.client.config.hosts.KnownHostEntry$LazyDefaultConfigFileHolder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.file.util.BasePath:java.nio.file.Path resolveSibling(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.file.util.BasePath:java.io.File toFile()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.file.util.BasePath:java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[],java.nio.file.WatchEvent$Modifier[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.util.BasePath:java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[])"
        ]
    },
    "org.apache.sshd.common.file.util.BasePath:java.nio.file.Path toAbsolutePath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:void setPath(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path uriToPath(java.net.URI)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path resolveLocalPath(org.apache.sshd.common.file.root.RootedPath)",
            "org.apache.sshd.common.file.nativefs.NativeFileSystemFactory:java.nio.file.FileSystem createFileSystem(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.common.config.keys.IdentityUtils$LazyDefaultUserHomeFolderHolder:void <clinit>()",
            "org.apache.sshd.common.keyprovider.FileKeyPairProvider:java.security.KeyPair doLoadKey(java.nio.file.Path)",
            "org.apache.sshd.client.config.keys.ClientIdentityLoader$1:java.nio.file.Path toPath(java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void addIdentity(java.nio.file.Path)",
            "org.apache.sshd.common.keyprovider.FileKeyPairProvider$toAbsolutePath__204:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedPath:org.apache.sshd.common.file.root.RootedPath toRealPath(java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedPath:java.nio.file.Path toRealPath(java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.file.util.BaseFileSystem:boolean lambda$getPathMatcher$0(java.util.regex.Pattern,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.file.util.MockPath:boolean startsWith(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path resolveLocalPath(org.apache.sshd.common.file.root.RootedPath)"
        ]
    },
    "org.apache.sshd.common.file.util.MockPath:boolean endsWith(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.file.util.MockPath:java.nio.file.Path resolve(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.file.util.MockPath:java.nio.file.Path resolveSibling(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.file.util.MockPath:int compareTo(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.util.MockPath:int compareTo(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path root(org.apache.sshd.common.file.root.RootedFileSystem,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path readSymbolicLink(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:java.nio.file.Path next()"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystem:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String resolveWelcomeBanner(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.common.PropertyResolverUtils:long toLong(java.lang.Object,long)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long toLong(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:int toInteger(java.lang.Object,int)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer toInteger(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean toBoolean(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset toCharset(java.lang.Object)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.KeyPairResourceLoader:java.util.Collection loadKeyPairs(java.nio.file.Path,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.charset.Charset,java.nio.file.OpenOption[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.PropertyResolverUtils:long toLong(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolverUtils:long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)",
            "org.apache.sshd.common.PropertyResolverUtils:long getLongProperty(java.util.Map,java.lang.String,long)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long toLong(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long getLong(org.apache.sshd.common.PropertyResolver,java.lang.String)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long getLong(java.util.Map,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:int toInteger(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolverUtils:int getIntProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,int)",
            "org.apache.sshd.common.PropertyResolverUtils:int getIntProperty(java.util.Map,java.lang.String,int)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer toInteger(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer getInteger(org.apache.sshd.common.PropertyResolver,java.lang.String)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer getInteger(java.util.Map,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean toBoolean(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolverUtils:boolean toBoolean(java.lang.Object,boolean)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean getBoolean(org.apache.sshd.common.PropertyResolver,java.lang.String)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean getBoolean(java.util.Map,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset toCharset(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset getCharset(org.apache.sshd.common.PropertyResolver,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset getCharset(java.util.Map,java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.StringBuilder appendUserHome(java.lang.StringBuilder,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.StringBuilder appendUserHome(java.lang.StringBuilder)"
        ]
    },
    "org.apache.sshd.common.util.io.FileInfoExtractor$getPermissions__195:java.lang.Object infoOf(java.nio.file.Path,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path getPath(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.config.keys.loader.KeyPairResourceParser getKeyPairResourceParser()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:java.security.KeyPair loadKeyPairIdentity(java.lang.String,java.io.InputStream,org.apache.sshd.common.config.keys.FilePasswordProvider)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.AbstractMap$SimpleImmutableEntry readPrivateKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.io.InputStream validateStreamMagicMarker(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.AbstractMap$SimpleImmutableEntry readPrivateKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)"
        ]
    },
    "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator resolvePublickeyAuthenticator(java.lang.String,org.apache.sshd.server.session.ServerSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)"
        ]
    },
    "org.apache.sshd.server.config.keys.ServerIdentity:org.apache.sshd.common.keyprovider.KeyPairProvider loadKeyPairProvider(java.util.Properties,boolean,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.ServerIdentity:org.apache.sshd.server.SshServer setKeyPairProvider(org.apache.sshd.server.SshServer,java.util.Properties,boolean)"
        ]
    },
    "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyPair(java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.IdentityUtils:void lambda$createKeyPairProvider$0(boolean,java.util.Map,java.lang.String,java.security.KeyPair)",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:boolean isSupported(java.security.KeyPair)"
        ]
    },
    "org.apache.sshd.server.auth.hostbased.StaticHostBasedAuthenticator:void handleAcceptance(org.apache.sshd.server.session.ServerSession,java.lang.String,java.security.PublicKey,java.lang.String,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.StaticHostBasedAuthenticator:boolean authenticate(org.apache.sshd.server.session.ServerSession,java.lang.String,java.security.PublicKey,java.lang.String,java.lang.String,java.util.List)"
        ]
    },
    "org.apache.sshd.server.auth.hostbased.StaticHostBasedAuthenticator:void handleRejection(org.apache.sshd.server.session.ServerSession,java.lang.String,java.security.PublicKey,java.lang.String,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.StaticHostBasedAuthenticator:boolean authenticate(org.apache.sshd.server.session.ServerSession,java.lang.String,java.security.PublicKey,java.lang.String,java.lang.String,java.util.List)"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.StaticPublickeyAuthenticator:void handleAcceptance(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.StaticPublickeyAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.StaticPublickeyAuthenticator:void handleRejection(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:boolean verifySignature(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.signature.Signature,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.CachingPublicKeyAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.CachingPublicKeyAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)"
        ]
    },
    "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:void clearLoadedKeys()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair loadFromFile(java.lang.String,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair resolveKeyPair(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:java.security.interfaces.DSAPublicKey recoverPublicKey(java.security.interfaces.DSAPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:java.security.PublicKey recoverPublicKey(java.security.PrivateKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHRSAPrivateKeyDecoder:java.security.interfaces.RSAPublicKey recoverPublicKey(java.security.interfaces.RSAPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHRSAPrivateKeyDecoder:java.security.PublicKey recoverPublicKey(java.security.PrivateKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.security.PublicKey readPublicKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.IdentityUtils:void lambda$createKeyPairProvider$0(boolean,java.util.Map,java.lang.String,java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.PublicKeyEntry:java.security.PublicKey resolvePublicKey(org.apache.sshd.common.config.keys.PublicKeyEntryResolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List resolveAuthorizedKeys(org.apache.sshd.common.config.keys.PublicKeyEntryResolver,java.util.Collection)",
            "org.apache.sshd.common.config.keys.PublicKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.security.PublicKey resolveHostKey(org.apache.sshd.client.config.hosts.KnownHostEntry,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.digest.Digest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.security.KeyPair generateKeyPair(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.security.KeyPair cloneKeyPair(java.lang.String,java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.security.PublicKey readPublicKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:org.apache.sshd.common.config.keys.AuthorizedKeyEntry parseAuthorizedKeyEntry(java.lang.String)",
            "org.apache.sshd.common.config.keys.PublicKeyEntry:java.security.PublicKey resolvePublicKey(org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.KeyPair generateKeyPair(java.lang.String,int)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.KeyPair cloneKeyPair(java.lang.String,java.security.KeyPair)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.KeyUtils:void setDefaultFingerPrintFactory(org.apache.sshd.common.digest.DigestFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.hostbased.StaticHostBasedAuthenticator:void handleAcceptance(org.apache.sshd.server.session.ServerSession,java.lang.String,java.security.PublicKey,java.lang.String,java.lang.String,java.util.List)",
            "org.apache.sshd.server.auth.hostbased.StaticHostBasedAuthenticator:void handleRejection(org.apache.sshd.server.session.ServerSession,java.lang.String,java.security.PublicKey,java.lang.String,java.lang.String,java.util.List)",
            "org.apache.sshd.server.auth.pubkey.StaticPublickeyAuthenticator:void handleAcceptance(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.auth.pubkey.StaticPublickeyAuthenticator:void handleRejection(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:boolean verifySignature(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.signature.Signature,byte[])",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:void sendPublicKeyResponse(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.security.PublicKey,byte[],int,int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.auth.pubkey.CachingPublicKeyAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:void clearLoadedKeys()",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair resolveKeyPair(java.nio.file.Path)",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair loadFromFile(java.lang.String,java.nio.file.Path)",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:void writeKeyPair(java.security.KeyPair,java.nio.file.Path,java.nio.file.OpenOption[])",
            "org.apache.sshd.agent.common.AbstractAgentProxy:java.util.List getIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentProxy:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void addIdentity(java.security.KeyPair,java.lang.String)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void removeIdentity(java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:java.security.KeyPair doLoadKey(java.lang.Object)",
            "org.apache.sshd.common.global.AbstractOpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:java.security.KeyPair reloadClientIdentity(java.nio.file.Path)",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:boolean isSupported(java.security.KeyPair)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,byte[],java.lang.String,java.lang.String,org.apache.sshd.common.signature.Signature,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.KeyAgentIdentity:java.lang.String toString()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.KeyPairIdentity:java.lang.String toString()",
            "org.apache.sshd.client.keyverifier.StaticServerKeyVerifier:void handleAcceptance(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.keyverifier.StaticServerKeyVerifier:void handleRejection(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.security.PublicKey resolveHostKey(org.apache.sshd.client.config.hosts.KnownHostEntry,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,org.apache.sshd.client.config.hosts.KnownHostEntry)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptUnknownHostKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void handleKnownHostsFileUpdateFailure(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.nio.file.Path,java.util.Collection,java.lang.Throwable)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry updateKnownHostsFile(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.config.hosts.KnownHostEntry,java.security.PublicKey,java.security.PublicKey)",
            "org.apache.sshd.client.session.AbstractClientSession:void addPublicKeyIdentity(java.security.KeyPair)",
            "org.apache.sshd.client.session.AbstractClientSession:void checkKeys()",
            "org.apache.sshd.client.SshClient:void addPublicKeyIdentity(java.security.KeyPair)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.AbstractClientSession:void addPasswordIdentity(java.lang.String)",
            "org.apache.sshd.client.SshClient:void addPasswordIdentity(java.lang.String)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.digest.Digest,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.digest.Digest,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getKeyType(java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:void writeKeyPair(java.security.KeyPair,java.nio.file.Path,java.nio.file.OpenOption[])",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void addIdentity(java.security.KeyPair,java.lang.String)",
            "org.apache.sshd.common.config.keys.IdentityUtils:void lambda$createKeyPairProvider$0(boolean,java.util.Map,java.lang.String,java.security.KeyPair)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider:boolean lambda$loadKey$0(java.lang.String,java.security.KeyPair)",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:boolean isSupported(java.security.KeyPair)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$getKeyType__68:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:boolean compareKeyPairs(java.security.KeyPair,java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:java.security.KeyPair getClientIdentity()",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider:int lambda$static$1(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:boolean compareKeys(java.security.PublicKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.AgentImpl:java.util.Map$Entry getKeyPair(java.util.Collection,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyUtils:boolean compareKeyPairs(java.security.KeyPair,java.security.KeyPair)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptKnownHostEntries(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey recoverPublicKey(java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:boolean compareKeys(java.security.PrivateKey,java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:boolean compareKeyPairs(java.security.KeyPair,java.security.KeyPair)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.security.interfaces.RSAPublicKey recoverRSAPublicKey(java.security.interfaces.RSAPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHRSAPrivateKeyDecoder:java.security.interfaces.RSAPublicKey recoverPublicKey(java.security.interfaces.RSAPrivateKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey recoverPublicKey(java.security.PrivateKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.security.interfaces.RSAPublicKey recoverFromRSAPrivateCrtKey(java.security.interfaces.RSAPrivateCrtKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.interfaces.RSAPublicKey recoverRSAPublicKey(java.security.interfaces.RSAPrivateKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.security.interfaces.RSAPublicKey recoverRSAPublicKey(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.interfaces.RSAPublicKey recoverFromRSAPrivateCrtKey(java.security.interfaces.RSAPrivateCrtKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:boolean compareDSAKeys(java.security.interfaces.DSAPublicKey,java.security.interfaces.DSAPublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:boolean compareKeys(java.security.PublicKey,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:boolean compareDSAKeys(java.security.interfaces.DSAPrivateKey,java.security.interfaces.DSAPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:boolean compareKeys(java.security.PrivateKey,java.security.PrivateKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:boolean compareECKeys(java.security.interfaces.ECPrivateKey,java.security.interfaces.ECPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:boolean compareKeys(java.security.PrivateKey,java.security.PrivateKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:boolean compareECKeys(java.security.interfaces.ECPublicKey,java.security.interfaces.ECPublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:boolean compareKeys(java.security.PublicKey,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:java.security.KeyPair doLoadKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean setNextObject()",
            "org.apache.sshd.common.keyprovider.FileKeyPairProvider:java.security.KeyPair doLoadKey(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.keyprovider.KeyPairProvider:boolean lambda$loadKey$0(java.lang.String,java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.KeyPairProvider$lambda_loadKey_0__67:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:boolean isSupported(java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher$isSupported__220:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,byte[],java.lang.String,java.lang.String,org.apache.sshd.common.signature.Signature,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.KeyAgentIdentity:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String resolveWelcomeBanner(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.common.PropertyResolverUtils:long toLong(java.lang.Object,long)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long toLong(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:int toInteger(java.lang.Object,int)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer toInteger(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean toBoolean(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset toCharset(java.lang.Object)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.KeyPairIdentity:byte[] sign(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.KeyPairIdentity:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String resolveWelcomeBanner(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.common.PropertyResolverUtils:long toLong(java.lang.Object,long)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long toLong(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:int toInteger(java.lang.Object,int)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer toInteger(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean toBoolean(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset toCharset(java.lang.Object)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider:int lambda$static$1(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$lambda_static_1__86:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.keyverifier.StaticServerKeyVerifier:void handleAcceptance(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.StaticServerKeyVerifier:boolean verifyServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.keyverifier.StaticServerKeyVerifier:void handleRejection(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.StaticServerKeyVerifier:boolean verifyServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.security.PublicKey resolveHostKey(org.apache.sshd.client.config.hosts.KnownHostEntry,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void handleKnownHostsFileUpdateFailure(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.nio.file.Path,java.util.Collection,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptUnknownHostKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.config.hosts.KnownHostEntry,java.security.PublicKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptKnownHostEntries(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.config.hosts.KnownHostEntry,java.security.PublicKey,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexMessage(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:void addPublicKeyIdentity(java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession authSession(org.apache.sshd.client.future.ConnectFuture,java.security.KeyPair)",
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.client.SshClient:void addPublicKeyIdentity(java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.keyprovider.KeyPairProvider$getKeyType__68:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.KeySetPublickeyAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.CachingPublicKeyAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)"
        ]
    },
    "org.apache.sshd.common.config.VersionProperties$LazyHolder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map loadVersionProperties(java.lang.Class)",
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map access$000()",
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:void <clinit>()",
            "org.apache.sshd.common.config.VersionProperties:java.util.Map getVersionProperties()"
        ]
    },
    "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configure(org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.PropertyResolver,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.SshServer configure(org.apache.sshd.server.SshServer,org.apache.sshd.common.PropertyResolver,boolean,boolean)",
            "org.apache.sshd.client.config.SshClientConfigFileReader:org.apache.sshd.client.SshClient configure(org.apache.sshd.client.SshClient,org.apache.sshd.common.PropertyResolver,boolean,boolean)"
        ]
    },
    "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromDigest(org.apache.sshd.common.digest.Digest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.client.session.AbstractClientSession:void stopLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory getIoServiceProvider()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactory create(org.apache.sshd.common.FactoryManager)"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.ECBufferPublicKeyParser:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getRawPublicKey(org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.security.PublicKey decodePublicKey(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.security.PublicKey readPublicKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.PublicKeyEntryDecoder:java.security.PublicKey decodePublicKey(java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:java.security.PrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.AbstractMap$SimpleImmutableEntry readPrivateKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder:java.security.PrivateKey decodePrivateKey(org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putRawPublicKey(java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:void putPublicKey(java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.digest.Digest,java.security.PublicKey)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putKeyPair(java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AbstractAgentProxy:void addIdentity(java.security.KeyPair,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.util.AbstractMap$SimpleImmutableEntry decodeECPrivateKeySpec(java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getKeyType(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.StaticHostBasedAuthenticator:void handleAcceptance(org.apache.sshd.server.session.ServerSession,java.lang.String,java.security.PublicKey,java.lang.String,java.lang.String,java.util.List)",
            "org.apache.sshd.server.auth.hostbased.StaticHostBasedAuthenticator:void handleRejection(org.apache.sshd.server.session.ServerSession,java.lang.String,java.security.PublicKey,java.lang.String,java.lang.String,java.util.List)",
            "org.apache.sshd.server.auth.pubkey.CachingPublicKeyAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:void clearLoadedKeys()",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair resolveKeyPair(java.nio.file.Path)",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair loadFromFile(java.lang.String,java.nio.file.Path)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:java.util.List getIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentProxy:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void removeIdentity(java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getKeyType(java.security.KeyPair)",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:java.security.KeyPair doLoadKey(java.lang.Object)",
            "org.apache.sshd.common.global.AbstractOpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:java.security.KeyPair reloadClientIdentity(java.nio.file.Path)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.KeyAgentIdentity:java.lang.String toString()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.KeyPairIdentity:byte[] sign(byte[])",
            "org.apache.sshd.client.auth.pubkey.KeyPairIdentity:java.lang.String toString()",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.security.PublicKey resolveHostKey(org.apache.sshd.client.config.hosts.KnownHostEntry,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,org.apache.sshd.client.config.hosts.KnownHostEntry)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void handleKnownHostsFileUpdateFailure(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.nio.file.Path,java.util.Collection,java.lang.Throwable)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.config.hosts.KnownHostEntry,java.security.PublicKey,java.security.PublicKey)",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.AbstractClientSession:void addPublicKeyIdentity(java.security.KeyPair)",
            "org.apache.sshd.client.session.AbstractClientSession:void checkKeys()"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:int getKeySize(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.digest.Digest)"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromECKey(java.security.interfaces.ECKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:java.security.interfaces.ECPublicKey recoverPublicKey(java.security.interfaces.ECPrivateKey)"
        ]
    },
    "org.apache.sshd.common.kex.ECDH:org.apache.sshd.common.digest.Digest getHash()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.client.kex.DHGClient:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.ECBufferPublicKeyParser:java.security.interfaces.ECPublicKey getRawECKey(java.lang.String,java.security.spec.ECParameterSpec,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.ECBufferPublicKeyParser:java.security.interfaces.ECPublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:java.security.KeyPair extractEC(java.lang.String,java.security.spec.ECParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:java.security.KeyPair getKeyPair()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.security.spec.ECPoint decodeECPublicKeyValue(org.apache.sshd.common.cipher.ECCurves,org.apache.sshd.common.util.io.der.DERParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.util.AbstractMap$SimpleImmutableEntry decodeECPrivateKeySpec(java.io.InputStream,boolean)"
        ]
    },
    "org.apache.sshd.common.kex.ECDH:void setF(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult getCiphers(org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureCiphers(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult getKexFactories(org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureKeyExchanges(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,java.util.function.Function,boolean)"
        ]
    },
    "org.apache.sshd.server.kex.AbstractDHServerKeyExchange:java.security.PublicKey getServerKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.AbstractClientSession:void checkKeys()"
        ]
    },
    "org.apache.sshd.common.keyprovider.FileKeyPairProvider:void setFiles(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.GenericUtils:boolean isEmpty(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.GenericUtils:boolean isEmpty(java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:boolean isNotEmpty(java.util.Iterator)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils$1:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue fromString(java.lang.String)",
            "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.server.auth.keyboard.InteractiveChallenge clone()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromEnumName(java.lang.String)",
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.server.session.AbstractServerSession:int getActiveSessionCountForUser(java.lang.String)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.SshServer:java.util.List getActiveSessions()",
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,java.util.Collection)",
            "org.apache.sshd.server.StandardEnvironment:void removeSignalListener(org.apache.sshd.server.SignalListener)",
            "org.apache.sshd.server.StandardEnvironment:void signal(org.apache.sshd.server.Signal)",
            "org.apache.sshd.agent.local.AgentImpl:java.util.Map$Entry getKeyPair(java.util.Collection,java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromTypeValue(int)",
            "org.apache.sshd.common.util.io.IoUtils:boolean isWindowsExecutable(java.lang.String)",
            "org.apache.sshd.common.util.io.IoUtils:java.nio.file.attribute.PosixFilePermission validateExcludedPermissions(java.util.Collection,java.util.Collection)",
            "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Iterable,java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map generateMnemonicMap(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map getAmbiguousMenmonics(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:boolean isKeyTypeSupported(java.lang.String)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:boolean isValidMessageStructure(java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,java.lang.CharSequence)",
            "org.apache.sshd.common.util.GenericUtils:boolean isEmpty(java.util.Iterator)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Set of(java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:boolean containsAny(java.util.Collection,java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:boolean hasNext()",
            "org.apache.sshd.common.util.EventListenerUtils:java.lang.Object lambda$proxyWrapper$1(java.lang.Iterable,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.sshd.common.util.NumberUtils:boolean isPowerOf2(long)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromString(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.util.Collection)",
            "org.apache.sshd.common.file.util.BasePath:boolean isNormal()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath normalize()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath resolve(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.BasePath:java.lang.String asString()",
            "org.apache.sshd.common.file.root.RootedPath:java.io.File toFile()",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:boolean hasNext()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void registerPrivateKeyEntryDecoder(org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:boolean canExtractKeyPairs(java.lang.String,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:int resolveKeyLength(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List resolveAuthorizedKeys(org.apache.sshd.common.config.keys.PublicKeyEntryResolver,java.util.Collection)",
            "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromAlgorithm(java.lang.String)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyType(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.Appendable combine(java.lang.Appendable,char,java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyUtils:void registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map loadVersionProperties(java.lang.Class,java.lang.ClassLoader)",
            "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig fromValueChar(char)",
            "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.util.Map)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromString(java.lang.String)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Service:java.nio.channels.NetworkChannel setSocketOptions(java.nio.channels.NetworkChannel)",
            "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryClass(java.lang.Class)",
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory tryLoad(java.util.ServiceLoader)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromKeyType(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveSize(int)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOIDValue(java.util.List)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOID(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression fromIndicatorValue(int)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromString(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.util.Collection)",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.util.Collection)",
            "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption fromName(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:void resetCacheMap(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean setNextObject()",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)",
            "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result fromName(java.lang.String)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(java.util.Collection)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,java.util.Collection)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromString(java.lang.String)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.util.Collection)",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.util.Collection)",
            "org.apache.sshd.common.forward.LocalForwardingEntry:org.apache.sshd.common.forward.LocalForwardingEntry findMatchingEntry(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.Service getService(java.lang.Class)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer,java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map negotiate()",
            "org.apache.sshd.common.session.helpers.SessionTimeoutListener:void run()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.SyspropsMapWrapper:boolean containsValue(java.lang.Object)",
            "org.apache.sshd.common.SyspropsMapWrapper:java.util.Set entrySet()",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:org.apache.sshd.common.PropertyResolver toPropertyResolver(java.util.Properties)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getBuiltinIdentitiesPaths(java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List findMatchingEntries(java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:boolean isHostMatch(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.Map updateGlobalProperties(java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean updateGlobalIdentities(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperties(java.lang.Appendable,java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyValues(java.lang.Appendable,java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry normalizeEntry(org.apache.sshd.client.config.hosts.HostConfigEntry,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.BufferedReader)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.util.Iterator)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendHostConfigEntries(java.lang.Appendable,java.util.Collection)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String getCurrentPasswordCandidate()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.util.Collection selectIdentities(java.lang.Class)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void updateModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair findKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.session.ClientUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue fromString(java.lang.String)",
            "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.server.auth.keyboard.InteractiveChallenge clone()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromEnumName(java.lang.String)",
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.server.session.AbstractServerSession:int getActiveSessionCountForUser(java.lang.String)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.SshServer:java.util.List getActiveSessions()",
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,java.util.Collection)",
            "org.apache.sshd.server.StandardEnvironment:void removeSignalListener(org.apache.sshd.server.SignalListener)",
            "org.apache.sshd.server.StandardEnvironment:void signal(org.apache.sshd.server.Signal)",
            "org.apache.sshd.agent.local.AgentImpl:java.util.Map$Entry getKeyPair(java.util.Collection,java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromTypeValue(int)",
            "org.apache.sshd.common.util.io.IoUtils:boolean isWindowsExecutable(java.lang.String)",
            "org.apache.sshd.common.util.io.IoUtils:java.nio.file.attribute.PosixFilePermission validateExcludedPermissions(java.util.Collection,java.util.Collection)",
            "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Iterable,java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map generateMnemonicMap(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map getAmbiguousMenmonics(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:boolean isKeyTypeSupported(java.lang.String)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:boolean isValidMessageStructure(java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,java.lang.CharSequence)",
            "org.apache.sshd.common.util.GenericUtils:boolean isEmpty(java.util.Iterator)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Set of(java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:boolean containsAny(java.util.Collection,java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:boolean hasNext()",
            "org.apache.sshd.common.util.EventListenerUtils:java.lang.Object lambda$proxyWrapper$1(java.lang.Iterable,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.sshd.common.util.NumberUtils:boolean isPowerOf2(long)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromString(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.util.Collection)",
            "org.apache.sshd.common.file.util.BasePath:boolean isNormal()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath normalize()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath resolve(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.BasePath:java.lang.String asString()",
            "org.apache.sshd.common.file.root.RootedPath:java.io.File toFile()",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:boolean hasNext()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void registerPrivateKeyEntryDecoder(org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:boolean canExtractKeyPairs(java.lang.String,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:int resolveKeyLength(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List resolveAuthorizedKeys(org.apache.sshd.common.config.keys.PublicKeyEntryResolver,java.util.Collection)",
            "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromAlgorithm(java.lang.String)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyType(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.Appendable combine(java.lang.Appendable,char,java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyUtils:void registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map loadVersionProperties(java.lang.Class,java.lang.ClassLoader)",
            "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig fromValueChar(char)",
            "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.util.Map)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromString(java.lang.String)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Service:java.nio.channels.NetworkChannel setSocketOptions(java.nio.channels.NetworkChannel)",
            "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryClass(java.lang.Class)",
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory tryLoad(java.util.ServiceLoader)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromKeyType(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveSize(int)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOIDValue(java.util.List)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOID(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression fromIndicatorValue(int)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromString(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.util.Collection)",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.util.Collection)",
            "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption fromName(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:void resetCacheMap(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean setNextObject()",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)",
            "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result fromName(java.lang.String)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(java.util.Collection)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,java.util.Collection)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromString(java.lang.String)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.util.Collection)",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.util.Collection)",
            "org.apache.sshd.common.forward.LocalForwardingEntry:org.apache.sshd.common.forward.LocalForwardingEntry findMatchingEntry(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.Service getService(java.lang.Class)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer,java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map negotiate()",
            "org.apache.sshd.common.session.helpers.SessionTimeoutListener:void run()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.SyspropsMapWrapper:boolean containsValue(java.lang.Object)",
            "org.apache.sshd.common.SyspropsMapWrapper:java.util.Set entrySet()",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:org.apache.sshd.common.PropertyResolver toPropertyResolver(java.util.Properties)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getBuiltinIdentitiesPaths(java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List findMatchingEntries(java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:boolean isHostMatch(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.Map updateGlobalProperties(java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean updateGlobalIdentities(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperties(java.lang.Appendable,java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyValues(java.lang.Appendable,java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry normalizeEntry(org.apache.sshd.client.config.hosts.HostConfigEntry,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.BufferedReader)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.util.Iterator)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendHostConfigEntries(java.lang.Appendable,java.util.Collection)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String getCurrentPasswordCandidate()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.util.Collection selectIdentities(java.lang.Class)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void updateModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair findKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.session.ClientUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue fromString(java.lang.String)",
            "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.server.auth.keyboard.InteractiveChallenge clone()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromEnumName(java.lang.String)",
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.server.session.AbstractServerSession:int getActiveSessionCountForUser(java.lang.String)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.SshServer:java.util.List getActiveSessions()",
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,java.util.Collection)",
            "org.apache.sshd.server.StandardEnvironment:void removeSignalListener(org.apache.sshd.server.SignalListener)",
            "org.apache.sshd.server.StandardEnvironment:void signal(org.apache.sshd.server.Signal)",
            "org.apache.sshd.agent.local.AgentImpl:java.util.Map$Entry getKeyPair(java.util.Collection,java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromTypeValue(int)",
            "org.apache.sshd.common.util.io.IoUtils:boolean isWindowsExecutable(java.lang.String)",
            "org.apache.sshd.common.util.io.IoUtils:java.nio.file.attribute.PosixFilePermission validateExcludedPermissions(java.util.Collection,java.util.Collection)",
            "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Iterable,java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map generateMnemonicMap(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map getAmbiguousMenmonics(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:boolean isKeyTypeSupported(java.lang.String)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:boolean isValidMessageStructure(java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,java.lang.CharSequence)",
            "org.apache.sshd.common.util.GenericUtils:boolean isEmpty(java.util.Iterator)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Set of(java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:boolean containsAny(java.util.Collection,java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:boolean hasNext()",
            "org.apache.sshd.common.util.EventListenerUtils:java.lang.Object lambda$proxyWrapper$1(java.lang.Iterable,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.sshd.common.util.NumberUtils:boolean isPowerOf2(long)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromString(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.util.Collection)",
            "org.apache.sshd.common.file.util.BasePath:boolean isNormal()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath normalize()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath resolve(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.BasePath:java.lang.String asString()",
            "org.apache.sshd.common.file.root.RootedPath:java.io.File toFile()",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:boolean hasNext()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void registerPrivateKeyEntryDecoder(org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:boolean canExtractKeyPairs(java.lang.String,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:int resolveKeyLength(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List resolveAuthorizedKeys(org.apache.sshd.common.config.keys.PublicKeyEntryResolver,java.util.Collection)",
            "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromAlgorithm(java.lang.String)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyType(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.Appendable combine(java.lang.Appendable,char,java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyUtils:void registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map loadVersionProperties(java.lang.Class,java.lang.ClassLoader)",
            "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig fromValueChar(char)",
            "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.util.Map)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromString(java.lang.String)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Service:java.nio.channels.NetworkChannel setSocketOptions(java.nio.channels.NetworkChannel)",
            "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryClass(java.lang.Class)",
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory tryLoad(java.util.ServiceLoader)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromKeyType(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveSize(int)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOIDValue(java.util.List)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOID(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression fromIndicatorValue(int)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromString(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.util.Collection)",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.util.Collection)",
            "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption fromName(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:void resetCacheMap(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean setNextObject()",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)",
            "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result fromName(java.lang.String)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(java.util.Collection)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,java.util.Collection)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromString(java.lang.String)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.util.Collection)",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.util.Collection)",
            "org.apache.sshd.common.forward.LocalForwardingEntry:org.apache.sshd.common.forward.LocalForwardingEntry findMatchingEntry(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.Service getService(java.lang.Class)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer,java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map negotiate()",
            "org.apache.sshd.common.session.helpers.SessionTimeoutListener:void run()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.SyspropsMapWrapper:boolean containsValue(java.lang.Object)",
            "org.apache.sshd.common.SyspropsMapWrapper:java.util.Set entrySet()",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:org.apache.sshd.common.PropertyResolver toPropertyResolver(java.util.Properties)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getBuiltinIdentitiesPaths(java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List findMatchingEntries(java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:boolean isHostMatch(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.Map updateGlobalProperties(java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean updateGlobalIdentities(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperties(java.lang.Appendable,java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyValues(java.lang.Appendable,java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry normalizeEntry(org.apache.sshd.client.config.hosts.HostConfigEntry,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.BufferedReader)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.util.Iterator)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendHostConfigEntries(java.lang.Appendable,java.util.Collection)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String getCurrentPasswordCandidate()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.util.Collection selectIdentities(java.lang.Class)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void updateModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair findKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.session.ClientUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue fromString(java.lang.String)",
            "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.server.auth.keyboard.InteractiveChallenge clone()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromEnumName(java.lang.String)",
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.server.session.AbstractServerSession:int getActiveSessionCountForUser(java.lang.String)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.SshServer:java.util.List getActiveSessions()",
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,java.util.Collection)",
            "org.apache.sshd.server.StandardEnvironment:void removeSignalListener(org.apache.sshd.server.SignalListener)",
            "org.apache.sshd.server.StandardEnvironment:void signal(org.apache.sshd.server.Signal)",
            "org.apache.sshd.agent.local.AgentImpl:java.util.Map$Entry getKeyPair(java.util.Collection,java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromTypeValue(int)",
            "org.apache.sshd.common.util.io.IoUtils:boolean isWindowsExecutable(java.lang.String)",
            "org.apache.sshd.common.util.io.IoUtils:java.nio.file.attribute.PosixFilePermission validateExcludedPermissions(java.util.Collection,java.util.Collection)",
            "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Iterable,java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map generateMnemonicMap(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map getAmbiguousMenmonics(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:boolean isKeyTypeSupported(java.lang.String)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:boolean isValidMessageStructure(java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,java.lang.CharSequence)",
            "org.apache.sshd.common.util.GenericUtils:boolean isEmpty(java.util.Iterator)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Set of(java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:boolean containsAny(java.util.Collection,java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:boolean hasNext()",
            "org.apache.sshd.common.util.EventListenerUtils:java.lang.Object lambda$proxyWrapper$1(java.lang.Iterable,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.sshd.common.util.NumberUtils:boolean isPowerOf2(long)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromString(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.util.Collection)",
            "org.apache.sshd.common.file.util.BasePath:boolean isNormal()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath normalize()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath resolve(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.BasePath:java.lang.String asString()",
            "org.apache.sshd.common.file.root.RootedPath:java.io.File toFile()",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:boolean hasNext()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void registerPrivateKeyEntryDecoder(org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:boolean canExtractKeyPairs(java.lang.String,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:int resolveKeyLength(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List resolveAuthorizedKeys(org.apache.sshd.common.config.keys.PublicKeyEntryResolver,java.util.Collection)",
            "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromAlgorithm(java.lang.String)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyType(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.Appendable combine(java.lang.Appendable,char,java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyUtils:void registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map loadVersionProperties(java.lang.Class,java.lang.ClassLoader)",
            "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig fromValueChar(char)",
            "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.util.Map)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromString(java.lang.String)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Service:java.nio.channels.NetworkChannel setSocketOptions(java.nio.channels.NetworkChannel)",
            "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryClass(java.lang.Class)",
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory tryLoad(java.util.ServiceLoader)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromKeyType(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveSize(int)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOIDValue(java.util.List)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOID(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression fromIndicatorValue(int)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromString(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.util.Collection)",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.util.Collection)",
            "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption fromName(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:void resetCacheMap(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean setNextObject()",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)",
            "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result fromName(java.lang.String)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(java.util.Collection)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,java.util.Collection)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromString(java.lang.String)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.util.Collection)",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.util.Collection)",
            "org.apache.sshd.common.forward.LocalForwardingEntry:org.apache.sshd.common.forward.LocalForwardingEntry findMatchingEntry(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.Service getService(java.lang.Class)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer,java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map negotiate()",
            "org.apache.sshd.common.session.helpers.SessionTimeoutListener:void run()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.SyspropsMapWrapper:boolean containsValue(java.lang.Object)",
            "org.apache.sshd.common.SyspropsMapWrapper:java.util.Set entrySet()",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:org.apache.sshd.common.PropertyResolver toPropertyResolver(java.util.Properties)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getBuiltinIdentitiesPaths(java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List findMatchingEntries(java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:boolean isHostMatch(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.Map updateGlobalProperties(java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean updateGlobalIdentities(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperties(java.lang.Appendable,java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyValues(java.lang.Appendable,java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry normalizeEntry(org.apache.sshd.client.config.hosts.HostConfigEntry,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.BufferedReader)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.util.Iterator)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendHostConfigEntries(java.lang.Appendable,java.util.Collection)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String getCurrentPasswordCandidate()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.util.Collection selectIdentities(java.lang.Class)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void updateModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair findKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.session.ClientUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue fromString(java.lang.String)",
            "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.server.auth.keyboard.InteractiveChallenge clone()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromEnumName(java.lang.String)",
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.server.session.AbstractServerSession:int getActiveSessionCountForUser(java.lang.String)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.SshServer:java.util.List getActiveSessions()",
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,java.util.Collection)",
            "org.apache.sshd.server.StandardEnvironment:void removeSignalListener(org.apache.sshd.server.SignalListener)",
            "org.apache.sshd.server.StandardEnvironment:void signal(org.apache.sshd.server.Signal)",
            "org.apache.sshd.agent.local.AgentImpl:java.util.Map$Entry getKeyPair(java.util.Collection,java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromTypeValue(int)",
            "org.apache.sshd.common.util.io.IoUtils:boolean isWindowsExecutable(java.lang.String)",
            "org.apache.sshd.common.util.io.IoUtils:java.nio.file.attribute.PosixFilePermission validateExcludedPermissions(java.util.Collection,java.util.Collection)",
            "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Iterable,java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map generateMnemonicMap(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map getAmbiguousMenmonics(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:boolean isKeyTypeSupported(java.lang.String)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:boolean isValidMessageStructure(java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,java.lang.CharSequence)",
            "org.apache.sshd.common.util.GenericUtils:boolean isEmpty(java.util.Iterator)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Set of(java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:boolean containsAny(java.util.Collection,java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:boolean hasNext()",
            "org.apache.sshd.common.util.EventListenerUtils:java.lang.Object lambda$proxyWrapper$1(java.lang.Iterable,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.sshd.common.util.NumberUtils:boolean isPowerOf2(long)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromString(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.util.Collection)",
            "org.apache.sshd.common.file.util.BasePath:boolean isNormal()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath normalize()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath resolve(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.BasePath:java.lang.String asString()",
            "org.apache.sshd.common.file.root.RootedPath:java.io.File toFile()",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:boolean hasNext()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void registerPrivateKeyEntryDecoder(org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:boolean canExtractKeyPairs(java.lang.String,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:int resolveKeyLength(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List resolveAuthorizedKeys(org.apache.sshd.common.config.keys.PublicKeyEntryResolver,java.util.Collection)",
            "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromAlgorithm(java.lang.String)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyType(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.Appendable combine(java.lang.Appendable,char,java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyUtils:void registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map loadVersionProperties(java.lang.Class,java.lang.ClassLoader)",
            "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig fromValueChar(char)",
            "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.util.Map)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromString(java.lang.String)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Service:java.nio.channels.NetworkChannel setSocketOptions(java.nio.channels.NetworkChannel)",
            "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryClass(java.lang.Class)",
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory tryLoad(java.util.ServiceLoader)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromKeyType(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveSize(int)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOIDValue(java.util.List)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOID(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression fromIndicatorValue(int)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromString(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.util.Collection)",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.util.Collection)",
            "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption fromName(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:void resetCacheMap(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean setNextObject()",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)",
            "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result fromName(java.lang.String)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(java.util.Collection)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,java.util.Collection)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromString(java.lang.String)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.util.Collection)",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.util.Collection)",
            "org.apache.sshd.common.forward.LocalForwardingEntry:org.apache.sshd.common.forward.LocalForwardingEntry findMatchingEntry(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.Service getService(java.lang.Class)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer,java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map negotiate()",
            "org.apache.sshd.common.session.helpers.SessionTimeoutListener:void run()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.SyspropsMapWrapper:boolean containsValue(java.lang.Object)",
            "org.apache.sshd.common.SyspropsMapWrapper:java.util.Set entrySet()",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:org.apache.sshd.common.PropertyResolver toPropertyResolver(java.util.Properties)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getBuiltinIdentitiesPaths(java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List findMatchingEntries(java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:boolean isHostMatch(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.Map updateGlobalProperties(java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean updateGlobalIdentities(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperties(java.lang.Appendable,java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyValues(java.lang.Appendable,java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry normalizeEntry(org.apache.sshd.client.config.hosts.HostConfigEntry,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.BufferedReader)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.util.Iterator)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendHostConfigEntries(java.lang.Appendable,java.util.Collection)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:boolean hasNext()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String getCurrentPasswordCandidate()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.util.Collection selectIdentities(java.lang.Class)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void updateModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair findKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.session.ClientUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue fromString(java.lang.String)",
            "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.server.auth.keyboard.InteractiveChallenge clone()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromEnumName(java.lang.String)",
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.server.session.AbstractServerSession:int getActiveSessionCountForUser(java.lang.String)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.SshServer:void start()",
            "org.apache.sshd.server.SshServer:java.util.List getActiveSessions()",
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,java.util.Collection)",
            "org.apache.sshd.server.StandardEnvironment:void removeSignalListener(org.apache.sshd.server.SignalListener)",
            "org.apache.sshd.server.StandardEnvironment:void signal(org.apache.sshd.server.Signal)",
            "org.apache.sshd.agent.local.AgentImpl:java.util.Map$Entry getKeyPair(java.util.Collection,java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.security.SecurityUtils:java.security.KeyPair loadKeyPairIdentity(java.lang.String,java.io.InputStream,org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type fromTypeValue(int)",
            "org.apache.sshd.common.util.io.IoUtils:boolean isWindowsExecutable(java.lang.String)",
            "org.apache.sshd.common.util.io.IoUtils:java.nio.file.attribute.PosixFilePermission validateExcludedPermissions(java.util.Collection,java.util.Collection)",
            "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Iterable,java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable$1:void operationComplete(org.apache.sshd.common.future.CloseFuture)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map generateMnemonicMap(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map getAmbiguousMenmonics(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:boolean isKeyTypeSupported(java.lang.String)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:boolean isValidMessageStructure(java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,char)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.util.Iterator,java.lang.CharSequence)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Set of(java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:boolean containsAny(java.util.Collection,java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.util.EventListenerUtils:java.lang.Object lambda$proxyWrapper$1(java.lang.Iterable,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.sshd.common.util.NumberUtils:boolean isPowerOf2(long)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromString(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.util.Collection)",
            "org.apache.sshd.common.file.util.BasePath:boolean isNormal()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath normalize()",
            "org.apache.sshd.common.file.util.BasePath:org.apache.sshd.common.file.util.BasePath resolve(java.nio.file.Path)",
            "org.apache.sshd.common.file.util.BasePath:java.lang.String asString()",
            "org.apache.sshd.common.file.root.RootedPath:java.io.File toFile()",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider$2:java.nio.file.Path next()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void registerPrivateKeyEntryDecoder(org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getPrivateKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser$2:boolean canExtractKeyPairs(java.lang.String,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:int resolveKeyLength(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.security.PublicKey appendPublicKey(java.lang.Appendable,org.apache.sshd.common.config.keys.PublicKeyEntryResolver)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List resolveAuthorizedKeys(org.apache.sshd.common.config.keys.PublicKeyEntryResolver,java.util.Collection)",
            "org.apache.sshd.common.config.keys.IdentityUtils:java.util.Map loadIdentities(java.util.Map,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromAlgorithm(java.lang.String)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyType(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.lang.Appendable combine(java.lang.Appendable,char,java.util.Collection)",
            "org.apache.sshd.common.config.keys.KeyUtils:void registerPublicKeyEntryDecoder(org.apache.sshd.common.config.keys.PublicKeyEntryDecoder)",
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getPublicKeyEntryDecoder(java.lang.Class)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey findMatchingKey(java.security.PublicKey,java.util.Collection)",
            "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map loadVersionProperties(java.lang.Class,java.lang.ClassLoader)",
            "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue fromName(java.lang.String)",
            "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig fromValueChar(char)",
            "org.apache.sshd.common.config.TimeValueConfig:long durationOf(java.util.Map)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromString(java.lang.String)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void bind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void unbind(java.util.Collection)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Service:java.nio.channels.NetworkChannel setSocketOptions(java.nio.channels.NetworkChannel)",
            "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryClass(java.lang.Class)",
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory tryLoad(java.util.ServiceLoader)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromKeyType(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveSize(int)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOIDValue(java.util.List)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOID(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression fromIndicatorValue(int)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromString(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.util.Collection)",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.util.Collection)",
            "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption fromName(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider:void resetCacheMap(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean setNextObject()",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:java.util.Map mapUniquePairs(java.util.Collection)",
            "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result fromName(java.lang.String)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(java.util.Collection)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,java.util.Collection)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromString(java.lang.String)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.util.Collection)",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.util.Collection)",
            "org.apache.sshd.common.forward.LocalForwardingEntry:org.apache.sshd.common.forward.LocalForwardingEntry findMatchingEntry(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.Service getService(java.lang.Class)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer,java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map negotiate()",
            "org.apache.sshd.common.session.helpers.SessionTimeoutListener:void run()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.SyspropsMapWrapper:boolean containsValue(java.lang.Object)",
            "org.apache.sshd.common.SyspropsMapWrapper:java.util.Set entrySet()",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:org.apache.sshd.common.PropertyResolver toPropertyResolver(java.util.Properties)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getBuiltinIdentitiesPaths(java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List findMatchingEntries(java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:boolean isHostMatch(java.lang.String,int,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostPatternsHolder:java.util.List parsePatterns(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.Map updateGlobalProperties(java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean updateGlobalIdentities(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperties(java.lang.Appendable,java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyValues(java.lang.Appendable,java.lang.String,java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry normalizeEntry(org.apache.sshd.client.config.hosts.HostConfigEntry,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.BufferedReader)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.util.Iterator)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendHostConfigEntries(java.lang.Appendable,java.util.Collection)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:org.apache.sshd.client.auth.pubkey.KeyAgentIdentity next()",
            "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:org.apache.sshd.client.auth.pubkey.KeyPairIdentity next()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:org.apache.sshd.client.auth.pubkey.PublicKeyIdentity next()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String getCurrentPasswordCandidate()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.util.Collection selectIdentities(java.lang.Class)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void updateModifiedServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair findKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.session.ClientUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.SshClient:void onConnectOperationComplete(org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.ConnectFuture,java.lang.String,java.net.SocketAddress,java.util.Collection,boolean)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:void <init>(java.security.KeyPair[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.shell.ProcessShell:java.util.Map resolveShellTtyOptions(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.ProcessShell:void start(org.apache.sshd.server.Environment)"
        ]
    },
    "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.mac.BuiltinMacs$ParseResult getMacs(org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureMacs(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureCompression(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void signalTearingDownExplicitTunnel(org.apache.sshd.common.util.net.SshdSocketAddress,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void localPortForwardingCancelled(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void signalTornDownExplicitTunnel(org.apache.sshd.common.util.net.SshdSocketAddress,boolean,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void localPortForwardingCancelled(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void signalEstablishedDynamicTunnel(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void signalEstablishingDynamicTunnel(org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void signalTearingDownDynamicTunnel(org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void signalTornDownDynamicTunnel(org.apache.sshd.common.util.net.SshdSocketAddress,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void signalEstablishingExplicitTunnel(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress localPortForwardingRequested(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void signalEstablishedExplicitTunnel(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress,boolean,org.apache.sshd.common.util.net.SshdSocketAddress,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress localPortForwardingRequested(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.util.net.SshdSocketAddress startLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientSession:org.apache.sshd.client.session.forward.ExplicitPortForwardingTracker createLocalPortForwardingTracker(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ChannelExec createExecChannel(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientSession:void executeRemoteCommand(java.lang.String,java.io.OutputStream,java.io.OutputStream,java.nio.charset.Charset)",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ClientChannel createChannel(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ChannelSubsystem createSubsystemChannel(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ClientChannel createChannel(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ChannelDirectTcpip createDirectTcpipChannel(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.forward.ForwardingFilter getForwardingFilter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.util.net.SshdSocketAddress startLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.client.session.AbstractClientSession:void stopLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.util.net.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.client.session.AbstractClientSession:void stopRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.util.net.SshdSocketAddress startDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.client.session.AbstractClientSession:void stopDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ChannelShell createShellChannel()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ClientChannel createChannel(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)",
            "org.apache.sshd.common.BuiltinFactory:boolean lambda$setUpFactories$0(boolean,org.apache.sshd.common.BuiltinFactory)"
        ]
    },
    "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.NamedFactory$lambda_setUpBuiltinFactories_1__39:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.NamedFactory$lambda_setUpTransformedFactories_0__38:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:void <init>(java.nio.file.Path,java.util.Collection,boolean,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:void <init>(java.nio.file.Path,boolean,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider,boolean)"
        ]
    },
    "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:void <init>(java.nio.file.Path,boolean,java.util.function.Supplier,java.util.function.Supplier,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher:void <init>(boolean,java.util.function.Supplier,java.util.function.Supplier,boolean)"
        ]
    },
    "org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher:java.util.List getDefaultBuiltinIdentitiesPaths()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.hosts.KnownHostEntry:boolean isHostMatch(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair findKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.util.Collection)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:void <init>(java.lang.String,java.lang.String,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.lang.String,int)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperty(java.lang.Appendable,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable append(java.lang.Appendable)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyPort(java.lang.Appendable,java.lang.String,int)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyProperties(java.lang.Appendable,java.util.Map)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.nio.file.Path,java.nio.file.OpenOption[])",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.net.URL)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.lang.String)"
        ]
    },
    "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.auth.password.PasswordIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.client.auth.password.PasswordIdentityProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.password.PasswordIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.client.auth.password.PasswordIdentityProvider,org.apache.sshd.client.auth.password.PasswordIdentityProvider)"
        ]
    },
    "org.apache.sshd.client.auth.password.PasswordIdentityProvider:java.lang.Iterable lambda$static$0(org.apache.sshd.client.auth.password.PasswordIdentityProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.password.PasswordIdentityProvider$lambda_static_0__103:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.auth.password.PasswordIdentityProvider$loadPasswords__102:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.GenericUtils:java.util.Map flipMap(java.util.Map,java.util.function.Supplier,boolean)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.util.stream.Stream lambda$null$9(java.util.function.Supplier)",
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:org.apache.sshd.client.config.keys.ClientIdentityLoader getClientIdentityLoader()",
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:org.apache.sshd.common.config.keys.FilePasswordProvider getFilePasswordProvider()"
        ]
    },
    "org.apache.sshd.common.future.VerifiableFuture:java.lang.Object verify()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.future.VerifiableFuture:java.lang.Object verify(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.future.WaitableFuture:boolean await()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.future.WaitableFuture:boolean await(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.ChannelAsyncInputStream$IoReadFutureImpl:java.lang.Object verify(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.future.VerifiableFuture:java.lang.Object verify()",
            "org.apache.sshd.common.future.VerifiableFuture:java.lang.Object verify(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.sshd.client.future.DefaultConnectFuture:java.lang.Object verify(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.future.VerifiableFuture:java.lang.Object verify()",
            "org.apache.sshd.common.future.VerifiableFuture:java.lang.Object verify(long,java.util.concurrent.TimeUnit)",
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession loginSession(org.apache.sshd.client.future.ConnectFuture,java.lang.String)",
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.session.ClientSession loginSession(org.apache.sshd.client.future.ConnectFuture,java.security.KeyPair)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentity:org.apache.sshd.common.keyprovider.KeyPairProvider loadDefaultKeyPairProvider(java.nio.file.Path,boolean,boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentity:org.apache.sshd.client.SshClient setKeyPairProvider(org.apache.sshd.client.SshClient,java.nio.file.Path,boolean,boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.ClientIdentity:org.apache.sshd.common.keyprovider.KeyPairProvider loadDefaultKeyPairProvider(boolean,boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map loadDefaultIdentities(boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.session.SessionFactory:org.apache.sshd.common.session.helpers.AbstractSession doCreateSession(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSessionFactory:org.apache.sshd.common.session.helpers.AbstractSession createSession(org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.common.util.logging.LoggingUtils:void logExceptionStackTrace(org.slf4j.Logger,java.util.logging.Level,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Session:void doCloseImmediately()",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:boolean okToReaccept(java.lang.Throwable,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.server.shell.TtyFilterInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterInputStream:int read(byte[],int,int)",
            "org.apache.sshd.common.util.io.IoUtils:int read(java.io.InputStream,byte[],int,int)",
            "org.apache.sshd.client.channel.ChannelSession:int securedRead(java.io.InputStream,byte[],int,int)"
        ]
    },
    "org.apache.sshd.common.util.io.IoUtils:int read(java.io.InputStream,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:void readFully(java.io.InputStream,byte[],int,int)",
            "org.apache.sshd.common.util.io.IoUtils:int read(java.io.InputStream,byte[])"
        ]
    },
    "org.apache.sshd.common.channel.ChannelPipedInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterInputStream:int readRawInput()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.io.InputStream validateStreamMagicMarker(java.lang.String,java.io.InputStream)",
            "org.apache.sshd.common.channel.SttySupport:int copyStream(java.io.InputStream,java.io.OutputStream)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelSession:int securedRead(java.io.InputStream,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.ChannelSession:void pumpInputStream()"
        ]
    },
    "org.apache.sshd.client.session.ClientSession:org.apache.sshd.client.session.forward.ExplicitPortForwardingTracker createRemotePortForwardingTracker(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.channel.Channel getChannel(byte,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelOpenConfirmation(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelOpenFailure(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelData(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelExtendedData(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelEof(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelClose(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelRequest(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelFailure(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelSuccess(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher$doGetKeyPair__210:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.util.SelectorUtils:java.lang.String translateToLocalFileSystemPath(java.lang.String,char,java.nio.file.FileSystem)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleRandomFactory:org.apache.sshd.common.random.Random create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleRandomFactory:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:net.i2p.crypto.eddsa.EdDSAPublicKey recoverPublicKey(net.i2p.crypto.eddsa.EdDSAPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:java.security.PublicKey recoverPublicKey(java.security.PrivateKey)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:java.security.PublicKey recoverEDDSAPublicKey(java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:java.security.PublicKey recoverPublicKey(java.security.PrivateKey)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.signature.Signature getEDDSASigner()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.BuiltinSignatures$6:org.apache.sshd.common.signature.Signature create()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getEDDSAPublicKeyEntryDecoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getOpenSSHEDDSAPrivateKeyEntryDecoder()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.buffer.Buffer putRawEDDSAPublicKey(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:void putRawPublicKey(java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.buffer.Buffer putEDDSAKeyPair(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey,java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.buffer.Buffer putEDDSAKeyPair(org.apache.sshd.common.util.buffer.Buffer,java.security.KeyPair)",
            "org.apache.sshd.common.util.buffer.Buffer:void putKeyPair(java.security.KeyPair)"
        ]
    },
    "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(java.lang.String,java.nio.file.Path,boolean,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(java.lang.String,boolean)",
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(java.lang.String,java.io.File,boolean)",
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(java.nio.file.Path,boolean,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.server.auth.AbstractUserAuth:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.password.UserAuthPassword:void <init>()",
            "org.apache.sshd.server.auth.gss.UserAuthGSS:void <init>()",
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:void <init>(java.util.List)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:void <init>(java.util.List)",
            "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractive:void <init>()",
            "org.apache.sshd.server.auth.UserAuthNone:void <init>()"
        ]
    },
    "org.apache.sshd.server.shell.UnknownCommand:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.UnknownCommandFactory:org.apache.sshd.server.command.Command createCommand(java.lang.String)"
        ]
    },
    "org.apache.sshd.server.command.AbstractDelegatingCommandFactory:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.session.AbstractServerSession:void startService(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:boolean handleServiceRequest(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.StandardEnvironment:void set(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleWindowChange(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.channel.ChannelSession:void addEnvVariable(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.sshd.agent.local.ChannelAgentForwardingFactory:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.ChannelAgentForwardingFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.agent.unix.ChannelAgentForwardingFactory:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.unix.UnixAgentFactory$1:void <init>(org.apache.sshd.agent.unix.UnixAgentFactory,java.lang.String,org.apache.sshd.common.util.threads.ExecutorServiceConfigurer)",
            "org.apache.sshd.agent.unix.ChannelAgentForwardingFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityProviderChoice:org.apache.sshd.common.util.security.SecurityProviderChoice toSecurityProviderChoice(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.security.SecurityProviderChoice getDefaultProviderChoice()",
            "org.apache.sshd.common.util.security.SecurityUtils:void register()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:boolean isAPrioriDisabledProvider(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean isEnabled()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:void setAPrioriDisabledProvider(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.security.SecurityProviderRegistrar getRegisteredProvider(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:java.security.KeyPair loadKeyPair(java.lang.String,java.io.InputStream,org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.common.util.security.SecurityUtils:boolean isProviderRegistered(java.lang.String)",
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.security.SecurityProviderRegistrar registerSecurityProvider(org.apache.sshd.common.util.security.SecurityProviderRegistrar)",
            "org.apache.sshd.common.util.security.SecurityUtils:boolean isEDDSACurveSupported()"
        ]
    },
    "org.apache.sshd.common.util.security.AbstractSecurityProviderRegistrar:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleSecurityProviderRegistrar:void <init>()",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderRegistrar:void <init>()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityEntityFactory:org.apache.sshd.common.util.security.SecurityEntityFactory toNamedProviderFactory(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityEntityFactory:org.apache.sshd.common.util.security.SecurityEntityFactory toFactory(java.lang.Class,org.apache.sshd.common.util.security.SecurityProviderChoice,org.apache.sshd.common.util.security.SecurityProviderChoice)"
        ]
    },
    "org.apache.sshd.common.util.OsUtils:java.lang.String getCurrentUser()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(boolean)",
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(java.nio.file.Path,boolean,java.nio.file.LinkOption[])",
            "org.apache.sshd.common.util.io.ModifiableFileWatcher:java.util.AbstractMap$SimpleImmutableEntry validateStrictConfigFilePermissions(java.nio.file.Path,java.nio.file.LinkOption[])",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry validateStrictKeyFilePermissions(java.nio.file.Path,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String resolveIdentityFilePath(java.lang.String,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:java.lang.String resolveClientUsername()"
        ]
    },
    "org.apache.sshd.common.util.OsUtils:org.apache.sshd.common.util.VersionInfo getJavaVersion()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.signature.AbstractSignature:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.SignatureEd25519:void <init>()",
            "org.apache.sshd.common.signature.SignatureRSA:void <init>()",
            "org.apache.sshd.common.signature.SignatureRSA:void <init>(java.lang.String)",
            "org.apache.sshd.common.signature.SignatureDSA:void <init>(java.lang.String)",
            "org.apache.sshd.common.signature.SignatureECDSA:void <init>(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory:void setUserHomeDir(java.lang.String,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory:java.nio.file.Path getUserHomeDir(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory:java.nio.file.Path computeRootDir(org.apache.sshd.common.session.Session)"
        ]
    },
    "org.apache.sshd.common.file.nativefs.NativeFileSystemFactory:void setUsersHomeDir(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:void <init>(java.lang.String,java.lang.String,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:void <init>()",
            "org.apache.sshd.common.config.keys.loader.pem.RSAPEMResourceKeyPairParser:void <init>()",
            "org.apache.sshd.common.config.keys.loader.pem.DSSPEMResourceKeyPairParser:void <init>()",
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:void <init>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:void registerPEMResourceParser(org.apache.sshd.common.config.keys.loader.pem.KeyPairPEMResourceParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.security.PrivateKey decodePEMPrivateKeyPKCS8(java.lang.String,byte[],org.apache.sshd.common.config.keys.FilePasswordProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.security.PrivateKey decodePEMPrivateKeyPKCS8(java.util.List,byte[],org.apache.sshd.common.config.keys.FilePasswordProvider)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.AbstractPrivateKeyObfuscator:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.DESPrivateKeyObfuscator:void <init>()",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:void <init>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser:boolean containsMarkerLine(java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator registerPrivateKeyObfuscator(java.lang.String,org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator registerPrivateKeyObfuscator(org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:boolean unregisterPrivateKeyObfuscator(org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator unregisterPrivateKeyObfuscator(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder:java.security.PrivateKey resolve(java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.PublicKeyEntryDecoder:java.security.PublicKey resolve(java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.auth.AbstractUserAuthMethodFactory:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.AbstractUserAuthFactory:void <init>(java.lang.String)",
            "org.apache.sshd.client.auth.AbstractUserAuthFactory:void <init>(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.auth.AbstractUserAuthServiceFactory:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.auth.AbstractUserAuthServiceFactory:void <init>()"
        ]
    },
    "org.apache.sshd.common.digest.DigestUtils:boolean checkSupported(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.digest.BuiltinDigests:void <init>(java.lang.String,int,java.lang.String,java.lang.String,int)"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves:void <init>(java.lang.String,int,java.lang.String,int[],java.security.spec.ECParameterSpec,int,org.apache.sshd.common.digest.DigestFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.ECCurves:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.cipher.Cipher:boolean checkSupported(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.BuiltinCiphers:void <init>(java.lang.String,int,java.lang.String,int,int,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.cipher.BaseCipher:void <init>(int,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.BaseRC4Cipher:void <init>(int,int)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.Cipher create()"
        ]
    },
    "org.apache.sshd.common.keyprovider.ClassLoadableResourceKeyPairProvider:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.keyprovider.ClassLoadableResourceKeyPairProvider:void <init>(java.lang.ClassLoader,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.compression.BaseCompression:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.compression.CompressionNone:void <init>()",
            "org.apache.sshd.common.compression.CompressionZlib:void <init>(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.random.AbstractRandomFactory:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleRandomFactory:void <init>()",
            "org.apache.sshd.common.random.JceRandomFactory:void <init>()"
        ]
    },
    "org.apache.sshd.common.global.AbstractOpenSshHostKeysHandler:void <init>(java.lang.String,org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:void <init>(org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)",
            "org.apache.sshd.common.global.AbstractOpenSshHostKeysHandler:void <init>(java.lang.String)",
            "org.apache.sshd.client.global.OpenSshHostKeysHandler:void <init>(org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)"
        ]
    },
    "org.apache.sshd.common.forward.LocalForwardingEntry:void <init>(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.LocalForwardingEntry:void <init>(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress localPortForwardingRequested(org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object resolvePropertyValue(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolverUtils:long getLongProperty(java.util.Map,java.lang.String,long)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long getLong(java.util.Map,java.lang.String)",
            "org.apache.sshd.common.PropertyResolverUtils:int getIntProperty(java.util.Map,java.lang.String,int)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer getInteger(java.util.Map,java.lang.String)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean getBoolean(java.util.Map,java.lang.String)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.String getStringProperty(java.util.Map,java.lang.String,java.lang.String)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object getObject(java.util.Map,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object updateProperty(java.util.Map,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object updateProperty(java.util.Map,java.lang.String,long)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object updateProperty(java.util.Map,java.lang.String,int)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object updateProperty(java.util.Map,java.lang.String,boolean)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object updateProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object resolvePropertyValue(org.apache.sshd.common.PropertyResolver,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolverUtils:long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long getLong(org.apache.sshd.common.PropertyResolver,java.lang.String)",
            "org.apache.sshd.common.PropertyResolverUtils:int getIntProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,int)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer getInteger(org.apache.sshd.common.PropertyResolver,java.lang.String)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean getBoolean(org.apache.sshd.common.PropertyResolver,java.lang.String)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object getObject(org.apache.sshd.common.PropertyResolver,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.util.Map resolvePropertiesSource(org.apache.sshd.common.PropertyResolver,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.hosts.KnownHostDigest:void <init>(java.lang.String,int,java.lang.String,org.apache.sshd.common.Factory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostDigest:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:void addIdentity(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void addIdentity(java.nio.file.Path)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:boolean updateGlobalIdentities(java.util.Collection)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry normalizeEntry(org.apache.sshd.client.config.hosts.HostConfigEntry,java.lang.String,int,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String getProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String getProperty(java.lang.String)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String appendPropertyValue(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void processProperty(java.lang.String,java.util.Collection,boolean)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String setProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.Map updateGlobalProperties(java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String appendPropertyValue(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String removeProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String setProperty(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.auth.AbstractUserAuth:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.password.UserAuthPassword:void <init>()",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:void <init>(org.apache.sshd.client.auth.hostbased.HostKeyIdentityProvider)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void <init>(java.util.List)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:void <init>()"
        ]
    },
    "org.apache.sshd.client.auth.AbstractUserAuth:void init(org.apache.sshd.client.session.ClientSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.password.UserAuthPassword:void init(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:void init(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void init(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:void init(org.apache.sshd.client.session.ClientSession,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.simple.SimpleSessionClient:org.apache.sshd.client.session.ClientSession sessionLogin(java.lang.String,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.simple.SimpleSessionClient:org.apache.sshd.client.session.ClientSession sessionLogin(java.lang.String,int,java.lang.String,java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.channel.ChannelExec:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ChannelExec createExecChannel(java.lang.String)"
        ]
    },
    "org.apache.sshd.client.channel.AbstractClientChannel:void <init>(java.lang.String,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.AbstractClientChannel:void <init>(java.lang.String)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelSubsystem:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ChannelSubsystem createSubsystemChannel(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.kex.dh.AbstractDHKeyExchange:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.AbstractDHServerKeyExchange:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.client.kex.AbstractDHClientKeyExchange:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])"
        ]
    },
    "org.apache.sshd.server.SignalListener:org.apache.sshd.server.SignalListener validateListener(org.apache.sshd.server.SignalListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener,java.util.Collection)",
            "org.apache.sshd.server.StandardEnvironment:void removeSignalListener(org.apache.sshd.server.SignalListener)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelListener:org.apache.sshd.common.channel.ChannelListener validateListener(org.apache.sshd.common.channel.ChannelListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void addChannelListener(org.apache.sshd.common.channel.ChannelListener)",
            "org.apache.sshd.common.channel.AbstractChannel:void removeChannelListener(org.apache.sshd.common.channel.ChannelListener)",
            "org.apache.sshd.common.helpers.AbstractFactoryManager:void addChannelListener(org.apache.sshd.common.channel.ChannelListener)",
            "org.apache.sshd.common.helpers.AbstractFactoryManager:void removeChannelListener(org.apache.sshd.common.channel.ChannelListener)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void addChannelListener(org.apache.sshd.common.channel.ChannelListener)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void removeChannelListener(org.apache.sshd.common.channel.ChannelListener)"
        ]
    },
    "org.apache.sshd.common.forward.PortForwardingEventListener:org.apache.sshd.common.forward.PortForwardingEventListener validateListener(org.apache.sshd.common.forward.PortForwardingEventListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.helpers.AbstractFactoryManager:void addPortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)",
            "org.apache.sshd.common.helpers.AbstractFactoryManager:void removePortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void addPortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void removePortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)",
            "org.apache.sshd.common.forward.DefaultForwarderFactory:void addPortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)",
            "org.apache.sshd.common.forward.DefaultForwarderFactory:void removePortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void addPortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void removePortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void addPortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void removePortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)"
        ]
    },
    "org.apache.sshd.common.session.SessionListener:org.apache.sshd.common.session.SessionListener validateListener(org.apache.sshd.common.session.SessionListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.helpers.AbstractFactoryManager:void addSessionListener(org.apache.sshd.common.session.SessionListener)",
            "org.apache.sshd.common.helpers.AbstractFactoryManager:void removeSessionListener(org.apache.sshd.common.session.SessionListener)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void addSessionListener(org.apache.sshd.common.session.SessionListener)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void removeSessionListener(org.apache.sshd.common.session.SessionListener)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.DESPrivateKeyObfuscator:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,boolean)"
        ]
    },
    "org.apache.sshd.server.shell.InvertedShellWrapper:void <init>(org.apache.sshd.server.shell.InvertedShell,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void <init>(org.apache.sshd.server.shell.InvertedShell)"
        ]
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress:org.apache.sshd.common.util.net.SshdSocketAddress toSshdSocketAddress(java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.Collection resolveHostNetworkIdentities(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.global.TcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.global.CancelTcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.StaticDecisionForwardingFilter:boolean canForwardAgent(org.apache.sshd.common.session.Session,java.lang.String)",
            "org.apache.sshd.server.forward.StaticDecisionForwardingFilter:boolean canForwardX11(org.apache.sshd.common.session.Session,java.lang.String)",
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:java.net.InetAddress getFirstExternalNetwork4Address()",
            "org.apache.sshd.common.util.net.SshdSocketAddress:java.util.List getExternalNetwork4Addresses()",
            "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isValidHostAddress(java.net.InetAddress)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isLoopback(java.net.InetAddress)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isLoopback(java.lang.String)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:org.apache.sshd.common.util.net.SshdSocketAddress toSshdSocketAddress(java.net.SocketAddress)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isIPv4Address(java.lang.String)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isPrivateIPv4Address(java.lang.String)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isCarrierGradeNatIPv4Address(java.lang.String)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isIPv6Address(java.lang.String)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:int lambda$static$1(java.net.SocketAddress,java.net.SocketAddress)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:int lambda$static$0(java.net.InetAddress,java.net.InetAddress)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:void <clinit>()",
            "org.apache.sshd.common.forward.LocalForwardingEntry:void <init>(org.apache.sshd.common.util.net.SshdSocketAddress,java.net.InetSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startDynamicPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress localPortForwardingRequested(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.SocksProxy$Socks4:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.forward.SocksProxy$Socks5:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:java.lang.String resolveClientHostname()",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.Collection resolveHostNetworkIdentities(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress)",
            "org.apache.sshd.client.channel.ChannelDirectTcpip:void <init>(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.lang.String,int)",
            "org.apache.sshd.common.util.net.SshdSocketAddress$lambda_static_0__53:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.sshd.common.util.net.SshdSocketAddress$lambda_static_1__54:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.forward.LocalForwardingEntry:void <init>(org.apache.sshd.common.util.net.SshdSocketAddress,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.channel.ChannelDirectTcpip:void <init>(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ChannelDirectTcpip createDirectTcpipChannel(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)"
        ]
    },
    "org.apache.sshd.common.random.SingletonRandomFactory:int random(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.common.random.SingletonRandomFactory:int random(int)",
            "org.apache.sshd.common.session.helpers.AbstractSession:int resolveIgnoreBufferDataLength()",
            "org.apache.sshd.common.session.helpers.AbstractSession:long calculateNextIgnorePacketCount(org.apache.sshd.common.random.Random,long,int)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:int resolveIgnoreBufferDataLength()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:long calculateNextIgnorePacketCount(org.apache.sshd.common.random.Random,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void refreshConfiguration()",
            "org.apache.sshd.common.session.helpers.AbstractSession:int resolveIgnoreBufferDataLength()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:boolean isDHGroupExchangeSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$9:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$8:boolean isSupported()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:boolean isDHOakelyGroupSupported(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$6:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$5:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$3:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$4:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$1:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$2:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$7:boolean isSupported()"
        ]
    },
    "org.apache.sshd.client.kex.DHGEXClient:void <init>(org.apache.sshd.common.kex.DHFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.kex.DHGEXClient$1:org.apache.sshd.common.kex.KeyExchange create()"
        ]
    },
    "org.apache.sshd.common.util.io.der.DERWriter:void writeBigInteger(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.der.DERWriter:void writeBigInteger(byte[])",
            "org.apache.sshd.common.signature.SignatureDSA:boolean verify(byte[])"
        ]
    },
    "org.apache.sshd.common.util.io.der.DERWriter:void writeObject(byte,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.der.DERWriter:void writeObject(org.apache.sshd.common.util.io.der.ASN1Object)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putByte(byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putShort(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putInt(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.common.util.buffer.Buffer append(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.channel.AbstractServerChannel:void sendExitStatus(int)",
            "org.apache.sshd.server.x11.ChannelForwardedX11:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.server.global.TcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.global.CancelTcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.unix.AgentClient:org.apache.sshd.common.util.buffer.Buffer request(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.common.AbstractAgentProxy:org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:org.apache.sshd.common.util.buffer.Buffer prepare(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void messageReceived(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.common.AbstractAgentClient:org.apache.sshd.common.util.buffer.Buffer prepare(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.ByteArrayBuffer:void putBuffer(java.nio.ByteBuffer)",
            "org.apache.sshd.common.util.buffer.Buffer:void putBytes(byte[],int,int)",
            "org.apache.sshd.common.util.buffer.Buffer:void putStringList(java.util.Collection,java.nio.charset.Charset,boolean)",
            "org.apache.sshd.common.util.buffer.Buffer:void putMPInt(byte[])",
            "org.apache.sshd.common.util.buffer.Buffer:void putPublicKey(java.security.PublicKey)",
            "org.apache.sshd.common.util.buffer.BufferUtils:int updateLengthPlaceholder(org.apache.sshd.common.util.buffer.Buffer,int)",
            "org.apache.sshd.common.util.buffer.BufferUtils:void updateLengthPlaceholder(org.apache.sshd.common.util.buffer.Buffer,int,int)",
            "org.apache.sshd.common.channel.ChannelOutputStream:void flush()",
            "org.apache.sshd.common.channel.ChannelOutputStream:void newBuffer(int)",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.channel.AbstractChannel:org.apache.sshd.common.io.IoWriteFuture sendResponse(org.apache.sshd.common.util.buffer.Buffer,java.lang.String,org.apache.sshd.common.channel.RequestHandler$Result,boolean)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleExtendedData(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.AbstractChannel:void sendEof()",
            "org.apache.sshd.common.channel.AbstractChannel:void sendWindowAdjust(long)",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void doWriteIfPossible(boolean)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.TcpipClientChannel:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer encode(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void disconnect(int,java.lang.String)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendNotImplemented(long)",
            "org.apache.sshd.common.session.helpers.DefaultUnknownChannelReferenceHandler:org.apache.sshd.common.io.IoWriteFuture sendFailureResponse(org.apache.sshd.common.session.ConnectionService,byte,int)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture sendChannelOpenFailure(org.apache.sshd.common.util.buffer.Buffer,int,int,java.lang.String,java.lang.String)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void lambda$channelOpen$0(org.apache.sshd.common.channel.Channel,boolean,int,int,org.apache.sshd.common.session.Session,org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.ChannelDirectTcpip:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void sendWindowChange(int,int,int,int)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void lambda$doOpenPty$0(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.channel.PtyMode,java.lang.Integer)",
            "org.apache.sshd.client.channel.ChannelShell:void doOpen()",
            "org.apache.sshd.client.channel.ChannelExec:void doOpen()",
            "org.apache.sshd.client.channel.AbstractClientChannel:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.client.channel.ChannelSubsystem:void doOpen()"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putLong(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterInputStream:void write(byte[],int,int)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:void putAndWipeBytes(byte[],int,int)",
            "org.apache.sshd.common.util.buffer.Buffer:void putBytes(byte[])",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,byte[],java.lang.String,java.lang.String,org.apache.sshd.common.signature.Signature,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putRawBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:void putMPInt(byte[])",
            "org.apache.sshd.common.session.helpers.AbstractSession:void receiveNewKeys()",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] resizeKey(byte[],int,org.apache.sshd.common.digest.Digest,byte[],byte[])",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelPipedInputStream:void receive(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.ChannelPipedOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.sshd.common.compression.CompressionZlib:void compress(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer encode(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.compression.CompressionZlib:void uncompress(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void decode()"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void ensureCapacity(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.ByteArrayBuffer:void wpos(int)",
            "org.apache.sshd.common.util.buffer.ByteArrayBuffer:void putByte(byte)",
            "org.apache.sshd.common.util.buffer.ByteArrayBuffer:int putBuffer(org.apache.sshd.common.util.Readable,boolean)",
            "org.apache.sshd.common.util.buffer.ByteArrayBuffer:void putBuffer(java.nio.ByteBuffer)",
            "org.apache.sshd.common.util.buffer.ByteArrayBuffer:void putRawBytes(byte[],int,int)",
            "org.apache.sshd.common.util.buffer.Buffer:void putByte(byte)",
            "org.apache.sshd.common.util.buffer.Buffer:void putShort(int)",
            "org.apache.sshd.common.util.buffer.Buffer:void putInt(long)",
            "org.apache.sshd.common.util.buffer.Buffer:void putLong(long)"
        ]
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:byte[] decodeHex(char,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)"
        ]
    },
    "org.apache.sshd.common.channel.Window:void consume(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.Window:void consumeAndCheck(long)",
            "org.apache.sshd.common.channel.Window:void waitAndConsume(long,long)",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void doWriteIfPossible(boolean)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void handleChannelRegistrationFailure(org.apache.sshd.common.channel.Channel,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:int registerChannel(org.apache.sshd.common.channel.Channel)"
        ]
    },
    "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.Digest create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.digest.BuiltinDigests:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.channel.Window:void init(org.apache.sshd.common.PropertyResolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void configureWindow()"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void handleWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:void handleWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.Window:void waitAndConsume(long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.ChannelOutputStream:void flush()"
        ]
    },
    "org.apache.sshd.common.channel.Window:long waitForSpace(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.ChannelOutputStream:void write(byte[],int,int)",
            "org.apache.sshd.common.channel.ChannelOutputStream:void flush()"
        ]
    },
    "org.apache.sshd.common.channel.ChannelOutputStream:void <init>(org.apache.sshd.common.channel.AbstractChannel,org.apache.sshd.common.channel.Window,org.slf4j.Logger,byte,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.server.command.Command prepareCommand(java.lang.String,org.apache.sshd.server.command.Command)",
            "org.apache.sshd.server.x11.ChannelForwardedX11:void doOpen()",
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.AgentForwardedChannel:void doOpen()",
            "org.apache.sshd.agent.local.ChannelAgentForwarding:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.unix.AgentForwardedChannel:void doOpen()",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.forward.TcpipClientChannel:void doOpen()",
            "org.apache.sshd.client.channel.ChannelDirectTcpip:void doOpen()",
            "org.apache.sshd.client.channel.ChannelSession:void doOpen()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer prepareBuffer(byte,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:void <init>(long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:void <init>()"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.RSABufferPublicKeyParser:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getRawPublicKey(org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.DSSBufferPublicKeyParser:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser$2:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getRawPublicKey(org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)"
        ]
    },
    "org.apache.sshd.common.channel.Window:void updateSize(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.Window:void init(long,long,org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.common.channel.Window:void expand(int)",
            "org.apache.sshd.common.channel.Window:void consume(long)",
            "org.apache.sshd.common.channel.Window:void check(long)"
        ]
    },
    "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:java.security.KeyPair loadKeyPair(java.lang.String,java.io.InputStream,org.apache.sshd.common.config.keys.FilePasswordProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean registerSecurityProvider(org.apache.sshd.common.util.security.SecurityProviderRegistrar)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.security.SecurityProviderRegistrar registerSecurityProvider(org.apache.sshd.common.util.security.SecurityProviderRegistrar)"
        ]
    },
    "org.apache.sshd.common.kex.ECDH:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:void <init>(org.apache.sshd.server.ServerFactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.client.session.AbstractClientSession:void <init>(org.apache.sshd.client.ClientFactoryManager,org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.forward.ForwardingFilter getForwardingFilter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.global.TcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.global.CancelTcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.forward.ForwardingFilter getForwardingFilter()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.server.x11.X11ForwardSupport getX11ForwardSupport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleX11Forwarding(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.agent.common.AgentForwardSupport getAgentForwardSupport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleAgentForwarding(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.server.kex.AbstractDHServerKeyExchange:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.server.kex.DHGEXServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])"
        ]
    },
    "org.apache.sshd.server.session.ServerConnectionServiceFactory:org.apache.sshd.common.Service create(org.apache.sshd.common.session.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.ServiceFactory:org.apache.sshd.common.Service create(java.util.Collection,java.lang.String,org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.session.ClientSessionImpl:void <init>(org.apache.sshd.client.ClientFactoryManager,org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.agent.local.ProxyAgentFactory:org.apache.sshd.agent.SshAgentServer createServer(org.apache.sshd.common.session.ConnectionService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.DefaultAgentForwardSupport:org.apache.sshd.agent.SshAgentServer createSshAgentServer(org.apache.sshd.common.session.ConnectionService,org.apache.sshd.common.session.Session)"
        ]
    },
    "org.apache.sshd.agent.unix.UnixAgentFactory:org.apache.sshd.agent.SshAgentServer createServer(org.apache.sshd.common.session.ConnectionService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.DefaultAgentForwardSupport:org.apache.sshd.agent.SshAgentServer createSshAgentServer(org.apache.sshd.common.session.ConnectionService,org.apache.sshd.common.session.Session)"
        ]
    },
    "org.apache.sshd.client.kex.AbstractDHClientKeyExchange:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.kex.DHGClient:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.client.kex.DHGEXClient:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])"
        ]
    },
    "org.apache.sshd.client.session.ClientConnectionServiceFactory:org.apache.sshd.common.Service create(org.apache.sshd.common.session.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.ServiceFactory:org.apache.sshd.common.Service create(java.util.Collection,java.lang.String,org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.session.ClientSessionImpl:void <init>(org.apache.sshd.client.ClientFactoryManager,org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.common.util.EventListenerUtils:org.apache.sshd.common.util.SshdEventListener proxyWrapper(java.lang.Class,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.AbstractChannel:void <init>(java.lang.String,boolean,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.AbstractServerChannel:void <init>(java.lang.String,java.util.Collection)",
            "org.apache.sshd.common.channel.AbstractChannel:void <init>(boolean,java.util.Collection)",
            "org.apache.sshd.common.channel.AbstractChannel:void <init>(java.lang.String,boolean)"
        ]
    },
    "org.apache.sshd.common.helpers.AbstractFactoryManager:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.SshServer:void <init>()",
            "org.apache.sshd.client.SshClient:void <init>()"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void <init>(org.apache.sshd.common.session.ConnectionService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwarderFactory:org.apache.sshd.common.forward.ForwardingFilter create(org.apache.sshd.common.session.ConnectionService)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwarderFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwarderFactory$1:void <init>()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void <init>(org.apache.sshd.common.session.helpers.AbstractSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerConnectionService:void <init>(org.apache.sshd.server.session.AbstractServerSession)",
            "org.apache.sshd.client.session.ClientConnectionService:void <init>(org.apache.sshd.client.session.AbstractClientSession)"
        ]
    },
    "org.apache.sshd.common.session.AbstractConnectionServiceFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerConnectionServiceFactory:void <init>()",
            "org.apache.sshd.client.session.ClientConnectionServiceFactory:void <init>()"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path unroot(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.channels.FileChannel newFileChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void createLink(java.nio.file.Path,java.nio.file.Path,boolean,java.nio.file.attribute.FileAttribute[])",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void delete(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:boolean deleteIfExists(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path readSymbolicLink(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:boolean isSameFile(java.nio.file.Path,java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:boolean isHidden(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:org.apache.sshd.common.file.root.RootedFileSystem getFileSystem(java.nio.file.Path)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void checkAccess(java.nio.file.Path,java.nio.file.AccessMode[])",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.util.Map readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext parseAlgorithmInfo(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:void <init>(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List readAuthorizedKeys(java.io.BufferedReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List readAuthorizedKeys(java.io.Reader,boolean)"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostEntry:org.apache.sshd.client.config.hosts.KnownHostEntry parseKnownHostEntry(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostEntry:java.util.List readKnownHostEntries(java.io.BufferedReader)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostHashValue:org.apache.sshd.client.config.hosts.KnownHostHashValue parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostEntry:org.apache.sshd.client.config.hosts.KnownHostEntry parseKnownHostEntry(org.apache.sshd.client.config.hosts.KnownHostEntry,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.IdentityUtils:org.apache.sshd.common.keyprovider.KeyPairProvider createKeyPairProvider(java.util.Map,boolean)",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider:void <init>(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.MappedKeyPairProvider$init__74:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.server.shell.ProcessShellFactory:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.ProcessShellFactory:void <init>()",
            "org.apache.sshd.server.shell.ProcessShellFactory:void <init>(java.lang.String[])",
            "org.apache.sshd.server.shell.InteractiveProcessShellFactory:void <init>()"
        ]
    },
    "org.apache.sshd.server.shell.ProcessShellFactory:void setCommand(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.ProcessShellFactory:void setCommand(java.lang.String[])"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.AbstractBufferPublicKeyParser:void <init>(java.lang.Class,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.ECBufferPublicKeyParser:void <init>()",
            "org.apache.sshd.common.util.buffer.keys.AbstractBufferPublicKeyParser:void <init>(java.lang.Class,java.lang.String[])"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.AbstractIdentityResourceLoader:void <init>(java.lang.Class,java.lang.Class,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.AbstractKeyEntryResolver:void <init>(java.lang.Class,java.lang.Class,java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser:org.apache.sshd.common.config.keys.loader.KeyPairResourceParser aggregate(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:void registerPEMResourceParser(org.apache.sshd.common.config.keys.loader.pem.KeyPairPEMResourceParser)",
            "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser:org.apache.sshd.common.config.keys.loader.KeyPairResourceParser aggregate(org.apache.sshd.common.config.keys.loader.KeyPairResourceParser[])"
        ]
    },
    "org.apache.sshd.common.helpers.AbstractFactoryManager:void checkConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.SshServer:void checkConfig()",
            "org.apache.sshd.client.SshClient:void checkConfig()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map createProposal(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit()"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.KeyPairIdentity:void <init>(org.apache.sshd.common.signature.SignatureFactoriesManager,org.apache.sshd.common.signature.SignatureFactoriesManager,java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.SessionKeyPairIterator:org.apache.sshd.client.auth.pubkey.KeyPairIdentity next()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:org.apache.sshd.client.auth.pubkey.KeyPairIdentity lambda$new$1(org.apache.sshd.common.signature.SignatureFactoriesManager,org.apache.sshd.client.session.ClientSession,java.security.KeyPair)"
        ]
    },
    "org.apache.sshd.client.SshClient:void setUserAuthFactories(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.ClientAuthenticationManager:void setUserAuthFactoriesNames(java.util.Collection)",
            "org.apache.sshd.client.SshClient:void checkConfig()"
        ]
    },
    "org.apache.sshd.client.SshClient:void checkConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:void start()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser:org.apache.sshd.common.config.keys.loader.KeyPairResourceParser aggregate(org.apache.sshd.common.config.keys.loader.KeyPairResourceParser[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.config.keys.loader.KeyPairResourceParser getKeyPairResourceParser()"
        ]
    },
    "org.apache.sshd.common.util.ValidateUtils:java.lang.Object checkInstanceOf(java.lang.Object,java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.SignatureRSA:void initVerifier(java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureCiphers(org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.PropertyResolver,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configure(org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.PropertyResolver,boolean,boolean)"
        ]
    },
    "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureSignatures(org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.PropertyResolver,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configure(org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.PropertyResolver,boolean,boolean)"
        ]
    },
    "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureMacs(org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.PropertyResolver,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configure(org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.PropertyResolver,boolean,boolean)"
        ]
    },
    "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureKeyExchanges(org.apache.sshd.common.helpers.AbstractFactoryManager,org.apache.sshd.common.PropertyResolver,boolean,java.util.function.Function,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.SshServer configure(org.apache.sshd.server.SshServer,org.apache.sshd.common.PropertyResolver,boolean,boolean)",
            "org.apache.sshd.client.config.SshClientConfigFileReader:org.apache.sshd.client.SshClient configure(org.apache.sshd.client.SshClient,org.apache.sshd.common.PropertyResolver,boolean,boolean)"
        ]
    },
    "org.apache.sshd.client.config.hosts.ConfigFileHostEntryResolver:org.apache.sshd.client.config.hosts.HostConfigEntry resolveEffectiveHost(java.lang.String,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.ConfigFileHostEntryResolver:org.apache.sshd.client.config.hosts.HostConfigEntry resolveEffectiveHost(java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.lang.String,int)",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel$2:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpipServerChannel$2:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.io.der.ASN1Object:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue[] values()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories[] values()",
            "org.apache.sshd.server.auth.WelcomeBannerPhase:org.apache.sshd.server.auth.WelcomeBannerPhase[] values()",
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type[] values()",
            "org.apache.sshd.server.Signal:org.apache.sshd.server.Signal[] values()",
            "org.apache.sshd.common.util.io.der.ASN1Object:org.apache.sshd.common.util.io.der.ASN1Object clone()",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class[] values()",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type[] values()",
            "org.apache.sshd.common.util.io.IoUtils:byte[] getEOLBytes()",
            "org.apache.sshd.common.util.io.IoUtils:java.nio.file.LinkOption[] getLinkOptions(boolean)",
            "org.apache.sshd.common.util.io.ModifiableFileWatcher:void <init>(java.nio.file.Path,java.nio.file.LinkOption[])",
            "org.apache.sshd.common.util.closeable.AbstractCloseable$State:org.apache.sshd.common.util.closeable.AbstractCloseable$State[] values()",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures[] values()",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext clone()",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities[] values()",
            "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue[] values()",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue[] values()",
            "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue[] values()",
            "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig[] values()",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests[] values()",
            "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories[] values()",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves[] values()",
            "org.apache.sshd.common.cipher.Cipher$Mode:org.apache.sshd.common.cipher.Cipher$Mode[] values()",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression[] values()",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers[] values()",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories[] values()",
            "org.apache.sshd.common.kex.DHGroupData:byte[] getOakleyGroupPrimeValue(java.lang.String)",
            "org.apache.sshd.common.kex.KexState:org.apache.sshd.common.kex.KexState[] values()",
            "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption[] values()",
            "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result[] values()",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulState:org.apache.sshd.common.channel.AbstractChannel$GracefulState[] values()",
            "org.apache.sshd.common.channel.PtyMode:org.apache.sshd.common.channel.PtyMode[] values()",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs[] values()",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions[] values()",
            "org.apache.sshd.common.compression.Compression$Type:org.apache.sshd.common.compression.Compression$Type[] values()",
            "org.apache.sshd.common.forward.TcpipClientChannel$Type:org.apache.sshd.common.forward.TcpipClientChannel$Type[] values()",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] getSessionId()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void receiveNewKeys()",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] getClientKexData()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void setClientKexData(byte[])",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] getServerKexData()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void setServerKexData(byte[])",
            "org.apache.sshd.common.session.Session$TimeoutStatus:org.apache.sshd.common.session.Session$TimeoutStatus[] values()",
            "org.apache.sshd.common.session.SessionListener$Event:org.apache.sshd.common.session.SessionListener$Event[] values()",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.client.config.hosts.KnownHostDigest[] values()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories[] values()",
            "org.apache.sshd.client.channel.ClientChannelEvent:org.apache.sshd.client.channel.ClientChannelEvent[] values()",
            "org.apache.sshd.client.channel.ClientChannel$Streaming:org.apache.sshd.client.channel.ClientChannel$Streaming[] values()",
            "org.apache.sshd.client.session.ClientSession$ClientSessionEvent:org.apache.sshd.client.session.ClientSession$ClientSessionEvent[] values()"
        ]
    },
    "org.apache.sshd.common.util.io.der.ASN1Class:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.der.DERWriter$1:void close()",
            "org.apache.sshd.common.util.io.der.ASN1Object:void <init>(byte,int,byte[])",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class[] values()",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromName(java.lang.String)",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromDERValue(int)",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromTypeValue(int)",
            "org.apache.sshd.common.util.io.der.ASN1Class:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.io.der.ASN1Object$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.der.ASN1Object:java.lang.Object asObject()",
            "org.apache.sshd.common.util.io.der.ASN1Object:java.lang.String asString()",
            "org.apache.sshd.common.util.io.der.ASN1Object$1:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(java.lang.String,java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.config.keys.ServerIdentity:org.apache.sshd.server.SshServer setKeyPairProvider(org.apache.sshd.server.SshServer,java.util.Properties,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.io.ModifiableFileWatcher:void <init>(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.ModifiableFileWatcher:void <init>(java.io.File)",
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:void <init>(java.nio.file.Path,java.util.function.Supplier,java.util.function.Supplier,boolean)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path ensureDirectory(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.FileSystem newFileSystem(java.lang.Object,java.nio.file.Path,java.util.Map)"
        ]
    },
    "org.apache.sshd.client.config.hosts.DefaultConfigFileHostEntryResolver:void <init>(java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.keyverifier.DefaultKnownHostsServerKeyVerifier:void <init>(org.apache.sshd.client.keyverifier.ServerKeyVerifier,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.DefaultKnownHostsServerKeyVerifier:void <init>(org.apache.sshd.client.keyverifier.ServerKeyVerifier)"
        ]
    },
    "org.apache.sshd.client.keyverifier.DefaultKnownHostsServerKeyVerifier:void <init>(org.apache.sshd.client.keyverifier.ServerKeyVerifier,boolean,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:void <init>(java.nio.file.Path,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(java.lang.String,java.nio.file.Path,boolean,java.nio.file.LinkOption[])",
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:void <init>(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.client.config.hosts.ConfigFileHostEntryResolver:void <init>(java.nio.file.Path,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.DefaultConfigFileHostEntryResolver:void <init>(java.nio.file.Path,boolean,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.hosts.ConfigFileHostEntryResolver:void <init>(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void <init>(org.apache.sshd.client.keyverifier.ServerKeyVerifier,java.nio.file.Path,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.DefaultKnownHostsServerKeyVerifier:void <init>(org.apache.sshd.client.keyverifier.ServerKeyVerifier,boolean,java.nio.file.Path,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void <init>(org.apache.sshd.client.keyverifier.ServerKeyVerifier,java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.DESPrivateKeyObfuscator:org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext resolveEffectiveContext(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.DESPrivateKeyObfuscator:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,boolean)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:java.lang.Object clone()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.AllowTcpForwardingValue:org.apache.sshd.server.config.AllowTcpForwardingValue[] values()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories[] values()",
            "org.apache.sshd.server.auth.WelcomeBannerPhase:org.apache.sshd.server.auth.WelcomeBannerPhase[] values()",
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type[] values()",
            "org.apache.sshd.server.Signal:org.apache.sshd.server.Signal[] values()",
            "org.apache.sshd.common.util.io.der.ASN1Object:org.apache.sshd.common.util.io.der.ASN1Object clone()",
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class[] values()",
            "org.apache.sshd.common.util.io.der.ASN1Type:org.apache.sshd.common.util.io.der.ASN1Type[] values()",
            "org.apache.sshd.common.util.io.IoUtils:byte[] getEOLBytes()",
            "org.apache.sshd.common.util.io.IoUtils:java.nio.file.LinkOption[] getLinkOptions(boolean)",
            "org.apache.sshd.common.util.io.ModifiableFileWatcher:void <init>(java.nio.file.Path,java.nio.file.LinkOption[])",
            "org.apache.sshd.common.util.closeable.AbstractCloseable$State:org.apache.sshd.common.util.closeable.AbstractCloseable$State[] values()",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures[] values()",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext clone()",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities[] values()",
            "org.apache.sshd.common.config.LogLevelValue:org.apache.sshd.common.config.LogLevelValue[] values()",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.config.CompressionConfigValue[] values()",
            "org.apache.sshd.common.config.SyslogFacilityValue:org.apache.sshd.common.config.SyslogFacilityValue[] values()",
            "org.apache.sshd.common.config.TimeValueConfig:org.apache.sshd.common.config.TimeValueConfig[] values()",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests[] values()",
            "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories[] values()",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves[] values()",
            "org.apache.sshd.common.cipher.Cipher$Mode:org.apache.sshd.common.cipher.Cipher$Mode[] values()",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:org.apache.sshd.common.cipher.ECCurves$ECPointCompression[] values()",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers[] values()",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories[] values()",
            "org.apache.sshd.common.kex.DHGroupData:byte[] getOakleyGroupPrimeValue(java.lang.String)",
            "org.apache.sshd.common.kex.KexState:org.apache.sshd.common.kex.KexState[] values()",
            "org.apache.sshd.common.kex.KexProposalOption:org.apache.sshd.common.kex.KexProposalOption[] values()",
            "org.apache.sshd.common.channel.RequestHandler$Result:org.apache.sshd.common.channel.RequestHandler$Result[] values()",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulState:org.apache.sshd.common.channel.AbstractChannel$GracefulState[] values()",
            "org.apache.sshd.common.channel.PtyMode:org.apache.sshd.common.channel.PtyMode[] values()",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs[] values()",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions[] values()",
            "org.apache.sshd.common.compression.Compression$Type:org.apache.sshd.common.compression.Compression$Type[] values()",
            "org.apache.sshd.common.forward.TcpipClientChannel$Type:org.apache.sshd.common.forward.TcpipClientChannel$Type[] values()",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] getSessionId()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void receiveNewKeys()",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] getClientKexData()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void setClientKexData(byte[])",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] getServerKexData()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void setServerKexData(byte[])",
            "org.apache.sshd.common.session.Session$TimeoutStatus:org.apache.sshd.common.session.Session$TimeoutStatus[] values()",
            "org.apache.sshd.common.session.SessionListener$Event:org.apache.sshd.common.session.SessionListener$Event[] values()",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.client.config.hosts.KnownHostDigest[] values()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories[] values()",
            "org.apache.sshd.client.channel.ClientChannelEvent:org.apache.sshd.client.channel.ClientChannelEvent[] values()",
            "org.apache.sshd.client.channel.ClientChannel$Streaming:org.apache.sshd.client.channel.ClientChannel$Streaming[] values()",
            "org.apache.sshd.client.session.ClientSession$ClientSessionEvent:org.apache.sshd.client.session.ClientSession$ClientSessionEvent[] values()"
        ]
    },
    "org.apache.sshd.common.kex.DHGroupData:byte[] getP15()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$4:org.apache.sshd.common.kex.DHG create(java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.kex.DHGroupData:byte[] getP16()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$5:org.apache.sshd.common.kex.DHG create(java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.kex.DHGroupData:byte[] getP17()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$6:org.apache.sshd.common.kex.DHG create(java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.kex.DHGroupData:byte[] getP18()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$7:org.apache.sshd.common.kex.DHG create(java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.channel.SttySupport:java.util.Map parsePtyModes(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.SttySupport:java.util.Map getUnixPtyModes()"
        ]
    },
    "org.apache.sshd.common.forward.TcpipClientChannel$1:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.TcpipClientChannel$1:void <clinit>()",
            "org.apache.sshd.common.forward.TcpipClientChannel:org.apache.sshd.client.future.OpenFuture open()"
        ]
    },
    "org.apache.sshd.server.session.AbstractServerSession:void receiveKexInit(java.util.Map,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:void setKexSeed(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit()",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.future.KeyExchangeFuture switchToNoneCipher()"
        ]
    },
    "org.apache.sshd.server.session.AbstractServerSession:void setKexSeed(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit()"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:void receiveKexInit(java.util.Map,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] receiveKexInit(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.io.der.DERParser:org.apache.sshd.common.util.io.der.ASN1Object readObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.util.AbstractMap$SimpleImmutableEntry decodeECPrivateKeySpec(java.io.InputStream,boolean)",
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.security.spec.ECPrivateKeySpec decodeECPrivateKeySpec(org.apache.sshd.common.util.io.der.DERParser)",
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.security.spec.ECPoint decodeECPublicKeyValue(org.apache.sshd.common.cipher.ECCurves,org.apache.sshd.common.util.io.der.DERParser)",
            "org.apache.sshd.common.config.keys.loader.pem.RSAPEMResourceKeyPairParser:java.security.KeyPair decodeRSAKeyPair(java.security.KeyFactory,java.io.InputStream,boolean)",
            "org.apache.sshd.common.config.keys.loader.pem.DSSPEMResourceKeyPairParser:java.security.KeyPair decodeDSSKeyPair(java.security.KeyFactory,java.io.InputStream,boolean)",
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.List getPKCS8AlgorithmIdentifier(org.apache.sshd.common.util.io.der.DERParser)",
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.List getPKCS8AlgorithmIdentifier(org.apache.sshd.common.util.io.der.ASN1Object)"
        ]
    },
    "org.apache.sshd.client.config.hosts.ConfigFileHostEntryResolver:org.apache.sshd.client.config.hosts.HostConfigEntryResolver resolveEffectiveResolver(java.lang.String,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.ConfigFileHostEntryResolver:org.apache.sshd.client.config.hosts.HostConfigEntry resolveEffectiveHost(java.lang.String,int,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.security.AbstractSecurityProviderRegistrar:java.security.Provider createProviderInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.AbstractSecurityProviderRegistrar:java.security.Provider getOrCreateProvider(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:boolean isBouncyCastleRegistered()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleRandom:void <init>()",
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider createGeneratorHostKeyProvider(java.nio.file.Path)",
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.config.keys.loader.KeyPairResourceParser getBouncycastleKeyPairResourceParser()",
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.random.RandomFactory getRandomFactory()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:boolean isEDDSACurveSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:net.i2p.crypto.eddsa.EdDSAPrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:int getEDDSAKeySize(java.security.Key)",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:boolean compareEDDSAPPublicKeys(java.security.PublicKey,java.security.PublicKey)",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:net.i2p.crypto.eddsa.EdDSAPublicKey recoverEDDSAPublicKey(java.security.PrivateKey)",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.signature.Signature getEDDSASignature()",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getEDDSAPublicKeyEntryDecoder()",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getOpenSSHEDDSAPrivateKeyEntryDecoder()",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:boolean compareEDDSAPrivateKeys(java.security.PrivateKey,java.security.PrivateKey)",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:java.security.PublicKey generateEDDSAPublicKey(byte[])",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:java.security.PrivateKey generateEDDSAPrivateKey(byte[])",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.util.buffer.Buffer putRawEDDSAPublicKey(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey)",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.util.buffer.Buffer putEDDSAKeyPair(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey,java.security.PrivateKey)",
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getEDDSAPublicKeyEntryDecoder()",
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getOpenSSHEDDSAPrivateKeyEntryDecoder()",
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.signature.Signature getEDDSASigner()",
            "org.apache.sshd.common.util.security.SecurityUtils:java.lang.Class getEDDSAPublicKeyType()",
            "org.apache.sshd.common.util.security.SecurityUtils:java.lang.Class getEDDSAPrivateKeyType()",
            "org.apache.sshd.common.util.security.SecurityUtils:boolean compareEDDSAPPublicKeys(java.security.PublicKey,java.security.PublicKey)",
            "org.apache.sshd.common.util.security.SecurityUtils:boolean compareEDDSAPrivateKeys(java.security.PrivateKey,java.security.PrivateKey)",
            "org.apache.sshd.common.util.security.SecurityUtils:java.security.PublicKey recoverEDDSAPublicKey(java.security.PrivateKey)",
            "org.apache.sshd.common.util.security.SecurityUtils:java.security.PublicKey generateEDDSAPublicKey(java.lang.String,byte[])",
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.buffer.Buffer putRawEDDSAPublicKey(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey)",
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.buffer.Buffer putEDDSAKeyPair(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey,java.security.PrivateKey)",
            "org.apache.sshd.common.util.security.SecurityUtils:java.security.KeyPair extractEDDSAKeyPair(org.apache.sshd.common.util.buffer.Buffer,java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures$6:boolean isSupported()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void <clinit>()",
            "org.apache.sshd.common.config.keys.BuiltinIdentities$2:boolean isSupported()",
            "org.apache.sshd.common.config.keys.KeyUtils:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.security.SecurityEntityFactory createSecurityEntityFactory(java.lang.Class,java.util.function.Predicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.security.SecurityEntityFactory lambda$resolveSecurityEntityFactory$1(java.lang.Class,java.util.function.Predicate,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean lambda$findSecurityProviderRegistrarBySecurityEntity$0(java.util.function.Predicate,org.apache.sshd.common.util.security.SecurityProviderRegistrar)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar$lambda_findSecurityProviderRegistrarBySecurityEntity_0__40:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.logging.LoggingUtils:boolean lambda$getMnemonicFields$2(java.util.function.Predicate,java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.logging.LoggingUtils$lambda_getMnemonicFields_2__48:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.kex.KeyExchange:java.lang.String getGroupKexOpcodeName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.kex.KeyExchange:java.lang.String getSimpleKexOpcodeName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.SshConstants$LazyReasonsMapHolder:java.util.Map access$200()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.SshConstants:java.lang.String getDisconnectReasonName(int)"
        ]
    },
    "org.apache.sshd.common.SshConstants:java.lang.String getDisconnectReasonName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleDisconnect(int,java.lang.String,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void exceptionCaught(java.lang.Throwable)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void disconnect(int,java.lang.String)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void lambda$disconnect$5(int,java.lang.String,org.apache.sshd.common.io.IoWriteFuture)",
            "org.apache.sshd.common.SshException:void <init>(int)",
            "org.apache.sshd.common.SshException:void <init>(int,java.lang.Throwable)",
            "org.apache.sshd.common.SshException:void <init>(int,java.lang.String,java.lang.Throwable)"
        ]
    },
    "org.apache.sshd.common.SshConstants:java.lang.String getOpenErrorCodeName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture sendChannelOpenFailure(org.apache.sshd.common.util.buffer.Buffer,int,int,java.lang.String,java.lang.String)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenFailure(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.SshConstants$LazyOpenCodesMapHolder:java.util.Map access$300()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.SshConstants:java.lang.String getOpenErrorCodeName(int)"
        ]
    },
    "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractive:java.lang.Boolean doValidateAuthResponse(org.apache.sshd.server.session.ServerSession,java.lang.String,org.apache.sshd.server.auth.keyboard.KeyboardInteractiveAuthenticator,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractive:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationInProgress(int,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelOutputStream:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String resolveWelcomeBanner(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.common.PropertyResolverUtils:long toLong(java.lang.Object,long)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long toLong(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:int toInteger(java.lang.Object,int)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer toInteger(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean toBoolean(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset toCharset(java.lang.Object)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:long validateIncomingDataSize(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleData(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleExtendedData(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void <init>(org.apache.sshd.common.channel.Channel,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.server.command.Command prepareCommand(java.lang.String,org.apache.sshd.server.command.Command)",
            "org.apache.sshd.client.channel.ChannelDirectTcpip:void doOpen()",
            "org.apache.sshd.client.channel.ChannelSession$1:void <init>(org.apache.sshd.client.channel.ChannelSession,org.apache.sshd.common.channel.Channel,byte)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelAsyncOutputStream:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String resolveWelcomeBanner(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.common.PropertyResolverUtils:long toLong(java.lang.Object,long)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long toLong(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:int toInteger(java.lang.Object,int)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer toInteger(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean toBoolean(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset toCharset(java.lang.Object)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:boolean handleFirstKexPacketFollows(int,org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void doHandleMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void validateKexState(int,org.apache.sshd.common.kex.KexState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexMessage(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:boolean handleServiceRequest(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleServiceAccept(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer encode(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.AbstractUserAuth:boolean process(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:java.lang.String getAuthCommandName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:boolean verifyTrialsCount(org.apache.sshd.client.session.ClientSession,java.lang.String,int,int,int)"
        ]
    },
    "org.apache.sshd.common.SshConstants:java.util.Set getAmbiguousOpcodes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.SshConstants:boolean isAmbiguousOpcode(int)"
        ]
    },
    "org.apache.sshd.common.SshConstants$LazyAmbiguousOpcodesHolder:java.util.Set access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.SshConstants:java.util.Set getAmbiguousOpcodes()"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getPublicKey()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AbstractAgentProxy:java.util.List getIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void invokeChannelSignaller(org.apache.sshd.common.util.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void signalChannelInitialized()",
            "org.apache.sshd.common.channel.AbstractChannel:void signalChannelOpenSuccess()",
            "org.apache.sshd.common.channel.AbstractChannel:void signalChannelOpenFailure(java.lang.Throwable)",
            "org.apache.sshd.common.channel.AbstractChannel:void notifyStateChanged(java.lang.String)",
            "org.apache.sshd.common.channel.AbstractChannel:void signalChannelClosed(java.lang.Throwable)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void invokeSessionSignaller(org.apache.sshd.common.util.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void signalSessionCreated(org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void signalExceptionCaught(java.lang.Throwable)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void signalSessionClosed()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void signalNegotiationStart(java.util.Map,java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void signalNegotiationEnd(java.util.Map,java.util.Map,java.util.Map,java.lang.Throwable)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void signalSessionEvent(org.apache.sshd.common.session.SessionListener$Event)"
        ]
    },
    "org.apache.sshd.server.shell.ProcessShellFactory:org.apache.sshd.server.shell.InvertedShell createInvertedShell()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.ProcessShellFactory:org.apache.sshd.server.command.Command create()"
        ]
    },
    "org.apache.sshd.server.shell.ProcessShell:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String resolveWelcomeBanner(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext clone()",
            "org.apache.sshd.common.PropertyResolverUtils:long toLong(java.lang.Object,long)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long toLong(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:int toInteger(java.lang.Object,int)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer toInteger(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean toBoolean(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset toCharset(java.lang.Object)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.KeyPairResourceParser:byte[] extractDataBytes(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)"
        ]
    },
    "org.apache.sshd.server.ServerAuthenticationManager:java.lang.String getUserAuthFactoriesNameList()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.signature.SignatureFactoriesManager:java.lang.String getSignatureFactoriesNameList()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.kex.KexFactoryManager:java.lang.String getCipherFactoriesNameList()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.kex.KexFactoryManager:java.lang.String getCompressionFactoriesNameList()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.kex.KexFactoryManager:java.lang.String getMacFactoriesNameList()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.ClientAuthenticationManager:java.lang.String getUserAuthFactoriesNameList()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult getSignatures(org.apache.sshd.common.PropertyResolver)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.IdentityUtils:java.nio.file.Path getUserHomeFolder()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.PublicKeyEntry$LazyDefaultKeysFolderHolder:void <clinit>()",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.StringBuilder appendUserHome(java.lang.StringBuilder)"
        ]
    },
    "org.apache.sshd.common.config.keys.IdentityUtils$LazyDefaultUserHomeFolderHolder:java.nio.file.Path access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.IdentityUtils:java.nio.file.Path getUserHomeFolder()"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentityLoader$1:boolean isValidLocation(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:java.security.KeyPair reloadClientIdentity(java.nio.file.Path)",
            "org.apache.sshd.client.SshClient:java.util.List loadClientIdentities(java.util.Collection,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:void addIdentity(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator$LazyDefaultAuthorizedKeysFileHolder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator$LazyDefaultAuthorizedKeysFileHolder:java.nio.file.Path access$000()",
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator$LazyDefaultAuthorizedKeysFileHolder:void <clinit>()",
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:java.nio.file.Path getDefaultAuthorizedKeysFile()"
        ]
    },
    "org.apache.sshd.common.config.keys.PublicKeyEntry$LazyDefaultKeysFolderHolder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.PublicKeyEntry$LazyDefaultKeysFolderHolder:java.nio.file.Path access$000()",
            "org.apache.sshd.common.config.keys.PublicKeyEntry$LazyDefaultKeysFolderHolder:void <clinit>()",
            "org.apache.sshd.common.config.keys.PublicKeyEntry:java.nio.file.Path getDefaultKeysFolderPath()"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry$LazyDefaultConfigFileHolder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry$LazyDefaultConfigFileHolder:java.nio.file.Path access$000()",
            "org.apache.sshd.client.config.hosts.HostConfigEntry$LazyDefaultConfigFileHolder:void <clinit>()",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.nio.file.Path getDefaultHostConfigFile()"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostEntry$LazyDefaultConfigFileHolder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostEntry:java.nio.file.Path getDefaultKnownHostsFile()",
            "org.apache.sshd.client.config.hosts.KnownHostEntry$LazyDefaultConfigFileHolder:java.nio.file.Path access$000()",
            "org.apache.sshd.client.config.hosts.KnownHostEntry$LazyDefaultConfigFileHolder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.file.util.BasePath:java.nio.file.WatchKey register(java.nio.file.WatchService,java.nio.file.WatchEvent$Kind[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:void setPath(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider:void <init>(java.nio.file.Path)",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:void setFile(java.io.File)",
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleGeneratorHostKeyProvider:void <init>(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path uriToPath(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.FileSystem getFileSystem(java.net.URI)"
        ]
    },
    "org.apache.sshd.common.keyprovider.FileKeyPairProvider:java.security.KeyPair doLoadKey(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.FileKeyPairProvider:java.security.KeyPair doLoadKey(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.keyprovider.FileKeyPairProvider$toAbsolutePath__204:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.file.root.RootedPath:java.nio.file.Path toRealPath(java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.FileSystem newFileSystem(java.lang.Object,java.nio.file.Path,java.util.Map)"
        ]
    },
    "org.apache.sshd.common.file.util.MockPath:int compareTo(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.MapEntryUtils:int lambda$static$0(java.util.Map$Entry,java.util.Map$Entry)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path readSymbolicLink(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.Path readSymbolicLink(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:long getLongProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession$CommandCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.PropertyResolver:long getLongProperty(java.lang.String,long)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:long getLongProperty(java.util.Map,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long getLong(org.apache.sshd.common.PropertyResolver,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolver:java.lang.Long getLong(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long getLong(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.PropertyResolverUtils:int getIntProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.List doReadIdentification(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.common.PropertyResolver:int getIntProperty(java.lang.String,int)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:int getIntProperty(java.util.Map,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer getInteger(org.apache.sshd.common.PropertyResolver,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolver:java.lang.Integer getInteger(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer getInteger(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.PropertyResolverUtils:boolean toBoolean(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolverUtils:boolean getBooleanProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,boolean)",
            "org.apache.sshd.common.PropertyResolverUtils:boolean getBooleanProperty(java.util.Map,java.lang.String,boolean)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean getBoolean(org.apache.sshd.common.PropertyResolver,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolver:java.lang.Boolean getBoolean(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean getBoolean(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset getCharset(org.apache.sshd.common.PropertyResolver,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String resolveWelcomeBanner(org.apache.sshd.server.session.ServerSession)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset getCharset(java.util.Map,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.StringBuilder appendUserHome(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String resolveIdentityFilePath(java.lang.String,java.lang.String,int,java.lang.String)"
        ]
    },
    "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.CachingPublicKeyAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)"
        ]
    },
    "org.apache.sshd.server.auth.hostbased.StaticHostBasedAuthenticator:boolean authenticate(org.apache.sshd.server.session.ServerSession,java.lang.String,java.security.PublicKey,java.lang.String,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.StaticPublickeyAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.CachingPublicKeyAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:java.security.PublicKey recoverPublicKey(java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHRSAPrivateKeyDecoder:java.security.PublicKey recoverPublicKey(java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.keyprovider.KeyPairProvider$lambda_loadKey_0__67:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean lambda$findSecurityProviderRegistrarBySecurityEntity$0(java.util.function.Predicate,org.apache.sshd.common.util.security.SecurityProviderRegistrar)",
            "org.apache.sshd.common.util.logging.LoggingUtils:boolean lambda$getMnemonicFields$2(java.util.function.Predicate,java.lang.reflect.Field)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.channel.Window:void waitForCondition(java.util.function.Predicate,long)"
        ]
    },
    "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher$isSupported__220:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean lambda$findSecurityProviderRegistrarBySecurityEntity$0(java.util.function.Predicate,org.apache.sshd.common.util.security.SecurityProviderRegistrar)",
            "org.apache.sshd.common.util.logging.LoggingUtils:boolean lambda$getMnemonicFields$2(java.util.function.Predicate,java.lang.reflect.Field)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.channel.Window:void waitForCondition(java.util.function.Predicate,long)"
        ]
    },
    "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$lambda_static_1__86:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.net.SshdSocketAddress:int lambda$static$1(java.net.SocketAddress,java.net.SocketAddress)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:int lambda$static$0(java.net.InetAddress,java.net.InetAddress)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.NamedResource:boolean lambda$findByName$1(java.util.Comparator,java.lang.String,org.apache.sshd.common.NamedResource)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider:int findIdentityIndex(java.util.List,java.util.Comparator,java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.keyverifier.StaticServerKeyVerifier:boolean verifyServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:boolean acceptUnknownHostKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.keyverifier.DelegatingServerKeyVerifier:boolean verifyServerKey(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)",
            "org.apache.sshd.client.session.AbstractClientSession:void checkKeys()"
        ]
    },
    "org.apache.sshd.common.config.VersionProperties$LazyHolder:java.util.Map access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.VersionProperties:java.util.Map getVersionProperties()"
        ]
    },
    "org.apache.sshd.common.config.VersionProperties:java.util.Map getVersionProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.helpers.AbstractFactoryManager:java.lang.String getVersion()"
        ]
    },
    "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.SshServer configure(org.apache.sshd.server.SshServer,org.apache.sshd.common.PropertyResolver,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.SshClientConfigFileReader:org.apache.sshd.client.SshClient configure(org.apache.sshd.client.SshClient,org.apache.sshd.common.PropertyResolver,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.session.AbstractClientSession:void stopLocalPortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.forward.ExplicitPortForwardingTracker:void close()"
        ]
    },
    "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactory create(org.apache.sshd.common.FactoryManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactory create(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.common.helpers.AbstractFactoryManager:org.apache.sshd.common.io.IoServiceFactory getIoServiceFactory()"
        ]
    },
    "org.apache.sshd.common.config.keys.PublicKeyEntryDecoder:java.security.PublicKey decodePublicKey(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder:java.security.PrivateKey decodePrivateKey(org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putPublicKey(java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void removeIdentity(java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.digest.Digest,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.digest.Digest,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.digest.Digest)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,byte[])"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:java.security.interfaces.ECPublicKey recoverPublicKey(java.security.interfaces.ECPrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:java.security.PublicKey recoverPublicKey(java.security.PrivateKey)"
        ]
    },
    "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult getCiphers(org.apache.sshd.common.PropertyResolver)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult getKexFactories(org.apache.sshd.common.PropertyResolver)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.GenericUtils:boolean isEmpty(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.GenericUtils:boolean isNotEmpty(java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.stream.Stream stream(java.lang.Iterable)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:boolean isNotEmpty(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.mac.BuiltinMacs$ParseResult getMacs(org.apache.sshd.common.PropertyResolver)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.session.ClientSession:org.apache.sshd.client.session.forward.ExplicitPortForwardingTracker createLocalPortForwardingTracker(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ClientChannel createChannel(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ClientChannel createChannel(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.BuiltinFactory:boolean lambda$setUpFactories$0(boolean,org.apache.sshd.common.BuiltinFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.BuiltinFactory$lambda_setUpFactories_0__63:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.NamedFactory$lambda_setUpBuiltinFactories_1__39:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean lambda$findSecurityProviderRegistrarBySecurityEntity$0(java.util.function.Predicate,org.apache.sshd.common.util.security.SecurityProviderRegistrar)",
            "org.apache.sshd.common.util.logging.LoggingUtils:boolean lambda$getMnemonicFields$2(java.util.function.Predicate,java.lang.reflect.Field)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.channel.Window:void waitForCondition(java.util.function.Predicate,long)"
        ]
    },
    "org.apache.sshd.common.NamedFactory$lambda_setUpTransformedFactories_0__38:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean lambda$findSecurityProviderRegistrarBySecurityEntity$0(java.util.function.Predicate,org.apache.sshd.common.util.security.SecurityProviderRegistrar)",
            "org.apache.sshd.common.util.logging.LoggingUtils:boolean lambda$getMnemonicFields$2(java.util.function.Predicate,java.lang.reflect.Field)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.channel.Window:void waitForCondition(java.util.function.Predicate,long)"
        ]
    },
    "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:void <init>(java.nio.file.Path,boolean,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher:void <init>(boolean,java.util.function.Supplier,java.util.function.Supplier,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher:void <init>(boolean,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider,boolean)",
            "org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher:void <init>(java.util.function.Supplier,java.util.function.Supplier,boolean)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable appendNonEmptyPort(java.lang.Appendable,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.Appendable append(java.lang.Appendable)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.nio.file.Path,java.nio.file.OpenOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.ConfigFileHostEntryResolver:java.util.List reloadHostConfigEntries(java.nio.file.Path,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.File)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.auth.password.PasswordIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.client.auth.password.PasswordIdentityProvider,org.apache.sshd.client.auth.password.PasswordIdentityProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.password.PasswordIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.client.auth.password.PasswordIdentityProvider$lambda_static_0__103:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentity:org.apache.sshd.client.SshClient setKeyPairProvider(org.apache.sshd.client.SshClient,java.nio.file.Path,boolean,boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentity:org.apache.sshd.client.SshClient setKeyPairProvider(org.apache.sshd.client.SshClient,boolean,boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentity:org.apache.sshd.common.keyprovider.KeyPairProvider loadDefaultKeyPairProvider(boolean,boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:boolean okToReaccept(java.lang.Throwable,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onCompleted(java.nio.channels.AsynchronousSocketChannel,java.net.SocketAddress)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onFailed(java.lang.Throwable,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.common.util.io.IoUtils:void readFully(java.io.InputStream,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.IoUtils:void readFully(java.io.InputStream,byte[])",
            "org.apache.sshd.common.util.buffer.BufferUtils:long readUInt(java.io.InputStream,byte[],int,int)"
        ]
    },
    "org.apache.sshd.common.util.io.IoUtils:int read(java.io.InputStream,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.shell.TtyFilterInputStream:int readRawInput()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterInputStream:int read()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelSuccess(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void process(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleRandomFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:java.security.PublicKey recoverPublicKey(java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.signature.BuiltinSignatures$6:org.apache.sshd.common.signature.Signature create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.BuiltinSignatures$6:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.buffer.Buffer putEDDSAKeyPair(org.apache.sshd.common.util.buffer.Buffer,java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(boolean)"
        ]
    },
    "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(java.nio.file.Path,boolean,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(java.io.File,boolean)"
        ]
    },
    "org.apache.sshd.server.auth.password.UserAuthPassword:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.password.UserAuthPasswordFactory:org.apache.sshd.server.auth.password.UserAuthPassword create()"
        ]
    },
    "org.apache.sshd.server.auth.gss.UserAuthGSS:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.gss.UserAuthGSSFactory:org.apache.sshd.server.auth.UserAuth create()"
        ]
    },
    "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBasedFactory:org.apache.sshd.server.auth.hostbased.UserAuthHostBased create()",
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:void <init>()"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:void <init>()",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKeyFactory:org.apache.sshd.server.auth.pubkey.UserAuthPublicKey create()"
        ]
    },
    "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractive:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractiveFactory:org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractive create()"
        ]
    },
    "org.apache.sshd.server.auth.UserAuthNone:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.UserAuthNoneFactory:org.apache.sshd.server.auth.UserAuthNone create()"
        ]
    },
    "org.apache.sshd.server.shell.UnknownCommandFactory:org.apache.sshd.server.command.Command createCommand(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleExec(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.command.AbstractDelegatingCommandFactory:org.apache.sshd.server.command.Command createCommand(java.lang.String)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:void addEnvVariable(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleEnv(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handlePtyReq(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.server.command.Command prepareCommand(java.lang.String,org.apache.sshd.server.command.Command)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleAgentForwarding(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleX11Forwarding(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.agent.local.ChannelAgentForwardingFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.ChannelAgentForwardingFactory:void <clinit>()",
            "org.apache.sshd.agent.local.LocalAgentFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.agent.unix.UnixAgentFactory$1:void <init>(org.apache.sshd.agent.unix.UnixAgentFactory,java.lang.String,org.apache.sshd.common.util.threads.ExecutorServiceConfigurer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.unix.UnixAgentFactory:org.apache.sshd.agent.unix.UnixAgentFactory$1 lambda$getChannelForwardingFactories$0(org.apache.sshd.common.util.threads.ExecutorServiceConfigurer,org.apache.sshd.common.NamedFactory)"
        ]
    },
    "org.apache.sshd.agent.unix.ChannelAgentForwardingFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.unix.ChannelAgentForwardingFactory:void <clinit>()",
            "org.apache.sshd.agent.unix.UnixAgentFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.security.SecurityProviderChoice getDefaultProviderChoice()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:void register()",
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.security.SecurityEntityFactory createSecurityEntityFactory(java.lang.Class,java.util.function.Predicate)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean isEnabled()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.security.SecurityUtils:boolean isProviderRegistered(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:boolean isBouncyCastleRegistered()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.security.SecurityProviderRegistrar registerSecurityProvider(org.apache.sshd.common.util.security.SecurityProviderRegistrar)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:void register()"
        ]
    },
    "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleSecurityProviderRegistrar:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderRegistrar:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.security.SecurityEntityFactory:org.apache.sshd.common.util.security.SecurityEntityFactory toFactory(java.lang.Class,org.apache.sshd.common.util.security.SecurityProviderChoice,org.apache.sshd.common.util.security.SecurityProviderChoice)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.security.SecurityEntityFactory createSecurityEntityFactory(java.lang.Class,java.util.function.Predicate)"
        ]
    },
    "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:java.lang.String resolveClientUsername()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.SignatureEd25519:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.signature.Signature getEDDSASignature()"
        ]
    },
    "org.apache.sshd.common.signature.SignatureRSA:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.BuiltinSignatures$2:org.apache.sshd.common.signature.Signature create()"
        ]
    },
    "org.apache.sshd.common.signature.SignatureRSA:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.signature.SignatureDSA:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.SignatureDSA:void <init>()"
        ]
    },
    "org.apache.sshd.common.signature.SignatureECDSA:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.SignatureECDSA$SignatureECDSA256:void <init>()",
            "org.apache.sshd.common.signature.SignatureECDSA$SignatureECDSA384:void <init>()",
            "org.apache.sshd.common.signature.SignatureECDSA$SignatureECDSA521:void <init>()"
        ]
    },
    "org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory:java.nio.file.Path computeRootDir(org.apache.sshd.common.session.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory:java.nio.file.FileSystem createFileSystem(org.apache.sshd.common.session.Session)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.RSAPEMResourceKeyPairParser:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.RSAPEMResourceKeyPairParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.DSSPEMResourceKeyPairParser:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.DSSPEMResourceKeyPairParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.config.keys.loader.KeyPairResourceParser getKeyPairResourceParser()",
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils$1:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils$1:boolean canExtractKeyPairs(java.lang.String,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:void registerPEMResourceParser(org.apache.sshd.common.config.keys.loader.pem.KeyPairPEMResourceParser)",
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:org.apache.sshd.common.config.keys.loader.pem.KeyPairPEMResourceParser getPEMResourceParserByOid(java.lang.String)",
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:org.apache.sshd.common.config.keys.loader.pem.KeyPairPEMResourceParser getPEMResourceParserByAlgorithm(java.lang.String)",
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:java.util.concurrent.atomic.AtomicReference access$000()",
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:void <clinit>()",
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.security.PrivateKey decodePEMPrivateKeyPKCS8(java.lang.String,byte[],org.apache.sshd.common.config.keys.FilePasswordProvider)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.DESPrivateKeyObfuscator:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.DESPrivateKeyObfuscator:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator registerPrivateKeyObfuscator(org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.auth.AbstractUserAuthFactory:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.password.UserAuthPasswordFactory:void <init>()",
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBasedFactory:void <init>(java.util.List)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKeyFactory:void <init>(java.util.List)",
            "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractiveFactory:void <init>()",
            "org.apache.sshd.server.auth.UserAuthNoneFactory:void <init>()"
        ]
    },
    "org.apache.sshd.client.auth.AbstractUserAuthFactory:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.password.UserAuthPasswordFactory:void <init>()",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBasedFactory:void <init>()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory:void <init>(java.util.List)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractiveFactory:void <init>()"
        ]
    },
    "org.apache.sshd.common.auth.AbstractUserAuthServiceFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthServiceFactory:void <init>()",
            "org.apache.sshd.client.session.ClientUserAuthServiceFactory:void <init>()"
        ]
    },
    "org.apache.sshd.common.digest.BuiltinDigests:void <init>(java.lang.String,int,java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.digest.BuiltinDigests:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair generateKeyPair(java.lang.String)",
            "org.apache.sshd.common.util.buffer.keys.ECBufferPublicKeyParser:void <init>()",
            "org.apache.sshd.common.util.buffer.keys.ECBufferPublicKeyParser:java.security.interfaces.ECPublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.keys.ECBufferPublicKeyParser:java.security.interfaces.ECPublicKey getRawECKey(java.lang.String,java.security.spec.ECParameterSpec,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:java.security.KeyPair getKeyPair()",
            "org.apache.sshd.common.util.buffer.Buffer:java.security.KeyPair extractEC(java.lang.String,java.security.spec.ECParameterSpec)",
            "org.apache.sshd.common.util.buffer.Buffer:void putRawPublicKey(java.security.PublicKey)",
            "org.apache.sshd.common.util.buffer.Buffer:void putKeyPair(java.security.KeyPair)",
            "org.apache.sshd.common.signature.SignatureECDSA:boolean verify(byte[])",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.Signature getByCurveSize(java.security.spec.ECParameterSpec)",
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:void <init>()",
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.security.interfaces.ECPublicKey decodePublicKey(java.lang.String,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.lang.String encodePublicKey(java.io.OutputStream,java.security.interfaces.ECPublicKey)",
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.security.KeyPair generateKeyPair(int)",
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.util.AbstractMap$SimpleImmutableEntry decodeECPrivateKeySpec(java.io.InputStream,boolean)",
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.security.spec.ECPrivateKeySpec decodeECPrivateKeySpec(org.apache.sshd.common.util.io.der.DERParser)",
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.security.spec.ECPoint decodeECPublicKeyValue(org.apache.sshd.common.cipher.ECCurves,org.apache.sshd.common.util.io.der.DERParser)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:void <init>()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:java.security.interfaces.ECPrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:java.security.interfaces.ECPublicKey recoverPublicKey(java.security.interfaces.ECPrivateKey)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:java.security.KeyPair generateKeyPair(int)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getKeyType(java.security.Key)",
            "org.apache.sshd.common.config.keys.KeyUtils:int getKeySize(java.security.Key)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves[] values()",
            "org.apache.sshd.common.cipher.ECCurves:void <init>(java.lang.String,int,java.lang.String,int[],java.security.spec.ECParameterSpec,int,org.apache.sshd.common.digest.DigestFactory)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromKeyType(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveName(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromECKey(java.security.interfaces.ECKey)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveParameters(java.security.spec.ECParameterSpec)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveSize(int)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOIDValue(java.util.List)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromOID(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves:byte[] encodeECPoint(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)",
            "org.apache.sshd.common.cipher.ECCurves:byte[] encodeECPoint(java.security.spec.ECPoint,java.security.spec.EllipticCurve)",
            "org.apache.sshd.common.cipher.ECCurves:java.security.spec.ECPoint octetStringToEcPoint(byte[])",
            "org.apache.sshd.common.cipher.ECCurves:void <clinit>()",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression$1:java.security.spec.ECPoint octetStringToEcPoint(byte[],int,int)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression$3:java.security.spec.ECPoint octetStringToEcPoint(byte[],int,int)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression$3:void writeECPoint(java.io.OutputStream,java.lang.String,java.security.spec.ECPoint)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression$2:java.security.spec.ECPoint octetStringToEcPoint(byte[],int,int)",
            "org.apache.sshd.common.kex.BuiltinDHFactories$10:org.apache.sshd.common.kex.ECDH create(java.lang.Object[])",
            "org.apache.sshd.common.kex.BuiltinDHFactories$10:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$11:org.apache.sshd.common.kex.ECDH create(java.lang.Object[])",
            "org.apache.sshd.common.kex.BuiltinDHFactories$11:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$12:org.apache.sshd.common.kex.ECDH create(java.lang.Object[])",
            "org.apache.sshd.common.kex.BuiltinDHFactories$12:boolean isSupported()",
            "org.apache.sshd.common.kex.ECDH:void <init>(java.lang.String)",
            "org.apache.sshd.common.kex.ECDH:byte[] getE()",
            "org.apache.sshd.common.kex.ECDH:void setF(byte[])",
            "org.apache.sshd.common.kex.ECDH:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.keyprovider.KeyPairProvider:void <clinit>()",
            "org.apache.sshd.common.cipher.ECCurves$lambda_static_0__27:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers:void <init>(java.lang.String,int,java.lang.String,int,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.BuiltinCiphers:void <init>(java.lang.String,int,java.lang.String,int,int,java.lang.String,java.lang.String,org.apache.sshd.common.cipher.BuiltinCiphers$1)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.cipher.BaseRC4Cipher:void <init>(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.BuiltinCiphers$3:org.apache.sshd.common.cipher.Cipher create()",
            "org.apache.sshd.common.cipher.BuiltinCiphers$2:org.apache.sshd.common.cipher.Cipher create()"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.Cipher create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.BuiltinCiphers:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.compression.CompressionNone:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.compression.BuiltinCompressions$1:org.apache.sshd.common.compression.Compression create()"
        ]
    },
    "org.apache.sshd.common.compression.CompressionZlib:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.compression.CompressionZlib:void <init>()",
            "org.apache.sshd.common.compression.CompressionDelayedZlib:void <init>()"
        ]
    },
    "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleRandomFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleRandomFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.random.JceRandomFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.JceRandomFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.global.OpenSshHostKeysHandler:void <init>(org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.global.AbstractOpenSshHostKeysHandler:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:void <init>()",
            "org.apache.sshd.client.global.OpenSshHostKeysHandler:void <init>()"
        ]
    },
    "org.apache.sshd.client.global.OpenSshHostKeysHandler:void <init>(org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.forward.LocalForwardingEntry:void <init>(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.LocalForwardingEntry:void <init>(org.apache.sshd.common.util.net.SshdSocketAddress,java.net.InetSocketAddress)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.String getStringProperty(java.util.Map,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.helpers.AbstractFactoryManager:java.lang.String getVersion()"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object getObject(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolverUtils:boolean getBooleanProperty(java.util.Map,java.lang.String,boolean)",
            "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset getCharset(java.util.Map,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.String getString(java.util.Map,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object updateProperty(java.util.Map,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object updateProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object updateProperty(java.util.Map,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object updateProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,int)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object updateProperty(java.util.Map,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object updateProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,boolean)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object updateProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleAgentForwarding(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.common.helpers.AbstractFactoryManager:void setNioWorkers(int)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object getObject(org.apache.sshd.common.PropertyResolver,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.common.PropertyResolverUtils:boolean getBooleanProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,boolean)",
            "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset getCharset(org.apache.sshd.common.PropertyResolver,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.String getString(org.apache.sshd.common.PropertyResolver,java.lang.String)",
            "org.apache.sshd.common.PropertyResolver:java.lang.Object getObject(java.lang.String)"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostDigest:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.client.config.hosts.KnownHostDigest[] values()",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.client.config.hosts.KnownHostDigest fromName(java.lang.String)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:void <clinit>()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:org.apache.sshd.client.config.hosts.KnownHostHashValue parse(java.lang.String,org.apache.sshd.client.config.hosts.KnownHostHashValue)",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String getProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.Map updateGlobalProperties(java.util.Map)",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.lang.String appendPropertyValue(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.auth.password.UserAuthPassword:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.password.UserAuthPasswordFactory:org.apache.sshd.client.auth.password.UserAuthPassword create()"
        ]
    },
    "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:void <init>(org.apache.sshd.client.auth.hostbased.HostKeyIdentityProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBasedFactory:org.apache.sshd.client.auth.hostbased.UserAuthHostBased create()"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void <init>()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory:org.apache.sshd.client.auth.pubkey.UserAuthPublicKey create()"
        ]
    },
    "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractiveFactory:org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive create()"
        ]
    },
    "org.apache.sshd.client.auth.password.UserAuthPassword:void init(org.apache.sshd.client.session.ClientSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientUserAuthService:void tryNext(int)"
        ]
    },
    "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:void init(org.apache.sshd.client.session.ClientSession,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientUserAuthService:void tryNext(int)"
        ]
    },
    "org.apache.sshd.client.channel.AbstractClientChannel:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.x11.ChannelForwardedX11:void <init>(org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.agent.local.AgentForwardedChannel:void <init>(java.lang.String)",
            "org.apache.sshd.agent.unix.AgentForwardedChannel:void <init>(long,java.lang.String)",
            "org.apache.sshd.common.forward.TcpipClientChannel:void <init>(org.apache.sshd.common.forward.TcpipClientChannel$Type,org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.client.channel.ChannelDirectTcpip:void <init>(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.client.channel.ChannelSession:void <init>()"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void addChannelListener(org.apache.sshd.common.channel.ChannelListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.AbstractChannel:void removeChannelListener(org.apache.sshd.common.channel.ChannelListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.helpers.AbstractFactoryManager:void addChannelListener(org.apache.sshd.common.channel.ChannelListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.helpers.AbstractFactoryManager:void removeChannelListener(org.apache.sshd.common.channel.ChannelListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void addChannelListener(org.apache.sshd.common.channel.ChannelListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void removeChannelListener(org.apache.sshd.common.channel.ChannelListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.helpers.AbstractFactoryManager:void addPortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.helpers.AbstractFactoryManager:void removePortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void addPortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.forward.DefaultForwardingFilter:void removePortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.forward.DefaultForwarderFactory:void addPortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.forward.DefaultForwarderFactory:void removePortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void addPortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void removePortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void addPortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:void removePortForwardingEventListener(org.apache.sshd.common.forward.PortForwardingEventListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.helpers.AbstractFactoryManager:void addSessionListener(org.apache.sshd.common.session.SessionListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.helpers.AbstractFactoryManager:void setupSessionTimeout(org.apache.sshd.common.session.helpers.AbstractSessionFactory)"
        ]
    },
    "org.apache.sshd.common.helpers.AbstractFactoryManager:void removeSessionListener(org.apache.sshd.common.session.SessionListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.helpers.AbstractFactoryManager:void stopSessionTimeoutListener(org.apache.sshd.common.session.helpers.AbstractSessionFactory)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void addSessionListener(org.apache.sshd.common.session.SessionListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.CachingPublicKeyAuthenticator:boolean authenticate(java.lang.String,java.security.PublicKey,org.apache.sshd.server.session.ServerSession)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void removeSessionListener(org.apache.sshd.common.session.SessionListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.CachingPublicKeyAuthenticator:void sessionClosed(org.apache.sshd.common.session.Session)"
        ]
    },
    "org.apache.sshd.server.shell.InvertedShellWrapper:void <init>(org.apache.sshd.server.shell.InvertedShell)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.ProcessShellFactory:org.apache.sshd.server.command.Command create()"
        ]
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.Collection resolveHostNetworkIdentities(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier$HostEntryPair findKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.util.Collection)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.server.forward.StaticDecisionForwardingFilter:boolean canForwardAgent(org.apache.sshd.common.session.Session,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleAgentForwarding(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.forward.ForwardingFilter$1:boolean canForwardAgent(org.apache.sshd.common.session.Session,java.lang.String)"
        ]
    },
    "org.apache.sshd.server.forward.StaticDecisionForwardingFilter:boolean canForwardX11(org.apache.sshd.common.session.Session,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleX11Forwarding(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.forward.ForwardingFilter$1:boolean canForwardX11(org.apache.sshd.common.session.Session,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress:java.net.InetAddress getFirstExternalNetwork4Address()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:java.lang.String resolveClientHostname()"
        ]
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress:java.util.List getExternalNetwork4Addresses()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.net.SshdSocketAddress:java.net.InetAddress getFirstExternalNetwork4Address()"
        ]
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isValidHostAddress(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.net.SshdSocketAddress:java.util.List getExternalNetwork4Addresses()"
        ]
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isLoopback(java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isValidHostAddress(java.net.InetAddress)"
        ]
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isLoopback(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isLoopback(java.net.InetAddress)"
        ]
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isIPv4Address(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isIPv6Address(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isPrivateIPv4Address(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isCarrierGradeNatIPv4Address(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress:boolean isIPv6Address(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.future.ConnectFuture connect(java.lang.String,java.lang.String,int)"
        ]
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress:int lambda$static$1(java.net.SocketAddress,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.net.SshdSocketAddress$lambda_static_1__54:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress:int lambda$static$0(java.net.InetAddress,java.net.InetAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.net.SshdSocketAddress$lambda_static_0__53:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:java.lang.String resolveClientHostname()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress$lambda_static_0__53:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.net.SshdSocketAddress:int lambda$static$1(java.net.SocketAddress,java.net.SocketAddress)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:int lambda$static$0(java.net.InetAddress,java.net.InetAddress)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.NamedResource:boolean lambda$findByName$1(java.util.Comparator,java.lang.String,org.apache.sshd.common.NamedResource)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider:int findIdentityIndex(java.util.List,java.util.Comparator,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.net.SshdSocketAddress$lambda_static_1__54:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.net.SshdSocketAddress:int lambda$static$1(java.net.SocketAddress,java.net.SocketAddress)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:int lambda$static$0(java.net.InetAddress,java.net.InetAddress)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.NamedResource:boolean lambda$findByName$1(java.util.Comparator,java.lang.String,org.apache.sshd.common.NamedResource)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider:int findIdentityIndex(java.util.List,java.util.Comparator,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void refreshConfiguration()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$9:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$8:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$6:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$5:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$3:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$4:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$1:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$2:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$7:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)"
        ]
    },
    "org.apache.sshd.client.kex.DHGEXClient$1:org.apache.sshd.common.kex.KeyExchange create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.kex.DHGEXClient$1:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.util.io.der.DERWriter:void writeBigInteger(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.der.DERWriter:void writeBigInteger(java.math.BigInteger)",
            "org.apache.sshd.common.signature.SignatureECDSA:boolean verify(byte[])"
        ]
    },
    "org.apache.sshd.common.util.io.der.DERWriter:void writeObject(org.apache.sshd.common.util.io.der.ASN1Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.der.DERWriter$1:void close()"
        ]
    },
    "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.common.util.buffer.Buffer append(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractive:java.lang.Boolean doInitialAuth(org.apache.sshd.server.session.ServerSession,java.lang.String,org.apache.sshd.server.auth.keyboard.KeyboardInteractiveAuthenticator,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.unix.AgentClient:org.apache.sshd.common.util.buffer.Buffer request(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AbstractAgentProxy:java.util.List getIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentProxy:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void addIdentity(java.security.KeyPair,java.lang.String)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void removeIdentity(java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void removeAllIdentities()"
        ]
    },
    "org.apache.sshd.agent.common.AbstractAgentProxy:org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AbstractAgentProxy:java.util.List getIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void removeAllIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentProxy:org.apache.sshd.common.util.buffer.Buffer createBuffer(byte)"
        ]
    },
    "org.apache.sshd.agent.common.AbstractAgentProxy:org.apache.sshd.common.util.buffer.Buffer prepare(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AbstractAgentProxy:java.util.List getIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentProxy:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void addIdentity(java.security.KeyPair,java.lang.String)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void removeIdentity(java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void removeAllIdentities()"
        ]
    },
    "org.apache.sshd.agent.common.AbstractAgentClient:org.apache.sshd.common.util.buffer.Buffer prepare(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AbstractAgentClient:void messageReceived(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.buffer.ByteArrayBuffer:void putBuffer(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:void putChars(char[],int,int,java.nio.charset.Charset)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putStringList(java.util.Collection,java.nio.charset.Charset,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:void putStringList(java.util.Collection,boolean)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putMPInt(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:void putMPInt(java.math.BigInteger)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void receiveNewKeys()",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] resizeKey(byte[],int,org.apache.sshd.common.digest.Digest,byte[],byte[])",
            "org.apache.sshd.client.kex.DHGClient:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:void updateLengthPlaceholder(org.apache.sshd.common.util.buffer.Buffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.ChannelOutputStream:void newBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.ChannelOutputStream:void <init>(org.apache.sshd.common.channel.AbstractChannel,org.apache.sshd.common.channel.Window,long,org.slf4j.Logger,byte,boolean)",
            "org.apache.sshd.common.channel.ChannelOutputStream:void flush()"
        ]
    },
    "org.apache.sshd.client.channel.PtyCapableChannelSession:void lambda$doOpenPty$0(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.channel.PtyMode,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.shell.TtyFilterInputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void writeRawOutput(byte[],int,int)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putAndWipeBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:void putAndWipeBytes(byte[])"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.gss.UserAuthGSS:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:boolean verifySignature(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.signature.Signature,byte[])",
            "org.apache.sshd.server.kex.DHGServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.util.buffer.Buffer putRawEDDSAPublicKey(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey)",
            "org.apache.sshd.common.util.buffer.Buffer:void putString(java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.util.buffer.Buffer:void putChars(char[],int,int,java.nio.charset.Charset)",
            "org.apache.sshd.common.util.buffer.Buffer:void putRawPublicKey(java.security.PublicKey)",
            "org.apache.sshd.common.util.buffer.Buffer:void putKeyPair(java.security.KeyPair)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendIgnoreMessage(byte[])",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,byte[],java.lang.String,java.lang.String,org.apache.sshd.common.signature.Signature,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:byte[] resizeKey(byte[],int,org.apache.sshd.common.digest.Digest,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void receiveNewKeys()"
        ]
    },
    "org.apache.sshd.common.channel.ChannelPipedOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void writeRawOutput(byte[],int,int)",
            "org.apache.sshd.server.shell.InvertedShellWrapper:boolean pumpStream(java.io.InputStream,java.io.OutputStream,byte[])",
            "org.apache.sshd.server.channel.PipeDataReceiver:int data(org.apache.sshd.server.channel.ChannelSession,byte[],int,int)",
            "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.server.forward.TcpipServerChannel$1:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.agent.local.ChannelAgentForwarding$AgentClient:void reply(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.AgentForwardedChannel:org.apache.sshd.common.util.buffer.Buffer request(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.unix.AgentForwardedChannel:void run()",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:void lambda$doInit$0(int)",
            "org.apache.sshd.common.util.io.IoUtils:long copy(java.io.InputStream,java.io.OutputStream,int)",
            "org.apache.sshd.common.util.io.LoggingFilterOutputStream:void write(byte[],int,int)",
            "org.apache.sshd.common.util.buffer.BufferUtils:void writeUInt(java.io.OutputStream,long,byte[],int,int)",
            "org.apache.sshd.common.config.keys.KeyEntryResolver:int writeRLEBytes(java.io.OutputStream,byte[],int,int)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression:void writeCoordinate(java.io.OutputStream,java.lang.String,java.math.BigInteger,int)",
            "org.apache.sshd.common.channel.ChannelPipedOutputStream:void write(int)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void lambda$messageReceived$1(org.apache.sshd.common.forward.TcpipClientChannel,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.io.IoSession,org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.common.forward.SocksProxy$Proxy:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.ChannelDirectTcpip:void doWriteData(byte[],int,long)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void doWriteExtendedData(byte[],int,long)",
            "org.apache.sshd.client.channel.ChannelSession:void pumpInputStream()"
        ]
    },
    "org.apache.sshd.common.util.buffer.ByteArrayBuffer:void wpos(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.shell.TtyFilterInputStream:org.apache.sshd.common.util.buffer.Buffer insertCharacter(org.apache.sshd.common.util.buffer.Buffer,int)",
            "org.apache.sshd.agent.unix.AgentClient:org.apache.sshd.common.util.buffer.Buffer request(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:org.apache.sshd.common.util.buffer.Buffer prepare(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.common.AbstractAgentClient:org.apache.sshd.common.util.buffer.Buffer prepare(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getPublicKey(org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)",
            "org.apache.sshd.common.util.buffer.Buffer:void putPublicKey(java.security.PublicKey)",
            "org.apache.sshd.common.util.buffer.BufferUtils:int updateLengthPlaceholder(org.apache.sshd.common.util.buffer.Buffer,int)",
            "org.apache.sshd.common.util.buffer.BufferUtils:void updateLengthPlaceholder(org.apache.sshd.common.util.buffer.Buffer,int,int)",
            "org.apache.sshd.common.channel.ChannelOutputStream:void flush()",
            "org.apache.sshd.common.compression.CompressionZlib:void compress(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.forward.SocksProxy$Socks5:void onChannelOpened(org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer prepareBuffer(byte,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer encode(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void decode()",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)"
        ]
    },
    "org.apache.sshd.common.util.buffer.ByteArrayBuffer:void putByte(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.gss.UserAuthGSS:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:boolean verifySignature(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.signature.Signature,byte[])",
            "org.apache.sshd.server.shell.TtyFilterInputStream:void write(int)",
            "org.apache.sshd.server.shell.TtyFilterInputStream:org.apache.sshd.common.util.buffer.Buffer insertCharacter(org.apache.sshd.common.util.buffer.Buffer,int)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void messageReceived(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:void putBoolean(boolean)",
            "org.apache.sshd.common.util.buffer.Buffer:void putMPInt(byte[])",
            "org.apache.sshd.common.forward.SocksProxy$Socks4:void onChannelOpened(org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.common.forward.SocksProxy$Socks5:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.forward.SocksProxy$Socks5:void onChannelOpened(org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer prepareBuffer(byte,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer encode(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void receiveNewKeys()",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,byte[],java.lang.String,java.lang.String,org.apache.sshd.common.signature.Signature,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void lambda$doOpenPty$0(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.channel.PtyMode,java.lang.Integer)"
        ]
    },
    "org.apache.sshd.common.util.buffer.ByteArrayBuffer:int putBuffer(org.apache.sshd.common.util.Readable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:void putBuffer(org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:org.apache.sshd.common.io.IoReadFuture read(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:void doRead(boolean)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:int registerChannel(org.apache.sshd.common.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void sessionCreated(org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.agent.local.AgentServerProxy:org.apache.sshd.agent.SshAgent createClient()",
            "org.apache.sshd.agent.unix.AgentServerProxy:void lambda$new$0()",
            "org.apache.sshd.common.forward.SocksProxy$Socks4:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void sessionCreated(org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.forward.SocksProxy$Socks5:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelOpen(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ChannelExec createExecChannel(java.lang.String)",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ChannelSubsystem createSubsystemChannel(java.lang.String)",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ChannelDirectTcpip createDirectTcpipChannel(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ChannelShell createShellChannel()"
        ]
    },
    "org.apache.sshd.common.digest.BuiltinDigests:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.digest.Digest getDigestForParams()",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void configureWindow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.AbstractServerChannel:org.apache.sshd.client.future.OpenFuture open(int,long,long,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.AbstractChannel:void init(org.apache.sshd.common.session.ConnectionService,org.apache.sshd.common.session.Session,int)"
        ]
    },
    "org.apache.sshd.server.x11.ChannelForwardedX11:void doOpen()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.forward.TcpipClientChannel:void doOpen()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelDirectTcpip:void doOpen()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelSession:void doOpen()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.ChannelShell:void doOpen()",
            "org.apache.sshd.client.channel.ChannelExec:void doOpen()",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void doOpen()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer createBuffer(byte,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.password.UserAuthPassword:java.lang.Boolean handleServerPasswordChangeRequest(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,org.apache.sshd.server.auth.password.PasswordChangeRequiredException)",
            "org.apache.sshd.server.auth.gss.UserAuthGSS:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:void sendPublicKeyResponse(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.security.PublicKey,byte[],int,int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.channel.AbstractServerChannel:void sendExitStatus(int)",
            "org.apache.sshd.server.x11.ChannelForwardedX11:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.server.global.TcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.global.CancelTcpipForwardHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.session.ConnectionService,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:org.apache.sshd.common.io.IoWriteFuture sendWelcomeBanner(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.common.channel.ChannelOutputStream:void newBuffer(int)",
            "org.apache.sshd.common.channel.AbstractChannel$GracefulChannelCloseable:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.channel.AbstractChannel:org.apache.sshd.common.io.IoWriteFuture sendResponse(org.apache.sshd.common.util.buffer.Buffer,java.lang.String,org.apache.sshd.common.channel.RequestHandler$Result,boolean)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleExtendedData(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.AbstractChannel:void sendEof()",
            "org.apache.sshd.common.channel.AbstractChannel:void sendWindowAdjust(long)",
            "org.apache.sshd.common.channel.ChannelAsyncOutputStream:void doWriteIfPossible(boolean)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.TcpipClientChannel:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendIgnoreMessage(byte[])",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendDebugMessage(boolean,java.lang.Object,java.lang.String)",
            "org.apache.sshd.common.session.helpers.AbstractSession:boolean handleServiceRequest(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture doWritePacket(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer createBuffer(byte)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendNewKeys()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void disconnect(int,java.lang.String)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendNotImplemented(long)",
            "org.apache.sshd.common.session.helpers.DefaultUnknownChannelReferenceHandler:org.apache.sshd.common.io.IoWriteFuture sendFailureResponse(org.apache.sshd.common.session.ConnectionService,byte,int)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture sendChannelOpenFailure(org.apache.sshd.common.util.buffer.Buffer,int,int,java.lang.String,java.lang.String)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture sendGlobalResponse(org.apache.sshd.common.util.buffer.Buffer,java.lang.String,org.apache.sshd.common.channel.RequestHandler$Result,boolean)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void lambda$channelOpen$0(org.apache.sshd.common.channel.Channel,boolean,int,int,org.apache.sshd.common.session.Session,org.apache.sshd.client.future.OpenFuture)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:org.apache.sshd.common.io.IoWriteFuture sendPassword(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGClient:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.client.kex.DHGEXClient:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.ChannelDirectTcpip:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void sendWindowChange(int,int,int,int)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.channel.ChannelShell:void doOpen()",
            "org.apache.sshd.client.channel.ChannelExec:void doOpen()",
            "org.apache.sshd.client.channel.AbstractClientChannel:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.client.channel.ChannelSubsystem:void doOpen()",
            "org.apache.sshd.client.session.ClientUserAuthService:org.apache.sshd.client.future.AuthFuture auth(java.lang.String)",
            "org.apache.sshd.client.session.ClientConnectionService:org.apache.sshd.common.io.IoWriteFuture sendHeartBeat()",
            "org.apache.sshd.client.session.ClientSessionImpl:void sendInitialServiceRequest()"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:void <init>(org.apache.sshd.client.session.ClientSessionCreator,java.nio.channels.Channel)"
        ]
    },
    "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,byte[])"
        ]
    },
    "org.apache.sshd.server.session.AbstractServerSession:void <init>(org.apache.sshd.server.ServerFactoryManager,org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerSessionImpl:void <init>(org.apache.sshd.server.ServerFactoryManager,org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:void <init>(org.apache.sshd.client.ClientFactoryManager,org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientSessionImpl:void <init>(org.apache.sshd.client.ClientFactoryManager,org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleAgentForwarding(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleInternalRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.kex.DHGEXServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.common.DefaultAgentForwardSupport:org.apache.sshd.agent.SshAgentServer createSshAgentServer(org.apache.sshd.common.session.ConnectionService,org.apache.sshd.common.session.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.DefaultAgentForwardSupport:java.lang.String initialize()"
        ]
    },
    "org.apache.sshd.server.channel.AbstractServerChannel:void <init>(java.lang.String,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.AbstractServerChannel:void <init>(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void <init>(boolean,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.AbstractClientChannel:void <init>(java.lang.String,java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void <init>(boolean)"
        ]
    },
    "org.apache.sshd.server.SshServer:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.SshServer$init__146:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.client.SshClient:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient$init__216:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwarderFactory:org.apache.sshd.common.forward.ForwardingFilter create(org.apache.sshd.common.session.ConnectionService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.forward.ForwardingFilter createForwardingFilter(org.apache.sshd.common.session.helpers.AbstractSession)"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwarderFactory$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwarderFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.session.ServerConnectionService:void <init>(org.apache.sshd.server.session.AbstractServerSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerConnectionServiceFactory:org.apache.sshd.common.Service create(org.apache.sshd.common.session.Session)"
        ]
    },
    "org.apache.sshd.client.session.ClientConnectionService:void <init>(org.apache.sshd.client.session.AbstractClientSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientConnectionServiceFactory:org.apache.sshd.common.Service create(org.apache.sshd.common.session.Session)"
        ]
    },
    "org.apache.sshd.server.session.ServerConnectionServiceFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerConnectionServiceFactory$1:void <init>()"
        ]
    },
    "org.apache.sshd.client.session.ClientConnectionServiceFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientConnectionServiceFactory$1:void <init>()"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.channels.FileChannel newFileChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.channels.FileChannel newFileChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.channels.AsynchronousFileChannel newAsynchronousFileChannel(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute[])"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute[])"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream$Filter)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:void createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:void createLink(java.nio.file.Path,java.nio.file.Path,boolean,java.nio.file.attribute.FileAttribute[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute[])",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void createLink(java.nio.file.Path,java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:void delete(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void delete(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:boolean deleteIfExists(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:boolean deleteIfExists(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:void copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:void move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption[])"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:boolean isSameFile(java.nio.file.Path,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:boolean isSameFile(java.nio.file.Path,java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:boolean isHidden(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:boolean isHidden(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:void checkAccess(java.nio.file.Path,java.nio.file.AccessMode[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedPath:org.apache.sshd.common.file.root.RootedPath toRealPath(java.nio.file.LinkOption[])",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void checkAccess(java.nio.file.Path,java.nio.file.AccessMode[])"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.attribute.FileAttributeView getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.util.Map readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.util.Map readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:void setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)"
        ]
    },
    "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List readAuthorizedKeys(java.io.Reader,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List readAuthorizedKeys(java.io.InputStream,boolean)"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostEntry:java.util.List readKnownHostEntries(java.io.BufferedReader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostEntry:java.util.List readKnownHostEntries(java.io.Reader,boolean)"
        ]
    },
    "org.apache.sshd.common.config.keys.IdentityUtils:org.apache.sshd.common.keyprovider.KeyPairProvider createKeyPairProvider(java.util.Map,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.ServerIdentity:org.apache.sshd.common.keyprovider.KeyPairProvider loadKeyPairProvider(java.util.Properties,boolean,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.ClientIdentity:org.apache.sshd.common.keyprovider.KeyPairProvider loadDefaultKeyPairProvider(java.nio.file.Path,boolean,boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.keyprovider.MappedKeyPairProvider$init__74:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.server.shell.ProcessShellFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.shell.ProcessShellFactory:void <init>(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.ProcessShellCommandFactory:org.apache.sshd.server.command.Command createCommand(java.lang.String)"
        ]
    },
    "org.apache.sshd.server.shell.InteractiveProcessShellFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InteractiveProcessShellFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.shell.ProcessShellFactory:void setCommand(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.buffer.keys.ECBufferPublicKeyParser:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.ECBufferPublicKeyParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.AbstractBufferPublicKeyParser:void <init>(java.lang.Class,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.RSABufferPublicKeyParser:void <init>()",
            "org.apache.sshd.common.util.buffer.keys.ED25519BufferPublicKeyParser:void <init>()",
            "org.apache.sshd.common.util.buffer.keys.DSSBufferPublicKeyParser:void <init>()"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.AbstractKeyEntryResolver:void <init>(java.lang.Class,java.lang.Class,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.AbstractPublicKeyEntryDecoder:void <init>(java.lang.Class,java.lang.Class,java.util.Collection)",
            "org.apache.sshd.common.config.keys.impl.AbstractPrivateKeyEntryDecoder:void <init>(java.lang.Class,java.lang.Class,java.util.Collection)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:org.apache.sshd.client.auth.pubkey.KeyPairIdentity lambda$new$1(org.apache.sshd.common.signature.SignatureFactoriesManager,org.apache.sshd.client.session.ClientSession,java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator$lambda_new_1__125:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.SshClient:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:void open()",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.simple.SimpleClient setUpDefaultSimpleClient()"
        ]
    },
    "org.apache.sshd.common.signature.SignatureRSA:void initVerifier(java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:void <init>()",
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:void <clinit>()",
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.config.keys.loader.KeyPairResourceParser getBouncycastleKeyPairResourceParser()",
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser$lambda_extractKeyPairs_0__43:void accept(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.io.der.DERWriter$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:boolean pumpStream(java.io.InputStream,java.io.OutputStream,byte[])",
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:void writeKeyPair(java.security.KeyPair,java.nio.file.Path,java.nio.file.OpenOption[])",
            "org.apache.sshd.server.channel.PipeDataReceiver:void close()",
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.common.future.CloseFuture close(boolean)",
            "org.apache.sshd.common.util.io.IoUtils:java.io.IOException closeQuietly(java.io.Closeable[])",
            "org.apache.sshd.common.signature.SignatureDSA:boolean verify(byte[])",
            "org.apache.sshd.common.signature.SignatureECDSA:boolean verify(byte[])",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:void writeHostConfigEntries(java.nio.file.Path,java.util.Collection,java.nio.file.OpenOption[])",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void releaseKeys()",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry updateKnownHostsFile(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey,java.nio.file.Path,java.util.Collection)",
            "org.apache.sshd.client.session.ClientSession:void executeRemoteCommand(java.lang.String,java.io.OutputStream,java.io.OutputStream,java.nio.charset.Charset)"
        ]
    },
    "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromDERValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.der.ASN1Object:void <init>(byte,int,byte[])"
        ]
    },
    "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromTypeValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.der.ASN1Class:org.apache.sshd.common.util.io.der.ASN1Class fromDERValue(int)"
        ]
    },
    "org.apache.sshd.common.util.io.der.ASN1Object:java.lang.Object asObject()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.io.der.ASN1Object:java.lang.String asString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.io.der.ASN1Object:java.lang.Object asObject()"
        ]
    },
    "org.apache.sshd.common.util.io.ModifiableFileWatcher:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:void <init>(java.nio.file.Path,java.util.function.Supplier,java.util.function.Supplier,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:void <init>(java.nio.file.Path,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider,boolean)",
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:void <init>(java.nio.file.Path,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:org.apache.sshd.client.config.keys.ClientIdentityProvider lambda$buildProviders$2(java.util.function.Supplier,java.util.function.Supplier,boolean,java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.FileSystem newFileSystem(java.lang.Object,java.nio.file.Path,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map)",
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.util.Map)"
        ]
    },
    "org.apache.sshd.client.keyverifier.DefaultKnownHostsServerKeyVerifier:void <init>(org.apache.sshd.client.keyverifier.ServerKeyVerifier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:void <init>(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:void <init>(java.io.File)"
        ]
    },
    "org.apache.sshd.client.config.hosts.DefaultConfigFileHostEntryResolver:void <init>(java.nio.file.Path,boolean,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.DefaultConfigFileHostEntryResolver:void <init>(boolean)",
            "org.apache.sshd.client.config.hosts.DefaultConfigFileHostEntryResolver:void <init>(java.io.File,boolean)"
        ]
    },
    "org.apache.sshd.client.config.hosts.ConfigFileHostEntryResolver:void <init>(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.ConfigFileHostEntryResolver:void <init>(java.io.File)"
        ]
    },
    "org.apache.sshd.client.keyverifier.DefaultKnownHostsServerKeyVerifier:void <init>(org.apache.sshd.client.keyverifier.ServerKeyVerifier,boolean,java.nio.file.Path,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.DefaultKnownHostsServerKeyVerifier:void <init>(org.apache.sshd.client.keyverifier.ServerKeyVerifier,boolean)",
            "org.apache.sshd.client.keyverifier.DefaultKnownHostsServerKeyVerifier:void <init>(org.apache.sshd.client.keyverifier.ServerKeyVerifier,boolean,java.io.File)"
        ]
    },
    "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:void <init>(org.apache.sshd.client.keyverifier.ServerKeyVerifier,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$4:org.apache.sshd.common.kex.DHG create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$4:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$5:org.apache.sshd.common.kex.DHG create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$5:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$6:org.apache.sshd.common.kex.DHG create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$6:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$7:org.apache.sshd.common.kex.DHG create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$7:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.RSAPEMResourceKeyPairParser:java.security.KeyPair decodeRSAKeyPair(java.security.KeyFactory,java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.RSAPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.DSSPEMResourceKeyPairParser:java.security.KeyPair decodeDSSKeyPair(java.security.KeyFactory,java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.DSSPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.List getPKCS8AlgorithmIdentifier(org.apache.sshd.common.util.io.der.DERParser)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.List getPKCS8AlgorithmIdentifier(byte[])"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.List getPKCS8AlgorithmIdentifier(org.apache.sshd.common.util.io.der.ASN1Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.List getPKCS8AlgorithmIdentifier(org.apache.sshd.common.util.io.der.DERParser)"
        ]
    },
    "org.apache.sshd.common.util.security.AbstractSecurityProviderRegistrar:java.security.Provider getOrCreateProvider(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleSecurityProviderRegistrar:java.security.Provider getSecurityProvider()",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderRegistrar:java.security.Provider getSecurityProvider()"
        ]
    },
    "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleRandomFactory:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)",
            "org.apache.sshd.common.BuiltinFactory:boolean lambda$setUpFactories$0(boolean,org.apache.sshd.common.BuiltinFactory)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.random.RandomFactory getRandomFactory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.BaseBuilder fillWithDefaultValues()"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:net.i2p.crypto.eddsa.EdDSAPrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:java.security.PrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:int getEDDSAKeySize(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:int getEDDSAKeySize(java.security.Key)"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:boolean compareEDDSAPPublicKeys(java.security.PublicKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:boolean compareEDDSAPPublicKeys(java.security.PublicKey,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:boolean compareEDDSAPrivateKeys(java.security.PrivateKey,java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:boolean compareEDDSAPrivateKeys(java.security.PrivateKey,java.security.PrivateKey)"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:java.security.PublicKey generateEDDSAPublicKey(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:java.security.PublicKey generateEDDSAPublicKey(java.lang.String,byte[])"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:java.security.PrivateKey generateEDDSAPrivateKey(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.security.SecurityUtils:java.lang.Class getEDDSAPublicKeyType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.BuiltinIdentities:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:java.lang.Class getEDDSAPrivateKeyType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.BuiltinIdentities:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:boolean compareEDDSAPPublicKeys(java.security.PublicKey,java.security.PublicKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:boolean compareKeys(java.security.PublicKey,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:boolean compareEDDSAPrivateKeys(java.security.PrivateKey,java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:boolean compareKeys(java.security.PrivateKey,java.security.PrivateKey)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:java.security.PublicKey generateEDDSAPublicKey(java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.Ed25519PublicKeyDecoder:net.i2p.crypto.eddsa.EdDSAPublicKey decodePublicKey(java.lang.String,java.io.InputStream)",
            "org.apache.sshd.common.util.buffer.keys.ED25519BufferPublicKeyParser:java.security.PublicKey getRawPublicKey(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:java.security.KeyPair extractEDDSAKeyPair(org.apache.sshd.common.util.buffer.Buffer,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:java.security.KeyPair getKeyPair()"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures$6:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)",
            "org.apache.sshd.common.BuiltinFactory:boolean lambda$setUpFactories$0(boolean,org.apache.sshd.common.BuiltinFactory)"
        ]
    },
    "org.apache.sshd.common.config.keys.BuiltinIdentities$2:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.IdentityUtils:void lambda$createKeyPairProvider$0(boolean,java.util.Map,java.lang.String,java.security.KeyPair)",
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:boolean isSupported(java.security.KeyPair)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.security.SecurityEntityFactory lambda$resolveSecurityEntityFactory$1(java.lang.Class,java.util.function.Predicate,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils$lambda_resolveSecurityEntityFactory_1__16:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityProviderRegistrar$lambda_findSecurityProviderRegistrarBySecurityEntity_0__40:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean lambda$findSecurityProviderRegistrarBySecurityEntity$0(java.util.function.Predicate,org.apache.sshd.common.util.security.SecurityProviderRegistrar)",
            "org.apache.sshd.common.util.logging.LoggingUtils:boolean lambda$getMnemonicFields$2(java.util.function.Predicate,java.lang.reflect.Field)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.channel.Window:void waitForCondition(java.util.function.Predicate,long)"
        ]
    },
    "org.apache.sshd.common.util.logging.LoggingUtils$lambda_getMnemonicFields_2__48:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean lambda$findSecurityProviderRegistrarBySecurityEntity$0(java.util.function.Predicate,org.apache.sshd.common.util.security.SecurityProviderRegistrar)",
            "org.apache.sshd.common.util.logging.LoggingUtils:boolean lambda$getMnemonicFields$2(java.util.function.Predicate,java.lang.reflect.Field)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.channel.Window:void waitForCondition(java.util.function.Predicate,long)"
        ]
    },
    "org.apache.sshd.common.SshException:void <init>(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.SshException:void <init>(int,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.SshException:void <init>(int,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.SshException:void <init>(java.lang.String,java.lang.Throwable)",
            "org.apache.sshd.common.SshException:void <init>(int,java.lang.String)",
            "org.apache.sshd.common.SshException:void <init>(int,java.lang.Throwable)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelSession$1:void <init>(org.apache.sshd.client.channel.ChannelSession,org.apache.sshd.common.channel.Channel,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.ChannelSession:void doOpen()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void handleServiceAccept(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:void handleServiceAccept(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleServiceAccept(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:boolean verifyTrialsCount(org.apache.sshd.client.session.ClientSession,java.lang.String,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.SshConstants:boolean isAmbiguousOpcode(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.SshConstants$LazyMessagesMapHolder:boolean lambda$static$0(java.lang.reflect.Field)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void signalChannelInitialized()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void init(org.apache.sshd.common.session.ConnectionService,org.apache.sshd.common.session.Session,int)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void signalChannelOpenSuccess()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.AbstractServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelOpenSuccess(org.apache.sshd.client.future.OpenFuture,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.agent.local.ChannelAgentForwarding:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void signalChannelOpenFailure(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.AbstractServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelConnectResult(org.apache.sshd.client.future.OpenFuture,org.apache.sshd.common.io.IoConnectFuture)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelOpenSuccess(org.apache.sshd.client.future.OpenFuture,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelOpenFailure(org.apache.sshd.client.future.OpenFuture,java.lang.Throwable)",
            "org.apache.sshd.agent.local.ChannelAgentForwarding:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void notifyStateChanged(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.AbstractServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.channel.AbstractServerChannel:void sendExitStatus(int)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelConnectResult(org.apache.sshd.client.future.OpenFuture,org.apache.sshd.common.io.IoConnectFuture)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelOpenSuccess(org.apache.sshd.client.future.OpenFuture,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.server.forward.TcpipServerChannel:void handleChannelOpenFailure(org.apache.sshd.client.future.OpenFuture,java.lang.Throwable)",
            "org.apache.sshd.agent.local.ChannelAgentForwarding:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.AbstractChannel:void handleEof()",
            "org.apache.sshd.common.channel.AbstractChannel:void handleWindowAdjust(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenSuccess(int,long,long,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void handleOpenFailure(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.AbstractClientChannel:void lambda$new$0(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void signalChannelClosed(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void preClose()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void handleChannelRegistrationFailure(org.apache.sshd.common.channel.Channel,int)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void signalSessionCreated(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerSessionImpl:void <init>(org.apache.sshd.server.ServerFactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.client.session.ClientSessionImpl:void <init>(org.apache.sshd.client.ClientFactoryManager,org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void signalExceptionCaught(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void exceptionCaught(java.lang.Throwable)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void signalSessionClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void preClose()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void signalNegotiationStart(java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map negotiate()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void signalNegotiationEnd(java.util.Map,java.util.Map,java.util.Map,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:java.util.Map negotiate()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void signalSessionEvent(org.apache.sshd.common.session.SessionListener$Event)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void setAuthenticated()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleNewKeys(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.ClientSessionImpl:void signalSessionEvent(org.apache.sshd.common.session.SessionListener$Event)"
        ]
    },
    "org.apache.sshd.server.shell.ProcessShellFactory:org.apache.sshd.server.command.Command create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.ProcessShellFactory:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator$LazyDefaultAuthorizedKeysFileHolder:java.nio.file.Path access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:java.nio.file.Path getDefaultAuthorizedKeysFile()"
        ]
    },
    "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:java.nio.file.Path getDefaultAuthorizedKeysFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(java.lang.String,boolean)",
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:java.util.List readDefaultAuthorizedKeys(java.nio.file.OpenOption[])"
        ]
    },
    "org.apache.sshd.common.config.keys.PublicKeyEntry$LazyDefaultKeysFolderHolder:java.nio.file.Path access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.PublicKeyEntry:java.nio.file.Path getDefaultKeysFolderPath()"
        ]
    },
    "org.apache.sshd.common.config.keys.PublicKeyEntry:java.nio.file.Path getDefaultKeysFolderPath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator$LazyDefaultAuthorizedKeysFileHolder:void <clinit>()",
            "org.apache.sshd.client.config.keys.ClientIdentity:org.apache.sshd.client.SshClient setKeyPairProvider(org.apache.sshd.client.SshClient,boolean,boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.ClientIdentity:org.apache.sshd.common.keyprovider.KeyPairProvider loadDefaultKeyPairProvider(boolean,boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map loadDefaultIdentities(boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher:void <init>(boolean,java.util.function.Supplier,java.util.function.Supplier,boolean)",
            "org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher:java.util.List getDefaultBuiltinIdentitiesPaths()",
            "org.apache.sshd.client.config.hosts.HostConfigEntry$LazyDefaultConfigFileHolder:void <clinit>()",
            "org.apache.sshd.client.config.hosts.KnownHostEntry$LazyDefaultConfigFileHolder:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry$LazyDefaultConfigFileHolder:java.nio.file.Path access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.HostConfigEntry:java.nio.file.Path getDefaultHostConfigFile()"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.nio.file.Path getDefaultHostConfigFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.DefaultConfigFileHostEntryResolver:void <init>(boolean)"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostEntry:java.nio.file.Path getDefaultKnownHostsFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.keyverifier.DefaultKnownHostsServerKeyVerifier:void <init>(org.apache.sshd.client.keyverifier.ServerKeyVerifier,boolean)"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostEntry$LazyDefaultConfigFileHolder:java.nio.file.Path access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostEntry:java.nio.file.Path getDefaultKnownHostsFile()"
        ]
    },
    "org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider:void <init>(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider:void <init>(java.io.File)"
        ]
    },
    "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:void setFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleGeneratorHostKeyProvider:void <init>(java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider createGeneratorHostKeyProvider(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.FileSystem newFileSystem(java.net.URI,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.keyprovider.FileKeyPairProvider:java.security.KeyPair doLoadKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.AbstractResourceKeyPairProvider$KeyPairIterator:boolean setNextObject()"
        ]
    },
    "org.apache.sshd.common.util.MapEntryUtils:int lambda$static$0(java.util.Map$Entry,java.util.Map$Entry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.MapEntryUtils$lambda_static_0__73:int compare(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.PropertyResolver:long getLongProperty(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.PropertyResolver:java.lang.Long getLong(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:java.util.List doReadIdentification(org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:boolean readIdentification(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.AbstractClientSession:boolean readIdentification(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.PropertyResolver:int getIntProperty(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.PropertyResolver:java.lang.Integer getInteger(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.PropertyResolverUtils:boolean getBooleanProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.ProxyAgentFactory:boolean isPreferredUnixAgent(org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean isNamedProviderUsed()",
            "org.apache.sshd.common.session.helpers.DefaultUnknownChannelReferenceHandler:org.apache.sshd.common.channel.Channel handleUnknownChannelCommand(org.apache.sshd.common.session.ConnectionService,byte,int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.PropertyResolver:boolean getBooleanProperty(java.lang.String,boolean)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:boolean getBooleanProperty(java.util.Map,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.PropertyResolver:java.lang.Boolean getBoolean(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.NamedResource:boolean lambda$findByName$1(java.util.Comparator,java.lang.String,org.apache.sshd.common.NamedResource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.NamedResource$lambda_findByName_1__31:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider:int findIdentityIndex(java.util.List,java.util.Comparator,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.AbstractClientSession:java.lang.String removePasswordIdentity(java.lang.String)",
            "org.apache.sshd.client.session.AbstractClientSession:java.security.KeyPair removePublicKeyIdentity(java.security.KeyPair)",
            "org.apache.sshd.client.SshClient:java.lang.String removePasswordIdentity(java.lang.String)",
            "org.apache.sshd.client.SshClient:java.security.KeyPair removePublicKeyIdentity(java.security.KeyPair)"
        ]
    },
    "org.apache.sshd.common.helpers.AbstractFactoryManager:java.lang.String getVersion()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:java.lang.String resolveIdentificationString(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.helpers.AbstractFactoryManager:org.apache.sshd.common.io.IoServiceFactory getIoServiceFactory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.x11.DefaultX11ForwardSupport:java.lang.String createDisplay(boolean,java.lang.String,java.lang.String,int)",
            "org.apache.sshd.server.forward.TcpipServerChannel:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.SshServer:org.apache.sshd.common.io.IoAcceptor createAcceptor()",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.client.SshClient:org.apache.sshd.common.io.IoConnector createConnector()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:java.security.PublicKey recoverPublicKey(java.security.PrivateKey)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.GenericUtils:boolean isNotEmpty(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Iterable checkNotNullAndNotEmpty(java.lang.Iterable,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:void forEach(java.lang.Iterable,java.util.function.Consumer)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.util.stream.Stream stream(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.GenericUtils:java.util.List map(java.util.Collection,java.util.function.Function)",
            "org.apache.sshd.common.util.GenericUtils:java.util.NavigableSet mapSort(java.util.Collection,java.util.function.Function,java.util.Comparator)",
            "org.apache.sshd.common.util.GenericUtils:java.util.NavigableMap toSortedMap(java.lang.Iterable,java.util.function.Function,java.util.function.Function,java.util.Comparator)",
            "org.apache.sshd.common.util.GenericUtils:java.util.List selectMatchingMembers(java.util.function.Predicate,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Iterator wrapIterator(java.lang.Iterable,java.util.function.Function)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Iterator lambda$multiIterableSuppliers$10(java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.stream.Stream lambda$null$9(java.util.function.Supplier)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.common.NamedResource:org.apache.sshd.common.NamedResource findByName(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.BuiltinFactory:java.util.List setUpFactories(boolean,java.util.Collection)",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Iterator lambda$loadKeys$0(java.util.function.Predicate)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator$stream__124:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ClientChannel createChannel(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.BuiltinFactory$lambda_setUpFactories_0__63:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean lambda$findSecurityProviderRegistrarBySecurityEntity$0(java.util.function.Predicate,org.apache.sshd.common.util.security.SecurityProviderRegistrar)",
            "org.apache.sshd.common.util.logging.LoggingUtils:boolean lambda$getMnemonicFields$2(java.util.function.Predicate,java.lang.reflect.Field)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.channel.Window:void waitForCondition(java.util.function.Predicate,long)"
        ]
    },
    "org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher:void <init>(boolean,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher:void <init>(org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider,boolean)"
        ]
    },
    "org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher:void <init>(java.util.function.Supplier,java.util.function.Supplier,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher:void <init>(java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.sshd.client.config.hosts.ConfigFileHostEntryResolver:java.util.List reloadHostConfigEntries(java.nio.file.Path,java.lang.String,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.DefaultConfigFileHostEntryResolver:java.util.List reloadHostConfigEntries(java.nio.file.Path,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.ConfigFileHostEntryResolver:org.apache.sshd.client.config.hosts.HostConfigEntryResolver resolveEffectiveResolver(java.lang.String,int,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.config.hosts.HostConfigEntry:java.util.List readHostConfigEntries(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.auth.password.PasswordIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.client.session.ClientSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.password.UserAuthPassword:void init(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:void init(org.apache.sshd.client.session.ClientSession,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentity:org.apache.sshd.client.SshClient setKeyPairProvider(org.apache.sshd.client.SshClient,boolean,boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onFailed(java.lang.Throwable,java.net.SocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onFailed(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.io.IoUtils:void readFully(java.io.InputStream,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.io.InputStream validateStreamMagicMarker(java.lang.String,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.KeyEntryResolver:byte[] readRLEBytes(java.io.InputStream)",
            "org.apache.sshd.common.config.keys.KeyEntryResolver:int decodeInt(java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:long readUInt(java.io.InputStream,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.BufferUtils:int readInt(java.io.InputStream,byte[],int,int)",
            "org.apache.sshd.common.util.buffer.BufferUtils:long readUInt(java.io.InputStream,byte[])"
        ]
    },
    "org.apache.sshd.server.shell.TtyFilterInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterInputStream:int readRawInput()",
            "org.apache.sshd.server.shell.TtyFilterInputStream:int read(byte[],int,int)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.io.InputStream validateStreamMagicMarker(java.lang.String,java.io.InputStream)",
            "org.apache.sshd.common.channel.SttySupport:int copyStream(java.io.InputStream,java.io.OutputStream)"
        ]
    },
    "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory resolveFactory(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[])"
        ]
    },
    "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGClient:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.BaseBuilder fillWithDefaultValues()"
        ]
    },
    "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.kex.DHGServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleSubsystem(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void handleKexInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void receiveNewKeys()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelOpen(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.KeyPairIdentity:byte[] sign(byte[])",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.ClientUserAuthService:void tryNext(int)"
        ]
    },
    "org.apache.sshd.common.Factory:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.ServerBuilder:org.apache.sshd.server.SshServer build(boolean)",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build()",
            "org.apache.sshd.client.ClientBuilder:org.apache.sshd.client.SshClient build(boolean)"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostDigest:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:boolean isHostMatch(java.lang.String)"
        ]
    },
    "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory resolveFactory(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures$6:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.AgentImpl:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.Signature getByCurveSize(java.security.spec.ECParameterSpec)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.server.auth.password.UserAuthPasswordFactory:org.apache.sshd.server.auth.password.UserAuthPassword create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.password.UserAuthPasswordFactory:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.server.auth.gss.UserAuthGSSFactory:org.apache.sshd.server.auth.UserAuth create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.gss.UserAuthGSSFactory:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.server.auth.hostbased.UserAuthHostBasedFactory:org.apache.sshd.server.auth.hostbased.UserAuthHostBased create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBasedFactory:java.lang.Object create()",
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBasedFactory$1:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.auth.pubkey.UserAuthPublicKeyFactory:org.apache.sshd.server.auth.pubkey.UserAuthPublicKey create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKeyFactory:java.lang.Object create()",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKeyFactory$1:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractiveFactory:org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractive create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractiveFactory:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.server.auth.UserAuthNoneFactory:org.apache.sshd.server.auth.UserAuthNone create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.UserAuthNoneFactory:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.server.command.AbstractDelegatingCommandFactory:org.apache.sshd.server.command.Command createCommand(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleEnv(org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleInternalRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handlePtyReq(org.apache.sshd.common.util.buffer.Buffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleInternalRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.local.LocalAgentFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.ProxyAgentFactory:java.util.List getChannelForwardingFactories(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.agent.local.LocalAgentFactory:java.util.List getChannelForwardingFactories(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.agent.local.LocalAgentFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.agent.unix.UnixAgentFactory:org.apache.sshd.agent.unix.UnixAgentFactory$1 lambda$getChannelForwardingFactories$0(org.apache.sshd.common.util.threads.ExecutorServiceConfigurer,org.apache.sshd.common.NamedFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.unix.UnixAgentFactory$lambda_getChannelForwardingFactories_0__177:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.agent.unix.UnixAgentFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.ProxyAgentFactory:java.util.List getChannelForwardingFactories(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.agent.unix.UnixAgentFactory:java.util.List getChannelForwardingFactories(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.agent.unix.UnixAgentFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <init>(java.lang.String,boolean)",
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:void <clinit>()",
            "org.apache.sshd.server.ServerBuilder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures$2:org.apache.sshd.common.signature.Signature create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.BuiltinSignatures$2:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.signature.SignatureDSA:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.BuiltinSignatures$1:org.apache.sshd.common.signature.Signature create()"
        ]
    },
    "org.apache.sshd.common.signature.SignatureECDSA$SignatureECDSA256:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.BuiltinSignatures$3:org.apache.sshd.common.signature.Signature create()"
        ]
    },
    "org.apache.sshd.common.signature.SignatureECDSA$SignatureECDSA384:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.BuiltinSignatures$4:org.apache.sshd.common.signature.Signature create()"
        ]
    },
    "org.apache.sshd.common.signature.SignatureECDSA$SignatureECDSA521:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.BuiltinSignatures$5:org.apache.sshd.common.signature.Signature create()"
        ]
    },
    "org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory:java.nio.file.FileSystem createFileSystem(org.apache.sshd.common.session.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.server.command.Command prepareCommand(java.lang.String,org.apache.sshd.server.command.Command)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:void <init>()",
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:java.util.AbstractMap$SimpleImmutableEntry decodeECPrivateKeySpec(java.io.InputStream,boolean)",
            "org.apache.sshd.common.config.keys.loader.pem.ECDSAPEMResourceKeyPairParser:void <clinit>()",
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.RSAPEMResourceKeyPairParser:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.RSAPEMResourceKeyPairParser:void <init>()",
            "org.apache.sshd.common.config.keys.loader.pem.RSAPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.pem.RSAPEMResourceKeyPairParser:void <clinit>()",
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.DSSPEMResourceKeyPairParser:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:void <clinit>()",
            "org.apache.sshd.common.config.keys.loader.pem.DSSPEMResourceKeyPairParser:void <init>()",
            "org.apache.sshd.common.config.keys.loader.pem.DSSPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.pem.DSSPEMResourceKeyPairParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:void <clinit>()",
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:void <init>()",
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.security.PrivateKey decodePEMPrivateKeyPKCS8(java.util.List,byte[],org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.List getPKCS8AlgorithmIdentifier(byte[])",
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.List getPKCS8AlgorithmIdentifier(org.apache.sshd.common.util.io.der.DERParser)",
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:org.apache.sshd.common.config.keys.loader.pem.KeyPairPEMResourceParser getPEMResourceParserByOid(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.security.PrivateKey decodePEMPrivateKeyPKCS8(java.lang.String,byte[],org.apache.sshd.common.config.keys.FilePasswordProvider)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:org.apache.sshd.common.config.keys.loader.pem.KeyPairPEMResourceParser getPEMResourceParserByAlgorithm(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils:java.util.concurrent.atomic.AtomicReference access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils$1:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.pem.PEMResourceParserUtils$1:boolean canExtractKeyPairs(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.DESPrivateKeyObfuscator:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.DESPrivateKeyObfuscator:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,boolean)",
            "org.apache.sshd.common.config.keys.loader.DESPrivateKeyObfuscator:java.util.List getSupportedKeySizes()",
            "org.apache.sshd.common.config.keys.loader.DESPrivateKeyObfuscator:void <clinit>()",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:java.util.List getSupportedKeySizes()",
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:void <clinit>()",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.auth.password.UserAuthPasswordFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.password.UserAuthPasswordFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.auth.hostbased.UserAuthHostBasedFactory:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBasedFactory:void <init>()"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.UserAuthPublicKeyFactory:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKeyFactory:void <init>()"
        ]
    },
    "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractiveFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractiveFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.auth.UserAuthNoneFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.UserAuthNoneFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.auth.password.UserAuthPasswordFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.password.UserAuthPasswordFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.auth.hostbased.UserAuthHostBasedFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBasedFactory$1:void <init>()"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory:void <init>()"
        ]
    },
    "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractiveFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractiveFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.session.ServerUserAuthServiceFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthServiceFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.session.ClientUserAuthServiceFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientUserAuthServiceFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.digest.BuiltinDigests:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.digest.DigestFactory getDefaultFingerPrintFactory()",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.digest.Digest,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:void <clinit>()",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests[] values()",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromString(java.lang.String)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromFactory(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromFactoryName(java.lang.String)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromDigest(org.apache.sshd.common.digest.Digest)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromAlgorithm(java.lang.String)",
            "org.apache.sshd.common.digest.BuiltinDigests:void <clinit>()",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest,byte[],int,int)",
            "org.apache.sshd.common.cipher.ECCurves:void <clinit>()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$6:org.apache.sshd.common.kex.DHG create(java.lang.Object[])",
            "org.apache.sshd.common.kex.BuiltinDHFactories$6:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$5:org.apache.sshd.common.kex.DHG create(java.lang.Object[])",
            "org.apache.sshd.common.kex.BuiltinDHFactories$5:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$3:org.apache.sshd.common.kex.DHG create(java.lang.Object[])",
            "org.apache.sshd.common.kex.BuiltinDHFactories$3:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$4:org.apache.sshd.common.kex.DHG create(java.lang.Object[])",
            "org.apache.sshd.common.kex.BuiltinDHFactories$4:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$1:org.apache.sshd.common.kex.DHG create(java.lang.Object[])",
            "org.apache.sshd.common.kex.BuiltinDHFactories$1:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$2:org.apache.sshd.common.kex.DHG create(java.lang.Object[])",
            "org.apache.sshd.common.kex.BuiltinDHFactories$2:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$9:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])",
            "org.apache.sshd.common.kex.BuiltinDHFactories$9:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$8:org.apache.sshd.common.kex.DHG create(java.lang.Object[])",
            "org.apache.sshd.common.kex.BuiltinDHFactories$8:boolean isSupported()",
            "org.apache.sshd.common.kex.BuiltinDHFactories$7:org.apache.sshd.common.kex.DHG create(java.lang.Object[])",
            "org.apache.sshd.common.kex.BuiltinDHFactories$7:boolean isSupported()"
        ]
    },
    "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair generateKeyPair(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.keyprovider.AbstractGeneratorHostKeyProvider:java.security.KeyPair resolveKeyPair(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.Signature getByCurveSize(java.security.spec.ECParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.AgentImpl:byte[] sign(java.security.PublicKey,byte[])"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression$3:void writeECPoint(java.io.OutputStream,java.lang.String,java.security.spec.ECPoint)",
            "org.apache.sshd.common.kex.ECDH:void <init>(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves:byte[] encodeECPoint(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:void putRawPublicKey(java.security.PublicKey)",
            "org.apache.sshd.common.util.buffer.Buffer:void putKeyPair(java.security.KeyPair)",
            "org.apache.sshd.common.kex.ECDH:byte[] getE()"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves:byte[] encodeECPoint(java.security.spec.ECPoint,java.security.spec.EllipticCurve)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.ECCurves:byte[] encodeECPoint(java.security.spec.ECPoint,java.security.spec.ECParameterSpec)"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves$ECPointCompression$1:java.security.spec.ECPoint octetStringToEcPoint(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.ECCurves:java.security.spec.ECPoint octetStringToEcPoint(byte[])"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves$ECPointCompression$3:java.security.spec.ECPoint octetStringToEcPoint(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.ECCurves:java.security.spec.ECPoint octetStringToEcPoint(byte[])"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves$ECPointCompression$2:java.security.spec.ECPoint octetStringToEcPoint(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.ECCurves:java.security.spec.ECPoint octetStringToEcPoint(byte[])"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$10:org.apache.sshd.common.kex.ECDH create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$10:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$10:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$11:org.apache.sshd.common.kex.ECDH create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$11:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$11:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$12:org.apache.sshd.common.kex.ECDH create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$12:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$12:boolean isSupported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.random.SingletonRandomFactory:boolean isSupported()",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpBuiltinFactories$1(boolean,org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.NamedFactory:boolean lambda$setUpTransformedFactories$0(boolean,org.apache.sshd.common.OptionalFeature)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$any$1(java.util.Collection)",
            "org.apache.sshd.common.OptionalFeature:boolean lambda$all$0(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.kex.ECDH:byte[] getE()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.client.kex.DHGClient:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.keyprovider.KeyPairProvider:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.BuiltinSignatures:void <clinit>()",
            "org.apache.sshd.common.keyprovider.KeyPairProvider:org.apache.sshd.common.keyprovider.KeyPairProvider wrap(java.security.KeyPair[])",
            "org.apache.sshd.common.keyprovider.KeyPairProvider:org.apache.sshd.common.keyprovider.KeyPairProvider wrap(java.lang.Iterable)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider:void <clinit>()",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$lambda_loadKey_0__67:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves$lambda_static_0__27:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.net.SshdSocketAddress:int lambda$static$1(java.net.SocketAddress,java.net.SocketAddress)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:int lambda$static$0(java.net.InetAddress,java.net.InetAddress)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.NamedResource:boolean lambda$findByName$1(java.util.Comparator,java.lang.String,org.apache.sshd.common.NamedResource)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider:int findIdentityIndex(java.util.List,java.util.Comparator,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers:void <init>(java.lang.String,int,java.lang.String,int,int,java.lang.String,java.lang.String,org.apache.sshd.common.cipher.BuiltinCiphers$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.BuiltinCiphers$3:void <init>(java.lang.String,int,java.lang.String,int,int,java.lang.String,java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers$2:void <init>(java.lang.String,int,java.lang.String,int,int,java.lang.String,java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers$1:void <init>(java.lang.String,int,java.lang.String,int,int,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult getCiphers(org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureCiphers(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers[] values()",
            "org.apache.sshd.common.cipher.BuiltinCiphers:void registerExtension(org.apache.sshd.common.cipher.CipherFactory)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:java.util.NavigableSet getRegisteredExtensions()",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.NamedFactory unregisterExtension(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromString(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromFactory(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromFactoryName(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.lang.String[])",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.util.Collection)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.CipherFactory resolveFactory(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:void <clinit>()",
            "org.apache.sshd.common.kex.KexFactoryManager:void setCipherFactoriesNames(java.util.Collection)",
            "org.apache.sshd.common.BaseBuilder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers$3:org.apache.sshd.common.cipher.Cipher create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.BuiltinCiphers$3:java.lang.Object create()",
            "org.apache.sshd.common.cipher.BuiltinCiphers:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers$2:org.apache.sshd.common.cipher.Cipher create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.BuiltinCiphers$2:java.lang.Object create()",
            "org.apache.sshd.common.cipher.BuiltinCiphers:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.compression.BuiltinCompressions$1:org.apache.sshd.common.compression.Compression create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.compression.BuiltinCompressions$1:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.compression.CompressionZlib:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.compression.BuiltinCompressions$2:org.apache.sshd.common.compression.Compression create()"
        ]
    },
    "org.apache.sshd.common.compression.CompressionDelayedZlib:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.compression.BuiltinCompressions$3:org.apache.sshd.common.compression.Compression create()"
        ]
    },
    "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleRandomFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleRandomFactory:void <clinit>()",
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.random.RandomFactory getRandomFactory()"
        ]
    },
    "org.apache.sshd.common.random.JceRandomFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.random.RandomFactory getRandomFactory()",
            "org.apache.sshd.common.random.JceRandomFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.global.OpenSshHostKeysHandler:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.global.OpenSshHostKeysHandler$1:void <init>()"
        ]
    },
    "org.apache.sshd.client.global.OpenSshHostKeysHandler:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.global.OpenSshHostKeysHandler:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.String getString(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object updateProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object updateProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.helpers.AbstractFactoryManager:void setNioWorkers(int)"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.Object updateProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.helpers.AbstractFactoryManager:void setNioWorkers(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.String getString(org.apache.sshd.common.PropertyResolver,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.SshServerConfigFileReader:java.lang.Object resolveBanner(org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.agent.local.AgentForwardedChannel:org.apache.sshd.agent.SshAgent getAgent()",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.String getStringProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,java.lang.String)",
            "org.apache.sshd.common.PropertyResolver:java.lang.String getString(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.PropertyResolver:java.lang.Object getObject(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.client.config.hosts.KnownHostDigest fromName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:org.apache.sshd.client.config.hosts.KnownHostHashValue parse(java.lang.String,org.apache.sshd.client.config.hosts.KnownHostHashValue)"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostHashValue:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostEntry:org.apache.sshd.client.config.hosts.KnownHostEntry parseKnownHostEntry(org.apache.sshd.client.config.hosts.KnownHostEntry,java.lang.String)",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:void <init>()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:boolean isHostMatch(java.lang.String)",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:java.lang.String toString()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:java.lang.Appendable append(java.lang.Appendable,org.apache.sshd.client.config.hosts.KnownHostHashValue)",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:org.apache.sshd.client.config.hosts.KnownHostHashValue parse(java.lang.String)",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:void <clinit>()",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.auth.password.UserAuthPasswordFactory:org.apache.sshd.client.auth.password.UserAuthPassword create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.password.UserAuthPasswordFactory:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.client.auth.hostbased.UserAuthHostBasedFactory:org.apache.sshd.client.auth.hostbased.UserAuthHostBased create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBasedFactory:java.lang.Object create()",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBasedFactory$1:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory:org.apache.sshd.client.auth.pubkey.UserAuthPublicKey create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory$1:java.lang.Object create()",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractiveFactory:org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractiveFactory:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.server.x11.ChannelForwardedX11:void <init>(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void sessionCreated(org.apache.sshd.common.io.IoSession)"
        ]
    },
    "org.apache.sshd.agent.local.AgentForwardedChannel:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.AgentServerProxy:org.apache.sshd.agent.SshAgent createClient()"
        ]
    },
    "org.apache.sshd.agent.unix.AgentForwardedChannel:void <init>(long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.unix.AgentServerProxy:void lambda$new$0()"
        ]
    },
    "org.apache.sshd.common.forward.TcpipClientChannel:void <init>(org.apache.sshd.common.forward.TcpipClientChannel$Type,org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.net.SshdSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.SocksProxy$Socks4:void onMessage(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void sessionCreated(org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.forward.SocksProxy$Socks5:void onMessage(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.ChannelSession:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void <init>(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void <init>(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.helpers.AbstractFactoryManager:void setupSessionTimeout(org.apache.sshd.common.session.helpers.AbstractSessionFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.SshServer:void start()",
            "org.apache.sshd.client.SshClient:void start()"
        ]
    },
    "org.apache.sshd.common.helpers.AbstractFactoryManager:void stopSessionTimeoutListener(org.apache.sshd.common.session.helpers.AbstractSessionFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.helpers.AbstractFactoryManager:void removeSessionTimeout(org.apache.sshd.common.session.helpers.AbstractSessionFactory)"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.CachingPublicKeyAuthenticator:void sessionClosed(org.apache.sshd.common.session.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.CachingPublicKeyAuthenticator:void sessionException(org.apache.sshd.common.session.Session,java.lang.Throwable)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void signalSessionClosed(org.apache.sshd.common.session.SessionListener)"
        ]
    },
    "org.apache.sshd.server.forward.ForwardingFilter$1:boolean canForwardAgent(org.apache.sshd.common.session.Session,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleAgentForwarding(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.forward.ForwardingFilter$1:boolean canForwardAgent(org.apache.sshd.common.session.Session,java.lang.String)"
        ]
    },
    "org.apache.sshd.server.forward.ForwardingFilter$1:boolean canForwardX11(org.apache.sshd.common.session.Session,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleX11Forwarding(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.forward.ForwardingFilter$1:boolean canForwardX11(org.apache.sshd.common.session.Session,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.kex.DHGEXClient$1:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.util.io.der.DERWriter:void writeBigInteger(java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.agent.common.AbstractAgentProxy:org.apache.sshd.common.util.buffer.Buffer createBuffer(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AbstractAgentProxy:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void addIdentity(java.security.KeyPair,java.lang.String)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void removeIdentity(java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putChars(char[],int,int,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:void putAndWipeChars(char[],int,int,java.nio.charset.Charset)",
            "org.apache.sshd.common.util.buffer.Buffer:void putChars(char[],int,int)",
            "org.apache.sshd.common.util.buffer.Buffer:void putChars(char[],java.nio.charset.Charset)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putStringList(java.util.Collection,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putMPInt(java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.buffer.Buffer:void putRawPublicKey(java.security.PublicKey)",
            "org.apache.sshd.common.util.buffer.Buffer:void putKeyPair(java.security.KeyPair)",
            "org.apache.sshd.common.signature.SignatureECDSA:byte[] sign()"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putAndWipeBytes(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putString(java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:void putString(java.lang.String)",
            "org.apache.sshd.common.util.buffer.Buffer:void lambda$putStringList$0(java.nio.charset.Charset,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelPipedOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.UnknownCommand:void run()",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void writeRawOutput(int)",
            "org.apache.sshd.common.util.buffer.BufferUtils:int decodeHex(java.io.OutputStream,char,java.lang.CharSequence,int,int)",
            "org.apache.sshd.common.cipher.ECCurves$ECPointCompression$3:void writeECPoint(java.io.OutputStream,java.lang.String,java.security.spec.ECPoint)",
            "org.apache.sshd.common.channel.SttySupport:int copyStream(java.io.InputStream,java.io.OutputStream)"
        ]
    },
    "org.apache.sshd.server.shell.TtyFilterInputStream:org.apache.sshd.common.util.buffer.Buffer insertCharacter(org.apache.sshd.common.util.buffer.Buffer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterInputStream:int handleLF()"
        ]
    },
    "org.apache.sshd.server.shell.TtyFilterInputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterInputStream:void write(byte[],int,int)",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void writeRawOutput(int)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putBoolean(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:boolean verifySignature(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.signature.Signature,byte[])",
            "org.apache.sshd.server.auth.keyboard.PromptEntry:org.apache.sshd.common.util.buffer.Buffer append(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.channel.AbstractServerChannel:void sendExitStatus(int)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendDebugMessage(boolean,java.lang.Object,java.lang.String)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:org.apache.sshd.common.io.IoWriteFuture sendPassword(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void sendWindowChange(int,int,int,int)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.channel.ChannelShell:void doOpen()",
            "org.apache.sshd.client.channel.ChannelExec:void doOpen()",
            "org.apache.sshd.client.channel.ChannelSubsystem:void doOpen()",
            "org.apache.sshd.client.session.ClientConnectionService:org.apache.sshd.common.io.IoWriteFuture sendHeartBeat()"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putBuffer(org.apache.sshd.common.util.Readable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:boolean verifySignature(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.signature.Signature,byte[])",
            "org.apache.sshd.server.shell.TtyFilterInputStream:org.apache.sshd.common.util.buffer.Buffer insertCharacter(org.apache.sshd.common.util.buffer.Buffer,int)",
            "org.apache.sshd.server.x11.DefaultX11ForwardSupport:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.server.forward.TcpipServerChannel$1:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.agent.local.AgentForwardedChannel:void doWriteData(byte[],int,long)",
            "org.apache.sshd.agent.unix.AgentClient:void messageReceived(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void messageReceived(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:void write(org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter$StaticIoHandler:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.common.forward.SocksProxy:void messageReceived(org.apache.sshd.common.io.IoSession,org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void messageReceived(org.apache.sshd.common.util.Readable)",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer encode(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.digest.Digest getDigestForParams()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.ECDH:org.apache.sshd.common.digest.Digest getHash()"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void init(org.apache.sshd.common.session.ConnectionService,org.apache.sshd.common.session.Session,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:int registerChannel(org.apache.sshd.common.channel.Channel)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer createBuffer(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractive:java.lang.Boolean doInitialAuth(org.apache.sshd.server.session.ServerSession,java.lang.String,org.apache.sshd.server.auth.keyboard.KeyboardInteractiveAuthenticator,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator$1:void <init>(org.apache.sshd.client.session.ClientSessionCreator,java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.simple.SimpleClient wrap(org.apache.sshd.client.session.ClientSessionCreator,java.nio.channels.Channel)"
        ]
    },
    "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:java.util.Collection loadKeyPairs(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)"
        ]
    },
    "org.apache.sshd.agent.common.DefaultAgentForwardSupport:java.lang.String initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleAgentForwarding(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.server.channel.AbstractServerChannel:void <init>(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:void <init>(java.util.Collection)",
            "org.apache.sshd.server.channel.AbstractServerChannel:void <init>()"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.SshServer$init__146:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.SshClient$init__216:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.forward.ForwardingFilter createForwardingFilter(org.apache.sshd.common.session.helpers.AbstractSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.forward.ForwardingFilter getForwardingFilter()"
        ]
    },
    "org.apache.sshd.common.forward.DefaultForwarderFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.forward.DefaultForwarderFactory:void <clinit>()",
            "org.apache.sshd.common.BaseBuilder:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.session.ServerConnectionServiceFactory$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerConnectionServiceFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.session.ClientConnectionServiceFactory$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientConnectionServiceFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:void createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void createLink(java.nio.file.Path,java.nio.file.Path,boolean,java.nio.file.attribute.FileAttribute[])"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:void createLink(java.nio.file.Path,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.root.RootedFileSystemProvider:void createLink(java.nio.file.Path,java.nio.file.Path,boolean,java.nio.file.attribute.FileAttribute[])"
        ]
    },
    "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List readAuthorizedKeys(java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List readAuthorizedKeys(java.net.URL)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List readAuthorizedKeys(java.io.File)",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List readAuthorizedKeys(java.nio.file.Path,java.nio.file.OpenOption[])",
            "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List readAuthorizedKeys(java.lang.String)"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostEntry:java.util.List readKnownHostEntries(java.io.Reader,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostEntry:java.util.List readKnownHostEntries(java.io.InputStream,boolean)"
        ]
    },
    "org.apache.sshd.server.shell.ProcessShellCommandFactory:org.apache.sshd.server.command.Command createCommand(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleExec(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.command.AbstractDelegatingCommandFactory:org.apache.sshd.server.command.Command createCommand(java.lang.String)"
        ]
    },
    "org.apache.sshd.server.shell.InteractiveProcessShellFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InteractiveProcessShellFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.ECBufferPublicKeyParser:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.ECBufferPublicKeyParser:void <clinit>()",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.RSABufferPublicKeyParser:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.RSABufferPublicKeyParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.ED25519BufferPublicKeyParser:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.ED25519BufferPublicKeyParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.DSSBufferPublicKeyParser:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.DSSBufferPublicKeyParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.AbstractPublicKeyEntryDecoder:void <init>(java.lang.Class,java.lang.Class,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.Ed25519PublicKeyDecoder:void <init>()",
            "org.apache.sshd.common.config.keys.impl.RSAPublicKeyDecoder:void <init>()",
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:void <init>()",
            "org.apache.sshd.common.config.keys.impl.DSSPublicKeyEntryDecoder:void <init>()"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.AbstractPrivateKeyEntryDecoder:void <init>(java.lang.Class,java.lang.Class,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:void <init>()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:void <init>()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHRSAPrivateKeyDecoder:void <init>()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:void <init>()"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator$lambda_new_1__125:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.client.SshClient:void open()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.SshClient:org.apache.sshd.client.simple.SimpleClient setUpDefaultSimpleClient()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser$lambda_extractKeyPairs_0__43:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.AsyncAuthException:void setAuthed(boolean)",
            "org.apache.sshd.server.auth.AsyncAuthException:void addListener(java.util.function.Consumer)",
            "org.apache.sshd.common.util.logging.LoggingUtils:void logExceptionStackTrace(java.lang.Throwable,int,java.util.function.Consumer)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:void <init>(java.nio.file.Path,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:void <init>(java.nio.file.Path,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:void <init>(java.nio.file.Path,java.util.function.Supplier,java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:org.apache.sshd.client.config.keys.ClientIdentityProvider lambda$buildProviders$2(java.util.function.Supplier,java.util.function.Supplier,boolean,java.nio.file.Path)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher$lambda_buildProviders_2__209:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.file.root.RootedFileSystemProvider:java.nio.file.FileSystem newFileSystem(java.nio.file.Path,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.file.virtualfs.VirtualFileSystemFactory:java.nio.file.FileSystem createFileSystem(org.apache.sshd.common.session.Session)"
        ]
    },
    "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.hosts.DefaultConfigFileHostEntryResolver:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.DefaultConfigFileHostEntryResolver:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.config.hosts.ConfigFileHostEntryResolver:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$4:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG getDH(java.math.BigInteger,java.math.BigInteger)",
            "org.apache.sshd.client.kex.DHGClient:org.apache.sshd.common.kex.AbstractDH getDH()",
            "org.apache.sshd.client.kex.DHGEXClient:org.apache.sshd.common.kex.AbstractDH getDH(java.math.BigInteger,java.math.BigInteger)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$5:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG getDH(java.math.BigInteger,java.math.BigInteger)",
            "org.apache.sshd.client.kex.DHGClient:org.apache.sshd.common.kex.AbstractDH getDH()",
            "org.apache.sshd.client.kex.DHGEXClient:org.apache.sshd.common.kex.AbstractDH getDH(java.math.BigInteger,java.math.BigInteger)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$6:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG getDH(java.math.BigInteger,java.math.BigInteger)",
            "org.apache.sshd.client.kex.DHGClient:org.apache.sshd.common.kex.AbstractDH getDH()",
            "org.apache.sshd.client.kex.DHGEXClient:org.apache.sshd.common.kex.AbstractDH getDH(java.math.BigInteger,java.math.BigInteger)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$7:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG getDH(java.math.BigInteger,java.math.BigInteger)",
            "org.apache.sshd.client.kex.DHGClient:org.apache.sshd.common.kex.AbstractDH getDH()",
            "org.apache.sshd.client.kex.DHGEXClient:org.apache.sshd.common.kex.AbstractDH getDH(java.math.BigInteger,java.math.BigInteger)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.RSAPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,byte[])"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.DSSPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.AbstractKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,byte[])"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.List getPKCS8AlgorithmIdentifier(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.PKCS8PEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleSecurityProviderRegistrar:java.security.Provider getSecurityProvider()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:java.security.KeyPair loadKeyPair(java.lang.String,java.io.InputStream,org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean registerSecurityProvider(org.apache.sshd.common.util.security.SecurityProviderRegistrar)",
            "org.apache.sshd.common.util.security.SecurityEntityFactory:org.apache.sshd.common.util.security.SecurityEntityFactory toFactory(java.lang.Class,org.apache.sshd.common.util.security.SecurityProviderChoice,org.apache.sshd.common.util.security.SecurityProviderChoice)"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderRegistrar:java.security.Provider getSecurityProvider()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.bouncycastle.BouncyCastleKeyPairResourceParser:java.security.KeyPair loadKeyPair(java.lang.String,java.io.InputStream,org.apache.sshd.common.config.keys.FilePasswordProvider)",
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean registerSecurityProvider(org.apache.sshd.common.util.security.SecurityProviderRegistrar)",
            "org.apache.sshd.common.util.security.SecurityEntityFactory:org.apache.sshd.common.util.security.SecurityEntityFactory toFactory(java.lang.Class,org.apache.sshd.common.util.security.SecurityProviderChoice,org.apache.sshd.common.util.security.SecurityProviderChoice)"
        ]
    },
    "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.BaseBuilder fillWithDefaultValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.ServerBuilder:org.apache.sshd.server.ServerBuilder fillWithDefaultValues()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.ClientBuilder:org.apache.sshd.client.ClientBuilder fillWithDefaultValues()"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:java.security.PrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.AbstractMap$SimpleImmutableEntry readPrivateKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder:java.security.PrivateKey decodePrivateKey(org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils:int getEDDSAKeySize(java.security.Key)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:int getKeySize(java.security.Key)"
        ]
    },
    "org.apache.sshd.common.config.keys.BuiltinIdentities:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.IdentityUtils:void lambda$createKeyPairProvider$0(boolean,java.util.Map,java.lang.String,java.security.KeyPair)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities[] values()",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromName(java.lang.String)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromAlgorithm(java.lang.String)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyPair(java.security.KeyPair)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKey(java.security.Key)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromKeyType(java.lang.Class)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:void <clinit>()",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map loadDefaultIdentities(java.nio.file.Path,boolean,org.apache.sshd.common.config.keys.FilePasswordProvider,java.nio.file.LinkOption[])",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:void <init>(java.nio.file.Path,boolean,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider,boolean)",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:void <init>(java.nio.file.Path,boolean,java.util.function.Supplier,java.util.function.Supplier,boolean)",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:boolean isSupported(java.security.KeyPair)",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getDefaultBuiltinIdentitiesPaths(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.Ed25519PublicKeyDecoder:net.i2p.crypto.eddsa.EdDSAPublicKey decodePublicKey(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.Ed25519PublicKeyDecoder:java.security.PublicKey decodePublicKey(java.lang.String,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityUtils$lambda_resolveSecurityEntityFactory_1__16:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.SshException:void <init>(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.BaseCipher:void init(org.apache.sshd.common.cipher.Cipher$Mode,byte[],byte[])",
            "org.apache.sshd.common.future.AbstractSshFuture:org.apache.sshd.common.SshException lambda$verifyResult$1(java.lang.Throwable,java.lang.String)",
            "org.apache.sshd.common.SshException:void <init>(java.lang.String)",
            "org.apache.sshd.common.SshException:void <init>(java.lang.Throwable)"
        ]
    },
    "org.apache.sshd.common.SshException:void <init>(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.gss.UserAuthGSS:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.kex.DHGServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.AbstractServerSession:void startService(java.lang.String)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void decode()",
            "org.apache.sshd.common.session.helpers.AbstractSession:void receiveNewKeys()",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit()",
            "org.apache.sshd.common.SshException:void <init>(int)",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.ClientUserAuthService:void tryNext(int)",
            "org.apache.sshd.client.session.ClientSessionImpl:void handleDisconnect(int,java.lang.String,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.AbstractClientSession:boolean readIdentification(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.session.AbstractClientSession:void checkKeys()"
        ]
    },
    "org.apache.sshd.common.SshConstants$LazyMessagesMapHolder:boolean lambda$static$0(java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.SshConstants$LazyMessagesMapHolder$lambda_static_0__72:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.channel.AbstractChannel:void handleEof()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:void handleEof()",
            "org.apache.sshd.server.x11.ChannelForwardedX11:void handleEof()",
            "org.apache.sshd.agent.local.ChannelAgentForwarding:void handleEof()",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:void channelEof(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.AbstractClientChannel:void lambda$new$0(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.AbstractClientChannel$lambda_new_0__109:void notifyEvent(java.lang.Object)"
        ]
    },
    "org.apache.sshd.server.shell.ProcessShellFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.shell.ProcessShellCommandFactory:org.apache.sshd.server.command.Command createCommand(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:java.util.List readDefaultAuthorizedKeys(java.nio.file.OpenOption[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.keyprovider.SimpleGeneratorHostKeyProvider:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.MapEntryUtils$lambda_static_0__73:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.net.SshdSocketAddress:int lambda$static$1(java.net.SocketAddress,java.net.SocketAddress)",
            "org.apache.sshd.common.util.net.SshdSocketAddress:int lambda$static$0(java.net.InetAddress,java.net.InetAddress)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.Digest findDigestByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.digest.DigestUtils:org.apache.sshd.common.digest.DigestFactory findFactoryByAlgorithm(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.NamedResource:boolean lambda$findByName$1(java.util.Comparator,java.lang.String,org.apache.sshd.common.NamedResource)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider:int findIdentityIndex(java.util.List,java.util.Comparator,java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:boolean readIdentification(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void messageReceived(org.apache.sshd.common.util.Readable)"
        ]
    },
    "org.apache.sshd.agent.local.ProxyAgentFactory:boolean isPreferredUnixAgent(org.apache.sshd.common.PropertyResolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.ProxyAgentFactory:java.util.List getChannelForwardingFactories(org.apache.sshd.common.FactoryManager)"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean isNamedProviderUsed()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.PropertyResolver:boolean getBooleanProperty(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.NamedResource$lambda_findByName_1__31:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:boolean lambda$findSecurityProviderRegistrarBySecurityEntity$0(java.util.function.Predicate,org.apache.sshd.common.util.security.SecurityProviderRegistrar)",
            "org.apache.sshd.common.util.logging.LoggingUtils:boolean lambda$getMnemonicFields$2(java.util.function.Predicate,java.lang.reflect.Field)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.channel.Window:void waitForCondition(java.util.function.Predicate,long)"
        ]
    },
    "org.apache.sshd.client.session.AbstractClientSession:java.lang.String removePasswordIdentity(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.session.AbstractClientSession:java.security.KeyPair removePublicKeyIdentity(java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.SshClient:java.lang.String removePasswordIdentity(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.SshClient:java.security.KeyPair removePublicKeyIdentity(java.security.KeyPair)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:java.lang.String resolveIdentificationString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:org.apache.sshd.common.io.IoWriteFuture sendServerIdentification(java.lang.String[])",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.io.IoWriteFuture sendClientIdentification()"
        ]
    },
    "org.apache.sshd.server.SshServer:org.apache.sshd.common.io.IoAcceptor createAcceptor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.SshServer:void start()"
        ]
    },
    "org.apache.sshd.client.SshClient:org.apache.sshd.common.io.IoConnector createConnector()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:void start()"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:void forEach(java.lang.Iterable,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.Channel:void addRequestHandlers(java.util.Collection)",
            "org.apache.sshd.common.channel.Channel:void removeRequestHandlers(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.util.List map(java.util.Collection,java.util.function.Function)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.AgentImpl:java.util.List getIdentities()",
            "org.apache.sshd.common.keyprovider.FileKeyPairProvider:void setFiles(java.util.Collection)",
            "org.apache.sshd.common.keyprovider.FileKeyPairProvider:void setPaths(java.util.Collection)",
            "org.apache.sshd.common.NamedResource:java.util.List getNameList(java.util.Collection)",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.List buildProviders(java.util.Collection,java.util.function.Supplier,java.util.function.Supplier,boolean)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.util.NavigableSet mapSort(java.util.Collection,java.util.function.Function,java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.ECCurves:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.util.NavigableMap toSortedMap(java.lang.Iterable,java.util.function.Function,java.util.function.Function,java.util.Comparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.Signal:void <clinit>()",
            "org.apache.sshd.common.channel.PtyMode:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.util.List selectMatchingMembers(java.util.function.Predicate,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.GenericUtils:java.lang.Object findFirstMatchingMember(java.util.function.Predicate,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.util.List selectMatchingMembers(java.util.function.Predicate,java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.util.Iterator wrapIterator(java.lang.Iterable,java.util.function.Function)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.GenericUtils:java.util.Iterator lambda$wrapIterable$8(java.lang.Iterable,java.util.function.Function)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.util.Iterator lambda$multiIterableSuppliers$10(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.GenericUtils$lambda_multiIterableSuppliers_10__10:java.util.Iterator iterator()"
        ]
    },
    "org.apache.sshd.common.NamedResource:org.apache.sshd.common.NamedResource findByName(java.lang.String,java.util.Comparator,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromName(java.lang.String)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromFactoryName(java.lang.String)",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromName(java.lang.String)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromFactoryName(java.lang.String)",
            "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryName(java.lang.String)",
            "org.apache.sshd.common.cipher.ECCurves:org.apache.sshd.common.cipher.ECCurves fromCurveName(java.lang.String)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromFactoryName(java.lang.String)",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories fromFactoryName(java.lang.String)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromFactoryName(java.lang.String)",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions fromFactoryName(java.lang.String)",
            "org.apache.sshd.common.NamedResource:org.apache.sshd.common.NamedResource removeByName(java.lang.String,java.util.Comparator,java.util.Collection)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.ServiceFactory:org.apache.sshd.common.Service create(java.util.Collection,java.lang.String,org.apache.sshd.common.session.Session)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.client.config.hosts.KnownHostDigest fromName(java.lang.String)",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.session.ClientUserAuthService:void <init>(org.apache.sshd.common.session.Session)"
        ]
    },
    "org.apache.sshd.common.BuiltinFactory:java.util.List setUpFactories(boolean,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureCiphers(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureSignatures(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureMacs(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureCompression(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Iterator lambda$loadKeys$0(java.util.function.Predicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher$lambda_loadKeys_0__205:java.util.Iterator iterator()"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator$stream__124:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher:void <init>(org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher:void <init>(org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider)"
        ]
    },
    "org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher:void <init>(java.util.function.Supplier,java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:void checkConfig()"
        ]
    },
    "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onFailed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2CompletionHandler:java.lang.Object lambda$failed$1(java.lang.Throwable,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyEntryResolver:byte[] readRLEBytes(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:net.i2p.crypto.eddsa.EdDSAPrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.util.security.eddsa.Ed25519PublicKeyDecoder:net.i2p.crypto.eddsa.EdDSAPublicKey decodePublicKey(java.lang.String,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.security.interfaces.ECPublicKey decodePublicKey(java.lang.String,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.security.PublicKey readPublicKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:java.security.interfaces.ECPrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.KeyEntryResolver:java.lang.String decodeString(java.io.InputStream,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyEntryResolver:java.math.BigInteger decodeBigInt(java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyEntryResolver:int decodeInt(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.List readPrivateKeys(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.util.Collection,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.KeyEntryResolver:byte[] readRLEBytes(java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:int readInt(java.io.InputStream,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.BufferUtils:int readInt(java.io.InputStream,byte[])"
        ]
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:long readUInt(java.io.InputStream,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory resolveFactory(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.ServerBuilder:org.apache.sshd.server.SshServer build(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.ServerBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)"
        ]
    },
    "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.SshServer:org.apache.sshd.server.SshServer setUpDefaultServer()",
            "org.apache.sshd.common.BaseBuilder:java.lang.Object build()",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.SshClient setUpDefaultClient()"
        ]
    },
    "org.apache.sshd.client.ClientBuilder:org.apache.sshd.client.SshClient build(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.ClientBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostDigest:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostHashValue:boolean isHostMatch(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostEntry:boolean isHostMatch(java.lang.String,int)"
        ]
    },
    "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory resolveFactory(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)"
        ]
    },
    "org.apache.sshd.server.auth.password.UserAuthPasswordFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.server.auth.gss.UserAuthGSSFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.server.auth.hostbased.UserAuthHostBasedFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.server.auth.hostbased.UserAuthHostBasedFactory$1:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.UserAuthPublicKeyFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.UserAuthPublicKeyFactory$1:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractiveFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.server.auth.UserAuthNoneFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.agent.local.ProxyAgentFactory:java.util.List getChannelForwardingFactories(org.apache.sshd.common.FactoryManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:void checkConfig()"
        ]
    },
    "org.apache.sshd.agent.local.LocalAgentFactory:java.util.List getChannelForwardingFactories(org.apache.sshd.common.FactoryManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:void checkConfig()"
        ]
    },
    "org.apache.sshd.agent.unix.UnixAgentFactory$lambda_getChannelForwardingFactories_0__177:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.agent.unix.UnixAgentFactory:java.util.List getChannelForwardingFactories(org.apache.sshd.common.FactoryManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:void checkConfig()"
        ]
    },
    "org.apache.sshd.server.ServerBuilder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.SshServer configure(org.apache.sshd.server.SshServer,org.apache.sshd.common.PropertyResolver,boolean,boolean)",
            "org.apache.sshd.server.SshServer:org.apache.sshd.server.SshServer setUpDefaultServer()",
            "org.apache.sshd.server.ServerBuilder:org.apache.sshd.server.ServerBuilder fillWithDefaultValues()",
            "org.apache.sshd.server.ServerBuilder:java.util.List setUpDefaultKeyExchanges(boolean)",
            "org.apache.sshd.server.ServerBuilder:org.apache.sshd.server.ServerBuilder builder()",
            "org.apache.sshd.server.ServerBuilder:void <clinit>()",
            "org.apache.sshd.server.ServerBuilder$lambda_static_0__147:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures$2:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.AgentImpl:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.Signature getByCurveSize(java.security.spec.ECParameterSpec)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures$1:org.apache.sshd.common.signature.Signature create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.BuiltinSignatures$1:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures$3:org.apache.sshd.common.signature.Signature create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.BuiltinSignatures$3:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures$4:org.apache.sshd.common.signature.Signature create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.BuiltinSignatures$4:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures$5:org.apache.sshd.common.signature.Signature create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.BuiltinSignatures$5:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.DESPrivateKeyObfuscator:java.util.List getSupportedKeySizes()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.util.List)",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator resolvePrivateKeyObfuscator()",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator registerPrivateKeyObfuscator(org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator)",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator registerPrivateKeyObfuscator(java.lang.String,org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator)",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:boolean unregisterPrivateKeyObfuscator(org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator)",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator unregisterPrivateKeyObfuscator(java.lang.String)",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator getRegisteredPrivateKeyObfuscator(java.lang.String)",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:java.util.NavigableSet getRegisteredPrivateKeyObfuscatorCiphers()",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:java.util.List getRegisteredPrivateKeyObfuscators()",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext parseAlgorithmInfo(java.lang.String)",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext newPrivateKeyEncryptionContext(org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator,java.lang.String)",
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:java.util.List getSupportedKeySizes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.AESPrivateKeyObfuscator:int resolveKeyLength(org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext)"
        ]
    },
    "org.apache.sshd.server.auth.password.UserAuthPasswordFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.password.UserAuthPasswordFactory:void <clinit>()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:void <clinit>()",
            "org.apache.sshd.server.ServerAuthenticationManager:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.auth.hostbased.UserAuthHostBasedFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBasedFactory$1:void <init>()"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.UserAuthPublicKeyFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKeyFactory$1:void <init>()"
        ]
    },
    "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractiveFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractiveFactory:void <clinit>()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:void <clinit>()",
            "org.apache.sshd.server.ServerAuthenticationManager:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.auth.UserAuthNoneFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.UserAuthNoneFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.auth.password.UserAuthPasswordFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.password.UserAuthPasswordFactory:void <clinit>()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:void <clinit>()",
            "org.apache.sshd.client.SshClient:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.auth.hostbased.UserAuthHostBasedFactory$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBasedFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory$1:void <init>()"
        ]
    },
    "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractiveFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractiveFactory:void <clinit>()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:void <clinit>()",
            "org.apache.sshd.client.SshClient:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.session.ServerUserAuthServiceFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthServiceFactory:void <clinit>()",
            "org.apache.sshd.server.SshServer:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.session.ClientUserAuthServiceFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientUserAuthServiceFactory:void <clinit>()",
            "org.apache.sshd.client.SshClient:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromFactory(org.apache.sshd.common.NamedFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromFactoryName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:org.apache.sshd.common.digest.DigestFactory getDefaultFingerPrintFactory()",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.digest.Digest,java.security.PublicKey)",
            "org.apache.sshd.common.digest.BuiltinDigests:org.apache.sshd.common.digest.BuiltinDigests fromFactory(org.apache.sshd.common.NamedFactory)"
        ]
    },
    "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest,byte[])"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$3:org.apache.sshd.common.kex.DHG create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$3:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$1:org.apache.sshd.common.kex.DHG create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$1:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$2:org.apache.sshd.common.kex.DHG create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$2:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$9:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG getDH(java.math.BigInteger,java.math.BigInteger)",
            "org.apache.sshd.client.kex.DHGClient:org.apache.sshd.common.kex.AbstractDH getDH()",
            "org.apache.sshd.client.kex.DHGEXClient:org.apache.sshd.common.kex.AbstractDH getDH(java.math.BigInteger,java.math.BigInteger)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$8:org.apache.sshd.common.kex.DHG create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories$8:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:void <clinit>()",
            "org.apache.sshd.common.config.keys.KeyUtils:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void <clinit>()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$10:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG getDH(java.math.BigInteger,java.math.BigInteger)",
            "org.apache.sshd.client.kex.DHGClient:org.apache.sshd.common.kex.AbstractDH getDH()",
            "org.apache.sshd.client.kex.DHGEXClient:org.apache.sshd.common.kex.AbstractDH getDH(java.math.BigInteger,java.math.BigInteger)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$11:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG getDH(java.math.BigInteger,java.math.BigInteger)",
            "org.apache.sshd.client.kex.DHGClient:org.apache.sshd.common.kex.AbstractDH getDH()",
            "org.apache.sshd.client.kex.DHGEXClient:org.apache.sshd.common.kex.AbstractDH getDH(java.math.BigInteger,java.math.BigInteger)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$12:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG getDH(java.math.BigInteger,java.math.BigInteger)",
            "org.apache.sshd.client.kex.DHGClient:org.apache.sshd.common.kex.AbstractDH getDH()",
            "org.apache.sshd.client.kex.DHGEXClient:org.apache.sshd.common.kex.AbstractDH getDH(java.math.BigInteger,java.math.BigInteger)"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.AgentImpl:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.common.signature.SignatureFactoriesManager:void setSignatureFactoriesNames(java.util.Collection)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures[] values()",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.Signature getByCurveSize(java.security.spec.ECParameterSpec)",
            "org.apache.sshd.common.signature.BuiltinSignatures:void registerExtension(org.apache.sshd.common.signature.SignatureFactory)",
            "org.apache.sshd.common.signature.BuiltinSignatures:java.util.NavigableSet getRegisteredExtensions()",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.SignatureFactory unregisterExtension(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromString(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromFactory(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromFactoryName(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.lang.String[])",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.util.Collection)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.SignatureFactory resolveFactory(java.lang.String)",
            "org.apache.sshd.common.signature.BuiltinSignatures:void <clinit>()",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult getSignatures(org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.common.config.SshConfigFileReader:org.apache.sshd.common.helpers.AbstractFactoryManager configureSignatures(org.apache.sshd.common.helpers.AbstractFactoryManager,java.lang.String,boolean,boolean)",
            "org.apache.sshd.common.BaseBuilder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.keyprovider.KeyPairProvider:org.apache.sshd.common.keyprovider.KeyPairProvider wrap(java.security.KeyPair[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.keyprovider.KeyPairProvider:org.apache.sshd.common.keyprovider.KeyPairProvider wrap(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.KeyPairProvider:org.apache.sshd.common.keyprovider.KeyPairProvider wrap(java.security.KeyPair[])"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers$3:void <init>(java.lang.String,int,java.lang.String,int,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.BuiltinCiphers:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers$2:void <init>(java.lang.String,int,java.lang.String,int,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.BuiltinCiphers:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers$1:void <init>(java.lang.String,int,java.lang.String,int,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.BuiltinCiphers:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers:java.util.NavigableSet getRegisteredExtensions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.NamedFactory unregisterExtension(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromFactory(org.apache.sshd.common.NamedFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromFactoryName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.BuiltinCiphers:void registerExtension(org.apache.sshd.common.cipher.CipherFactory)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers fromFactory(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.CipherFactory resolveFactory(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.CipherFactory resolveFactory(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.cipher.BuiltinCiphers:org.apache.sshd.common.cipher.BuiltinCiphers$ParseResult parseCiphersList(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.BaseBuilder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.SshServer configure(org.apache.sshd.server.SshServer,org.apache.sshd.common.PropertyResolver,boolean,boolean)",
            "org.apache.sshd.server.SshServer:org.apache.sshd.server.SshServer setUpDefaultServer()",
            "org.apache.sshd.server.ServerBuilder:org.apache.sshd.server.ServerBuilder fillWithDefaultValues()",
            "org.apache.sshd.server.ServerBuilder:java.util.List setUpDefaultKeyExchanges(boolean)",
            "org.apache.sshd.server.ServerBuilder:org.apache.sshd.server.ServerBuilder builder()",
            "org.apache.sshd.server.ServerBuilder:void <clinit>()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.BaseBuilder fillWithDefaultValues()",
            "org.apache.sshd.common.BaseBuilder:java.util.List setUpDefaultCiphers(boolean)",
            "org.apache.sshd.common.BaseBuilder:java.util.List setUpDefaultMacs(boolean)",
            "org.apache.sshd.common.BaseBuilder:java.util.List setUpDefaultSignatures(boolean)",
            "org.apache.sshd.common.BaseBuilder:void <clinit>()",
            "org.apache.sshd.client.config.SshClientConfigFileReader:org.apache.sshd.client.SshClient configure(org.apache.sshd.client.SshClient,org.apache.sshd.common.PropertyResolver,boolean,boolean)",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.SshClient setUpDefaultClient()",
            "org.apache.sshd.client.ClientBuilder:org.apache.sshd.client.ClientBuilder fillWithDefaultValues()",
            "org.apache.sshd.client.ClientBuilder:java.util.List setUpDefaultKeyExchanges(boolean)",
            "org.apache.sshd.client.ClientBuilder:org.apache.sshd.client.ClientBuilder builder()",
            "org.apache.sshd.client.ClientBuilder:void <clinit>()",
            "org.apache.sshd.server.ServerBuilder$lambda_static_0__147:java.lang.Object apply(java.lang.Object)",
            "org.apache.sshd.client.ClientBuilder$lambda_static_0__217:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers$3:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.cipher.BuiltinCiphers$2:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.compression.BuiltinCompressions$1:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.compression.Compression create()",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.compression.BuiltinCompressions$2:org.apache.sshd.common.compression.Compression create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.compression.BuiltinCompressions$2:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.compression.BuiltinCompressions$3:org.apache.sshd.common.compression.Compression create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.compression.BuiltinCompressions$3:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.server.global.OpenSshHostKeysHandler$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.global.OpenSshHostKeysHandler:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.global.OpenSshHostKeysHandler:void <clinit>()",
            "org.apache.sshd.client.ClientBuilder:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.config.SshServerConfigFileReader:java.lang.Object resolveBanner(org.apache.sshd.common.PropertyResolver)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.agent.local.AgentForwardedChannel:org.apache.sshd.agent.SshAgent getAgent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.AgentServerProxy:org.apache.sshd.agent.SshAgent createClient()"
        ]
    },
    "org.apache.sshd.common.PropertyResolverUtils:java.lang.String getStringProperty(org.apache.sshd.common.PropertyResolver,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.forward.AgentForwardingFilter resolveAgentForwardingFilter(org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.forward.TcpForwardingFilter resolveTcpForwardingFilter(org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.forward.X11ForwardingFilter resolveX11ForwardingFilter(org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.server.config.SshServerConfigFileReader:java.lang.Object resolveBanner(org.apache.sshd.common.PropertyResolver)",
            "org.apache.sshd.server.session.ServerUserAuthService:org.apache.sshd.common.io.IoWriteFuture sendWelcomeBanner(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.common.PropertyResolver:java.lang.String getStringProperty(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.PropertyResolver:java.lang.String getString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.hosts.KnownHostHashValue:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:org.apache.sshd.client.config.hosts.KnownHostHashValue parse(java.lang.String)"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostHashValue:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:java.lang.String resolveWelcomeBanner(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.common.PropertyResolverUtils:long toLong(java.lang.Object,long)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Long toLong(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Enum toEnum(java.lang.Class,java.lang.Object,boolean,java.util.Collection)",
            "org.apache.sshd.common.PropertyResolverUtils:int toInteger(java.lang.Object,int)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Integer toInteger(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.lang.Boolean toBoolean(java.lang.Object)",
            "org.apache.sshd.common.PropertyResolverUtils:java.nio.charset.Charset toCharset(java.lang.Object)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostHashValue:java.lang.Appendable append(java.lang.Appendable,org.apache.sshd.client.config.hosts.KnownHostHashValue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:java.lang.String toString()"
        ]
    },
    "org.apache.sshd.client.auth.password.UserAuthPasswordFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.auth.hostbased.UserAuthHostBasedFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.auth.hostbased.UserAuthHostBasedFactory$1:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory$1:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractiveFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.client.channel.PtyCapableChannelSession:void <init>(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.ChannelShell:void <init>()",
            "org.apache.sshd.client.channel.ChannelExec:void <init>(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.helpers.AbstractFactoryManager:void removeSessionTimeout(org.apache.sshd.common.session.helpers.AbstractSessionFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.SshServer:void lambda$getInnerCloseable$0()",
            "org.apache.sshd.client.SshClient:void lambda$getInnerCloseable$0()"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.CachingPublicKeyAuthenticator:void sessionException(org.apache.sshd.common.session.Session,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void signalExceptionCaught(org.apache.sshd.common.session.SessionListener,java.lang.Throwable)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void signalSessionClosed(org.apache.sshd.common.session.SessionListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:java.lang.Void lambda$signalSessionClosed$2(org.apache.sshd.common.session.SessionListener)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putAndWipeChars(char[],int,int,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:void putAndWipeChars(char[],int,int)",
            "org.apache.sshd.common.util.buffer.Buffer:void putAndWipeChars(char[],java.nio.charset.Charset)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putChars(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:void putChars(char[])"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putChars(char[],java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.signature.SignatureECDSA:byte[] sign()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.AgentImpl:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,byte[],java.lang.String,java.lang.String,org.apache.sshd.common.signature.Signature,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.KeyPairIdentity:byte[] sign(byte[])"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.password.UserAuthPassword:java.lang.Boolean handleServerPasswordChangeRequest(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,org.apache.sshd.server.auth.password.PasswordChangeRequiredException)",
            "org.apache.sshd.server.auth.gss.UserAuthGSS:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBased:java.lang.Boolean doAuth(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:boolean verifySignature(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.signature.Signature,byte[])",
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKey:void sendPublicKeyResponse(org.apache.sshd.server.session.ServerSession,java.lang.String,java.lang.String,java.security.PublicKey,byte[],int,int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.auth.keyboard.PromptEntry:org.apache.sshd.common.util.buffer.Buffer append(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.common.util.buffer.Buffer append(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.kex.DHGEXServer:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.channel.AbstractServerChannel:void sendExitStatus(int)",
            "org.apache.sshd.server.x11.ChannelForwardedX11:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:org.apache.sshd.common.channel.RequestHandler$Result handleHostKeys(org.apache.sshd.common.session.Session,java.util.Collection,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationSuccess(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void handleAuthenticationFailure(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:org.apache.sshd.common.io.IoWriteFuture sendWelcomeBanner(org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void addIdentity(java.security.KeyPair,java.lang.String)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.util.buffer.Buffer putRawEDDSAPublicKey(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey)",
            "org.apache.sshd.common.util.buffer.Buffer:void putRawPublicKey(java.security.PublicKey)",
            "org.apache.sshd.common.util.buffer.Buffer:void putKeyPair(java.security.KeyPair)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void stopRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.TcpipClientChannel:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.io.IoWriteFuture sendDebugMessage(boolean,java.lang.Object,java.lang.String)",
            "org.apache.sshd.common.session.helpers.AbstractSession:boolean handleServiceRequest(java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractSession:byte[] sendKexInit(java.util.Map)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void disconnect(int,java.lang.String)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture sendChannelOpenFailure(org.apache.sshd.common.util.buffer.Buffer,int,int,java.lang.String,java.lang.String)",
            "org.apache.sshd.client.auth.password.UserAuthPassword:org.apache.sshd.common.io.IoWriteFuture sendPassword(org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,byte[],java.lang.String,java.lang.String,org.apache.sshd.common.signature.Signature,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKey:void appendSignature(org.apache.sshd.client.session.ClientSession,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.security.PublicKey,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:boolean sendAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String)",
            "org.apache.sshd.client.auth.keyboard.UserAuthKeyboardInteractive:boolean processAuthDataRequest(org.apache.sshd.client.session.ClientSession,java.lang.String,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.ChannelDirectTcpip:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void sendWindowChange(int,int,int,int)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void doOpenPty()",
            "org.apache.sshd.client.channel.ChannelShell:void doOpen()",
            "org.apache.sshd.client.channel.ChannelExec:void doOpen()",
            "org.apache.sshd.client.channel.AbstractClientChannel:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.client.channel.ChannelSubsystem:void doOpen()",
            "org.apache.sshd.client.session.ClientUserAuthService:org.apache.sshd.client.future.AuthFuture auth(java.lang.String)",
            "org.apache.sshd.client.session.ClientConnectionService:org.apache.sshd.common.io.IoWriteFuture sendHeartBeat()",
            "org.apache.sshd.client.session.ClientSessionImpl:void sendInitialServiceRequest()"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void lambda$putStringList$0(java.nio.charset.Charset,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer$lambda_putStringList_0__28:void accept(java.lang.Object)"
        ]
    },
    "org.apache.sshd.server.shell.TtyFilterInputStream:int handleLF()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterInputStream:int read()"
        ]
    },
    "org.apache.sshd.server.auth.keyboard.PromptEntry:org.apache.sshd.common.util.buffer.Buffer append(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.keyboard.InteractiveChallenge:org.apache.sshd.common.util.buffer.Buffer append(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.unix.AgentClient:void messageReceived(org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.unix.AgentClient:void run()"
        ]
    },
    "org.apache.sshd.client.simple.AbstractSimpleClientSessionCreator:org.apache.sshd.client.simple.SimpleClient wrap(org.apache.sshd.client.session.ClientSessionCreator,java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.simple.SimpleClient wrapAsSimpleClient(org.apache.sshd.client.SshClient)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:void <init>(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:void <init>()"
        ]
    },
    "org.apache.sshd.server.channel.AbstractServerChannel:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel:void <init>(org.apache.sshd.server.forward.TcpForwardingFilter$Type)",
            "org.apache.sshd.agent.local.ChannelAgentForwarding:void <init>()",
            "org.apache.sshd.agent.unix.ChannelAgentForwarding:void <init>()"
        ]
    },
    "org.apache.sshd.server.session.ServerConnectionServiceFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerConnectionServiceFactory:void <clinit>()",
            "org.apache.sshd.server.SshServer:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.session.ClientConnectionServiceFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.ClientConnectionServiceFactory:void <clinit>()",
            "org.apache.sshd.client.SshClient:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List readAuthorizedKeys(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List readAuthorizedKeys(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List readAuthorizedKeys(java.nio.file.Path,java.nio.file.OpenOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:java.util.Collection reloadAuthorizedKeys(java.nio.file.Path,java.lang.String,org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:java.util.List readDefaultAuthorizedKeys(java.nio.file.OpenOption[])"
        ]
    },
    "org.apache.sshd.common.config.keys.AuthorizedKeyEntry:java.util.List readAuthorizedKeys(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.hosts.KnownHostEntry:java.util.List readKnownHostEntries(java.io.InputStream,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostEntry:java.util.List readKnownHostEntries(java.nio.file.Path,java.nio.file.OpenOption[])",
            "org.apache.sshd.client.config.hosts.KnownHostEntry:java.util.List readKnownHostEntries(java.net.URL)",
            "org.apache.sshd.client.config.hosts.KnownHostEntry:java.util.List readKnownHostEntries(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser:org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser aggregate(java.util.Collection)",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser:void <clinit>()",
            "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getPublicKey()",
            "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getRawPublicKey()",
            "org.apache.sshd.common.global.AbstractOpenSshHostKeysHandler:void <init>(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.RSABufferPublicKeyParser:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.RSABufferPublicKeyParser:void <clinit>()",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.ED25519BufferPublicKeyParser:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.ED25519BufferPublicKeyParser:void <clinit>()",
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.buffer.keys.DSSBufferPublicKeyParser:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser:void <clinit>()",
            "org.apache.sshd.common.util.buffer.keys.DSSBufferPublicKeyParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.Ed25519PublicKeyDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.Ed25519PublicKeyDecoder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.RSAPublicKeyDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.RSAPublicKeyDecoder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.DSSPublicKeyEntryDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.DSSPublicKeyEntryDecoder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHRSAPrivateKeyDecoder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHRSAPrivateKeyDecoder:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentityFileWatcher:void <init>(java.nio.file.Path,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher$lambda_buildProviders_2__209:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.client.config.hosts.DefaultConfigFileHostEntryResolver:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.DefaultConfigFileHostEntryResolver:java.util.List reloadHostConfigEntries(java.nio.file.Path,java.lang.String,int,java.lang.String)",
            "org.apache.sshd.client.config.hosts.DefaultConfigFileHostEntryResolver:void <clinit>()",
            "org.apache.sshd.client.ClientBuilder:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG getDH(java.math.BigInteger,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)"
        ]
    },
    "org.apache.sshd.client.kex.DHGClient:org.apache.sshd.common.kex.AbstractDH getDH()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.kex.DHGClient:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])"
        ]
    },
    "org.apache.sshd.client.kex.DHGEXClient:org.apache.sshd.common.kex.AbstractDH getDH(java.math.BigInteger,java.math.BigInteger)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.ServerBuilder:org.apache.sshd.server.ServerBuilder fillWithDefaultValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.ServerBuilder:org.apache.sshd.common.BaseBuilder fillWithDefaultValues()"
        ]
    },
    "org.apache.sshd.client.ClientBuilder:org.apache.sshd.client.ClientBuilder fillWithDefaultValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.ClientBuilder:org.apache.sshd.common.BaseBuilder fillWithDefaultValues()"
        ]
    },
    "org.apache.sshd.common.config.keys.BuiltinIdentities:org.apache.sshd.common.config.keys.BuiltinIdentities fromName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.IdentityUtils:void lambda$createKeyPairProvider$0(boolean,java.util.Map,java.lang.String,java.security.KeyPair)"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.Ed25519PublicKeyDecoder:java.security.PublicKey decodePublicKey(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.security.PublicKey readPublicKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.PublicKeyEntryDecoder:java.security.PublicKey decodePublicKey(java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.cipher.BaseCipher:void init(org.apache.sshd.common.cipher.Cipher$Mode,byte[],byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:void receiveNewKeys()"
        ]
    },
    "org.apache.sshd.common.future.AbstractSshFuture:org.apache.sshd.common.SshException lambda$verifyResult$1(java.lang.Throwable,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.future.AbstractSshFuture$lambda_verifyResult_1__114:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.SshException:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractive:java.lang.Boolean doValidateAuthResponse(org.apache.sshd.server.session.ServerSession,java.lang.String,org.apache.sshd.server.auth.keyboard.KeyboardInteractiveAuthenticator,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.auth.keyboard.DefaultKeyboardInteractiveAuthenticator:boolean authenticate(org.apache.sshd.server.session.ServerSession,java.lang.String,java.util.List)",
            "org.apache.sshd.server.x11.ChannelForwardedX11:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.server.session.AbstractServerSession:boolean readIdentification(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.session.ServerConnectionService:void <init>(org.apache.sshd.server.session.AbstractServerSession)",
            "org.apache.sshd.agent.local.AgentImpl:java.util.List getIdentities()",
            "org.apache.sshd.agent.local.AgentImpl:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.local.AgentImpl:void addIdentity(java.security.KeyPair,java.lang.String)",
            "org.apache.sshd.agent.local.AgentImpl:void removeIdentity(java.security.PublicKey)",
            "org.apache.sshd.agent.local.AgentImpl:void removeAllIdentities()",
            "org.apache.sshd.agent.unix.UnixAgentFactory:org.apache.sshd.agent.SshAgent createClient(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:java.util.List getIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentProxy:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void addIdentity(java.security.KeyPair,java.lang.String)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void removeIdentity(java.security.PublicKey)",
            "org.apache.sshd.agent.common.AbstractAgentProxy:void removeAllIdentities()",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.channel.ChannelAsyncInputStream:void preClose()",
            "org.apache.sshd.common.channel.WindowClosedException:void <init>(java.lang.String)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:org.apache.sshd.common.util.net.SshdSocketAddress startRemotePortForwarding(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.util.net.SshdSocketAddress)",
            "org.apache.sshd.common.forward.TcpipClientChannel:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.common.forward.SocksProxy:void sessionCreated(org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void preClose()",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.future.KeyExchangeFuture requestNewKeysExchange()",
            "org.apache.sshd.client.kex.DHGClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.kex.DHGEXClient:boolean next(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.ChannelDirectTcpip:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.client.channel.AbstractClientChannel:org.apache.sshd.client.future.OpenFuture open()",
            "org.apache.sshd.client.session.ClientUserAuthService:void preClose()",
            "org.apache.sshd.client.session.ClientSessionImpl:void preClose()",
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.common.future.KeyExchangeFuture switchToNoneCipher()",
            "org.apache.sshd.common.io.AbstractIoWriteFuture$init__106:java.lang.Object apply(java.lang.Object)",
            "org.apache.sshd.client.future.DefaultOpenFuture$init__111:java.lang.Object apply(java.lang.Object)",
            "org.apache.sshd.common.future.AbstractSshFuture$init__115:java.lang.Object apply(java.lang.Object)",
            "org.apache.sshd.common.future.DefaultKeyExchangeFuture$init__142:java.lang.Object apply(java.lang.Object)",
            "org.apache.sshd.client.future.DefaultAuthFuture$init__221:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.SshException:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:boolean readIdentification(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.AgentImpl:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.agent.unix.AgentClient:void <init>(java.lang.String,java.util.concurrent.ExecutorService,boolean)",
            "org.apache.sshd.agent.unix.AgentServerProxy:void <init>(org.apache.sshd.common.session.ConnectionService,java.util.concurrent.ExecutorService,boolean)",
            "org.apache.sshd.agent.common.DefaultAgentForwardSupport:java.lang.String initialize()",
            "org.apache.sshd.common.util.buffer.Buffer:java.security.PublicKey getRawPublicKey(org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser)",
            "org.apache.sshd.common.util.buffer.Buffer:java.security.KeyPair getKeyPair()",
            "org.apache.sshd.common.channel.ChannelOutputStream:void flush()",
            "org.apache.sshd.common.session.helpers.AbstractSession:org.apache.sshd.common.util.buffer.Buffer encode(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.channel.AbstractClientChannel$lambda_new_0__109:void notifyEvent(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.exit.AbstractChannelExitRequestHandler:void notifyStateChanged(org.apache.sshd.common.channel.Channel,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.channel.Channel:void addRequestHandlers(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.channel.Channel:void removeRequestHandlers(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.agent.local.AgentImpl:java.util.List getIdentities()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AgentDelegate:java.util.List getIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:void <init>(org.apache.sshd.client.session.ClientSession,org.apache.sshd.agent.SshAgent)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:void <init>(org.apache.sshd.client.session.ClientSession,org.apache.sshd.common.signature.SignatureFactoriesManager)"
        ]
    },
    "org.apache.sshd.common.NamedResource:java.util.List getNameList(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.server.ServerAuthenticationManager:java.util.List getUserAuthFactoriesNames()",
            "org.apache.sshd.common.signature.SignatureFactoriesManager:java.util.List getSignatureFactoriesNames()",
            "org.apache.sshd.common.config.keys.BuiltinIdentities:void <clinit>()",
            "org.apache.sshd.common.kex.KexFactoryManager:java.util.List getCipherFactoriesNames()",
            "org.apache.sshd.common.kex.KexFactoryManager:java.util.List getCompressionFactoriesNames()",
            "org.apache.sshd.common.kex.KexFactoryManager:java.util.List getMacFactoriesNames()",
            "org.apache.sshd.common.NamedResource:java.lang.String getNames(java.util.Collection)",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:void <init>(java.nio.file.Path,boolean,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider,boolean)",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:void <init>(java.nio.file.Path,boolean,java.util.function.Supplier,java.util.function.Supplier,boolean)",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:java.util.List getDefaultBuiltinIdentitiesPaths(java.nio.file.Path)",
            "org.apache.sshd.client.ClientAuthenticationManager:java.util.List getUserAuthFactoriesNames()"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.List buildProviders(java.util.Collection,java.util.function.Supplier,java.util.function.Supplier,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:void <init>(java.util.Collection,java.util.function.Supplier,java.util.function.Supplier,boolean)",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.List buildProviders(java.util.Collection,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider,boolean)"
        ]
    },
    "org.apache.sshd.server.Signal:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleWindowChange(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleSignal(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleBreak(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.Signal:org.apache.sshd.server.Signal[] values()",
            "org.apache.sshd.server.Signal:org.apache.sshd.server.Signal get(java.lang.String)",
            "org.apache.sshd.server.Signal:org.apache.sshd.server.Signal get(int)",
            "org.apache.sshd.server.Signal:void <clinit>()",
            "org.apache.sshd.server.StandardEnvironment:void addSignalListener(org.apache.sshd.server.SignalListener)",
            "org.apache.sshd.server.StandardEnvironment:void removeSignalListener(org.apache.sshd.server.SignalListener)"
        ]
    },
    "org.apache.sshd.common.channel.PtyMode:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterInputStream:void <init>(java.io.InputStream,java.util.Map)",
            "org.apache.sshd.server.shell.TtyFilterInputStream:int handleCR()",
            "org.apache.sshd.server.shell.TtyFilterInputStream:int handleLF()",
            "org.apache.sshd.server.shell.TtyFilterInputStream:void <clinit>()",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void <init>(java.io.OutputStream,org.apache.sshd.server.shell.TtyFilterInputStream,java.util.Map)",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void <init>(java.io.OutputStream,org.apache.sshd.server.shell.TtyFilterInputStream,java.util.Collection)",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void handleCR()",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void handleLF()",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void writeRawOutput(int)",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void writeRawOutput(byte[],int,int)",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void <clinit>()",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handlePtyReq(org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.channel.PuttyRequestHandler:java.util.Map resolveShellTtyOptions(java.util.Map)",
            "org.apache.sshd.server.channel.PuttyRequestHandler:void <clinit>()",
            "org.apache.sshd.common.channel.SttySupport:java.util.Map parsePtyModes(java.lang.String)",
            "org.apache.sshd.common.channel.PtyMode:org.apache.sshd.common.channel.PtyMode[] values()",
            "org.apache.sshd.common.channel.PtyMode:org.apache.sshd.common.channel.PtyMode fromInt(int)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(org.apache.sshd.common.channel.PtyMode[])",
            "org.apache.sshd.common.channel.PtyMode:java.util.Map createEnabledOptions(java.util.Collection)",
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,org.apache.sshd.common.channel.PtyMode[])",
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,java.util.Collection)",
            "org.apache.sshd.common.channel.PtyMode:boolean getBooleanSettingValue(java.util.Map,org.apache.sshd.common.channel.PtyMode)",
            "org.apache.sshd.common.channel.PtyMode:boolean getBooleanSettingValue(java.lang.Object)",
            "org.apache.sshd.common.channel.PtyMode:void <clinit>()",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.lang.Object findFirstMatchingMember(java.util.function.Predicate,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityProviderRegistrar:org.apache.sshd.common.util.security.SecurityProviderRegistrar findSecurityProviderRegistrarBySecurityEntity(java.util.function.Predicate,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.Object findFirstMatchingMember(java.util.function.Predicate,java.lang.Object[])"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.util.List selectMatchingMembers(java.util.function.Predicate,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ReflectionUtils:java.util.Collection getMatchingFields(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.ReflectionUtils:java.util.Collection getMatchingDeclaredFields(java.lang.Class,java.util.function.Predicate)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.util.Iterator lambda$wrapIterable$8(java.lang.Iterable,java.util.function.Function)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.GenericUtils$lambda_wrapIterable_8__9:java.util.Iterator iterator()"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils$lambda_multiIterableSuppliers_10__10:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Iterable,java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.lang.Iterable,char)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.lang.Iterable,java.lang.CharSequence)",
            "org.apache.sshd.common.util.GenericUtils:boolean isEmpty(java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:boolean containsAny(java.util.Collection,java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Iterator iteratorOf(java.lang.Iterable)",
            "org.apache.sshd.common.util.EventListenerUtils:java.lang.Object lambda$proxyWrapper$1(java.lang.Iterable,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.lang.Iterable)"
        ]
    },
    "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpForwardingFilter$Type:org.apache.sshd.server.forward.TcpForwardingFilter$Type fromString(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromFactoryName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.BuiltinSignatures:void registerExtension(org.apache.sshd.common.signature.SignatureFactory)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromFactory(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.SignatureFactory resolveFactory(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories:org.apache.sshd.common.io.BuiltinIoServiceFactoryFactories fromFactoryName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory newInstance(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories fromFactoryName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories:void registerExtension(org.apache.sshd.common.kex.DHFactory)",
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.DHFactory resolveFactory(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromFactoryName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.mac.BuiltinMacs:void registerExtension(org.apache.sshd.common.mac.MacFactory)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromFactory(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.MacFactory resolveFactory(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions fromFactoryName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.compression.BuiltinCompressions:void registerExtension(org.apache.sshd.common.compression.CompressionFactory)",
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.CompressionFactory resolveFactory(java.lang.String)"
        ]
    },
    "org.apache.sshd.common.NamedResource:org.apache.sshd.common.NamedResource removeByName(java.lang.String,java.util.Comparator,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher$lambda_loadKeys_0__205:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Iterable,java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.lang.Iterable,char)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.lang.Iterable,java.lang.CharSequence)",
            "org.apache.sshd.common.util.GenericUtils:boolean isEmpty(java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:boolean containsAny(java.util.Collection,java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Iterator iteratorOf(java.lang.Iterable)",
            "org.apache.sshd.common.util.EventListenerUtils:java.lang.Object lambda$proxyWrapper$1(java.lang.Iterable,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.lang.Iterable)"
        ]
    },
    "org.apache.sshd.client.config.keys.DefaultClientIdentitiesWatcher:void <init>(org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.KeyEntryResolver:java.lang.String decodeString(java.io.InputStream,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyEntryResolver:java.lang.String decodeString(java.io.InputStream)",
            "org.apache.sshd.common.config.keys.KeyEntryResolver:java.lang.String decodeString(java.io.InputStream,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyEntryResolver:java.math.BigInteger decodeBigInt(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.RSAPublicKeyDecoder:java.security.interfaces.RSAPublicKey decodePublicKey(java.lang.String,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.impl.DSSPublicKeyEntryDecoder:java.security.interfaces.DSAPublicKey decodePublicKey(java.lang.String,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:java.security.interfaces.DSAPrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHRSAPrivateKeyDecoder:java.security.interfaces.RSAPrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:java.security.interfaces.ECPrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.util.buffer.BufferUtils:int readInt(java.io.InputStream,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.ServerBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build()"
        ]
    },
    "org.apache.sshd.server.SshServer:org.apache.sshd.server.SshServer setUpDefaultServer()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.BaseBuilder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ObjectBuilder:java.lang.Object get()"
        ]
    },
    "org.apache.sshd.client.SshClient:org.apache.sshd.client.SshClient setUpDefaultClient()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.simple.SimpleClient setUpDefaultSimpleClient()"
        ]
    },
    "org.apache.sshd.client.ClientBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build()"
        ]
    },
    "org.apache.sshd.server.ServerBuilder:java.util.List setUpDefaultKeyExchanges(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.ServerBuilder:org.apache.sshd.server.ServerBuilder fillWithDefaultValues()"
        ]
    },
    "org.apache.sshd.server.ServerBuilder:org.apache.sshd.server.ServerBuilder builder()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.SshServer:org.apache.sshd.server.SshServer setUpDefaultServer()"
        ]
    },
    "org.apache.sshd.server.ServerBuilder$lambda_static_0__147:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures$1:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.AgentImpl:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.Signature getByCurveSize(java.security.spec.ECParameterSpec)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures$3:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.AgentImpl:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.Signature getByCurveSize(java.security.spec.ECParameterSpec)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures$4:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.AgentImpl:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.Signature getByCurveSize(java.security.spec.ECParameterSpec)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures$5:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.agent.local.AgentImpl:byte[] sign(java.security.PublicKey,byte[])",
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.Signature getByCurveSize(java.security.spec.ECParameterSpec)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator resolvePrivateKeyObfuscator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.pem.AbstractPEMResourceKeyPairParser:byte[] applyPrivateKeyCipher(byte[],org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext,boolean)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator getRegisteredPrivateKeyObfuscator(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator resolvePrivateKeyObfuscator()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:java.util.NavigableSet getRegisteredPrivateKeyObfuscatorCiphers()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:java.util.List getRegisteredPrivateKeyObfuscators()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext:org.apache.sshd.common.config.keys.loader.PrivateKeyEncryptionContext newPrivateKeyEncryptionContext(org.apache.sshd.common.config.keys.loader.PrivateKeyObfuscator,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.auth.BuiltinUserAuthFactories:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories[] values()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.lang.String)",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.lang.String[])",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory resolveFactory(java.lang.String)",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:void <clinit>()",
            "org.apache.sshd.server.ServerAuthenticationManager:void setUserAuthFactoriesNames(java.util.Collection)"
        ]
    },
    "org.apache.sshd.server.ServerAuthenticationManager:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.ServerUserAuthService:void <init>(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.ServerAuthenticationManager:java.util.List resolveUserAuthFactories(org.apache.sshd.server.ServerAuthenticationManager)",
            "org.apache.sshd.server.ServerAuthenticationManager:java.util.List resolveUserAuthFactories(org.apache.sshd.server.ServerAuthenticationManager,java.util.List)",
            "org.apache.sshd.server.ServerAuthenticationManager:void <clinit>()",
            "org.apache.sshd.server.SshServer:void checkConfig()"
        ]
    },
    "org.apache.sshd.server.auth.hostbased.UserAuthHostBasedFactory$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBasedFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.UserAuthPublicKeyFactory$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKeyFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.auth.BuiltinUserAuthFactories:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories[] values()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.lang.String)",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.lang.String[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.BuiltinUserAuthFactories$ParseResult parseFactoriesList(java.util.Collection)",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory resolveFactory(java.lang.String)",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:void <clinit>()",
            "org.apache.sshd.client.ClientAuthenticationManager:void setUserAuthFactoriesNames(java.util.Collection)"
        ]
    },
    "org.apache.sshd.client.SshClient:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient$1:void operationComplete(org.apache.sshd.common.io.IoConnectFuture)",
            "org.apache.sshd.client.SshClient:void checkConfig()",
            "org.apache.sshd.client.SshClient:void stop()",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.simple.SimpleClient setUpDefaultSimpleClient()",
            "org.apache.sshd.client.SshClient:void <clinit>()",
            "org.apache.sshd.client.ClientBuilder:org.apache.sshd.client.ClientBuilder fillWithDefaultValues()",
            "org.apache.sshd.client.SshClient$init__216:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.client.auth.hostbased.UserAuthHostBasedFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBasedFactory:void <clinit>()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory$1:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.SshServer:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.SshServer:void checkConfig()",
            "org.apache.sshd.server.SshServer:void stop(boolean)",
            "org.apache.sshd.server.SshServer:void <clinit>()",
            "org.apache.sshd.server.ServerBuilder:org.apache.sshd.server.ServerBuilder fillWithDefaultValues()",
            "org.apache.sshd.server.SshServer$init__146:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest,java.lang.String,java.nio.charset.Charset)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$3:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG getDH(java.math.BigInteger,java.math.BigInteger)",
            "org.apache.sshd.client.kex.DHGClient:org.apache.sshd.common.kex.AbstractDH getDH()",
            "org.apache.sshd.client.kex.DHGEXClient:org.apache.sshd.common.kex.AbstractDH getDH(java.math.BigInteger,java.math.BigInteger)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$1:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG getDH(java.math.BigInteger,java.math.BigInteger)",
            "org.apache.sshd.client.kex.DHGClient:org.apache.sshd.common.kex.AbstractDH getDH()",
            "org.apache.sshd.client.kex.DHGEXClient:org.apache.sshd.common.kex.AbstractDH getDH(java.math.BigInteger,java.math.BigInteger)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$2:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG getDH(java.math.BigInteger,java.math.BigInteger)",
            "org.apache.sshd.client.kex.DHGClient:org.apache.sshd.common.kex.AbstractDH getDH()",
            "org.apache.sshd.client.kex.DHGEXClient:org.apache.sshd.common.kex.AbstractDH getDH(java.math.BigInteger,java.math.BigInteger)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories$8:org.apache.sshd.common.kex.AbstractDH create(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.kex.DHGServer:void init(org.apache.sshd.common.session.Session,byte[],byte[],byte[],byte[])",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG getDH(java.math.BigInteger,java.math.BigInteger)",
            "org.apache.sshd.client.kex.DHGClient:org.apache.sshd.common.kex.AbstractDH getDH()",
            "org.apache.sshd.client.kex.DHGEXClient:org.apache.sshd.common.kex.AbstractDH getDH(java.math.BigInteger,java.math.BigInteger)"
        ]
    },
    "org.apache.sshd.common.signature.BuiltinSignatures:java.util.NavigableSet getRegisteredExtensions()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.SignatureFactory unregisterExtension(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures fromFactory(org.apache.sshd.common.NamedFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.SignatureFactory resolveFactory(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.signature.BuiltinSignatures:org.apache.sshd.common.signature.BuiltinSignatures$ParseResult parseSignatureList(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.BaseBuilder:java.util.List setUpDefaultCiphers(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.BaseBuilder fillWithDefaultValues()"
        ]
    },
    "org.apache.sshd.common.BaseBuilder:java.util.List setUpDefaultMacs(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.BaseBuilder fillWithDefaultValues()"
        ]
    },
    "org.apache.sshd.common.BaseBuilder:java.util.List setUpDefaultSignatures(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.BaseBuilder fillWithDefaultValues()"
        ]
    },
    "org.apache.sshd.client.ClientBuilder:java.util.List setUpDefaultKeyExchanges(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.ClientBuilder:org.apache.sshd.client.ClientBuilder fillWithDefaultValues()"
        ]
    },
    "org.apache.sshd.client.ClientBuilder:org.apache.sshd.client.ClientBuilder builder()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.SshClient setUpDefaultClient()"
        ]
    },
    "org.apache.sshd.client.ClientBuilder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.SshClientConfigFileReader:org.apache.sshd.client.SshClient configure(org.apache.sshd.client.SshClient,org.apache.sshd.common.PropertyResolver,boolean,boolean)",
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.SshClient setUpDefaultClient()",
            "org.apache.sshd.client.ClientBuilder:org.apache.sshd.client.ClientBuilder fillWithDefaultValues()",
            "org.apache.sshd.client.ClientBuilder:java.util.List setUpDefaultKeyExchanges(boolean)",
            "org.apache.sshd.client.ClientBuilder:org.apache.sshd.client.ClientBuilder builder()",
            "org.apache.sshd.client.ClientBuilder:void <clinit>()",
            "org.apache.sshd.client.ClientBuilder$lambda_static_0__217:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.sshd.client.ClientBuilder$lambda_static_0__217:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.compression.Compression create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.CompressionConfigValue:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.common.compression.BuiltinCompressions$2:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.compression.Compression create()",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.compression.BuiltinCompressions$3:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.compression.Compression create()",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.server.global.OpenSshHostKeysHandler:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.global.OpenSshHostKeysHandler:void <clinit>()",
            "org.apache.sshd.server.ServerBuilder:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.forward.AgentForwardingFilter resolveAgentForwardingFilter(org.apache.sshd.common.PropertyResolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.forward.ForwardingFilter resolveServerForwarding(org.apache.sshd.common.PropertyResolver)"
        ]
    },
    "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.forward.X11ForwardingFilter resolveX11ForwardingFilter(org.apache.sshd.common.PropertyResolver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.SshServerConfigFileReader:org.apache.sshd.server.forward.ForwardingFilter resolveServerForwarding(org.apache.sshd.common.PropertyResolver)"
        ]
    },
    "org.apache.sshd.common.PropertyResolver:java.lang.String getStringProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.channel.ChannelShell:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.session.AbstractClientSession:org.apache.sshd.client.channel.ChannelShell createShellChannel()"
        ]
    },
    "org.apache.sshd.server.SshServer:void lambda$getInnerCloseable$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.SshServer$lambda_getInnerCloseable_0__144:void run()"
        ]
    },
    "org.apache.sshd.client.SshClient:void lambda$getInnerCloseable$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient$lambda_getInnerCloseable_0__214:void run()"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:void signalExceptionCaught(org.apache.sshd.common.session.SessionListener,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession:java.lang.Void lambda$signalExceptionCaught$1(java.lang.Throwable,org.apache.sshd.common.session.SessionListener)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:java.lang.Void lambda$signalSessionClosed$2(org.apache.sshd.common.session.SessionListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession$lambda_signalSessionClosed_2__135:java.lang.Object invoke(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putAndWipeChars(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.Buffer:void putAndWipeChars(char[])"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putAndWipeChars(char[],java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putChars(char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.buffer.Buffer$lambda_putStringList_0__28:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.AsyncAuthException:void setAuthed(boolean)",
            "org.apache.sshd.server.auth.AsyncAuthException:void addListener(java.util.function.Consumer)",
            "org.apache.sshd.common.util.logging.LoggingUtils:void logExceptionStackTrace(java.lang.Throwable,int,java.util.function.Consumer)"
        ]
    },
    "org.apache.sshd.agent.unix.AgentClient:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.client.SshClient:org.apache.sshd.client.simple.SimpleClient wrapAsSimpleClient(org.apache.sshd.client.SshClient)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.SshClient:org.apache.sshd.client.simple.SimpleClient setUpDefaultSimpleClient()"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSession:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSessionFactory:org.apache.sshd.common.channel.Channel create()"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel:void <init>(org.apache.sshd.server.forward.TcpForwardingFilter$Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel$TcpipFactory:org.apache.sshd.common.channel.Channel create()"
        ]
    },
    "org.apache.sshd.agent.local.ChannelAgentForwarding:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.ChannelAgentForwardingFactory:org.apache.sshd.common.channel.Channel create()"
        ]
    },
    "org.apache.sshd.agent.unix.ChannelAgentForwarding:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.unix.ChannelAgentForwardingFactory:org.apache.sshd.common.channel.Channel create()"
        ]
    },
    "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:java.util.Collection reloadAuthorizedKeys(java.nio.file.Path,java.lang.String,org.apache.sshd.server.session.ServerSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.config.keys.DefaultAuthorizedKeysAuthenticator:java.util.Collection reloadAuthorizedKeys(java.nio.file.Path,java.lang.String,org.apache.sshd.server.session.ServerSession)",
            "org.apache.sshd.server.config.keys.AuthorizedKeysAuthenticator:org.apache.sshd.server.auth.pubkey.PublickeyAuthenticator resolvePublickeyAuthenticator(java.lang.String,org.apache.sshd.server.session.ServerSession)"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostEntry:java.util.List readKnownHostEntries(java.nio.file.Path,java.nio.file.OpenOption[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.hosts.KnownHostEntry:java.util.List readKnownHostEntries(java.io.File)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:java.util.List reloadKnownHosts(java.nio.file.Path)"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostEntry:java.util.List readKnownHostEntries(java.net.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.hosts.KnownHostEntry:java.util.List readKnownHostEntries(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser:org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser aggregate(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.buffer.keys.BufferPublicKeyParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.Ed25519PublicKeyDecoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.config.keys.PublicKeyEntryDecoder getEDDSAPublicKeyEntryDecoder()",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.util.buffer.Buffer putRawEDDSAPublicKey(org.apache.sshd.common.util.buffer.Buffer,java.security.PublicKey)",
            "org.apache.sshd.common.util.security.eddsa.Ed25519PublicKeyDecoder:java.lang.String encodePublicKey(java.io.OutputStream,net.i2p.crypto.eddsa.EdDSAPublicKey)",
            "org.apache.sshd.common.util.security.eddsa.Ed25519PublicKeyDecoder:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.RSAPublicKeyDecoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.RSAPublicKeyDecoder:void <clinit>()",
            "org.apache.sshd.common.config.keys.KeyUtils:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.DSSPublicKeyEntryDecoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.DSSPublicKeyEntryDecoder:void <clinit>()",
            "org.apache.sshd.common.config.keys.KeyUtils:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.eddsa.OpenSSHEd25519PrivateKeyEntryDecoder:void <clinit>()",
            "org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils:org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder getOpenSSHEDDSAPrivateKeyEntryDecoder()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:void <clinit>()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHRSAPrivateKeyDecoder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHRSAPrivateKeyDecoder:java.security.interfaces.RSAPrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHRSAPrivateKeyDecoder:void <clinit>()",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.ServerBuilder:org.apache.sshd.common.BaseBuilder fillWithDefaultValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)"
        ]
    },
    "org.apache.sshd.client.ClientBuilder:org.apache.sshd.common.BaseBuilder fillWithDefaultValues()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)"
        ]
    },
    "org.apache.sshd.common.future.AbstractSshFuture$lambda_verifyResult_1__114:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.server.auth.keyboard.DefaultKeyboardInteractiveAuthenticator:boolean authenticate(org.apache.sshd.server.session.ServerSession,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.keyboard.UserAuthKeyboardInteractive:java.lang.Boolean doValidateAuthResponse(org.apache.sshd.server.session.ServerSession,java.lang.String,org.apache.sshd.server.auth.keyboard.KeyboardInteractiveAuthenticator,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.local.AgentImpl:void addIdentity(java.security.KeyPair,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AgentDelegate:void addIdentity(java.security.KeyPair,java.lang.String)",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.local.AgentImpl:void removeAllIdentities()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.common.AgentDelegate:void removeAllIdentities()",
            "org.apache.sshd.agent.common.AbstractAgentClient:void process(int,org.apache.sshd.common.util.buffer.Buffer,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.agent.unix.UnixAgentFactory:org.apache.sshd.agent.SshAgent createClient(org.apache.sshd.common.FactoryManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.ChannelAgentForwarding:org.apache.sshd.client.future.OpenFuture doInit(org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyIterator:void <init>(org.apache.sshd.client.session.ClientSession,org.apache.sshd.common.signature.SignatureFactoriesManager)"
        ]
    },
    "org.apache.sshd.common.channel.WindowClosedException:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.Window:void waitForCondition(java.util.function.Predicate,long)"
        ]
    },
    "org.apache.sshd.common.forward.SocksProxy:void sessionCreated(org.apache.sshd.common.io.IoSession)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.nio2.Nio2Connector$1:void onCompleted(java.lang.Void,java.lang.Object)",
            "org.apache.sshd.common.io.nio2.Nio2Acceptor$AcceptCompletionHandler:void onCompleted(java.nio.channels.AsynchronousSocketChannel,java.net.SocketAddress)"
        ]
    },
    "org.apache.sshd.common.io.AbstractIoWriteFuture$init__106:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.client.future.DefaultOpenFuture$init__111:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.future.AbstractSshFuture$init__115:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.common.future.DefaultKeyExchangeFuture$init__142:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.client.future.DefaultAuthFuture$init__221:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.ValidateUtils:java.lang.Throwable createFormattedException(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.common.util.GenericUtils:java.util.Map mapValues(java.util.function.Function,java.util.function.Supplier,java.util.Collection)",
            "org.apache.sshd.common.util.GenericUtils$1:java.lang.Object next()",
            "org.apache.sshd.common.future.AbstractSshFuture:java.lang.Throwable formatExceptionMessage(java.util.function.Function,java.lang.String,java.lang.Object[])",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.Optional lambda$safeMap$1(java.util.function.Function,java.lang.Object)",
            "org.apache.sshd.client.config.keys.ClientIdentity:java.util.Map scanIdentitiesFolder(java.nio.file.Path,boolean,java.util.Collection,java.util.function.Function,java.nio.file.LinkOption[])"
        ]
    },
    "org.apache.sshd.agent.unix.AgentClient:void <init>(java.lang.String,java.util.concurrent.ExecutorService,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.unix.AgentClient:void <init>(java.lang.String)",
            "org.apache.sshd.agent.unix.UnixAgentFactory:org.apache.sshd.agent.SshAgent createClient(org.apache.sshd.common.FactoryManager)"
        ]
    },
    "org.apache.sshd.agent.unix.AgentServerProxy:void <init>(org.apache.sshd.common.session.ConnectionService,java.util.concurrent.ExecutorService,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.unix.AgentServerProxy:void <init>(org.apache.sshd.common.session.ConnectionService)",
            "org.apache.sshd.agent.unix.UnixAgentFactory:org.apache.sshd.agent.SshAgentServer createServer(org.apache.sshd.common.session.ConnectionService)"
        ]
    },
    "org.apache.sshd.client.channel.exit.AbstractChannelExitRequestHandler:void notifyStateChanged(org.apache.sshd.common.channel.Channel,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.exit.AbstractChannelExitRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.channel.Channel,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.ServerAuthenticationManager:java.util.List getUserAuthFactoriesNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.signature.SignatureFactoriesManager:java.util.List getSignatureFactoriesNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.kex.KexFactoryManager:java.util.List getCipherFactoriesNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.kex.KexFactoryManager:java.util.List getCompressionFactoriesNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.kex.KexFactoryManager:java.util.List getMacFactoriesNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.ClientAuthenticationManager:java.util.List getUserAuthFactoriesNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:void <init>(java.util.Collection,java.util.function.Supplier,java.util.function.Supplier,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:void <init>(java.util.Collection,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider,boolean)",
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:void <init>(java.util.Collection,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.sshd.client.config.keys.BuiltinClientIdentitiesWatcher:void <init>(java.nio.file.Path,java.util.Collection,boolean,java.util.function.Supplier,java.util.function.Supplier,boolean)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:java.util.List buildProviders(java.util.Collection,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.Signal:org.apache.sshd.server.Signal get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleSignal(org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.server.Signal:org.apache.sshd.server.Signal get(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.shell.TtyFilterInputStream:int handleCR()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterInputStream:int read()"
        ]
    },
    "org.apache.sshd.server.shell.TtyFilterInputStream:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterInputStream:void <init>(java.io.InputStream,java.util.Map)",
            "org.apache.sshd.server.shell.TtyFilterInputStream:void <clinit>()",
            "org.apache.sshd.server.shell.ProcessShell:void start(org.apache.sshd.server.Environment)"
        ]
    },
    "org.apache.sshd.server.shell.TtyFilterOutputStream:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void <init>(java.io.OutputStream,org.apache.sshd.server.shell.TtyFilterInputStream,java.util.Map)",
            "org.apache.sshd.server.shell.TtyFilterOutputStream:void <clinit>()",
            "org.apache.sshd.server.shell.ProcessShell:void start(org.apache.sshd.server.Environment)"
        ]
    },
    "org.apache.sshd.server.channel.PuttyRequestHandler:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.ProcessShell:java.util.Map resolveShellTtyOptions(java.util.Map)",
            "org.apache.sshd.server.channel.ChannelSession:void <clinit>()",
            "org.apache.sshd.server.channel.PuttyRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.channel.Channel,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.server.channel.PuttyRequestHandler:boolean isPuttyClient(org.apache.sshd.common.session.Session)",
            "org.apache.sshd.server.channel.PuttyRequestHandler:java.util.Map resolveShellTtyOptions(java.util.Map)",
            "org.apache.sshd.server.channel.PuttyRequestHandler:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.channel.PtyMode:org.apache.sshd.common.channel.PtyMode fromInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handlePtyReq(org.apache.sshd.common.util.buffer.Buffer,boolean)"
        ]
    },
    "org.apache.sshd.common.channel.PtyMode:boolean getBooleanSettingValue(java.util.Map,org.apache.sshd.common.channel.PtyMode)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.PtyMode:java.util.Set resolveEnabledOptions(java.util.Map,java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.channel.PtyMode:boolean getBooleanSettingValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.PtyMode:boolean getBooleanSettingValue(java.util.Map,org.apache.sshd.common.channel.PtyMode)"
        ]
    },
    "org.apache.sshd.client.channel.PtyCapableChannelSession:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void <init>(boolean)",
            "org.apache.sshd.client.channel.PtyCapableChannelSession:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.util.security.SecurityProviderRegistrar:org.apache.sshd.common.util.security.SecurityProviderRegistrar findSecurityProviderRegistrarBySecurityEntity(java.util.function.Predicate,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.security.SecurityUtils:org.apache.sshd.common.util.security.SecurityEntityFactory createSecurityEntityFactory(java.lang.Class,java.util.function.Predicate)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.lang.Object findFirstMatchingMember(java.util.function.Predicate,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.ReflectionUtils:java.util.Collection getMatchingFields(java.lang.Class,java.util.function.Predicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Collection getMnemonicFields(java.lang.Class,java.util.function.Predicate)"
        ]
    },
    "org.apache.sshd.common.util.ReflectionUtils:java.util.Collection getMatchingDeclaredFields(java.lang.Class,java.util.function.Predicate)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.util.GenericUtils$lambda_wrapIterable_8__9:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.session.AbstractServerSession:java.lang.String resolveAvailableSignaturesProposal(org.apache.sshd.common.FactoryManager)",
            "org.apache.sshd.common.util.threads.ThreadUtils:java.lang.Object createDefaultInstance(java.lang.Iterable,java.lang.Class,java.lang.String)",
            "org.apache.sshd.common.util.closeable.FuturesCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.SequentialCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.closeable.ParallelCloseable:void doClose(boolean)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.lang.Iterable,char)",
            "org.apache.sshd.common.util.GenericUtils:java.lang.String join(java.lang.Iterable,java.lang.CharSequence)",
            "org.apache.sshd.common.util.GenericUtils:boolean isEmpty(java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:boolean containsAny(java.util.Collection,java.lang.Iterable)",
            "org.apache.sshd.common.util.GenericUtils:java.util.Iterator iteratorOf(java.lang.Iterable)",
            "org.apache.sshd.common.util.EventListenerUtils:java.lang.Object lambda$proxyWrapper$1(java.lang.Iterable,java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.sshd.common.config.keys.KeyRandomArt:java.util.Collection generate(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.security.KeyPair loadKey(java.lang.String)",
            "org.apache.sshd.common.keyprovider.KeyPairProvider$2:java.lang.Iterable getKeyTypes()",
            "org.apache.sshd.client.config.hosts.HostConfigEntry:org.apache.sshd.client.config.hosts.HostConfigEntry findBestMatch(java.lang.Iterable)"
        ]
    },
    "org.apache.sshd.common.util.GenericUtils:java.util.Iterator iteratorOf(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.keyprovider.KeyIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.common.keyprovider.KeyIdentityProvider)",
            "org.apache.sshd.client.auth.password.PasswordIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.client.auth.password.PasswordIdentityProvider)",
            "org.apache.sshd.client.auth.hostbased.HostKeyIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.client.auth.hostbased.HostKeyIdentityProvider)",
            "org.apache.sshd.client.auth.pubkey.SshAgentPublicKeyIterator:void <init>(org.apache.sshd.client.session.ClientSession,org.apache.sshd.agent.SshAgent)",
            "org.apache.sshd.client.auth.AuthenticationIdentitiesProvider$1:java.util.Collection selectIdentities(java.lang.Class)",
            "org.apache.sshd.client.SshClient:void setupDefaultSessionIdentities(org.apache.sshd.client.session.ClientSession)"
        ]
    },
    "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory newInstance(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.io.DefaultIoServiceFactoryFactory:org.apache.sshd.common.io.IoServiceFactoryFactory newInstance(java.lang.Class)"
        ]
    },
    "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.DHFactory resolveFactory(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.kex.BuiltinDHFactories:org.apache.sshd.common.kex.BuiltinDHFactories$ParseResult parseDHFactoriesList(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs fromFactory(org.apache.sshd.common.NamedFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.MacFactory resolveFactory(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.mac.BuiltinMacs:org.apache.sshd.common.mac.BuiltinMacs$ParseResult parseMacsList(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.CompressionFactory resolveFactory(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.compression.BuiltinCompressions:org.apache.sshd.common.compression.BuiltinCompressions$ParseResult parseCompressionsList(java.util.Collection)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyEntryResolver:java.lang.String decodeString(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.ECDSAPublicKeyEntryDecoder:java.security.interfaces.ECPublicKey decodePublicKey(java.lang.String,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.Collection extractKeyPairs(java.lang.String,java.lang.String,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.security.PublicKey readPublicKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.AbstractMap$SimpleImmutableEntry readPrivateKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHECDSAPrivateKeyEntryDecoder:java.security.interfaces.ECPrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder:java.security.PrivateKey decodePrivateKey(org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.PublicKeyEntryDecoder:java.security.PublicKey decodePublicKey(java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyEntryResolver:java.lang.String decodeString(java.io.InputStream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.config.keys.impl.RSAPublicKeyDecoder:java.security.interfaces.RSAPublicKey decodePublicKey(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.RSAPublicKeyDecoder:java.security.PublicKey decodePublicKey(java.lang.String,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.DSSPublicKeyEntryDecoder:java.security.interfaces.DSAPublicKey decodePublicKey(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.impl.DSSPublicKeyEntryDecoder:java.security.PublicKey decodePublicKey(java.lang.String,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:java.security.interfaces.DSAPrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:java.security.PrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHRSAPrivateKeyDecoder:java.security.interfaces.RSAPrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHRSAPrivateKeyDecoder:java.security.PrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.util.ObjectBuilder:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.ServerAuthenticationManager:java.util.List resolveUserAuthFactories(org.apache.sshd.server.ServerAuthenticationManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.SshServer:void checkConfig()"
        ]
    },
    "org.apache.sshd.server.ServerAuthenticationManager:java.util.List resolveUserAuthFactories(org.apache.sshd.server.ServerAuthenticationManager,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.ServerAuthenticationManager:java.util.List resolveUserAuthFactories(org.apache.sshd.server.ServerAuthenticationManager)"
        ]
    },
    "org.apache.sshd.server.auth.hostbased.UserAuthHostBasedFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.hostbased.UserAuthHostBasedFactory:void <clinit>()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:void <clinit>()"
        ]
    },
    "org.apache.sshd.server.auth.pubkey.UserAuthPublicKeyFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.pubkey.UserAuthPublicKeyFactory:void <clinit>()",
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:void <clinit>()",
            "org.apache.sshd.server.ServerAuthenticationManager:void <clinit>()"
        ]
    },
    "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.pubkey.UserAuthPublicKeyFactory:void <clinit>()",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:void <clinit>()",
            "org.apache.sshd.client.SshClient:void <clinit>()"
        ]
    },
    "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.config.CompressionConfigValue:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.CompressionConfigValue:org.apache.sshd.common.compression.Compression create()",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.server.SshServer$lambda_getInnerCloseable_0__144:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.client.SshClient$lambda_getInnerCloseable_0__214:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.InvertedShellWrapper:void start(org.apache.sshd.server.Environment)",
            "org.apache.sshd.common.util.closeable.Builder$1:void doClose(boolean)",
            "org.apache.sshd.client.channel.ChannelSubsystem:void lambda$onClose$0(java.lang.Runnable,org.apache.sshd.common.future.CloseFuture)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession:java.lang.Void lambda$signalExceptionCaught$1(java.lang.Throwable,org.apache.sshd.common.session.SessionListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.session.helpers.AbstractSession$lambda_signalExceptionCaught_1__134:java.lang.Object invoke(java.lang.Object)"
        ]
    },
    "org.apache.sshd.common.session.helpers.AbstractSession$lambda_signalSessionClosed_2__135:java.lang.Object invoke(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.channel.AbstractChannel:void invokeChannelSignaller(org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void invokeSessionSignaller(org.apache.sshd.common.util.Invoker)"
        ]
    },
    "org.apache.sshd.common.util.buffer.Buffer:void putAndWipeChars(char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.channel.ChannelSessionFactory:org.apache.sshd.common.channel.Channel create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSessionFactory:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel$TcpipFactory:org.apache.sshd.common.channel.Channel create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.forward.TcpipServerChannel$TcpipFactory:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.agent.local.ChannelAgentForwardingFactory:org.apache.sshd.common.channel.Channel create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.local.ChannelAgentForwardingFactory:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.agent.unix.ChannelAgentForwardingFactory:org.apache.sshd.common.channel.Channel create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.agent.unix.ChannelAgentForwardingFactory:java.lang.Object create()"
        ]
    },
    "org.apache.sshd.client.config.hosts.KnownHostEntry:java.util.List readKnownHostEntries(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.agent.unix.AgentClient:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.agent.unix.AgentServerProxy:void <init>(org.apache.sshd.common.session.ConnectionService)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.channel.exit.AbstractChannelExitRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.channel.Channel,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.ChannelRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.client.channel.exit.AbstractChannelExitRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:void <init>(java.util.Collection,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:void <init>(java.util.Collection,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:void <init>(java.util.Collection,java.util.function.Supplier,java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.channel.ChannelSession:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.ChannelSession:void <init>()",
            "org.apache.sshd.server.channel.ChannelSession:void <clinit>()",
            "org.apache.sshd.server.channel.ChannelSessionFactory:org.apache.sshd.common.channel.Channel create()"
        ]
    },
    "org.apache.sshd.server.channel.PuttyRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(org.apache.sshd.common.channel.Channel,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.channel.PuttyRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.channel.ChannelRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.server.channel.PuttyRequestHandler:boolean isPuttyClient(org.apache.sshd.common.session.Session)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.shell.ProcessShell:java.util.Map resolveShellTtyOptions(java.util.Map)"
        ]
    },
    "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Collection getMnemonicFields(java.lang.Class,java.util.function.Predicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map generateMnemonicMap(java.lang.Class,java.util.function.Predicate)",
            "org.apache.sshd.common.util.logging.LoggingUtils:java.util.Map getAmbiguousMenmonics(java.lang.Class,java.util.function.Predicate)"
        ]
    },
    "org.apache.sshd.client.auth.hostbased.HostKeyIdentityProvider:java.util.Iterator iteratorOf(org.apache.sshd.client.auth.hostbased.HostKeyIdentityProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.client.auth.hostbased.UserAuthHostBased:void init(org.apache.sshd.client.session.ClientSession,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.RSAPublicKeyDecoder:java.security.PublicKey decodePublicKey(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.security.PublicKey readPublicKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.PublicKeyEntryDecoder:java.security.PublicKey decodePublicKey(java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.impl.DSSPublicKeyEntryDecoder:java.security.PublicKey decodePublicKey(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.security.PublicKey readPublicKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.PublicKeyEntryDecoder:java.security.PublicKey decodePublicKey(java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHDSSPrivateKeyEntryDecoder:java.security.PrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.AbstractMap$SimpleImmutableEntry readPrivateKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder:java.security.PrivateKey decodePrivateKey(org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHRSAPrivateKeyDecoder:java.security.PrivateKey decodePrivateKey(java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.loader.openssh.OpenSSHKeyPairResourceParser:java.util.AbstractMap$SimpleImmutableEntry readPrivateKey(java.lang.String,org.apache.sshd.common.config.keys.loader.openssh.OpenSSHParserContext,java.lang.String,org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)",
            "org.apache.sshd.common.config.keys.PrivateKeyEntryDecoder:java.security.PrivateKey decodePrivateKey(org.apache.sshd.common.config.keys.FilePasswordProvider,java.io.InputStream)"
        ]
    },
    "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest,java.lang.String,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest,java.lang.String)"
        ]
    },
    "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.digest.Digest,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.common.session.helpers.AbstractSession$lambda_signalExceptionCaught_1__134:java.lang.Object invoke(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.util.Invoker:void invokeAll(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.util.Invoker:java.util.AbstractMap$SimpleImmutableEntry invokeTillFirstFailure(java.lang.Object,java.util.Collection)",
            "org.apache.sshd.common.channel.AbstractChannel:void invokeChannelSignaller(org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerListeners(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:void invokePortEventListenerSignallerHolders(java.util.Collection,org.apache.sshd.common.util.Invoker)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void invokeSessionSignaller(org.apache.sshd.common.util.Invoker)"
        ]
    },
    "org.apache.sshd.server.channel.ChannelSessionFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.server.forward.TcpipServerChannel$TcpipFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.agent.local.ChannelAgentForwardingFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.agent.unix.ChannelAgentForwardingFactory:java.lang.Object create()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.server.auth.BuiltinUserAuthFactories:org.apache.sshd.server.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.server.kex.DHGEXServer:org.apache.sshd.common.kex.DHG chooseDH(int,int,int)",
            "org.apache.sshd.server.channel.ChannelSession:org.apache.sshd.common.channel.RequestHandler$Result handleShell(java.lang.String,org.apache.sshd.common.util.buffer.Buffer,boolean)",
            "org.apache.sshd.server.session.ServerUserAuthService:void process(int,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.config.keys.KeyRandomArt:void <init>(java.security.PublicKey,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:byte[] getRawFingerprint(org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.config.keys.KeyUtils:java.util.AbstractMap$SimpleImmutableEntry checkFingerPrint(java.lang.String,org.apache.sshd.common.Factory,java.security.PublicKey)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,java.lang.String,java.nio.charset.Charset)",
            "org.apache.sshd.common.digest.DigestUtils:java.lang.String getFingerPrint(org.apache.sshd.common.Factory,byte[],int,int)",
            "org.apache.sshd.common.kex.DHG:org.apache.sshd.common.digest.Digest getHash()",
            "org.apache.sshd.common.random.SingletonRandomFactory:void <init>(org.apache.sshd.common.NamedFactory)",
            "org.apache.sshd.common.forward.DefaultForwardingFilter:java.net.InetSocketAddress doBind(org.apache.sshd.common.util.net.SshdSocketAddress,org.apache.sshd.common.Factory)",
            "org.apache.sshd.common.session.helpers.AbstractSession:void <init>(boolean,org.apache.sshd.common.FactoryManager,org.apache.sshd.common.io.IoSession)",
            "org.apache.sshd.common.NamedFactory:java.lang.Object create(java.util.Collection,java.lang.String)",
            "org.apache.sshd.common.Factory:java.lang.Object get()",
            "org.apache.sshd.common.BaseBuilder:org.apache.sshd.common.helpers.AbstractFactoryManager build(boolean)",
            "org.apache.sshd.client.config.hosts.KnownHostDigest:org.apache.sshd.common.mac.Mac create()",
            "org.apache.sshd.client.config.hosts.KnownHostHashValue:byte[] calculateHashValue(java.lang.String,org.apache.sshd.common.Factory,byte[])",
            "org.apache.sshd.client.auth.BuiltinUserAuthFactories:org.apache.sshd.client.auth.UserAuthFactory fromFactoryName(java.lang.String)",
            "org.apache.sshd.client.keyverifier.KnownHostsServerKeyVerifier:org.apache.sshd.client.config.hosts.KnownHostEntry prepareKnownHostEntry(org.apache.sshd.client.session.ClientSession,java.net.SocketAddress,java.security.PublicKey)"
        ]
    },
    "org.apache.sshd.common.channel.ChannelRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.client.channel.exit.AbstractChannelExitRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    },
    "org.apache.sshd.client.config.keys.ClientIdentitiesWatcher:void <init>(java.util.Collection,org.apache.sshd.client.config.keys.ClientIdentityLoader,org.apache.sshd.common.config.keys.FilePasswordProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.sshd.server.channel.PuttyRequestHandler:org.apache.sshd.common.channel.RequestHandler$Result process(java.lang.Object,java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.sshd.common.channel.AbstractChannel:void handleChannelRequest(java.lang.String,boolean,org.apache.sshd.common.util.buffer.Buffer)",
            "org.apache.sshd.common.session.helpers.AbstractConnectionService:org.apache.sshd.common.io.IoWriteFuture globalRequest(org.apache.sshd.common.util.buffer.Buffer)"
        ]
    }
}