{
    "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchToPath(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletPathMatch,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchToServlet(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchMockRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void access$000(io.undertow.servlet.handlers.ServletInitialHandler,io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void access$100(io.undertow.servlet.handlers.ServletInitialHandler,io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)"
        ]
    },
    "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.undertow.servlet.spec.ServletContextImpl$lambda_null_0__2:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchToPath(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletPathMatch,javax.servlet.DispatcherType)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl$2$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void forwardImpl(javax.servlet.ServletRequest,javax.servlet.ServletResponse,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void error(io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String,java.lang.Throwable,java.lang.String)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchToServlet(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl:void forwardImpl(javax.servlet.ServletRequest,javax.servlet.ServletResponse,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void includeImpl(javax.servlet.ServletRequest,javax.servlet.ServletResponse,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.spec.HttpServletRequestImpl,io.undertow.servlet.spec.HttpServletResponseImpl)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchMockRequest(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl:void mock(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler:void access$000(io.undertow.servlet.handlers.ServletInitialHandler,io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler$1$1:java.lang.Object run()"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler:void access$100(io.undertow.servlet.handlers.ServletInitialHandler,io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler$2:java.lang.Object call(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)"
        ]
    },
    "io.undertow.servlet.spec.ServletContextImpl$lambda_null_0__2:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl$2$1:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void forwardImpl(javax.servlet.ServletRequest,javax.servlet.ServletResponse,io.undertow.servlet.handlers.ServletRequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl:void forwardImplSetup(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void access$100(io.undertow.servlet.spec.RequestDispatcherImpl,javax.servlet.ServletRequest,javax.servlet.ServletResponse,io.undertow.servlet.handlers.ServletRequestContext)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void error(io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String,java.lang.Throwable,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl:void error(io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String,java.lang.String)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void error(io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void error(io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String,java.lang.Throwable)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void includeImpl(javax.servlet.ServletRequest,javax.servlet.ServletResponse,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.spec.HttpServletRequestImpl,io.undertow.servlet.spec.HttpServletResponseImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl:void setupIncludeImpl(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void access$300(io.undertow.servlet.spec.RequestDispatcherImpl,javax.servlet.ServletRequest,javax.servlet.ServletResponse,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.spec.HttpServletRequestImpl,io.undertow.servlet.spec.HttpServletResponseImpl)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void mock(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl:void forwardImplSetup(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void setupIncludeImpl(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler$1$1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler$1:void handleRequest(io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler$2:java.lang.Object call(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler$2:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void forwardImplSetup(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void access$000(io.undertow.servlet.spec.RequestDispatcherImpl,javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void access$100(io.undertow.servlet.spec.RequestDispatcherImpl,javax.servlet.ServletRequest,javax.servlet.ServletResponse,io.undertow.servlet.handlers.ServletRequestContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl$2:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Object)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void error(io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.HttpServletResponseImpl:void doErrorDispatch(int,java.lang.String)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void error(io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void error(io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void setupIncludeImpl(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl:void include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void access$200(io.undertow.servlet.spec.RequestDispatcherImpl,javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void access$300(io.undertow.servlet.spec.RequestDispatcherImpl,javax.servlet.ServletRequest,javax.servlet.ServletResponse,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.spec.HttpServletRequestImpl,io.undertow.servlet.spec.HttpServletResponseImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl$4:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Object)"
        ]
    },
    "io.undertow.servlet.handlers.ServletInitialHandler$2:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.ServletUpgradeListener$3:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.DeploymentManagerImpl:void deploy()",
            "io.undertow.servlet.core.DeploymentManagerImpl:io.undertow.server.HttpHandler start()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void stop()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void undeploy()",
            "io.undertow.servlet.core.ContextClassLoaderSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.SessionListenerBridge:void sessionDestroyed(io.undertow.server.session.Session,io.undertow.server.HttpServerExchange,io.undertow.server.session.SessionListener$SessionDestroyedReason)",
            "io.undertow.servlet.core.ServletUpgradeListener$4:void run()",
            "io.undertow.servlet.spec.ServletContextImpl$5:java.lang.Void call(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnWritePossible(io.undertow.server.HttpServerExchange,javax.servlet.WriteListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnAllDataRead(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnDataAvailable(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeAction(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletFormAuthenticationMechanism:java.lang.Integer servePage(io.undertow.server.HttpServerExchange,java.lang.String)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void access$000(io.undertow.servlet.spec.RequestDispatcherImpl,javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl$1:java.lang.Object run()"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl$2:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl$2:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)"
        ]
    },
    "io.undertow.servlet.spec.HttpServletResponseImpl:void doErrorDispatch(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.spec.HttpServletResponseImpl:void sendError(int,java.lang.String)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl:void access$200(io.undertow.servlet.spec.RequestDispatcherImpl,javax.servlet.ServletRequest,javax.servlet.ServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl$3:java.lang.Object run()"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl$4:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl$4:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)"
        ]
    },
    "io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.ServletUpgradeListener$3:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.DeploymentManagerImpl:void deploy()",
            "io.undertow.servlet.core.DeploymentManagerImpl:io.undertow.server.HttpHandler start()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void stop()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void undeploy()",
            "io.undertow.servlet.core.ContextClassLoaderSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.SessionListenerBridge:void sessionDestroyed(io.undertow.server.session.Session,io.undertow.server.HttpServerExchange,io.undertow.server.session.SessionListener$SessionDestroyedReason)",
            "io.undertow.servlet.core.ServletUpgradeListener$4:void run()",
            "io.undertow.servlet.spec.ServletContextImpl$5:java.lang.Void call(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnWritePossible(io.undertow.server.HttpServerExchange,javax.servlet.WriteListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnAllDataRead(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnDataAvailable(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeAction(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)"
        ]
    },
    "io.undertow.servlet.core.ServletUpgradeListener$3:void handleEvent(org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener$3:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.ServletUpgradeListener$3:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.DeploymentManagerImpl:void deploy()",
            "io.undertow.servlet.core.DeploymentManagerImpl:io.undertow.server.HttpHandler start()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void stop()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void undeploy()",
            "io.undertow.servlet.core.ContextClassLoaderSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.SessionListenerBridge:void sessionDestroyed(io.undertow.server.session.Session,io.undertow.server.HttpServerExchange,io.undertow.server.session.SessionListener$SessionDestroyedReason)",
            "io.undertow.servlet.core.ServletUpgradeListener$4:void run()",
            "io.undertow.servlet.spec.ServletContextImpl$5:java.lang.Void call(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnWritePossible(io.undertow.server.HttpServerExchange,javax.servlet.WriteListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnAllDataRead(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnDataAvailable(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeAction(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)"
        ]
    },
    "io.undertow.servlet.core.DeploymentManagerImpl:void deploy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.core.DeploymentManagerImpl:io.undertow.server.HttpHandler start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.core.DeploymentManagerImpl:void stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.core.DeploymentManagerImpl:void undeploy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.core.ContextClassLoaderSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.ServletUpgradeListener$3:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.DeploymentManagerImpl:void deploy()",
            "io.undertow.servlet.core.DeploymentManagerImpl:io.undertow.server.HttpHandler start()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void stop()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void undeploy()",
            "io.undertow.servlet.core.ContextClassLoaderSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.SessionListenerBridge:void sessionDestroyed(io.undertow.server.session.Session,io.undertow.server.HttpServerExchange,io.undertow.server.session.SessionListener$SessionDestroyedReason)",
            "io.undertow.servlet.core.ServletUpgradeListener$4:void run()",
            "io.undertow.servlet.spec.ServletContextImpl$5:java.lang.Void call(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnWritePossible(io.undertow.server.HttpServerExchange,javax.servlet.WriteListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnAllDataRead(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnDataAvailable(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeAction(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)"
        ]
    },
    "io.undertow.servlet.core.SessionListenerBridge:void sessionDestroyed(io.undertow.server.session.Session,io.undertow.server.HttpServerExchange,io.undertow.server.session.SessionListener$SessionDestroyedReason)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.core.ServletUpgradeListener$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener:void handleUpgrade(org.xnio.StreamConnection,io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void execute(java.lang.Runnable)",
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void openGate()",
            "io.undertow.servlet.spec.ServletContextImpl$2:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl$6:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.ServletContextImpl$5:java.lang.Void call(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.ServletContextImpl$5:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)"
        ]
    },
    "io.undertow.servlet.spec.ServletContextImpl:void invokeOnWritePossible(io.undertow.server.HttpServerExchange,javax.servlet.WriteListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.ServletOutputStreamImpl$WriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.servlet.spec.ServletContextImpl:void invokeOnAllDataRead(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.ServletInputStreamImpl$ServletInputStreamChannelListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.servlet.spec.ServletInputStreamImpl:boolean isReady()"
        ]
    },
    "io.undertow.servlet.spec.ServletContextImpl:void invokeOnDataAvailable(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.ServletInputStreamImpl$ServletInputStreamChannelListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.servlet.spec.ServletContextImpl:void invokeAction(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl:void forwardImplSetup(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void setupIncludeImpl(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl$TimeoutTask$1:void run()",
            "io.undertow.servlet.spec.ServletOutputStreamImpl$WriteChannelListener:void handleError(java.lang.Throwable)",
            "io.undertow.servlet.spec.ServletInputStreamImpl$ServletInputStreamChannelListener:void handleEvent(org.xnio.channels.StreamSourceChannel)",
            "io.undertow.servlet.spec.AsyncContextImpl$4:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl:void onAsyncComplete()",
            "io.undertow.servlet.spec.AsyncContextImpl:void onAsyncStart(javax.servlet.AsyncContext)",
            "io.undertow.servlet.spec.AsyncContextImpl:void onAsyncError(java.lang.Throwable)"
        ]
    },
    "io.undertow.servlet.handlers.security.ServletFormAuthenticationMechanism:java.lang.Integer servePage(io.undertow.server.HttpServerExchange,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl$1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl:void forward(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl$2:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.ServletUpgradeListener$3:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.DeploymentManagerImpl:void deploy()",
            "io.undertow.servlet.core.DeploymentManagerImpl:io.undertow.server.HttpHandler start()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void stop()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void undeploy()",
            "io.undertow.servlet.core.ContextClassLoaderSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.SessionListenerBridge:void sessionDestroyed(io.undertow.server.session.Session,io.undertow.server.HttpServerExchange,io.undertow.server.session.SessionListener$SessionDestroyedReason)",
            "io.undertow.servlet.core.ServletUpgradeListener$4:void run()",
            "io.undertow.servlet.spec.ServletContextImpl$5:java.lang.Void call(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnWritePossible(io.undertow.server.HttpServerExchange,javax.servlet.WriteListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnAllDataRead(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnDataAvailable(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeAction(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)"
        ]
    },
    "io.undertow.servlet.spec.HttpServletResponseImpl:void sendError(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.HttpServletResponseImpl:void sendError(int)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl$3:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.RequestDispatcherImpl:void include(javax.servlet.ServletRequest,javax.servlet.ServletResponse)"
        ]
    },
    "io.undertow.servlet.spec.RequestDispatcherImpl$4:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.ServletUpgradeListener$3:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.DeploymentManagerImpl:void deploy()",
            "io.undertow.servlet.core.DeploymentManagerImpl:io.undertow.server.HttpHandler start()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void stop()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void undeploy()",
            "io.undertow.servlet.core.ContextClassLoaderSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.SessionListenerBridge:void sessionDestroyed(io.undertow.server.session.Session,io.undertow.server.HttpServerExchange,io.undertow.server.session.SessionListener$SessionDestroyedReason)",
            "io.undertow.servlet.core.ServletUpgradeListener$4:void run()",
            "io.undertow.servlet.spec.ServletContextImpl$5:java.lang.Void call(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnWritePossible(io.undertow.server.HttpServerExchange,javax.servlet.WriteListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnAllDataRead(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnDataAvailable(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeAction(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)"
        ]
    },
    "io.undertow.servlet.core.ServletUpgradeListener$3:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.core.ServletUpgradeListener:void handleUpgrade(org.xnio.StreamConnection,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void execute(java.lang.Runnable)",
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void openGate()",
            "io.undertow.servlet.spec.UpgradeServletInputStream:void setReadListener(javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.UpgradeServletInputStream:void readIntoBufferNonBlocking()",
            "io.undertow.servlet.spec.UpgradeServletOutputStream:void write(byte[],int,int)",
            "io.undertow.servlet.spec.UpgradeServletOutputStream:void close()",
            "io.undertow.servlet.spec.UpgradeServletOutputStream:void setWriteListener(javax.servlet.WriteListener)",
            "io.undertow.servlet.spec.AsyncContextImpl:void start(java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl:void processAsyncTask()"
        ]
    },
    "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void openGate()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener$1:java.lang.Void call(io.undertow.server.HttpServerExchange,org.xnio.StreamConnection)"
        ]
    },
    "io.undertow.servlet.spec.ServletContextImpl$2:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.ServletContextImpl$2:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl$6:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void execute(java.lang.Runnable)",
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void openGate()",
            "io.undertow.servlet.spec.ServletContextImpl$2:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl$6:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void execute(java.lang.Runnable)",
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void openGate()",
            "io.undertow.servlet.spec.ServletContextImpl$2:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl:void processAsyncTask()",
            "io.undertow.servlet.spec.AsyncContextImpl$6:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.ServletContextImpl$5:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.ServletUpgradeListener$3:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.DeploymentManagerImpl:void deploy()",
            "io.undertow.servlet.core.DeploymentManagerImpl:io.undertow.server.HttpHandler start()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void stop()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void undeploy()",
            "io.undertow.servlet.core.ContextClassLoaderSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.SessionListenerBridge:void sessionDestroyed(io.undertow.server.session.Session,io.undertow.server.HttpServerExchange,io.undertow.server.session.SessionListener$SessionDestroyedReason)",
            "io.undertow.servlet.core.ServletUpgradeListener$4:void run()",
            "io.undertow.servlet.spec.ServletContextImpl$5:java.lang.Void call(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnWritePossible(io.undertow.server.HttpServerExchange,javax.servlet.WriteListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnAllDataRead(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnDataAvailable(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeAction(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)"
        ]
    },
    "io.undertow.servlet.spec.ServletOutputStreamImpl$WriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.ServletOutputStreamImpl$WriteChannelListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.servlet.spec.ServletOutputStreamImpl$2$1:void run()"
        ]
    },
    "io.undertow.servlet.spec.ServletInputStreamImpl$ServletInputStreamChannelListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.ServletInputStreamImpl$ServletInputStreamChannelListener:void handleEvent(java.nio.channels.Channel)",
            "io.undertow.servlet.spec.ServletInputStreamImpl$1$1:void run()"
        ]
    },
    "io.undertow.servlet.spec.ServletInputStreamImpl:boolean isReady()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.AsyncContextImpl$TimeoutTask$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void execute(java.lang.Runnable)",
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void openGate()",
            "io.undertow.servlet.spec.ServletContextImpl$2:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl$6:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.ServletOutputStreamImpl$WriteChannelListener:void handleError(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.ServletOutputStreamImpl$WriteChannelListener:void handleEvent(org.xnio.channels.StreamSinkChannel)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void execute(java.lang.Runnable)",
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void openGate()",
            "io.undertow.servlet.spec.ServletContextImpl$2:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl:void start(java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl$6:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void onAsyncComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl:void complete()",
            "io.undertow.servlet.spec.AsyncContextImpl:void completeInternal(boolean)",
            "io.undertow.servlet.spec.AsyncContextImpl:void access$100(io.undertow.servlet.spec.AsyncContextImpl)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void onAsyncStart(javax.servlet.AsyncContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl:void initialRequestDone()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void onAsyncError(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl:void handleError(java.lang.Throwable)"
        ]
    },
    "io.undertow.servlet.spec.HttpServletResponseImpl:void sendError(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "io.undertow.servlet.websockets.WebSocketServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.AsyncContextImpl$TimeoutTask$1$1$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.AsyncContextImpl:void handleError(java.lang.Throwable)"
        ]
    },
    "io.undertow.servlet.spec.UpgradeServletInputStream:void setReadListener(javax.servlet.ReadListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.UpgradeServletInputStream:void readIntoBufferNonBlocking()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.UpgradeServletInputStream:int read(byte[],int,int)",
            "io.undertow.servlet.spec.UpgradeServletInputStream:int available()",
            "io.undertow.servlet.spec.UpgradeServletInputStream:void access$300(io.undertow.servlet.spec.UpgradeServletInputStream)"
        ]
    },
    "io.undertow.servlet.spec.UpgradeServletOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.UpgradeServletOutputStream:void write(byte[])",
            "io.undertow.servlet.spec.UpgradeServletOutputStream:void write(int)"
        ]
    },
    "io.undertow.servlet.spec.UpgradeServletOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletDebugPageHandler:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,java.lang.Throwable)",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void forwardImpl(javax.servlet.ServletRequest,javax.servlet.ServletResponse,io.undertow.servlet.handlers.ServletRequestContext)"
        ]
    },
    "io.undertow.servlet.spec.UpgradeServletOutputStream:void setWriteListener(javax.servlet.WriteListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void start(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void processAsyncTask()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl:void initialRequestDone()",
            "io.undertow.servlet.spec.AsyncContextImpl:void addAsyncTask(java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl:void access$1200(io.undertow.servlet.spec.AsyncContextImpl)"
        ]
    },
    "io.undertow.servlet.core.ServletUpgradeListener$1:java.lang.Void call(io.undertow.server.HttpServerExchange,org.xnio.StreamConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)"
        ]
    },
    "io.undertow.servlet.spec.ServletContextImpl$2:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.ServletUpgradeListener$3:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.DeploymentManagerImpl:void deploy()",
            "io.undertow.servlet.core.DeploymentManagerImpl:io.undertow.server.HttpHandler start()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void stop()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void undeploy()",
            "io.undertow.servlet.core.ContextClassLoaderSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.SessionListenerBridge:void sessionDestroyed(io.undertow.server.session.Session,io.undertow.server.HttpServerExchange,io.undertow.server.session.SessionListener$SessionDestroyedReason)",
            "io.undertow.servlet.core.ServletUpgradeListener$4:void run()",
            "io.undertow.servlet.spec.ServletContextImpl$5:java.lang.Void call(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnWritePossible(io.undertow.server.HttpServerExchange,javax.servlet.WriteListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnAllDataRead(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnDataAvailable(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeAction(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)"
        ]
    },
    "io.undertow.servlet.spec.ServletOutputStreamImpl$WriteChannelListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.ServletOutputStreamImpl$2$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void execute(java.lang.Runnable)",
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void openGate()",
            "io.undertow.servlet.spec.ServletContextImpl$2:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.ServletOutputStreamImpl$2:void run()",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl$6:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.ServletInputStreamImpl$ServletInputStreamChannelListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.ServletInputStreamImpl$1$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void execute(java.lang.Runnable)",
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void openGate()",
            "io.undertow.servlet.spec.ServletContextImpl$2:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.ServletInputStreamImpl$1:void run()",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl$6:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.spec.AsyncContextImpl:void complete()",
            "io.undertow.servlet.spec.AsyncContextImpl:void handleError(java.lang.Throwable)",
            "io.undertow.servlet.spec.AsyncContextImpl$TimeoutTask$1$1:void run()",
            "io.undertow.servlet.spec.RequestDispatcherImpl:void error(io.undertow.servlet.handlers.ServletRequestContext,javax.servlet.ServletRequest,javax.servlet.ServletResponse,java.lang.String,java.lang.Throwable,java.lang.String)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void completeInternal(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl:void complete()",
            "io.undertow.servlet.spec.AsyncContextImpl:void handleCompletedBeforeInitialRequestDone()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void access$100(io.undertow.servlet.spec.AsyncContextImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl$3:void run()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void initialRequestDone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl$1:void run()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void handleError(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)"
        ]
    },
    "io.undertow.servlet.handlers.security.ServletConfidentialityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.handlers.DefaultServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.websockets.WebSocketServlet:void doGet(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.AsyncContextImpl$TimeoutTask$1$1$1:void handleRequest(io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.security.ServletSecurityRoleHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.SSLInformationAssociationHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.CachedAuthenticatedSessionHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletSecurityConstraintHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.security.ServletAuthenticationCallHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.FilterHandler$FilterChainImpl:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse)",
            "io.undertow.servlet.handlers.FilterHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.SessionRestoringHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.MarkSecureHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletDispatchingHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.handlers.ServletChain$1:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.handlers.CrawlerSessionManagerHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.compat.rewrite.RewriteHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.core.MetricsChainHandler:void handleRequest(io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.ServletContextImpl:void lambda$null$0(java.lang.String,io.undertow.server.HttpHandler,io.undertow.server.HttpServerExchange)"
        ]
    },
    "io.undertow.servlet.spec.UpgradeServletInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.UpgradeServletInputStream:int read(byte[])"
        ]
    },
    "io.undertow.servlet.spec.UpgradeServletInputStream:int available()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.UpgradeServletInputStream:void access$300(io.undertow.servlet.spec.UpgradeServletInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.UpgradeServletInputStream$ServletInputStreamChannelListener:void handleEvent(org.xnio.channels.StreamSourceChannel)"
        ]
    },
    "io.undertow.servlet.spec.UpgradeServletOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletDebugPageHandler:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,java.lang.Throwable)"
        ]
    },
    "io.undertow.servlet.spec.UpgradeServletOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.websockets.ServletWebSocketHttpExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)"
        ]
    },
    "io.undertow.servlet.handlers.ServletDebugPageHandler:void handleRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)",
            "io.undertow.servlet.spec.AsyncContextImpl:void handleError(java.lang.Throwable)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void addAsyncTask(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl$TimeoutTask:void run()",
            "io.undertow.servlet.spec.ServletInputStreamImpl:void setReadListener(javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.AsyncContextImpl:void doDispatch(java.lang.Runnable)",
            "io.undertow.servlet.spec.ServletOutputStreamImpl:void setWriteListener(javax.servlet.WriteListener)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void access$1200(io.undertow.servlet.spec.AsyncContextImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.core.ServletUpgradeListener$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void dispatchRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext,io.undertow.servlet.handlers.ServletChain,javax.servlet.DispatcherType)",
            "io.undertow.servlet.api.LegacyThreadSetupActionWrapper$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.ServletUpgradeListener$3:void handleEvent(org.xnio.StreamConnection)",
            "io.undertow.servlet.core.ServletRequestContextThreadSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.DeploymentManagerImpl:void deploy()",
            "io.undertow.servlet.core.DeploymentManagerImpl:io.undertow.server.HttpHandler start()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void stop()",
            "io.undertow.servlet.core.DeploymentManagerImpl:void undeploy()",
            "io.undertow.servlet.core.ContextClassLoaderSetupAction$1:java.lang.Object call(io.undertow.server.HttpServerExchange,java.lang.Object)",
            "io.undertow.servlet.core.SessionListenerBridge:void sessionDestroyed(io.undertow.server.session.Session,io.undertow.server.HttpServerExchange,io.undertow.server.session.SessionListener$SessionDestroyedReason)",
            "io.undertow.servlet.core.ServletUpgradeListener$4:void run()",
            "io.undertow.servlet.spec.ServletContextImpl$5:java.lang.Void call(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnWritePossible(io.undertow.server.HttpServerExchange,javax.servlet.WriteListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnAllDataRead(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeOnDataAvailable(io.undertow.server.HttpServerExchange,javax.servlet.ReadListener)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeAction(io.undertow.server.HttpServerExchange,io.undertow.servlet.api.ThreadSetupHandler$Action)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)"
        ]
    },
    "io.undertow.servlet.spec.ServletOutputStreamImpl$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void execute(java.lang.Runnable)",
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void openGate()",
            "io.undertow.servlet.spec.ServletContextImpl$2:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl$6:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.ServletInputStreamImpl$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void execute(java.lang.Runnable)",
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void openGate()",
            "io.undertow.servlet.spec.ServletContextImpl$2:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl$6:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl$TimeoutTask$1$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void execute(java.lang.Runnable)",
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void openGate()",
            "io.undertow.servlet.spec.ServletContextImpl$2:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl$6:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void handleCompletedBeforeInitialRequestDone()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.handlers.ServletInitialHandler:void handleFirstRequest(io.undertow.server.HttpServerExchange,io.undertow.servlet.handlers.ServletRequestContext)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl$3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void execute(java.lang.Runnable)",
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void openGate()",
            "io.undertow.servlet.spec.ServletContextImpl$2:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl$6:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void execute(java.lang.Runnable)",
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void openGate()",
            "io.undertow.servlet.spec.ServletContextImpl$2:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl$6:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.UpgradeServletInputStream:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.websockets.ServletWebSocketHttpExchange:org.xnio.IoFuture readRequestData()",
            "io.undertow.servlet.spec.UpgradeServletInputStream:int read()"
        ]
    },
    "io.undertow.servlet.spec.UpgradeServletInputStream$ServletInputStreamChannelListener:void handleEvent(org.xnio.channels.StreamSourceChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.UpgradeServletInputStream$ServletInputStreamChannelListener:void handleEvent(java.nio.channels.Channel)"
        ]
    },
    "io.undertow.servlet.websockets.ServletWebSocketHttpExchange:org.xnio.IoFuture sendData(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.AsyncContextImpl$TimeoutTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void execute(java.lang.Runnable)",
            "io.undertow.servlet.core.ServletUpgradeListener$DelayedExecutor:void openGate()",
            "io.undertow.servlet.spec.ServletContextImpl$2:java.lang.Void call(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.ServletContextImpl:void invokeRunnable(io.undertow.server.HttpServerExchange,java.lang.Runnable)",
            "io.undertow.servlet.spec.AsyncContextImpl$6:void run()",
            "io.undertow.servlet.spec.AsyncContextImpl$TaskDispatchRunnable:void run()"
        ]
    },
    "io.undertow.servlet.spec.ServletInputStreamImpl:void setReadListener(javax.servlet.ReadListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void doDispatch(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl:void dispatchAsyncRequest(io.undertow.servlet.api.ServletDispatcher,io.undertow.servlet.handlers.ServletPathMatch,io.undertow.server.HttpServerExchange)",
            "io.undertow.servlet.spec.AsyncContextImpl:void completeInternal(boolean)"
        ]
    },
    "io.undertow.servlet.spec.ServletOutputStreamImpl:void setWriteListener(javax.servlet.WriteListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.websockets.ServletWebSocketHttpExchange:org.xnio.IoFuture readRequestData()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.UpgradeServletInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.UpgradeServletInputStream$ServletInputStreamChannelListener:void handleEvent(java.nio.channels.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void dispatchAsyncRequest(io.undertow.servlet.api.ServletDispatcher,io.undertow.servlet.handlers.ServletPathMatch,io.undertow.server.HttpServerExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl:void dispatch(javax.servlet.ServletContext,java.lang.String)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void dispatch(javax.servlet.ServletContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.undertow.servlet.spec.AsyncContextImpl:void dispatch()",
            "io.undertow.servlet.spec.AsyncContextImpl:void dispatch(java.lang.String)"
        ]
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void dispatch()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.undertow.servlet.spec.AsyncContextImpl:void dispatch(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}