{
    "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)": {
        "isVulRoot": true,
        "vulCaller": [
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.lang.Object generifyList(java.util.List,java.lang.Class)",
            "jodd.json.MapToBean:java.lang.Object convert(java.lang.Object,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object _parse(char[])",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.MapToBean:java.lang.Object generifyList(java.util.List,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)"
        ]
    },
    "jodd.json.MapToBean:java.lang.Object convert(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.MapToBean:java.lang.Object generifyList(java.util.List,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.JsonParser:java.lang.Object _parse(char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object parse(java.lang.String,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parse(java.lang.String)",
            "jodd.json.JsonParser:java.lang.Object parse(char[],java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parse(char[])"
        ]
    },
    "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.ObjectParser:java.lang.Object get()",
            "jodd.json.JsonParser:java.lang.Object parseValue(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)"
        ]
    },
    "jodd.json.JsonParser:java.lang.Object parse(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonParser:java.lang.Object parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:jodd.json.JsonObject parseAsJsonObject(java.lang.String)",
            "jodd.json.JsonParser:jodd.json.JsonArray parseAsJsonArray(java.lang.String)",
            "jodd.json.JsonParser:java.util.List parseAsList(java.lang.String,java.lang.Class)",
            "jodd.json.JsonParser:java.util.Map parseAsMap(java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.JsonParser:java.lang.Object parse(char[],java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonParser:java.lang.Object parse(char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.ObjectParser:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.LazyMap:void buildIfNeeded()",
            "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)",
            "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)",
            "jodd.json.LazyList:java.lang.Object get(int)"
        ]
    },
    "jodd.json.JsonParser:java.lang.Object parseValue(java.lang.Class,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object _parse(char[])",
            "jodd.json.JsonParser:java.lang.Object parseArrayContent(java.lang.Class,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.JsonParser:jodd.json.JsonObject parseAsJsonObject(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonParser:jodd.json.JsonArray parseAsJsonArray(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonParser:java.util.List parseAsList(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonParser:java.util.Map parseAsMap(java.lang.String,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.LazyMap:void buildIfNeeded()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.LazyMap:java.util.Set entrySet()",
            "jodd.json.LazyMap:boolean containsKey(java.lang.Object)",
            "jodd.json.LazyMap:java.lang.Object get(java.lang.Object)",
            "jodd.json.LazyMap:java.lang.Object remove(java.lang.Object)",
            "jodd.json.LazyMap:void putAll(java.util.Map)",
            "jodd.json.LazyMap:boolean equals(java.lang.Object)",
            "jodd.json.LazyMap:int hashCode()",
            "jodd.json.LazyMap:java.lang.String toString()"
        ]
    },
    "jodd.json.JsonParserBase:java.util.Collection newArrayInstance(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object parseArrayContent(java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.JsonParserBase:java.lang.Object newObjectInstance(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.JsonParser:java.lang.Object resolveLazyValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object _parse(char[])",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.LazyList:java.lang.Object get(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.MapToBean:java.lang.Object generifyList(java.util.List,java.lang.Class)",
            "jodd.json.JsonContext:boolean pushValue(java.lang.Object)",
            "jodd.json.JsonContext:void popValue()",
            "jodd.json.JsonArray:java.lang.String getString(int)",
            "jodd.json.JsonArray:java.lang.Integer getInteger(int)",
            "jodd.json.JsonArray:java.lang.Long getLong(int)",
            "jodd.json.JsonArray:java.lang.Double getDouble(int)",
            "jodd.json.JsonArray:java.lang.Float getFloat(int)",
            "jodd.json.JsonArray:java.lang.Boolean getBoolean(int)",
            "jodd.json.JsonArray:jodd.json.JsonObject getJsonObject(int)",
            "jodd.json.JsonArray:jodd.json.JsonArray getJsonArray(int)",
            "jodd.json.JsonArray:byte[] getBinary(int)",
            "jodd.json.JsonArray:java.lang.Object getValue(int)",
            "jodd.json.JsonArray:boolean hasNull(int)",
            "jodd.json.LazyList:java.lang.Object get(int)",
            "jodd.json.LazyList:void convertAllIfNeeded()"
        ]
    },
    "jodd.json.JsonParser:java.lang.Object parseArrayContent(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object parseValue(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.LazyMap:java.util.Set entrySet()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.LazyMap:java.util.Set entrySet()",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:java.util.stream.Stream stream()",
            "jodd.json.JsonObject:java.util.Iterator iterator()",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)"
        ]
    },
    "jodd.json.LazyMap:boolean containsKey(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.LazyMap:boolean containsKey(java.lang.Object)",
            "jodd.json.JsonObject:java.lang.String getString(java.lang.String,java.lang.String)",
            "jodd.json.JsonObject:java.lang.Integer getInteger(java.lang.String,java.lang.Integer)",
            "jodd.json.JsonObject:java.lang.Long getLong(java.lang.String,java.lang.Long)",
            "jodd.json.JsonObject:java.lang.Double getDouble(java.lang.String,java.lang.Double)",
            "jodd.json.JsonObject:java.lang.Float getFloat(java.lang.String,java.lang.Float)",
            "jodd.json.JsonObject:java.lang.Boolean getBoolean(java.lang.String,java.lang.Boolean)",
            "jodd.json.JsonObject:jodd.json.JsonObject getJsonObject(java.lang.String,jodd.json.JsonObject)",
            "jodd.json.JsonObject:jodd.json.JsonArray getJsonArray(java.lang.String,jodd.json.JsonArray)",
            "jodd.json.JsonObject:byte[] getBinary(java.lang.String,byte[])",
            "jodd.json.JsonObject:java.lang.Object getValue(java.lang.String,java.lang.Object)",
            "jodd.json.JsonObject:boolean containsKey(java.lang.String)"
        ]
    },
    "jodd.json.LazyMap:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.LazyMap:java.lang.Object get(java.lang.Object)",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonContext:boolean serialize(java.lang.Object)",
            "jodd.json.JsonParser:java.lang.Class replaceWithMappedTypeForPath(java.lang.Class)",
            "jodd.json.JsonParser:jodd.json.ValueConverter lookupValueConverter()",
            "jodd.json.JsonObject:java.lang.String getString(java.lang.String)",
            "jodd.json.JsonObject:java.lang.Integer getInteger(java.lang.String)",
            "jodd.json.JsonObject:java.lang.Long getLong(java.lang.String)",
            "jodd.json.JsonObject:java.lang.Double getDouble(java.lang.String)",
            "jodd.json.JsonObject:java.lang.Float getFloat(java.lang.String)",
            "jodd.json.JsonObject:java.lang.Boolean getBoolean(java.lang.String)",
            "jodd.json.JsonObject:jodd.json.JsonObject getJsonObject(java.lang.String)",
            "jodd.json.JsonObject:jodd.json.JsonArray getJsonArray(java.lang.String)",
            "jodd.json.JsonObject:byte[] getBinary(java.lang.String)",
            "jodd.json.JsonObject:java.lang.Object getValue(java.lang.String)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)"
        ]
    },
    "jodd.json.LazyMap:java.lang.Object remove(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.LazyMap:java.lang.Object remove(java.lang.Object)",
            "jodd.json.JsonObject:java.lang.Object remove(java.lang.String)"
        ]
    },
    "jodd.json.LazyMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.LazyMap:void putAll(java.util.Map)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)"
        ]
    },
    "jodd.json.LazyMap:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.LazyMap:boolean equals(java.lang.Object)",
            "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.json.LazyMap:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.LazyMap:int hashCode()",
            "jodd.json.JsonObject:int hashCode()"
        ]
    },
    "jodd.json.LazyMap:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.LazyMap:java.lang.String toString()",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonObject:java.lang.Object resolveValue(java.lang.Object)"
        ]
    },
    "jodd.json.JsonContext:boolean pushValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ValueJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.JsonContext:void popValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ValueJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.JsonArray:java.lang.String getString(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:java.lang.Integer getInteger(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:java.lang.Long getLong(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:java.lang.Double getDouble(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:java.lang.Float getFloat(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:java.lang.Boolean getBoolean(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:jodd.json.JsonObject getJsonObject(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:jodd.json.JsonArray getJsonArray(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:byte[] getBinary(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonArray:java.lang.Object getValue(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.JsonArraySerializer:boolean serialize(jodd.json.JsonContext,jodd.json.JsonArray)"
        ]
    },
    "jodd.json.JsonArray:boolean hasNull(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.LazyList:void convertAllIfNeeded()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.LazyList:java.util.Iterator iterator()",
            "jodd.json.LazyList:java.util.ListIterator listIterator()"
        ]
    },
    "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeInDeep(jodd.json.JsonObject)",
            "jodd.json.JsonObject:java.lang.Object lambda$mergeIn$0(int,java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.json.JsonObject:java.util.stream.Stream stream()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)"
        ]
    },
    "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:boolean equals(java.lang.Object)",
            "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.json.JsonObject:java.lang.String getString(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.lang.Integer getInteger(java.lang.String,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.lang.Long getLong(java.lang.String,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.lang.Double getDouble(java.lang.String,java.lang.Double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.lang.Float getFloat(java.lang.String,java.lang.Float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.lang.Boolean getBoolean(java.lang.String,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:jodd.json.JsonObject getJsonObject(java.lang.String,jodd.json.JsonObject)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:jodd.json.JsonArray getJsonArray(java.lang.String,jodd.json.JsonArray)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:byte[] getBinary(java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.lang.Object getValue(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:boolean containsKey(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonContext:boolean serialize(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.impl.JsonArraySerializer:boolean serialize(jodd.json.JsonContext,jodd.json.JsonArray)",
            "jodd.json.impl.ArraysJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)",
            "jodd.json.JsonSerializer:void serialize(java.lang.Object,java.lang.Appendable)",
            "jodd.json.BeanSerializer:void onSerializableProperty(java.lang.String,java.lang.Class,java.lang.Object)"
        ]
    },
    "jodd.json.JsonParser:java.lang.Class replaceWithMappedTypeForPath(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object parseArrayContent(java.lang.Class,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.JsonParser:jodd.json.ValueConverter lookupValueConverter()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object parseValue(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.JsonObject:java.lang.String getString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:java.lang.String getString(java.lang.String,java.lang.String)"
        ]
    },
    "jodd.json.JsonObject:java.lang.Integer getInteger(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:java.lang.Integer getInteger(java.lang.String,java.lang.Integer)"
        ]
    },
    "jodd.json.JsonObject:java.lang.Long getLong(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:java.lang.Long getLong(java.lang.String,java.lang.Long)"
        ]
    },
    "jodd.json.JsonObject:java.lang.Double getDouble(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:java.lang.Double getDouble(java.lang.String,java.lang.Double)"
        ]
    },
    "jodd.json.JsonObject:java.lang.Float getFloat(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:java.lang.Float getFloat(java.lang.String,java.lang.Float)"
        ]
    },
    "jodd.json.JsonObject:java.lang.Boolean getBoolean(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:java.lang.Boolean getBoolean(java.lang.String,java.lang.Boolean)"
        ]
    },
    "jodd.json.JsonObject:jodd.json.JsonObject getJsonObject(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:jodd.json.JsonObject getJsonObject(java.lang.String,jodd.json.JsonObject)"
        ]
    },
    "jodd.json.JsonObject:jodd.json.JsonArray getJsonArray(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:jodd.json.JsonArray getJsonArray(java.lang.String,jodd.json.JsonArray)"
        ]
    },
    "jodd.json.JsonObject:byte[] getBinary(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:byte[] getBinary(java.lang.String,byte[])"
        ]
    },
    "jodd.json.JsonObject:java.lang.Object getValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:java.lang.Object getValue(java.lang.String,java.lang.Object)"
        ]
    },
    "jodd.json.JsonObject:java.lang.Object remove(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)"
        ]
    },
    "jodd.json.JsonObject:int hashCode()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)"
        ]
    },
    "jodd.json.JsonObject:java.lang.Object resolveValue(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Object)",
            "jodd.json.JsonObject:jodd.json.JsonObject put(java.lang.String,java.lang.Object)"
        ]
    },
    "jodd.json.impl.ValueJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonContext:boolean serialize(java.lang.Object)"
        ]
    },
    "jodd.json.impl.JsonArraySerializer:boolean serialize(jodd.json.JsonContext,jodd.json.JsonArray)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.JsonArraySerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.LazyList:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])",
            "jodd.json.LazyMap$FakeMapEntrySet:java.util.Iterator iterator()",
            "jodd.json.JsonArray:java.util.Iterator iterator()",
            "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)",
            "jodd.json.LazyList:java.util.Iterator iterator()"
        ]
    },
    "jodd.json.LazyList:java.util.ListIterator listIterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.LazyList:java.util.ListIterator listIterator()"
        ]
    },
    "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ValueJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ValueJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:jodd.json.JsonObject mergeInDeep(jodd.json.JsonObject)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:java.lang.Object lambda$mergeIn$0(int,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.JsonObject:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.json.impl.ArraysJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ValueJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.JsonSerializer:void serialize(java.lang.Object,java.lang.Appendable)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonSerializer:java.lang.String serialize(java.lang.Object)",
            "jodd.json.JsonSerializer:java.lang.CharSequence serializeToCharSequence(java.lang.Object)"
        ]
    },
    "jodd.json.BeanSerializer:void onSerializableProperty(java.lang.String,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.BeanSerializer:void onSerializableProperty(java.lang.String,jodd.introspector.PropertyDescriptor)"
        ]
    },
    "jodd.json.JsonArray:boolean arrayEquals(java.util.List,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonArray:boolean equals(java.lang.Object)",
            "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.json.JsonArray:jodd.json.JsonArray add(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.JsonObject:jodd.json.JsonObject put(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.impl.JsonArraySerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonContext:boolean serialize(java.lang.Object)"
        ]
    },
    "jodd.json.meta.TypeData:void <init>(java.util.List,java.util.List,boolean,java.lang.String[],java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData scanClassForAnnotations(java.lang.Class)"
        ]
    },
    "jodd.json.LazyMap$FakeMapEntrySet:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)",
            "jodd.json.impl.JsonObjectSerializer:void serializeValue(jodd.json.JsonContext,jodd.json.JsonObject)",
            "jodd.json.impl.MapJsonSerializer:void serializeValue(jodd.json.JsonContext,java.util.Map)",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.MapToBean:java.util.Map generifyMap(java.util.Map,java.lang.Class,java.lang.Class)",
            "jodd.json.JsonObject:jodd.json.JsonObject mergeIn(jodd.json.JsonObject,int)",
            "jodd.json.JsonObject:java.util.Iterator iterator()",
            "jodd.json.JsonObject:boolean objectEquals(java.util.Map,java.lang.Object)"
        ]
    },
    "jodd.json.JsonArray:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Iterable)"
        ]
    },
    "jodd.json.impl.IterableJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ValueJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.JsonSerializer:java.lang.String serialize(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonArray:java.lang.String toString()",
            "jodd.json.JsonObject:java.lang.String toString()"
        ]
    },
    "jodd.json.JsonSerializer:java.lang.CharSequence serializeToCharSequence(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.BeanSerializer:void onSerializableProperty(java.lang.String,jodd.introspector.PropertyDescriptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.TypeJsonVisitor:void onProperty(java.lang.String,jodd.introspector.PropertyDescriptor,boolean)"
        ]
    },
    "jodd.json.JsonArray:boolean equals(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonObject:boolean elementEquals(java.lang.Object,java.lang.Object)"
        ]
    },
    "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData scanClassForAnnotations(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData lookupTypeData(java.lang.Class)",
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData _lookupTypeData(java.lang.Class)"
        ]
    },
    "jodd.json.JsonArray:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonObject:java.lang.Object resolveValue(java.lang.Object)"
        ]
    },
    "jodd.json.JsonObject:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.KeyValueJsonSerializer:int serializeKeyValue(jodd.json.JsonContext,jodd.json.Path,java.lang.Object,java.lang.Object,int)",
            "jodd.json.MapToBean:java.lang.Object map2bean(java.util.Map,java.lang.Class)",
            "jodd.json.JsonObject:java.lang.Object resolveValue(java.lang.Object)"
        ]
    },
    "jodd.json.TypeJsonVisitor:void onProperty(java.lang.String,jodd.introspector.PropertyDescriptor,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.TypeJsonVisitor:void visit()"
        ]
    },
    "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData lookupTypeData(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JsonAnnotationManager:java.lang.String resolveJsonName(java.lang.Class,java.lang.String)",
            "jodd.json.meta.JsonAnnotationManager:java.lang.String resolveRealName(java.lang.Class,java.lang.String)",
            "jodd.json.TypeJsonVisitor:void <init>(jodd.json.JsonContext,java.lang.Class)",
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData _lookupTypeData(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData findSubclassTypeData(java.lang.Class)"
        ]
    },
    "jodd.json.TypeJsonVisitor:void visit()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.BeanSerializer:void serialize()"
        ]
    },
    "jodd.json.meta.JsonAnnotationManager:java.lang.String resolveJsonName(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "jodd.json.meta.JsonAnnotationManager:java.lang.String resolveRealName(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.JsonParser:java.lang.Object parseObjectContent(java.lang.Class,java.lang.Class,java.lang.Class)"
        ]
    },
    "jodd.json.TypeJsonVisitor:void <init>(jodd.json.JsonContext,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.BeanSerializer:void <init>(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData findSubclassTypeData(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.meta.JsonAnnotationManager:jodd.json.meta.TypeData lookupTypeData(java.lang.Class)"
        ]
    },
    "jodd.json.BeanSerializer:void serialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ObjectJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.BeanSerializer:void <init>(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ObjectJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)"
        ]
    },
    "jodd.json.impl.ObjectJsonSerializer:void serializeValue(jodd.json.JsonContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "jodd.json.impl.ValueJsonSerializer:boolean serialize(jodd.json.JsonContext,java.lang.Object)"
        ]
    }
}