{
    "org.apache.coyote.http11.InternalNioInputBuffer:org.apache.coyote.http11.InternalNioInputBuffer$HeaderParseStatus parseHeader()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioInputBuffer:boolean parseHeaders()"
        ]
    },
    "org.apache.coyote.http11.InternalNioInputBuffer:boolean parseRequestLine(boolean)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProcessor:org.apache.tomcat.util.net.NioEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.NioChannel)"
        ]
    },
    "org.apache.coyote.http11.InternalAprInputBuffer:boolean parseHeader()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.coyote.http11.InternalAprInputBuffer:void parseHeaders()"
        ]
    },
    "org.apache.coyote.http11.InternalAprInputBuffer:boolean parseRequestLine(boolean)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.coyote.http11.Http11AprProcessor:org.apache.tomcat.util.net.AprEndpoint$Handler$SocketState process(long)"
        ]
    },
    "org.apache.coyote.http11.InternalInputBuffer:boolean parseHeader()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.coyote.http11.InternalInputBuffer:void parseHeaders()"
        ]
    },
    "org.apache.coyote.http11.InternalInputBuffer:void parseRequestLine()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void process(java.net.Socket)"
        ]
    },
    "org.apache.coyote.http11.InternalNioInputBuffer:boolean parseHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProcessor:org.apache.tomcat.util.net.NioEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.NioChannel)"
        ]
    },
    "org.apache.coyote.http11.Http11NioProcessor:org.apache.tomcat.util.net.NioEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.NioChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler:org.apache.tomcat.util.net.NioEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.NioChannel)"
        ]
    },
    "org.apache.coyote.http11.InternalAprInputBuffer:void parseHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11AprProcessor:org.apache.tomcat.util.net.AprEndpoint$Handler$SocketState process(long)"
        ]
    },
    "org.apache.coyote.http11.Http11AprProcessor:org.apache.tomcat.util.net.AprEndpoint$Handler$SocketState process(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler:org.apache.tomcat.util.net.AprEndpoint$Handler$SocketState process(long)"
        ]
    },
    "org.apache.coyote.http11.InternalInputBuffer:void parseHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void process(java.net.Socket)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void process(java.net.Socket)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler:boolean process(java.net.Socket)"
        ]
    },
    "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler:org.apache.tomcat.util.net.NioEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.NioChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void run()"
        ]
    },
    "org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler:org.apache.tomcat.util.net.AprEndpoint$Handler$SocketState process(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$SocketProcessor:void run()",
            "org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor:void run()",
            "org.apache.tomcat.util.net.AprEndpoint$Worker:void run()"
        ]
    },
    "org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler:boolean process(java.net.Socket)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor:void run()",
            "org.apache.tomcat.util.net.JIoEndpoint$Worker:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.NioEndpoint$Worker:void run()",
            "org.apache.tomcat.util.net.NioEndpoint:boolean processSocket(org.apache.tomcat.util.net.NioChannel,org.apache.tomcat.util.net.SocketStatus,boolean)",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$SocketProcessor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:boolean processSocket(long)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:boolean processSocketWithOptions(long)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Worker:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:org.apache.tomcat.util.net.AprEndpoint$Worker newWorkerThread()",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.JIoEndpoint:boolean processSocket(java.net.Socket)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.tomcat.util.net.JIoEndpoint$Worker:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.JIoEndpoint:org.apache.tomcat.util.net.JIoEndpoint$Worker newWorkerThread()",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Worker:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.NioEndpoint:org.apache.tomcat.util.net.NioEndpoint$Worker newWorkerThread()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:boolean processSocket(org.apache.tomcat.util.net.NioChannel,org.apache.tomcat.util.net.SocketStatus,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void cancelledKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.SocketStatus,boolean)",
            "org.apache.tomcat.util.net.NioEndpoint:boolean processSocket(org.apache.tomcat.util.net.NioChannel,org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNioChannel:int handshake(boolean,boolean)",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult handshakeUnwrap(boolean)",
            "org.apache.tomcat.util.net.SecureNioChannel:int read(java.nio.ByteBuffer)",
            "org.apache.tomcat.util.net.SecureNioChannel:int write(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:boolean processSocket(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void run()",
            "org.apache.tomcat.util.net.AprEndpoint$Sendfile:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:boolean processSocketWithOptions(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Acceptor:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:org.apache.tomcat.util.net.AprEndpoint$Worker newWorkerThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:org.apache.tomcat.util.net.AprEndpoint$Worker createWorkerThread()"
        ]
    },
    "org.apache.tomcat.util.net.JIoEndpoint:boolean processSocket(java.net.Socket)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.JIoEndpoint$Acceptor:void run()"
        ]
    },
    "org.apache.tomcat.util.net.JIoEndpoint:org.apache.tomcat.util.net.JIoEndpoint$Worker newWorkerThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.JIoEndpoint:org.apache.tomcat.util.net.JIoEndpoint$Worker createWorkerThread()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:org.apache.tomcat.util.net.NioEndpoint$Worker newWorkerThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint:org.apache.tomcat.util.net.NioEndpoint$Worker createWorkerThread()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void cancelledKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.SocketStatus,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean processSendfile(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment,boolean)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void timeout(int,boolean)",
            "org.apache.tomcat.util.net.NioEndpoint$PollerEvent:void run()",
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void run()",
            "org.apache.tomcat.util.net.NioEndpoint$Worker:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:boolean processSocket(org.apache.tomcat.util.net.NioChannel,org.apache.tomcat.util.net.SocketStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment)",
            "org.apache.tomcat.util.net.NioEndpoint:boolean processSocket(org.apache.tomcat.util.net.NioChannel)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:int handshake(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$SocketProcessor:void run()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult handshakeUnwrap(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.SecureNioChannel:int handshake(boolean,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:int read(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioInputBuffer:boolean readSocket(boolean,boolean)",
            "org.apache.tomcat.util.net.NioBlockingSelector:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,long)",
            "org.apache.tomcat.util.net.NioSelectorPool:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:int write(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioBlockingSelector:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,long)",
            "org.apache.tomcat.util.net.NioSelectorPool:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Poller:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Sendfile:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Acceptor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:org.apache.tomcat.util.net.AprEndpoint$Worker createWorkerThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:org.apache.tomcat.util.net.AprEndpoint$Worker getWorkerThread()"
        ]
    },
    "org.apache.tomcat.util.net.JIoEndpoint$Acceptor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.tomcat.util.net.JIoEndpoint:org.apache.tomcat.util.net.JIoEndpoint$Worker createWorkerThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.JIoEndpoint:org.apache.tomcat.util.net.JIoEndpoint$Worker getWorkerThread()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:org.apache.tomcat.util.net.NioEndpoint$Worker createWorkerThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint:org.apache.tomcat.util.net.NioEndpoint$Worker getWorkerThread()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void run()",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void timeout(int,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean processSendfile(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProcessor:org.apache.tomcat.util.net.NioEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.NioChannel)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$Poller:void timeout(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint$PollerEvent:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:boolean processSocket(org.apache.tomcat.util.net.NioChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean processKey(java.nio.channels.SelectionKey,org.apache.tomcat.util.net.NioEndpoint$KeyAttachment)"
        ]
    },
    "org.apache.coyote.http11.InternalNioInputBuffer:boolean readSocket(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioInputBuffer:boolean parseRequestLine(boolean)",
            "org.apache.coyote.http11.InternalNioInputBuffer:boolean fill(boolean,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioBlockingSelector:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioSelectorPool:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioSelectorPool:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioSelectorPool:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long)"
        ]
    },
    "org.apache.tomcat.util.net.NioBlockingSelector:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioSelectorPool:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioSelectorPool:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioSelectorPool:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:org.apache.tomcat.util.net.AprEndpoint$Worker getWorkerThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:boolean processSocketWithOptions(long)",
            "org.apache.tomcat.util.net.AprEndpoint:boolean processSocket(long)",
            "org.apache.tomcat.util.net.AprEndpoint:boolean processSocket(long,org.apache.tomcat.util.net.SocketStatus)"
        ]
    },
    "org.apache.tomcat.util.net.JIoEndpoint:org.apache.tomcat.util.net.JIoEndpoint$Worker getWorkerThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.JIoEndpoint:boolean processSocket(java.net.Socket)"
        ]
    },
    "org.apache.tomcat.util.net.NioEndpoint:org.apache.tomcat.util.net.NioEndpoint$Worker getWorkerThread()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.NioEndpoint:boolean processSocket(org.apache.tomcat.util.net.NioChannel,org.apache.tomcat.util.net.SocketStatus,boolean)"
        ]
    },
    "org.apache.coyote.http11.InternalNioInputBuffer:boolean fill(boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioInputBuffer$SocketInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalNioInputBuffer:boolean parseRequestLine(boolean)",
            "org.apache.coyote.http11.InternalNioInputBuffer:org.apache.coyote.http11.InternalNioInputBuffer$HeaderParseStatus parseHeader()"
        ]
    },
    "org.apache.tomcat.util.net.NioSelectorPool:int read(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioInputBuffer:boolean readSocket(boolean,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.NioSelectorPool:int write(java.nio.ByteBuffer,org.apache.tomcat.util.net.NioChannel,java.nio.channels.Selector,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioOutputBuffer:void writeToSocket(java.nio.ByteBuffer,boolean)",
            "org.apache.tomcat.util.net.SecureNioChannel:boolean flush(boolean,java.nio.channels.Selector,long)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:boolean processSocket(long,org.apache.tomcat.util.net.SocketStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void destroy()",
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void add(long)",
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void run()"
        ]
    },
    "org.apache.coyote.http11.InternalNioInputBuffer$SocketInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.InternalAprInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalNioInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer:void writeToSocket(java.nio.ByteBuffer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioOutputBuffer:void sendAck()",
            "org.apache.coyote.http11.InternalNioOutputBuffer:void flushBuffer()"
        ]
    },
    "org.apache.tomcat.util.net.SecureNioChannel:boolean flush(boolean,java.nio.channels.Selector,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioOutputBuffer:void writeToSocket(java.nio.ByteBuffer,boolean)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Poller:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$Poller:void run()",
            "org.apache.tomcat.util.net.AprEndpoint:void stop()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$Poller:void add(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpAprProcessor:boolean process(long)",
            "org.apache.coyote.http11.Http11AprProcessor:org.apache.tomcat.util.net.AprEndpoint$Handler$SocketState process(long)",
            "org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler:org.apache.tomcat.util.net.AprEndpoint$Handler$SocketState event(long,org.apache.tomcat.util.net.SocketStatus)",
            "org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler:org.apache.tomcat.util.net.AprEndpoint$Handler$SocketState process(long)",
            "org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor:void run()",
            "org.apache.tomcat.util.net.AprEndpoint$Worker:void run()"
        ]
    },
    "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalAprInputBuffer:void addActiveFilter(org.apache.coyote.http11.InputFilter)",
            "org.apache.coyote.http11.InternalInputBuffer:void addActiveFilter(org.apache.coyote.http11.InputFilter)",
            "org.apache.coyote.http11.InternalNioInputBuffer:void addActiveFilter(org.apache.coyote.http11.InputFilter)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseChunkHeader()",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseCRLF()"
        ]
    },
    "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.InternalAprInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalNioInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.filters.IdentityInputFilter:long end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalAprInputBuffer:void endRequest()",
            "org.apache.coyote.http11.InternalInputBuffer:void endRequest()",
            "org.apache.coyote.http11.InternalNioInputBuffer:void endRequest()"
        ]
    },
    "org.apache.coyote.http11.InternalAprInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.InternalAprInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalNioInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.InternalInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.InternalAprInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalNioInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.InternalNioInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.InternalAprInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalNioInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer:void sendAck()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer:void flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioOutputBuffer$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalNioOutputBuffer:void flush()",
            "org.apache.coyote.http11.InternalNioOutputBuffer:void endRequest()",
            "org.apache.coyote.http11.InternalNioOutputBuffer:void addToBB(byte[],int,int)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:void destroy()"
        ]
    },
    "org.apache.coyote.ajp.AjpAprProcessor:boolean process(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler:org.apache.tomcat.util.net.AprEndpoint$Handler$SocketState process(long)"
        ]
    },
    "org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler:org.apache.tomcat.util.net.AprEndpoint$Handler$SocketState event(long,org.apache.tomcat.util.net.SocketStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$SocketEventProcessor:void run()",
            "org.apache.tomcat.util.net.AprEndpoint$Worker:void run()"
        ]
    },
    "org.apache.coyote.http11.InternalAprInputBuffer:void addActiveFilter(org.apache.coyote.http11.InputFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11AprProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.http11.Http11AprProcessor:void prepareRequest()",
            "org.apache.coyote.http11.Http11AprProcessor:boolean addInputFilter(org.apache.coyote.http11.InputFilter[],java.lang.String)"
        ]
    },
    "org.apache.coyote.http11.InternalInputBuffer:void addActiveFilter(org.apache.coyote.http11.InputFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.http11.Http11Processor:void prepareRequest()",
            "org.apache.coyote.http11.Http11Processor:boolean addInputFilter(org.apache.coyote.http11.InputFilter[],java.lang.String)"
        ]
    },
    "org.apache.coyote.http11.InternalNioInputBuffer:void addActiveFilter(org.apache.coyote.http11.InputFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.http11.Http11NioProcessor:void prepareRequest()",
            "org.apache.coyote.http11.Http11NioProcessor:boolean addInputFilter(org.apache.coyote.http11.InputFilter[],java.lang.String)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:long end()",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.InternalAprInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalNioInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseChunkHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseCRLF()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseEndChunk()"
        ]
    },
    "org.apache.coyote.http11.InternalAprInputBuffer:void endRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11AprProcessor:void endRequest()"
        ]
    },
    "org.apache.coyote.http11.InternalInputBuffer:void endRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void process(java.net.Socket)"
        ]
    },
    "org.apache.coyote.http11.InternalNioInputBuffer:void endRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProcessor:void endRequest()"
        ]
    },
    "org.apache.coyote.http11.Http11NioProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler:org.apache.tomcat.util.net.NioEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.NioChannel)",
            "org.apache.coyote.Request:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.Response:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalAprOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalNioOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer:void endRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProcessor:void endRequest()",
            "org.apache.coyote.http11.Http11NioProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer:void addToBB(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioOutputBuffer:void commit()",
            "org.apache.coyote.http11.InternalNioOutputBuffer:void access$000(org.apache.coyote.http11.InternalNioOutputBuffer,byte[],int,int)"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpAprProtocol:void destroy()",
            "org.apache.coyote.http11.Http11AprProtocol:void destroy()"
        ]
    },
    "org.apache.coyote.ajp.AjpAprProtocol$AjpConnectionHandler:org.apache.tomcat.util.net.AprEndpoint$Handler$SocketState process(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint$SocketProcessor:void run()",
            "org.apache.tomcat.util.net.AprEndpoint$SocketWithOptionsProcessor:void run()",
            "org.apache.tomcat.util.net.AprEndpoint$Worker:void run()"
        ]
    },
    "org.apache.tomcat.util.net.AprEndpoint$SocketEventProcessor:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.AprEndpoint:boolean processSocket(long,org.apache.tomcat.util.net.SocketStatus)",
            "org.apache.tomcat.util.net.NioEndpoint$Poller:boolean events()",
            "org.apache.tomcat.util.net.SecureNioChannel:javax.net.ssl.SSLEngineResult$HandshakeStatus tasks()",
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.coyote.http11.Http11AprProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11AprProtocol$Http11ConnectionHandler:org.apache.tomcat.util.net.AprEndpoint$Handler$SocketState process(long)",
            "org.apache.coyote.Request:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.Response:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.Http11AprProcessor:void prepareRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11AprProcessor:org.apache.tomcat.util.net.AprEndpoint$Handler$SocketState process(long)"
        ]
    },
    "org.apache.coyote.http11.Http11AprProcessor:boolean addInputFilter(org.apache.coyote.http11.InputFilter[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11AprProcessor:void prepareRequest()"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler:boolean process(java.net.Socket)",
            "org.apache.coyote.Request:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.Response:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:void prepareRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void process(java.net.Socket)"
        ]
    },
    "org.apache.coyote.http11.Http11Processor:boolean addInputFilter(org.apache.coyote.http11.InputFilter[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void prepareRequest()"
        ]
    },
    "org.apache.coyote.http11.Http11NioProcessor:void prepareRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProcessor:org.apache.tomcat.util.net.NioEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.NioChannel)"
        ]
    },
    "org.apache.coyote.http11.Http11NioProcessor:boolean addInputFilter(org.apache.coyote.http11.InputFilter[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProcessor:void prepareRequest()"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:long end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalAprInputBuffer:void endRequest()",
            "org.apache.coyote.http11.InternalInputBuffer:void endRequest()",
            "org.apache.coyote.http11.InternalNioInputBuffer:void endRequest()"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedInputFilter:boolean parseEndChunk()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)"
        ]
    },
    "org.apache.coyote.http11.Http11AprProcessor:void endRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11AprProcessor:org.apache.tomcat.util.net.AprEndpoint$Handler$SocketState process(long)"
        ]
    },
    "org.apache.coyote.http11.Http11NioProcessor:void endRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProcessor:org.apache.tomcat.util.net.NioEndpoint$Handler$SocketState process(org.apache.tomcat.util.net.NioChannel)"
        ]
    },
    "org.apache.coyote.Request:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.RequestInfo:java.lang.String getRemoteAddr()"
        ]
    },
    "org.apache.coyote.Response:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalAprOutputBuffer:void flush()",
            "org.apache.coyote.http11.InternalAprOutputBuffer:void endRequest()",
            "org.apache.coyote.http11.InternalAprOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalNioOutputBuffer:void flush()",
            "org.apache.coyote.http11.InternalNioOutputBuffer:void endRequest()",
            "org.apache.coyote.http11.InternalNioOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:void flush()",
            "org.apache.coyote.http11.InternalOutputBuffer:void endRequest()",
            "org.apache.coyote.http11.InternalOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void reset()",
            "org.apache.coyote.Response:void finish()",
            "org.apache.coyote.Response:void acknowledge()",
            "org.apache.coyote.Response:void sendHeaders()"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalAprOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalNioOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.GzipOutputFilter:long end()",
            "org.apache.coyote.http11.InternalAprOutputBuffer:void endRequest()",
            "org.apache.coyote.http11.InternalNioOutputBuffer:void endRequest()",
            "org.apache.coyote.http11.InternalOutputBuffer:void endRequest()"
        ]
    },
    "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)"
        ]
    },
    "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.ajp.AjpProcessor:void prepareResponse()",
            "org.apache.coyote.http11.InternalOutputBuffer$OutputStreamOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:void commit()",
            "org.apache.coyote.http11.InternalOutputBuffer:void realWriteBytes(byte[],int,int)",
            "org.apache.jk.common.ChannelNioSocket:int send(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelSocket:int send(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream:int readBodyData(java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalAprOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalNioOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.InternalAprOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalAprOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalNioOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalAprOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalNioOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.InternalOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalAprOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalNioOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11NioProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.InternalNioOutputBuffer:void access$000(org.apache.coyote.http11.InternalNioOutputBuffer,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalNioOutputBuffer$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)"
        ]
    },
    "org.apache.coyote.ajp.AjpAprProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.Http11AprProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.RequestInfo:java.lang.String getRemoteAddr()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.http11.InternalAprOutputBuffer:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11AprProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.InternalAprOutputBuffer:void endRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11AprProcessor:void endRequest()",
            "org.apache.coyote.http11.Http11AprProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.InternalOutputBuffer:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.InternalOutputBuffer:void endRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void process(java.net.Socket)",
            "org.apache.coyote.http11.Http11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.Response:void reset()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.Response:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.server.JkCoyoteHandler:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)"
        ]
    },
    "org.apache.coyote.Response:void acknowledge()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.Response:void sendHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.JkInputStream:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)"
        ]
    },
    "org.apache.coyote.http11.filters.GzipOutputFilter:long end()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.GzipOutputFilter:long end()",
            "org.apache.coyote.http11.InternalAprOutputBuffer:void endRequest()",
            "org.apache.coyote.http11.InternalNioOutputBuffer:void endRequest()",
            "org.apache.coyote.http11.InternalOutputBuffer:void endRequest()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(int)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalAprOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalNioOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void prepareResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.ajp.AjpProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.ajp.AjpProcessor:void finish()"
        ]
    },
    "org.apache.coyote.http11.InternalOutputBuffer$OutputStreamOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalAprOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalNioOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.http11.InternalOutputBuffer:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.Http11Processor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.http11.InternalOutputBuffer:void realWriteBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.buf.ByteChunk:void append(byte[],int,int)",
            "org.apache.tomcat.util.buf.ByteChunk:void flushBuffer()"
        ]
    },
    "org.apache.jk.common.ChannelNioSocket:int send(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.ChannelNioSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.HandlerRequest:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.JkInputStream:void endMessage()",
            "org.apache.jk.common.JkInputStream:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.jk.common.JkInputStream:boolean refillReadBuffer()",
            "org.apache.jk.common.JkInputStream:void appendHead(org.apache.coyote.Response)"
        ]
    },
    "org.apache.jk.common.ChannelSocket:int send(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.ChannelSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.HandlerRequest:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.JkInputStream:void endMessage()",
            "org.apache.jk.common.JkInputStream:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.jk.common.JkInputStream:boolean refillReadBuffer()",
            "org.apache.jk.common.JkInputStream:void appendHead(org.apache.coyote.Response)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.MultipartStream:int readBodyData(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.ajp.AjpProcessor:void prepareResponse()",
            "org.apache.coyote.http11.InternalOutputBuffer$OutputStreamOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:void commit()",
            "org.apache.coyote.http11.InternalOutputBuffer:void realWriteBytes(byte[],int,int)",
            "org.apache.jk.common.ChannelNioSocket:int send(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelSocket:int send(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream:int readBodyData(java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.jk.server.JkCoyoteHandler:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.ChannelJni:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelNioSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelUn:void processConnection(org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.HandlerDispatch:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.HandlerRequest:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.core.MsgContext:int execute()"
        ]
    },
    "org.apache.jk.common.JkInputStream:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalAprOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalNioOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProtocol$AjpConnectionHandler:boolean process(java.net.Socket)",
            "org.apache.coyote.Request:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.Response:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:void finish()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor:boolean process(java.net.Socket)",
            "org.apache.coyote.ajp.AjpProcessor:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.tomcat.util.buf.ByteChunk:void append(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalOutputBuffer$OutputStreamOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:void commit()",
            "org.apache.tomcat.util.buf.ByteChunk:void append(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.tomcat.util.buf.ByteChunk:int substract(org.apache.tomcat.util.buf.ByteChunk)",
            "org.apache.tomcat.util.buf.IntermediateOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.tomcat.util.buf.ByteChunk:void flushBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.InternalOutputBuffer:void flush()",
            "org.apache.coyote.http11.InternalOutputBuffer:void endRequest()",
            "org.apache.tomcat.util.buf.ByteChunk:void append(byte)",
            "org.apache.tomcat.util.buf.ByteChunk:void append(byte[],int,int)"
        ]
    },
    "org.apache.jk.common.ChannelNioSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.ChannelJni:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelNioSocket$SocketConnection:boolean processConnection(org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelNioSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelUn:void processConnection(org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.HandlerDispatch:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.HandlerRequest:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.WorkerDummy:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.core.MsgContext:int execute()"
        ]
    },
    "org.apache.jk.common.HandlerRequest:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.ChannelJni:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelNioSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelUn:void processConnection(org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.HandlerDispatch:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.HandlerRequest:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.core.MsgContext:int execute()"
        ]
    },
    "org.apache.jk.common.JkInputStream:void endMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.core.MsgContext:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.jk.common.JkInputStream:boolean refillReadBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.JkInputStream:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)"
        ]
    },
    "org.apache.jk.common.JkInputStream:void appendHead(org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.core.MsgContext:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.jk.common.ChannelSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.ChannelJni:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelNioSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelSocket:void processConnection(org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelUn:void processConnection(org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.HandlerDispatch:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.HandlerRequest:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.WorkerDummy:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.core.MsgContext:int execute()"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.FileUploadBase:java.util.List parseRequest(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.fileupload.DiskFileUpload:java.util.List parseRequest(javax.servlet.http.HttpServletRequest,int,long,java.lang.String)"
        ]
    },
    "org.apache.jk.common.ChannelJni:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.ChannelJni:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelNioSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelUn:void processConnection(org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.HandlerDispatch:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.HandlerRequest:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.WorkerDummy:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.core.MsgContext:int execute()"
        ]
    },
    "org.apache.jk.common.ChannelUn:void processConnection(org.apache.jk.core.MsgContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.AprConnection:void runIt(java.lang.Object[])"
        ]
    },
    "org.apache.jk.common.HandlerDispatch:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.ChannelJni:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelNioSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelUn:void processConnection(org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.HandlerDispatch:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.HandlerRequest:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.core.MsgContext:int execute()"
        ]
    },
    "org.apache.jk.core.MsgContext:int execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.apr.AprImpl:int jniInvoke(long,java.lang.Object)"
        ]
    },
    "org.apache.coyote.ajp.AjpProtocol$AjpConnectionHandler:boolean process(java.net.Socket)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor:void run()",
            "org.apache.tomcat.util.net.JIoEndpoint$Worker:void run()"
        ]
    },
    "org.apache.coyote.ajp.AjpProcessor:boolean process(java.net.Socket)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProtocol$AjpConnectionHandler:boolean process(java.net.Socket)"
        ]
    },
    "org.apache.tomcat.util.buf.ByteChunk:void append(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.memory.MemoryProtocolHandler$ByteChunkOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.tomcat.util.buf.MessageBytes:void duplicate(org.apache.tomcat.util.buf.MessageBytes)"
        ]
    },
    "org.apache.tomcat.util.buf.ByteChunk:int substract(org.apache.tomcat.util.buf.ByteChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.memory.MemoryProtocolHandler$ByteChunkInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)"
        ]
    },
    "org.apache.tomcat.util.buf.IntermediateOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.ajp.AjpProcessor$SocketOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.ajp.AjpProcessor:void prepareResponse()",
            "org.apache.coyote.http11.InternalOutputBuffer$OutputStreamOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:void commit()",
            "org.apache.coyote.http11.InternalOutputBuffer:void realWriteBytes(byte[],int,int)",
            "org.apache.jk.common.ChannelNioSocket:int send(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelSocket:int send(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.tomcat.util.http.fileupload.MultipartStream:int readBodyData(java.io.OutputStream)",
            "org.apache.tomcat.util.http.fileupload.ThresholdingOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.apache.tomcat.util.buf.ByteChunk:void append(byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.buf.ByteChunk:void append(char)"
        ]
    },
    "org.apache.jk.common.ChannelNioSocket$SocketConnection:boolean processConnection(org.apache.jk.core.MsgContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.ChannelNioSocket$SocketConnection:void runIt(java.lang.Object[])"
        ]
    },
    "org.apache.jk.common.WorkerDummy:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.ChannelJni:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelNioSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelSocket:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.ChannelUn:void processConnection(org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.HandlerDispatch:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.common.HandlerRequest:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)",
            "org.apache.jk.core.MsgContext:int execute()"
        ]
    },
    "org.apache.jk.core.MsgContext:void action(org.apache.coyote.ActionCode,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.Request:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.coyote.Response:void action(org.apache.coyote.ActionCode,java.lang.Object)",
            "org.apache.jk.core.MsgContext:void action(org.apache.coyote.ActionCode,java.lang.Object)"
        ]
    },
    "org.apache.jk.common.JkInputStream:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.InternalAprInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalNioInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.jk.common.ChannelSocket:void processConnection(org.apache.jk.core.MsgContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.ChannelSocket$SocketConnection:void runIt(java.lang.Object[])"
        ]
    },
    "org.apache.tomcat.util.http.fileupload.DiskFileUpload:java.util.List parseRequest(javax.servlet.http.HttpServletRequest,int,long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.jk.common.AprConnection:void runIt(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.jk.apr.AprImpl:int jniInvoke(long,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.coyote.memory.MemoryProtocolHandler$ByteChunkOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.filters.ChunkedOutputFilter:long end()",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(int)",
            "org.apache.coyote.http11.filters.GzipOutputFilter$FakeOutputStream:void write(byte[],int,int)",
            "org.apache.coyote.http11.filters.IdentityOutputFilter:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalAprOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalNioOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.http11.InternalOutputBuffer:int doWrite(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Response)",
            "org.apache.coyote.Response:void doWrite(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.tomcat.util.buf.MessageBytes:void duplicate(org.apache.tomcat.util.buf.MessageBytes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.HandlerRequest:void parseHost(org.apache.tomcat.util.buf.MessageBytes,org.apache.coyote.Request)",
            "org.apache.tomcat.util.http.Parameters:void handleQueryParameters()"
        ]
    },
    "org.apache.coyote.memory.MemoryProtocolHandler$ByteChunkInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.coyote.http11.filters.BufferedInputFilter:void setRequest(org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.ChunkedInputFilter:int readBytes()",
            "org.apache.coyote.http11.filters.IdentityInputFilter:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.filters.IdentityInputFilter:long end()",
            "org.apache.coyote.http11.InternalAprInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.http11.InternalNioInputBuffer:int doRead(org.apache.tomcat.util.buf.ByteChunk,org.apache.coyote.Request)",
            "org.apache.coyote.Request:int doRead(org.apache.tomcat.util.buf.ByteChunk)"
        ]
    },
    "org.apache.tomcat.util.buf.ByteChunk:void append(char)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.jk.common.ChannelNioSocket$SocketConnection:void runIt(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.jk.common.ChannelSocket$SocketConnection:void runIt(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.threads.ThreadPool$ControlRunnable:void run()"
        ]
    },
    "org.apache.jk.common.HandlerRequest:void parseHost(org.apache.tomcat.util.buf.MessageBytes,org.apache.coyote.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.HandlerRequest:int decodeRequest(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext,org.apache.tomcat.util.buf.MessageBytes)"
        ]
    },
    "org.apache.tomcat.util.http.Parameters:void handleQueryParameters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.Parameters:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.tomcat.util.http.Parameters:java.util.Enumeration getParameterNames()",
            "org.apache.tomcat.util.http.Parameters:void merge()"
        ]
    },
    "org.apache.jk.common.HandlerRequest:int decodeRequest(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext,org.apache.tomcat.util.buf.MessageBytes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.jk.common.HandlerRequest:int invoke(org.apache.jk.core.Msg,org.apache.jk.core.MsgContext)"
        ]
    },
    "org.apache.tomcat.util.http.Parameters:java.lang.String[] getParameterValues(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.Parameters:java.lang.String getParameter(java.lang.String)"
        ]
    },
    "org.apache.tomcat.util.http.Parameters:java.util.Enumeration getParameterNames()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.tomcat.util.http.Parameters:void merge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.tomcat.util.http.Parameters:java.lang.String[] getParameterValues(java.lang.String)",
            "org.apache.tomcat.util.http.Parameters:java.util.Enumeration getParameterNames()",
            "org.apache.tomcat.util.http.Parameters:void merge()"
        ]
    },
    "org.apache.tomcat.util.http.Parameters:java.lang.String getParameter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}