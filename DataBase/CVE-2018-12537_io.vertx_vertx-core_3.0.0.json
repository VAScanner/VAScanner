{
    "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.MultiMap headers()": {
        "isVulRoot": true,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest doRequest(io.vertx.core.http.HttpMethod,java.lang.String,int,java.lang.String,io.vertx.core.MultiMap)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest putHeader(java.lang.String,java.lang.String)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest putHeader(java.lang.String,java.lang.Iterable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void end(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest putHeader(java.lang.CharSequence,java.lang.CharSequence)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest putHeader(java.lang.CharSequence,java.lang.Iterable)"
        ]
    },
    "io.vertx.core.http.HttpHeaders:java.lang.CharSequence createOptimized(java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "io.vertx.core.http.HttpHeaders:void <clinit>()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest doRequest(io.vertx.core.http.HttpMethod,java.lang.String,int,java.lang.String,io.vertx.core.MultiMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest requestAbs(io.vertx.core.http.HttpMethod,java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest request(io.vertx.core.http.HttpMethod,int,java.lang.String,java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest putHeader(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest putHeader(java.lang.String,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void end(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:void end(java.lang.String)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void end(java.lang.String,java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest putHeader(java.lang.CharSequence,java.lang.CharSequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest putHeader(java.lang.CharSequence,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.HttpHeaders:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:void end(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:boolean contentLengthSet()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void prepareHeaders()",
            "io.vertx.core.http.impl.HttpClientResponseImpl:java.util.List cookies()",
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void doMessageReceived(io.vertx.core.http.impl.ServerConnection,io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.vertx.core.http.impl.HttpServerImpl:io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker createHandshaker(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest)",
            "io.vertx.core.http.impl.HttpServerImpl:void sendError(java.lang.CharSequence,io.netty.handler.codec.http.HttpResponseStatus,io.netty.channel.Channel)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.http.impl.ServerConnection,io.netty.handler.codec.http.HttpRequest)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void doSendFile(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:boolean contentLengthSet()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:boolean contentTypeSet()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.HttpHeaders:void <clinit>()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest requestAbs(io.vertx.core.http.HttpMethod,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest requestAbs(io.vertx.core.http.HttpMethod,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest getAbs(java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest postAbs(java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest headAbs(java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest optionsAbs(java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest putAbs(java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest deleteAbs(java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest request(io.vertx.core.http.HttpMethod,int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest request(io.vertx.core.http.HttpMethod,int,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest request(io.vertx.core.http.HttpMethod,java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest request(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest get(int,java.lang.String,java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest post(int,java.lang.String,java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest head(int,java.lang.String,java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest options(int,java.lang.String,java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest put(int,java.lang.String,java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest delete(int,java.lang.String,java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void end(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void end(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:boolean contentLengthSet()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:void end(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void write(io.netty.buffer.ByteBuf,boolean)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void prepareHeaders()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:void writeHead()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void writeHeadWithContent(io.netty.buffer.ByteBuf,boolean)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientResponseImpl:java.util.List cookies()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl$1:java.util.List cookies()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void doMessageReceived(io.vertx.core.http.impl.ServerConnection,io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void doMessageReceived(io.vertx.core.net.impl.ConnectionBase,io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl:io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker createHandshaker(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void handshake(io.netty.handler.codec.http.FullHttpRequest,io.netty.channel.Channel,io.netty.channel.ChannelHandlerContext)",
            "io.vertx.core.http.impl.ServerConnection:io.vertx.core.http.ServerWebSocket upgrade(io.vertx.core.http.HttpServerRequest,io.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl:void sendError(java.lang.CharSequence,io.netty.handler.codec.http.HttpResponseStatus,io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl:io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker createHandshaker(io.netty.channel.Channel,io.netty.handler.codec.http.HttpRequest)",
            "io.vertx.core.http.impl.HttpServerImpl:void access$900(io.vertx.core.http.impl.HttpServerImpl,java.lang.CharSequence,io.netty.handler.codec.http.HttpResponseStatus,io.netty.channel.Channel)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.http.impl.ServerConnection,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerConnection:void processMessage(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void end(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end(java.lang.String)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end(java.lang.String,java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void doSendFile(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.impl.HttpServerResponseImpl sendFile(java.lang.String)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.HttpServerResponse sendFile(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:boolean contentLengthSet()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void doSendFile(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.impl.HttpServerResponseImpl write(io.netty.buffer.ByteBuf,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:boolean contentTypeSet()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl:void doSendFile(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void doSendFile(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.impl.HttpServerResponseImpl write(io.netty.buffer.ByteBuf,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest requestAbs(io.vertx.core.http.HttpMethod,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest getAbs(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest postAbs(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest headAbs(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest optionsAbs(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest putAbs(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest deleteAbs(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest getAbs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest postAbs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest headAbs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest optionsAbs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest putAbs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest deleteAbs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest request(io.vertx.core.http.HttpMethod,int,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest request(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest request(io.vertx.core.http.HttpMethod,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest get(int,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest post(int,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest head(int,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest options(int,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest put(int,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest delete(int,java.lang.String,java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest request(io.vertx.core.http.HttpMethod,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest get(java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest post(java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest head(java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest options(java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest put(java.lang.String)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest delete(java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest request(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest get(int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest get(java.lang.String,java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest post(int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest post(java.lang.String,java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest head(int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest head(java.lang.String,java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest options(int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest options(java.lang.String,java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest put(int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest put(java.lang.String,java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest delete(int,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest delete(java.lang.String,java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void write(io.netty.buffer.ByteBuf,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.impl.HttpClientRequestImpl write(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void end(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void end()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void writeHead()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.impl.HttpClientRequestImpl sendHead()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void connected(io.vertx.core.http.impl.ClientConnection)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void writeHeadWithContent(io.netty.buffer.ByteBuf,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:void connected(io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void write(io.netty.buffer.ByteBuf,boolean)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl$1:java.util.List cookies()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl$1:java.util.List cookies()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void doMessageReceived(io.vertx.core.net.impl.ConnectionBase,io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.VertxHttpHandler:void channelRead(io.vertx.core.net.impl.ConnectionBase,io.vertx.core.impl.ContextImpl,io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.vertx.core.http.impl.VertxHttpHandler:void lambda$channelRead$17(io.vertx.core.net.impl.ConnectionBase,io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void handshake(io.netty.handler.codec.http.FullHttpRequest,io.netty.channel.Channel,io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void doMessageReceived(io.vertx.core.http.impl.ServerConnection,io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.ServerConnection:io.vertx.core.http.ServerWebSocket upgrade(io.vertx.core.http.HttpServerRequest,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerRequestImpl:io.vertx.core.http.ServerWebSocket upgrade()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl:void access$900(io.vertx.core.http.impl.HttpServerImpl,java.lang.CharSequence,io.netty.handler.codec.http.HttpResponseStatus,io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void doMessageReceived(io.vertx.core.http.impl.ServerConnection,io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.ServerConnection:void processMessage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerConnection:void handleMessage(java.lang.Object)",
            "io.vertx.core.http.impl.ServerConnection:void access$700(io.vertx.core.http.impl.ServerConnection,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void end(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void end(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.impl.HttpServerResponseImpl sendFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.HttpServerResponse sendFile(java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.HttpServerResponse sendFile(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.impl.HttpServerResponseImpl write(io.netty.buffer.ByteBuf,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.impl.HttpServerResponseImpl write(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.impl.HttpServerResponseImpl write(java.lang.String,java.lang.String)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.impl.HttpServerResponseImpl write(java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest getAbs(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest postAbs(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest headAbs(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest optionsAbs(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest putAbs(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest deleteAbs(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest request(io.vertx.core.http.HttpMethod,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest request(io.vertx.core.http.HttpMethod,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest get(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest post(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest head(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest options(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest put(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest delete(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest get(int,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest get(java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient getNow(int,java.lang.String,java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest post(int,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest post(java.lang.String,java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest head(int,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest head(java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient headNow(int,java.lang.String,java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest options(int,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest options(java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient optionsNow(int,java.lang.String,java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest put(int,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest put(java.lang.String,java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest delete(int,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest delete(java.lang.String,java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest post(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest head(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest options(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest put(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest delete(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest get(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest post(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest head(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest options(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest put(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest delete(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.impl.HttpClientRequestImpl write(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.impl.HttpClientRequestImpl write(java.lang.String)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.impl.HttpClientRequestImpl write(java.lang.String,java.lang.String)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest write(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.streams.WriteStream write(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void end()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient getNow(int,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient getNow(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient headNow(int,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient headNow(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient optionsNow(int,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient optionsNow(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.impl.HttpClientRequestImpl sendHead()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest sendHead()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void connected(io.vertx.core.http.impl.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connect$81(io.vertx.core.http.impl.ClientConnection)"
        ]
    },
    "io.vertx.core.http.impl.VertxHttpHandler:void channelRead(io.vertx.core.net.impl.ConnectionBase,io.vertx.core.impl.ContextImpl,io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.VertxHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.VertxHttpHandler:void lambda$channelRead$17(io.vertx.core.net.impl.ConnectionBase,io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.VertxHttpHandler$lambda_channelRead_17__137:void run()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerRequestImpl:io.vertx.core.http.ServerWebSocket upgrade()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ServerConnection:void handleMessage(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void doMessageReceived(io.vertx.core.http.impl.ServerConnection,io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void lambda$createConnAndHandle$24(io.vertx.core.http.impl.ServerConnection,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.ServerConnection:void access$700(io.vertx.core.http.impl.ServerConnection,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerConnection$3:void handle()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.HttpServerResponse sendFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.impl.HttpServerResponseImpl write(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.HttpServerResponse write(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.streams.WriteStream write(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.impl.HttpServerResponseImpl write(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.HttpServerResponse write(java.lang.String,java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.impl.HttpServerResponseImpl write(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.HttpServerResponse write(java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void end()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest get(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient getNow(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest post(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest head(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient headNow(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest options(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient optionsNow(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest put(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest delete(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest get(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient getNow(int,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient getNow(java.lang.String,java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest post(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest head(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient headNow(int,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient headNow(java.lang.String,java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest options(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient optionsNow(int,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient optionsNow(java.lang.String,java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest put(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClientRequest delete(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.impl.HttpClientRequestImpl write(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest write(java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.impl.HttpClientRequestImpl write(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest write(java.lang.String,java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest write(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.HttpClientRequest:io.vertx.core.streams.WriteStream write(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.streams.WriteStream write(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.streams.impl.PumpImpl:void lambda$new$222(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient getNow(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient headNow(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient optionsNow(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest sendHead()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connect$81(io.vertx.core.http.impl.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl$lambda_connect_81__125:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.net.impl.VertxHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection$1:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.vertx.core.http.impl.ServerConnection$1:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.VertxHttpHandler$lambda_channelRead_17__137:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void lambda$createConnAndHandle$24(io.vertx.core.http.impl.ServerConnection,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler$lambda_createConnAndHandle_24__157:void run()"
        ]
    },
    "io.vertx.core.http.impl.ServerConnection$3:void handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.VoidHandler:void handle(java.lang.Void)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.HttpServerResponse write(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.HttpServerResponse:io.vertx.core.streams.WriteStream write(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.streams.WriteStream write(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.streams.impl.PumpImpl:void lambda$new$222(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.HttpServerResponse write(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.HttpServerResponse write(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient getNow(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient headNow(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient optionsNow(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest write(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest write(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.HttpClientRequest:io.vertx.core.streams.WriteStream write(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.streams.impl.PumpImpl:void lambda$new$222(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.streams.impl.PumpImpl$lambda_new_222__192:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl$lambda_connect_81__125:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection$1:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ServerConnection$1:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl$lambda_wrapTask_15__4:void run()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl$ServerHandler$lambda_createConnAndHandle_24__157:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.VoidHandler:void handle(java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.VoidHandler:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.HttpServerResponse:io.vertx.core.streams.WriteStream write(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.streams.impl.PumpImpl$lambda_new_222__192:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void lambda$operationComplete$121(io.netty.channel.ChannelFuture)"
        ]
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramServerHandler:void lambda$channelRead$82(io.vertx.core.datagram.impl.DatagramSocketImpl,java.lang.Object)"
        ]
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramSocketImpl$lambda_notifyException_11__19:void run()"
        ]
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramSocketImpl$lambda_listen_10__18:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl$lambda_reverseLookup_304__24:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl$lambda_reverseLookup_303__23:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.BodyReadStream$lambda_handler_162__26:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer$lambda_new_203__52:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(java.lang.Object)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$checkNextTick$202(java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$doReceive$189(io.vertx.core.eventbus.impl.EventBusImpl$HandlerHolder,io.vertx.core.eventbus.Message,io.vertx.core.eventbus.impl.MessageImpl,java.lang.Void)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration$lambda_null_200__58:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration$lambda_setResult_199__55:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration$lambda_doUnregister_198__54:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration$lambda_completionHandler_197__53:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$lambda_sendNoHandlersFailure_188__40:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$lambda_removeSub_187__39:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$lambda_callCompletionHandlerAsync_185__37:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$lambda_convertHandler_183__35:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$lambda_sendOrPub_180__34:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$lambda_closeClusterManager_177__28:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$lambda_null_175__43:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl$1$lambda_failed_288__103:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl$1$lambda_completed_287__102:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl$2$lambda_failed_290__111:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl$2$lambda_done_289__110:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:io.vertx.core.file.AsyncFile drainHandler(io.vertx.core.Handler)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doRead$285(io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doRead$285(io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doRead$285(io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl$lambda_doClose_291__108:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl$lambda_doWrite_284__105:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl$lambda_doWrite_283__104:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler$lambda_handshakeComplete_64__127:void run()"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler$lambda_handleException_63__126:void run()"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue$lambda_createNewConnection_67__136:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue$lambda_checkReuseConnection_66__135:void run()"
        ]
    },
    "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue$lambda_requestEnded_65__134:void run()"
        ]
    },
    "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl$lambda_handler_74__129:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connected$71(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl$lambda_connectionFailed_73__117:void run()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl$lambda_new_68__113:void close(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection:void handleInterestedOpsChanged()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection:void handleClosed()",
            "io.vertx.core.http.impl.ClientConnection:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void timeout(long)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection:void handleResponse(io.netty.handler.codec.http.HttpResponse)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl$lambda_connectHandler_80__123:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl$lambda_exceptionHandler_77__121:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientResponseImpl$1:void handle()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection:void handleResponseChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$2:void handle()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection:void handleResponseEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$3:void handle()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection:void handleClosed()",
            "io.vertx.core.http.impl.ClientConnection:void handleException(java.lang.Throwable)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:io.vertx.core.http.HttpServerFileUpload resume()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void receiveData(io.vertx.core.buffer.Buffer)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void handleComplete()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void lambda$handleComplete$84(io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void lambda$handleComplete$84(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void lambda$streamToFileSystem$83(io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$lambda_executeCloseDone_23__146:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$lambda_null_20__147:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$lambda_listen_19__144:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerConnection:void handleChunk(io.vertx.core.buffer.Buffer)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerConnection:void handleEnd()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.ServerConnection:void handleException(java.lang.Throwable)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerRequestImpl$lambda_bodyHandler_50__141:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerConnection:void handleInterestedOpsChanged()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerConnection:void handleException(java.lang.Throwable)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerConnection:void handleClosed()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl$lambda_prepareHeaders_58__152:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl$lambda_doSendFile_56__150:void run()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl$lambda_null_54__156:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl$lambda_null_53__155:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerConnection:void processMessage(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void lambda$handshake$26(io.netty.handler.codec.http.FullHttpRequest,io.netty.channel.Channel,io.vertx.core.net.impl.HandlerHolder,io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker,io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection:void handleWsFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.ServerConnection:void handleWsFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)"
        ]
    },
    "io.vertx.core.http.impl.WebSocketImplBase:void writable()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection:void handleInterestedOpsChanged()",
            "io.vertx.core.http.impl.ServerConnection:void handleInterestedOpsChanged()"
        ]
    },
    "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerConnection:void handleException(java.lang.Throwable)"
        ]
    },
    "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerConnection:void handleClosed()",
            "io.vertx.core.http.impl.WebSocketImpl:void handleClosed()"
        ]
    },
    "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void lambda$null$172(io.vertx.core.impl.DeploymentManager$VerticleHolder,io.vertx.core.impl.ContextImpl,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl$lambda_executeBlocking_14__3:void run()"
        ]
    },
    "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl$lambda_runCloseHooks_12__2:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager$lambda_reportResult_167__69:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager$lambda_undeployAll_165__66:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager$lambda_undeployAll_164__67:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:void deleteCacheDirAndShutdown(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.FutureImpl:void checkCallHandler()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.FutureImpl:void setHandler(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void complete(java.lang.Object)",
            "io.vertx.core.impl.FutureImpl:void fail(java.lang.Throwable)"
        ]
    },
    "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager$lambda_doDeployVerticle_206__46:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxFactoryImpl:void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:void close()",
            "io.vertx.core.Starter$1:void run()"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl$lambda_deleteCacheDirAndShutdown_219__164:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl$lambda_null_213__167:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl$lambda_null_212__168:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.ServerConnection:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.VertxHandler:void lambda$exceptionCaught$16(io.netty.channel.Channel,io.vertx.core.net.impl.ConnectionBase,java.lang.Throwable)"
        ]
    },
    "io.vertx.core.net.impl.ConnectionBase:void handleClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handleClosed()",
            "io.vertx.core.http.impl.ClientConnection:void handleClosed()",
            "io.vertx.core.http.impl.ServerConnection:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()"
        ]
    },
    "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.ConnectionBase$lambda_null_7__22:void run()"
        ]
    },
    "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetClientImpl:void lambda$failed$104(io.vertx.core.Handler,java.lang.Throwable)"
        ]
    },
    "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetClientImpl$lambda_connected_103__74:void run()"
        ]
    },
    "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetClientImpl$lambda_new_98__72:void close(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler$lambda_connected_36__180:void run()"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetServerImpl$lambda_executeCloseDone_34__174:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetServerImpl$lambda_null_31__175:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetServerImpl$lambda_listen_30__172:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.VertxHandler$handleClosed__15:void run()"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetSocketImpl$1:void handle()",
            "io.vertx.core.net.impl.VertxNetHandler:void lambda$channelRead$27(io.vertx.core.net.impl.NetSocketImpl,io.netty.buffer.ByteBuf)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetSocketImpl:void handleInterestedOpsChanged()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$drainHandler$39(java.lang.Void)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetSocketImpl$lambda_null_43__90:void run()"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetSocketImpl$lambda_sendFile_42__88:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetSocketImpl$lambda_null_40__91:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.parsetools.impl.RecordParserImpl:void handleParsing()"
        ]
    },
    "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.parsetools.impl.RecordParserImpl:void handleParsing()"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.AsynchronousCounter$lambda_compareAndSet_128__187:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.AsynchronousCounter$lambda_getAndAdd_127__186:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.AsynchronousCounter$lambda_addAndGet_126__185:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.AsynchronousCounter$lambda_decrementAndGet_125__184:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.AsynchronousCounter$lambda_getAndIncrement_124__183:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.AsynchronousCounter$lambda_incrementAndGet_123__182:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.AsynchronousCounter$lambda_get_122__181:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter$lambda_timedOut_107__190:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.AsynchronousLock$lambda_lockAquired_105__188:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.SharedDataImpl$lambda_getLocalCounter_278__177:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.SharedDataImpl$lambda_getClusterWideMap_277__176:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.Starter$lambda_createLoggingHandler_281__8:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.ContextImpl$lambda_wrapTask_15__4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ServerWebSocketImpl:void connect()",
            "io.vertx.core.impl.ContextImpl:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.impl.ContextImpl:void executeBlocking(io.vertx.core.impl.Action,io.vertx.core.Handler,boolean,boolean,io.vertx.core.Handler)",
            "io.vertx.core.impl.EventLoopContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.HAManager:void deployHADeployments()",
            "io.vertx.core.impl.MultiThreadedWorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void execute(java.lang.Runnable)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void lambda$new$161()",
            "io.vertx.core.impl.WorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.WorkerContext:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.net.impl.NetServerImpl:void addListener(java.lang.Runnable)",
            "io.vertx.core.net.impl.NetServerImpl:void runListeners()"
        ]
    },
    "io.vertx.core.VoidHandler:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void lambda$operationComplete$121(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener$lambda_operationComplete_121__1:void run()"
        ]
    },
    "io.vertx.core.datagram.impl.DatagramServerHandler:void lambda$channelRead$82(io.vertx.core.datagram.impl.DatagramSocketImpl,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramServerHandler$lambda_channelRead_82__12:void run()"
        ]
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl$lambda_notifyException_11__19:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl$lambda_listen_10__18:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl$lambda_reverseLookup_304__24:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl$lambda_reverseLookup_303__23:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.BodyReadStream$lambda_handler_162__26:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer$lambda_new_203__52:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$checkNextTick$202(java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration$lambda_checkNextTick_202__57:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$doReceive$189(io.vertx.core.eventbus.impl.EventBusImpl$HandlerHolder,io.vertx.core.eventbus.Message,io.vertx.core.eventbus.impl.MessageImpl,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$lambda_doReceive_189__41:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration$lambda_null_200__58:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration$lambda_setResult_199__55:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration$lambda_doUnregister_198__54:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration$lambda_completionHandler_197__53:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$lambda_sendNoHandlersFailure_188__40:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$lambda_removeSub_187__39:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$lambda_callCompletionHandlerAsync_185__37:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$lambda_convertHandler_183__35:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$lambda_sendOrPub_180__34:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$lambda_closeClusterManager_177__28:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$lambda_null_175__43:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$1$lambda_failed_288__103:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$1$lambda_completed_287__102:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$2$lambda_failed_290__111:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$2$lambda_done_289__110:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl:io.vertx.core.file.AsyncFile drainHandler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)",
            "io.vertx.core.file.AsyncFile:io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doRead$285(io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl$lambda_doRead_285__106:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$lambda_doClose_291__108:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$lambda_doWrite_284__105:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$lambda_doWrite_283__104:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler$lambda_handshakeComplete_64__127:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler$lambda_handleException_63__126:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.ConnectionManager$ConnQueue$lambda_createNewConnection_67__136:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.ConnectionManager$ConnQueue$lambda_checkReuseConnection_66__135:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.ConnectionManager$ConnQueue$lambda_requestEnded_65__134:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:io.vertx.core.http.WebSocketStream handler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void connect()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl$lambda_handler_74__129:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:void lambda$connected$71(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl$lambda_connected_71__115:void run()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl$lambda_connectionFailed_73__117:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl$lambda_new_68__113:void close(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection:void handleInterestedOpsChanged()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$drainHandler$76(java.lang.Void)",
            "io.vertx.core.net.impl.VertxHandler$handleInterestedOpsChanged__13:void run()"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection:void handleClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.VertxHandler$handleClosed__15:void run()"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection:void handleException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection:void toWebSocket(java.lang.String,io.vertx.core.MultiMap,io.vertx.core.http.WebsocketVersion,java.lang.String,int,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.VertxHandler:void lambda$exceptionCaught$16(io.netty.channel.Channel,io.vertx.core.net.impl.ConnectionBase,java.lang.Throwable)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void timeout(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleTimeout(long)"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection:void handleResponse(io.netty.handler.codec.http.HttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl$ClientHandler:void doMessageReceived(io.vertx.core.http.impl.ClientConnection,io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl$lambda_connectHandler_80__123:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl$lambda_exceptionHandler_77__121:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientResponseImpl$1:void handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.VoidHandler:void handle(java.lang.Void)"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection:void handleResponseChunk(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl$ClientHandler:void doMessageReceived(io.vertx.core.http.impl.ClientConnection,io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientResponseImpl$2:void handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.VoidHandler:void handle(java.lang.Void)"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection:void handleResponseEnd(io.netty.handler.codec.http.LastHttpContent)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl$ClientHandler:void doMessageReceived(io.vertx.core.http.impl.ClientConnection,io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientResponseImpl$3:void handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.VoidHandler:void handle(java.lang.Void)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerFileUploadImpl:io.vertx.core.http.HttpServerFileUpload resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:io.vertx.core.streams.ReadStream resume()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void lambda$streamToFileSystem$83(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.HttpServerFileUpload:io.vertx.core.streams.ReadStream resume()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerFileUploadImpl:void receiveData(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerRequestImpl$NettyFileUpload:void setContent(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$NettyFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerFileUploadImpl:void handleComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:io.vertx.core.http.HttpServerFileUpload resume()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void complete()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerFileUploadImpl:void lambda$handleComplete$84(io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerFileUploadImpl$lambda_handleComplete_84__139:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerFileUploadImpl:void lambda$streamToFileSystem$83(io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerFileUploadImpl$lambda_streamToFileSystem_83__138:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl$2:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl$lambda_executeCloseDone_23__146:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl$lambda_null_20__147:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl$lambda_listen_19__144:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.ServerConnection:void handleChunk(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerConnection:void processMessage(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.ServerConnection:void handleEnd()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerConnection:void processMessage(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.ServerConnection:void handleException(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void lambda$null$25(io.netty.channel.Channel,io.vertx.core.http.impl.ServerConnection,io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker,io.netty.handler.codec.http.FullHttpRequest)",
            "io.vertx.core.http.impl.ServerConnection:io.vertx.core.http.ServerWebSocket upgrade(io.vertx.core.http.HttpServerRequest,io.netty.handler.codec.http.HttpRequest)",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.VertxHandler:void lambda$exceptionCaught$16(io.netty.channel.Channel,io.vertx.core.net.impl.ConnectionBase,java.lang.Throwable)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerRequestImpl$lambda_bodyHandler_50__141:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.ServerConnection:void handleInterestedOpsChanged()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$drainHandler$51(java.lang.Void)",
            "io.vertx.core.net.impl.VertxHandler$handleInterestedOpsChanged__13:void run()"
        ]
    },
    "io.vertx.core.http.impl.ServerConnection:void handleClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.VertxHandler$handleClosed__15:void run()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl$lambda_prepareHeaders_58__152:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl$lambda_doSendFile_56__150:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ServerWebSocketImpl:void connect()",
            "io.vertx.core.impl.ContextImpl:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.impl.ContextImpl:void executeBlocking(io.vertx.core.impl.Action,io.vertx.core.Handler,boolean,boolean,io.vertx.core.Handler)",
            "io.vertx.core.impl.EventLoopContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.HAManager:void deployHADeployments()",
            "io.vertx.core.impl.MultiThreadedWorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void execute(java.lang.Runnable)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void lambda$new$161()",
            "io.vertx.core.impl.WorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.WorkerContext:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.net.impl.NetServerImpl:void addListener(java.lang.Runnable)",
            "io.vertx.core.net.impl.NetServerImpl:void runListeners()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl$lambda_null_54__156:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl$lambda_null_53__155:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void lambda$handshake$26(io.netty.handler.codec.http.FullHttpRequest,io.netty.channel.Channel,io.vertx.core.net.impl.HandlerHolder,io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker,io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler$lambda_handshake_26__158:void run()"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection:void handleWsFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl$ClientHandler:void doMessageReceived(io.vertx.core.http.impl.ClientConnection,io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.ServerConnection:void handleWsFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerConnection:void processMessage(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.WebSocketImpl:void handleClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection:void handleClosed()"
        ]
    },
    "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void lambda$null$172(io.vertx.core.impl.DeploymentManager$VerticleHolder,io.vertx.core.impl.ContextImpl,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager$DeploymentImpl$lambda_null_172__81:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.ContextImpl$lambda_executeBlocking_14__3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ServerWebSocketImpl:void connect()",
            "io.vertx.core.impl.ContextImpl:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.impl.ContextImpl:void executeBlocking(io.vertx.core.impl.Action,io.vertx.core.Handler,boolean,boolean,io.vertx.core.Handler)",
            "io.vertx.core.impl.EventLoopContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.HAManager:void deployHADeployments()",
            "io.vertx.core.impl.MultiThreadedWorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void execute(java.lang.Runnable)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void lambda$new$161()",
            "io.vertx.core.impl.WorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.WorkerContext:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.net.impl.NetServerImpl:void addListener(java.lang.Runnable)",
            "io.vertx.core.net.impl.NetServerImpl:void runListeners()"
        ]
    },
    "io.vertx.core.impl.ContextImpl$lambda_runCloseHooks_12__2:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager$lambda_reportResult_167__69:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager$lambda_undeployAll_165__66:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager$lambda_undeployAll_164__67:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void deleteCacheDirAndShutdown(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:void lambda$null$216(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$215(java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.FutureImpl:void setHandler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl:void lookup(java.lang.String,io.vertx.core.Handler,int[])",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.impl.ContextImpl:void lambda$null$13(io.vertx.core.Future,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void lambda$doUndeploy$173(io.vertx.core.impl.DeploymentManager$VerticleHolder,io.vertx.core.impl.ContextImpl,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.ContextImpl,java.lang.ClassLoader,io.vertx.core.Handler)",
            "io.vertx.core.impl.DeploymentManager:void lambda$doDeploy$169(io.vertx.core.Verticle,io.vertx.core.impl.ContextImpl,java.lang.String,io.vertx.core.impl.DeploymentManager$DeploymentImpl,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.Verticle[],io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,java.lang.Void)"
        ]
    },
    "io.vertx.core.impl.FutureImpl:void complete(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$setResult$305(java.lang.Object,io.vertx.core.Future)",
            "io.vertx.core.file.impl.AsyncFileImpl:void doClose(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.DeploymentManager:void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.ContextImpl,java.lang.ClassLoader,io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void <init>(java.lang.Throwable)",
            "io.vertx.core.impl.FutureImpl:void <init>(java.lang.Object)",
            "io.vertx.core.impl.FutureImpl:void complete()",
            "io.vertx.core.spi.VerticleFactory:void resolve(java.lang.String,io.vertx.core.DeploymentOptions,java.lang.ClassLoader,io.vertx.core.Future)"
        ]
    },
    "io.vertx.core.impl.FutureImpl:void fail(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl$RetryChannelFutureListener:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$setResult$305(java.lang.Object,io.vertx.core.Future)",
            "io.vertx.core.file.impl.AsyncFileImpl:void doClose(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void lambda$doUndeploy$173(io.vertx.core.impl.DeploymentManager$VerticleHolder,io.vertx.core.impl.ContextImpl,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.ContextImpl,java.lang.ClassLoader,io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void <init>(java.lang.Throwable)",
            "io.vertx.core.impl.FutureImpl:void fail(java.lang.String)"
        ]
    },
    "io.vertx.core.impl.HAManager$lambda_doDeployVerticle_206__46:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.VertxFactoryImpl:void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.Vertx:void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxFactoryImpl:io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)",
            "io.vertx.core.impl.VertxImpl:void <init>()"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.Starter$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ServerWebSocketImpl:void connect()",
            "io.vertx.core.impl.ContextImpl:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.impl.ContextImpl:void executeBlocking(io.vertx.core.impl.Action,io.vertx.core.Handler,boolean,boolean,io.vertx.core.Handler)",
            "io.vertx.core.impl.EventLoopContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.HAManager:void deployHADeployments()",
            "io.vertx.core.impl.MultiThreadedWorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void execute(java.lang.Runnable)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void lambda$new$161()",
            "io.vertx.core.impl.WorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.WorkerContext:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.net.impl.NetServerImpl:void addListener(java.lang.Runnable)",
            "io.vertx.core.net.impl.NetServerImpl:void runListeners()"
        ]
    },
    "io.vertx.core.impl.VertxImpl$lambda_deleteCacheDirAndShutdown_219__164:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.VertxImpl$lambda_null_213__167:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.VertxImpl$lambda_null_212__168:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.net.impl.VertxHandler:void lambda$exceptionCaught$16(io.netty.channel.Channel,io.vertx.core.net.impl.ConnectionBase,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.VertxHandler$lambda_exceptionCaught_16__14:void run()"
        ]
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:void handleClosed()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.VertxHandler$handleClosed__15:void run()"
        ]
    },
    "io.vertx.core.net.impl.ConnectionBase$lambda_null_7__22:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.net.impl.NetClientImpl:void lambda$failed$104(io.vertx.core.Handler,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetClientImpl$lambda_failed_104__75:void run()"
        ]
    },
    "io.vertx.core.net.impl.NetClientImpl$lambda_connected_103__74:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.net.impl.NetClientImpl$lambda_new_98__72:void close(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl$2:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl$ServerHandler$lambda_connected_36__180:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl$lambda_executeCloseDone_34__174:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl$lambda_null_31__175:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl$lambda_listen_30__172:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.net.impl.VertxHandler$handleClosed__15:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl$1:void handle()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.VoidHandler:void handle(java.lang.Void)"
        ]
    },
    "io.vertx.core.net.impl.VertxNetHandler:void lambda$channelRead$27(io.vertx.core.net.impl.NetSocketImpl,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.VertxNetHandler$lambda_channelRead_27__100:void run()"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:void handleInterestedOpsChanged()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.VertxHandler$handleInterestedOpsChanged__13:void run()"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:void lambda$drainHandler$39(java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetSocketImpl$lambda_drainHandler_39__86:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl$lambda_null_43__90:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl$lambda_sendFile_42__88:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl$lambda_null_40__91:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.parsetools.impl.RecordParserImpl:void handleParsing()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.parsetools.impl.RecordParserImpl:void handle(io.vertx.core.buffer.Buffer)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter$lambda_compareAndSet_128__187:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter$lambda_getAndAdd_127__186:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter$lambda_addAndGet_126__185:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter$lambda_decrementAndGet_125__184:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter$lambda_getAndIncrement_124__183:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter$lambda_incrementAndGet_123__182:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter$lambda_get_122__181:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter$lambda_timedOut_107__190:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousLock$lambda_lockAquired_105__188:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.shareddata.impl.SharedDataImpl$lambda_getLocalCounter_278__177:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.shareddata.impl.SharedDataImpl$lambda_getClusterWideMap_277__176:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.Starter$lambda_createLoggingHandler_281__8:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.ServerWebSocketImpl:void connect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerWebSocketImpl:void close()",
            "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.ServerWebSocket writeFrame(io.vertx.core.http.WebSocketFrame)",
            "io.vertx.core.http.impl.ServerWebSocketImpl:void connectNow()"
        ]
    },
    "io.vertx.core.impl.ContextImpl:void executeFromIO(io.vertx.core.impl.ContextTask)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramServerHandler:void channelRead(io.vertx.core.datagram.impl.DatagramSocketImpl,io.vertx.core.impl.ContextImpl,io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void notifyException(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.dns.impl.DnsClientImpl:void setResult(io.vertx.core.Future,java.lang.Object)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void handleException(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void handshakeComplete(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpResponse)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void requestEnded(io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void checkReuseConnection(io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.HttpClientImpl:void connected(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void connectionFailed(io.vertx.core.impl.ContextImpl,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void createConnAndHandle(io.netty.channel.Channel,java.lang.Object,io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker)",
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void handshake(io.netty.handler.codec.http.FullHttpRequest,io.netty.channel.Channel,io.netty.channel.ChannelHandlerContext)",
            "io.vertx.core.http.impl.VertxHttpHandler:void channelRead(io.vertx.core.net.impl.ConnectionBase,io.vertx.core.impl.ContextImpl,io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$addFuture$8(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void connected(io.vertx.core.impl.ContextImpl,io.netty.channel.Channel,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void failed(io.vertx.core.impl.ContextImpl,io.netty.channel.Channel,java.lang.Throwable,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connect$102(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,int,int,java.lang.String,io.netty.channel.ChannelFuture)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void connected(io.netty.channel.Channel,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$upgradeToSsl$44(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.VertxHandler:void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)",
            "io.vertx.core.net.impl.VertxHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.vertx.core.net.impl.VertxHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.vertx.core.net.impl.VertxHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)",
            "io.vertx.core.net.impl.VertxHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.vertx.core.net.impl.VertxNetHandler:void channelRead(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.impl.ContextImpl,io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.ContextImpl:void executeBlocking(io.vertx.core.impl.Action,io.vertx.core.Handler,boolean,boolean,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void executeBlocking(io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.EventLoopContext:void executeAsync(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void runOnContext(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.HAManager:void deployHADeployments()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager:void checkHADeployments()"
        ]
    },
    "io.vertx.core.impl.MultiThreadedWorkerContext:void executeAsync(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void runOnContext(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void executeBlocking(io.vertx.core.impl.Action,io.vertx.core.Handler,boolean,boolean,io.vertx.core.Handler)",
            "io.vertx.core.impl.MultiThreadedWorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void execute(java.lang.Runnable)",
            "io.vertx.core.impl.WorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.WorkerContext:void executeFromIO(io.vertx.core.impl.ContextTask)"
        ]
    },
    "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void lambda$new$161()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor$lambda_new_161__160:void run()"
        ]
    },
    "io.vertx.core.impl.WorkerContext:void executeAsync(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void runOnContext(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.WorkerContext:void executeFromIO(io.vertx.core.impl.ContextTask)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void operationComplete(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramServerHandler:void channelRead(io.vertx.core.datagram.impl.DatagramSocketImpl,io.vertx.core.impl.ContextImpl,io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void notifyException(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.dns.impl.DnsClientImpl:void setResult(io.vertx.core.Future,java.lang.Object)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void handleException(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void handshakeComplete(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpResponse)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void requestEnded(io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void checkReuseConnection(io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.HttpClientImpl:void connected(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void connectionFailed(io.vertx.core.impl.ContextImpl,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void createConnAndHandle(io.netty.channel.Channel,java.lang.Object,io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker)",
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void handshake(io.netty.handler.codec.http.FullHttpRequest,io.netty.channel.Channel,io.netty.channel.ChannelHandlerContext)",
            "io.vertx.core.http.impl.VertxHttpHandler:void channelRead(io.vertx.core.net.impl.ConnectionBase,io.vertx.core.impl.ContextImpl,io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$addFuture$8(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void connected(io.vertx.core.impl.ContextImpl,io.netty.channel.Channel,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void failed(io.vertx.core.impl.ContextImpl,io.netty.channel.Channel,java.lang.Throwable,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connect$102(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,int,int,java.lang.String,io.netty.channel.ChannelFuture)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void connected(io.netty.channel.Channel,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$upgradeToSsl$44(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.VertxHandler:void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)",
            "io.vertx.core.net.impl.VertxHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.vertx.core.net.impl.VertxHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.vertx.core.net.impl.VertxHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)",
            "io.vertx.core.net.impl.VertxHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.vertx.core.net.impl.VertxNetHandler:void channelRead(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.impl.ContextImpl,io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl:void addListener(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetServerImpl:io.vertx.core.net.NetServer listen(int,java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl:void runListeners()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$28(io.netty.util.concurrent.Future)"
        ]
    },
    "io.vertx.core.datagram.impl.DatagramChannelFutureListener$lambda_operationComplete_121__1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.datagram.impl.DatagramServerHandler$lambda_channelRead_82__12:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration$lambda_checkNextTick_202__57:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$lambda_doReceive_189__41:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl:io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.streams.impl.PumpImpl:io.vertx.core.streams.impl.PumpImpl stop()",
            "io.vertx.core.streams.impl.PumpImpl:void lambda$new$222(java.lang.Object)"
        ]
    },
    "io.vertx.core.file.AsyncFile:io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.AsyncFileImpl$lambda_doRead_285__106:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:io.vertx.core.http.WebSocketStream handler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(int,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(int,java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(int,java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.http.WebsocketVersion,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(int,java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.http.WebsocketVersion,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.WebSocketStream:io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void connect()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.impl.HttpClientRequestImpl sendHead()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void write(io.netty.buffer.ByteBuf,boolean)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connect$81(io.vertx.core.http.impl.ClientConnection)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl$lambda_connected_71__115:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$drainHandler$76(java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl$lambda_drainHandler_76__120:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.net.impl.VertxHandler$handleInterestedOpsChanged__13:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection:void toWebSocket(java.lang.String,io.vertx.core.MultiMap,io.vertx.core.http.WebsocketVersion,java.lang.String,int,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$75(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void handleTimeout(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$setTimeout$78(long,java.lang.Long)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl$ClientHandler:void doMessageReceived(io.vertx.core.http.impl.ClientConnection,io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl$ClientHandler:void doMessageReceived(io.vertx.core.net.impl.ConnectionBase,io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerFileUploadImpl:io.vertx.core.streams.ReadStream resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.BodyReadStream:io.vertx.core.streams.ReadStream resume()",
            "io.vertx.core.streams.impl.PumpImpl:void lambda$new$221(java.lang.Void)"
        ]
    },
    "io.vertx.core.http.HttpServerFileUpload:io.vertx.core.streams.ReadStream resume()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerRequestImpl$NettyFileUpload:void setContent(io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerRequestImpl$NettyFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerFileUploadImpl:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerRequestImpl$NettyFileUpload:void setContent(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$NettyFileUpload:void addContent(io.netty.buffer.ByteBuf,boolean)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerFileUploadImpl$lambda_handleComplete_84__139:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerFileUploadImpl$lambda_streamToFileSystem_83__138:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void lambda$null$25(io.netty.channel.Channel,io.vertx.core.http.impl.ServerConnection,io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker,io.netty.handler.codec.http.FullHttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler$lambda_null_25__159:void run()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$drainHandler$51(java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl$lambda_drainHandler_51__148:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl$ServerHandler$lambda_handshake_26__158:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager$DeploymentImpl$lambda_null_172__81:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void lambda$null$216(io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl$lambda_null_216__165:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void lambda$null$215(java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl$lambda_null_215__166:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl:void lookup(java.lang.String,io.vertx.core.Handler,int[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient lookup4(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient lookup6(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient lookup(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient resolveA(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient resolveCNAME(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient resolveMX(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient resolveTXT(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient resolvePTR(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient resolveAAAA(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient resolveNS(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient resolveSRV(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.ContextImpl:void lambda$null$13(io.vertx.core.Future,io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl$lambda_null_13__5:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void lambda$doUndeploy$173(io.vertx.core.impl.DeploymentManager$VerticleHolder,io.vertx.core.impl.ContextImpl,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager$DeploymentImpl$lambda_doUndeploy_173__79:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.ContextImpl,java.lang.ClassLoader,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager:void doDeployVerticle(java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.ContextImpl,java.lang.ClassLoader,io.vertx.core.Handler)",
            "io.vertx.core.impl.DeploymentManager:void lambda$doDeployVerticle$163(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,java.lang.String,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.ContextImpl,java.util.Iterator,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void lambda$doDeploy$169(io.vertx.core.Verticle,io.vertx.core.impl.ContextImpl,java.lang.String,io.vertx.core.impl.DeploymentManager$DeploymentImpl,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.Verticle[],io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager$lambda_doDeploy_169__70:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl:void lambda$setResult$305(java.lang.Object,io.vertx.core.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl$lambda_setResult_305__25:void run()"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl:void doClose(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:void closeInternal(io.vertx.core.Handler)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$closeInternal$292(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.FutureImpl:void <init>(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.FutureFactoryImpl:io.vertx.core.Future completedFuture(java.lang.Throwable)",
            "io.vertx.core.impl.FutureImpl:void <init>(java.lang.String,boolean)"
        ]
    },
    "io.vertx.core.impl.FutureImpl:void <init>(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.FutureFactoryImpl:io.vertx.core.Future completedFuture()",
            "io.vertx.core.impl.FutureFactoryImpl:io.vertx.core.Future completedFuture(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.FutureImpl:void complete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.AbstractVerticle:void start(io.vertx.core.Future)",
            "io.vertx.core.AbstractVerticle:void stop(io.vertx.core.Future)"
        ]
    },
    "io.vertx.core.spi.VerticleFactory:void resolve(java.lang.String,io.vertx.core.DeploymentOptions,java.lang.ClassLoader,io.vertx.core.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.dns.impl.DnsClientImpl$RetryChannelFutureListener:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl$RetryChannelFutureListener:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.vertx.core.impl.FutureImpl:void fail(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.Vertx:void clusteredVertx(io.vertx.core.VertxOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.Starter:io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)"
        ]
    },
    "io.vertx.core.impl.VertxFactoryImpl:io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.Vertx:io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxFactoryImpl:io.vertx.core.Vertx vertx()"
        ]
    },
    "io.vertx.core.net.impl.VertxHandler$lambda_exceptionCaught_16__14:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.net.impl.NetClientImpl$lambda_failed_104__75:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.net.impl.VertxNetHandler$lambda_channelRead_27__100:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl$lambda_drainHandler_39__86:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.parsetools.impl.RecordParserImpl:void handle(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.parsetools.impl.RecordParserImpl:void handle(java.lang.Object)",
            "io.vertx.core.parsetools.RecordParser:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.ServerWebSocketImpl:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.ServerWebSocket writeFrame(io.vertx.core.http.WebSocketFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.ServerWebSocket write(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.ServerWebSocket writeFinalTextFrame(java.lang.String)",
            "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.ServerWebSocket writeFinalBinaryFrame(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.WebSocketBase writeFrame(io.vertx.core.http.WebSocketFrame)",
            "io.vertx.core.http.ServerWebSocket:io.vertx.core.http.WebSocketBase writeFrame(io.vertx.core.http.WebSocketFrame)"
        ]
    },
    "io.vertx.core.http.impl.ServerWebSocketImpl:void connectNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void lambda$handshake$26(io.netty.handler.codec.http.FullHttpRequest,io.netty.channel.Channel,io.vertx.core.net.impl.HandlerHolder,io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker,io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void operationComplete(io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void operationComplete(io.netty.util.concurrent.Future)"
        ]
    },
    "io.vertx.core.datagram.impl.DatagramServerHandler:void channelRead(io.vertx.core.datagram.impl.DatagramSocketImpl,io.vertx.core.impl.ContextImpl,io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramServerHandler:void channelRead(io.vertx.core.net.impl.ConnectionBase,io.vertx.core.impl.ContextImpl,io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:void notifyException(io.vertx.core.Handler,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket listenMulticastGroup(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket listenMulticastGroup(java.lang.String,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket unlistenMulticastGroup(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket unlistenMulticastGroup(java.lang.String,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket blockMulticastGroup(java.lang.String,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket blockMulticastGroup(java.lang.String,java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl:void setResult(io.vertx.core.Future,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl:void access$000(io.vertx.core.dns.impl.DnsClientImpl,io.vertx.core.Future,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void handleException(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void handshakeComplete(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void requestEnded(io.vertx.core.http.impl.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection:void endRequest()"
        ]
    },
    "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void checkReuseConnection(io.vertx.core.http.impl.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void responseEnded(io.vertx.core.http.impl.ClientConnection)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:void connected(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$internalConnect$70(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.ChannelFuture)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$null$69(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.util.concurrent.Future)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:void connectionFailed(io.vertx.core.impl.ContextImpl,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable,io.vertx.core.http.impl.ConnectionLifeCycleListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$internalConnect$70(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.ChannelFuture)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$null$69(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.util.concurrent.Future)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void createConnAndHandle(io.netty.channel.Channel,java.lang.Object,io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void doMessageReceived(io.vertx.core.http.impl.ServerConnection,io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void handshake(io.netty.handler.codec.http.FullHttpRequest,io.netty.channel.Channel,io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.vertx.core.net.impl.ConnectionBase:void lambda$addFuture$8(io.vertx.core.Handler,io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.net.impl.NetClientImpl:void connected(io.vertx.core.impl.ContextImpl,io.netty.channel.Channel,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connect$102(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,int,int,java.lang.String,io.netty.channel.ChannelFuture)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$null$99(io.vertx.core.impl.ContextImpl,io.netty.channel.Channel,io.vertx.core.Handler,io.netty.util.concurrent.Future)"
        ]
    },
    "io.vertx.core.net.impl.NetClientImpl:void failed(io.vertx.core.impl.ContextImpl,io.netty.channel.Channel,java.lang.Throwable,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connect$102(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,int,int,java.lang.String,io.netty.channel.ChannelFuture)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$null$99(io.vertx.core.impl.ContextImpl,io.netty.channel.Channel,io.vertx.core.Handler,io.netty.util.concurrent.Future)"
        ]
    },
    "io.vertx.core.net.impl.NetClientImpl:void lambda$connect$102(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,int,int,java.lang.String,io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void connected(io.netty.channel.Channel,io.vertx.core.net.impl.HandlerHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$channelActive$35(io.netty.channel.Channel,io.vertx.core.net.impl.HandlerHolder,io.netty.util.concurrent.Future)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:void lambda$upgradeToSsl$44(io.vertx.core.Handler,io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.net.impl.VertxHandler:void channelWritabilityChanged(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.net.impl.VertxHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection$1:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "io.vertx.core.http.impl.ServerConnection$1:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.vertx.core.net.impl.VertxHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection$1:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "io.vertx.core.http.impl.ServerConnection$1:void channelInactive(io.netty.channel.ChannelHandlerContext)"
        ]
    },
    "io.vertx.core.net.impl.VertxHandler:void channelReadComplete(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.net.impl.VertxNetHandler:void channelRead(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.impl.ContextImpl,io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.VertxNetHandler:void channelRead(io.vertx.core.net.impl.ConnectionBase,io.vertx.core.impl.ContextImpl,io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.ContextImpl:void executeBlocking(io.vertx.core.impl.Action,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:void doFlush(io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl$BlockingAction:void run()",
            "io.vertx.core.impl.VertxImpl:void executeBlockingInternal(io.vertx.core.impl.Action,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.ContextImpl:void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.ContextImpl:void runOnContext(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient reverseLookup(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$endHandler$201(io.vertx.core.Context,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void sendOrPub(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void doReceive(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.EventBusImpl$HandlerHolder,boolean)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void completed(java.lang.Integer,java.lang.Object)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void failed(java.lang.Throwable,java.lang.Object)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void done()",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void failed(java.lang.Throwable,java.lang.Object)",
            "io.vertx.core.http.impl.HttpClientRequestImpl$1:io.vertx.core.net.NetSocket netSocket()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest drainHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerImpl:void executeCloseDone(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.lang.Exception)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$21(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.HttpServerResponse drainHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$55(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void doUndeploy(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler)",
            "io.vertx.core.impl.DeploymentManager:void undeployAll(io.vertx.core.Handler)",
            "io.vertx.core.impl.DeploymentManager:void reportResult(io.vertx.core.Context,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void doDeploy(java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void lambda$new$220(io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.impl.VertxImpl:void runOnContext(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl:void executeCloseDone(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.lang.Exception)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$32(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:io.vertx.core.net.NetSocket resume()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void get(io.vertx.core.Handler)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void incrementAndGet(io.vertx.core.Handler)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void getAndIncrement(io.vertx.core.Handler)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void decrementAndGet(io.vertx.core.Handler)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void addAndGet(long,io.vertx.core.Handler)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void getAndAdd(long,io.vertx.core.Handler)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void compareAndSet(long,long,io.vertx.core.Handler)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void timedOut()",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lockAquired(io.vertx.core.Context,io.vertx.core.Handler)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void getLocalCounter(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.HAManager:void checkHADeployments()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager:void lambda$new$204(java.lang.Long)"
        ]
    },
    "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor$lambda_new_161__160:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ServerWebSocketImpl:void connect()",
            "io.vertx.core.impl.ContextImpl:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.impl.ContextImpl:void executeBlocking(io.vertx.core.impl.Action,io.vertx.core.Handler,boolean,boolean,io.vertx.core.Handler)",
            "io.vertx.core.impl.EventLoopContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.HAManager:void deployHADeployments()",
            "io.vertx.core.impl.MultiThreadedWorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void execute(java.lang.Runnable)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void lambda$new$161()",
            "io.vertx.core.impl.WorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.WorkerContext:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.net.impl.NetServerImpl:void addListener(java.lang.Runnable)",
            "io.vertx.core.net.impl.NetServerImpl:void runListeners()"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl:io.vertx.core.net.NetServer listen(int,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetServerImpl:io.vertx.core.net.NetServer listen(int,java.lang.String)",
            "io.vertx.core.net.impl.NetServerImpl:io.vertx.core.net.NetServer listen(int)",
            "io.vertx.core.net.impl.NetServerImpl:io.vertx.core.net.NetServer listen(int,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl:io.vertx.core.net.NetServer listen(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$28(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.streams.impl.PumpImpl:io.vertx.core.streams.impl.PumpImpl stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.streams.impl.PumpImpl:io.vertx.core.streams.Pump stop()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.BodyReadStream:io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)",
            "io.vertx.core.streams.impl.PumpImpl:io.vertx.core.streams.impl.PumpImpl start()",
            "io.vertx.core.streams.impl.PumpImpl:io.vertx.core.streams.impl.PumpImpl stop()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(int,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(int,java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(java.lang.String,io.vertx.core.MultiMap,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(int,java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.http.WebsocketVersion,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.http.WebsocketVersion,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(java.lang.String,io.vertx.core.MultiMap,io.vertx.core.http.WebsocketVersion,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(int,java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.http.WebsocketVersion,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$75(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.http.WebsocketVersion,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(java.lang.String,io.vertx.core.MultiMap,io.vertx.core.http.WebsocketVersion,java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.WebSocketStream:io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl$lambda_drainHandler_76__120:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$75(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl$lambda_handler_75__128:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$setTimeout$78(long,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl$lambda_setTimeout_78__122:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl$ClientHandler:void doMessageReceived(io.vertx.core.net.impl.ConnectionBase,io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.VertxHttpHandler:void channelRead(io.vertx.core.net.impl.ConnectionBase,io.vertx.core.impl.ContextImpl,io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "io.vertx.core.http.impl.VertxHttpHandler:void lambda$channelRead$17(io.vertx.core.net.impl.ConnectionBase,io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.BodyReadStream:io.vertx.core.streams.ReadStream resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.BodyReadStream:io.vertx.core.streams.ReadStream resume()",
            "io.vertx.core.streams.impl.PumpImpl:void lambda$new$221(java.lang.Void)"
        ]
    },
    "io.vertx.core.streams.impl.PumpImpl:void lambda$new$221(java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.streams.impl.PumpImpl$lambda_new_221__191:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl$ServerHandler$lambda_null_25__159:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ServerWebSocketImpl:void connect()",
            "io.vertx.core.impl.ContextImpl:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.impl.ContextImpl:void executeBlocking(io.vertx.core.impl.Action,io.vertx.core.Handler,boolean,boolean,io.vertx.core.Handler)",
            "io.vertx.core.impl.EventLoopContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.HAManager:void deployHADeployments()",
            "io.vertx.core.impl.MultiThreadedWorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void execute(java.lang.Runnable)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void lambda$new$161()",
            "io.vertx.core.impl.WorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.WorkerContext:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.net.impl.NetServerImpl:void addListener(java.lang.Runnable)",
            "io.vertx.core.net.impl.NetServerImpl:void runListeners()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl$lambda_drainHandler_51__148:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.VertxImpl$lambda_null_216__165:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.VertxImpl$lambda_null_215__166:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient lookup4(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient lookup6(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient lookup(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient resolveA(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient resolveCNAME(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient resolveMX(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient resolveTXT(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient resolvePTR(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient reverseLookup(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient resolveAAAA(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient resolveNS(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient resolveSRV(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.impl.ContextImpl$lambda_null_13__5:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager$DeploymentImpl$lambda_doUndeploy_173__79:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void doDeployVerticle(java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.ContextImpl,java.lang.ClassLoader,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager:void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void lambda$doDeployVerticle$163(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,java.lang.String,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.ContextImpl,java.util.Iterator,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_163__65:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager$lambda_doDeploy_169__70:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl$lambda_setResult_305__25:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl:void closeInternal(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:void close()",
            "io.vertx.core.file.impl.AsyncFileImpl:void close(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl:void lambda$closeInternal$292(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl$lambda_closeInternal_292__109:void run()"
        ]
    },
    "io.vertx.core.impl.FutureFactoryImpl:io.vertx.core.Future completedFuture(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.Future:io.vertx.core.Future failedFuture(java.lang.Throwable)"
        ]
    },
    "io.vertx.core.impl.FutureImpl:void <init>(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.FutureFactoryImpl:io.vertx.core.Future completedFuture(java.lang.String,boolean)"
        ]
    },
    "io.vertx.core.impl.FutureFactoryImpl:io.vertx.core.Future completedFuture()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.Future:io.vertx.core.Future succeededFuture()"
        ]
    },
    "io.vertx.core.impl.FutureFactoryImpl:io.vertx.core.Future completedFuture(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.Future:io.vertx.core.Future succeededFuture(java.lang.Object)"
        ]
    },
    "io.vertx.core.AbstractVerticle:void start(io.vertx.core.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.AbstractVerticle:void stop(io.vertx.core.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.dns.impl.DnsClientImpl$RetryChannelFutureListener:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.Starter:io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.Starter:void runBare(io.vertx.core.impl.Args)",
            "io.vertx.core.Starter:void runVerticle(java.lang.String,io.vertx.core.impl.Args)"
        ]
    },
    "io.vertx.core.Vertx:io.vertx.core.Vertx vertx(io.vertx.core.VertxOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.Starter:io.vertx.core.Vertx startVertx(boolean,boolean,io.vertx.core.impl.Args)"
        ]
    },
    "io.vertx.core.impl.VertxFactoryImpl:io.vertx.core.Vertx vertx()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.Vertx:io.vertx.core.Vertx vertx()"
        ]
    },
    "io.vertx.core.parsetools.impl.RecordParserImpl:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.parsetools.RecordParser:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.ServerWebSocket write(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.WebSocketBase write(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.streams.WriteStream write(java.lang.Object)",
            "io.vertx.core.http.ServerWebSocket:io.vertx.core.http.WebSocketBase write(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.ServerWebSocket:io.vertx.core.streams.WriteStream write(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.ServerWebSocket writeFinalTextFrame(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.WebSocketBase writeFinalTextFrame(java.lang.String)",
            "io.vertx.core.http.ServerWebSocket:io.vertx.core.http.WebSocketBase writeFinalTextFrame(java.lang.String)"
        ]
    },
    "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.ServerWebSocket writeFinalBinaryFrame(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.WebSocketBase writeFinalBinaryFrame(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.ServerWebSocket:io.vertx.core.http.WebSocketBase writeFinalBinaryFrame(io.vertx.core.buffer.Buffer)"
        ]
    },
    "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.WebSocketBase writeFrame(io.vertx.core.http.WebSocketFrame)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.WebSocketImplBase:void writePartialMessage(io.vertx.core.buffer.Buffer,int)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writeBinaryFrameInternal(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writeTextFrameInternal(java.lang.String)"
        ]
    },
    "io.vertx.core.http.ServerWebSocket:io.vertx.core.http.WebSocketBase writeFrame(io.vertx.core.http.WebSocketFrame)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void operationComplete(io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.datagram.impl.DatagramServerHandler:void channelRead(io.vertx.core.net.impl.ConnectionBase,io.vertx.core.impl.ContextImpl,io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.VertxHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket listenMulticastGroup(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket listenMulticastGroup(java.lang.String,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket unlistenMulticastGroup(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket unlistenMulticastGroup(java.lang.String,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket blockMulticastGroup(java.lang.String,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.datagram.impl.DatagramSocketImpl:io.vertx.core.datagram.DatagramSocket blockMulticastGroup(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.dns.impl.DnsClientImpl:void access$000(io.vertx.core.dns.impl.DnsClientImpl,io.vertx.core.Future,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl$5$1$1:void channelRead0(io.netty.channel.ChannelHandlerContext,io.vertx.core.dns.impl.netty.DnsResponse)",
            "io.vertx.core.dns.impl.DnsClientImpl$5$1$1:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ClientConnection:void endRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:void connected(io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void write(io.netty.buffer.ByteBuf,boolean)"
        ]
    },
    "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void responseEnded(io.vertx.core.http.impl.ClientConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection:void handleResponseEnd(io.netty.handler.codec.http.LastHttpContent)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:void lambda$internalConnect$70(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:void lambda$null$69(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.net.impl.NetClientImpl:void lambda$null$99(io.vertx.core.impl.ContextImpl,io.netty.channel.Channel,io.vertx.core.Handler,io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$channelActive$35(io.netty.channel.Channel,io.vertx.core.net.impl.HandlerHolder,io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ClientConnection$1:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ServerConnection$1:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ClientConnection$1:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ServerConnection$1:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.net.impl.VertxNetHandler:void channelRead(io.vertx.core.net.impl.ConnectionBase,io.vertx.core.impl.ContextImpl,io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.VertxHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl:void doFlush(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:io.vertx.core.file.AsyncFile flush()",
            "io.vertx.core.file.impl.AsyncFileImpl:io.vertx.core.file.AsyncFile flush(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.file.impl.FileSystemImpl$BlockingAction:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem copy(java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem copyRecursive(java.lang.String,java.lang.String,boolean,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem move(java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem truncate(java.lang.String,long,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem chmod(java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem chmodRecursive(java.lang.String,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem chown(java.lang.String,java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem props(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem lprops(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem link(java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem symlink(java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem unlink(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem readSymlink(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem delete(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem deleteRecursive(java.lang.String,boolean,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem mkdir(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem mkdirs(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem mkdir(java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem mkdirs(java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem readDir(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem readDir(java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem readFile(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem writeFile(java.lang.String,io.vertx.core.buffer.Buffer,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem open(java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem createFile(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem createFile(java.lang.String,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem exists(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem fsProps(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void executeBlockingInternal(io.vertx.core.impl.Action,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager:void lambda$checkQuorumWhenAdded$208(long,java.lang.String,java.lang.Long)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void executeBlocking(io.vertx.core.Handler,boolean,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl:io.vertx.core.dns.DnsClient reverseLookup(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$endHandler$201(io.vertx.core.Context,io.vertx.core.Handler,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration$lambda_endHandler_201__56:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void sendOrPub(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus publish(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void sendReply(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void doReceive(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.impl.EventBusImpl$HandlerHolder,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void receiveMessage(io.vertx.core.eventbus.impl.MessageImpl,long,io.vertx.core.Handler,io.vertx.core.Handler,boolean)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$1:void completed(java.lang.Integer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl$1:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$1:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.AsyncFileImpl$2:void done()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl$2:void completed(java.lang.Integer,java.lang.Object)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$2:void failed(java.lang.Throwable,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl$1:io.vertx.core.net.NetSocket netSocket()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.http.HttpClientRequest drainHandler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.HttpClientRequest:io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl:void executeCloseDone(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$actualClose$22(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,io.netty.channel.group.ChannelGroupFuture,io.netty.util.concurrent.Future)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$21(io.vertx.core.Handler,io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.http.HttpServerResponse drainHandler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.HttpServerResponse:io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$55(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void doUndeploy(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void undeploy(io.vertx.core.Handler)",
            "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void doUndeploy(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler)",
            "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void lambda$doUndeploy$170(io.vertx.core.impl.Deployment,io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void undeployAll(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void reportResult(io.vertx.core.Context,io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager:void reportFailure(java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)",
            "io.vertx.core.impl.DeploymentManager:void reportSuccess(java.lang.Object,io.vertx.core.Context,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void doDeploy(java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.lang.ClassLoader,io.vertx.core.Verticle[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager:void deployVerticle(io.vertx.core.Verticle,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.DeploymentManager:void lambda$doDeployVerticle$163(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,java.lang.String,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.ContextImpl,java.util.Iterator,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void lambda$new$220(io.vertx.core.impl.ContextImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler$lambda_new_220__178:void run()"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void runOnContext(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void completionHandler(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void setResult(io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void checkNextTick()",
            "io.vertx.core.eventbus.impl.EventBusImpl:void closeClusterManager(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void callCompletionHandlerAsync(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void sendNoHandlersFailure(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$176(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void doClose(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void doResume()",
            "io.vertx.core.http.impl.HttpServerImpl:io.vertx.core.http.HttpServer listen(int,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.ServerConnection:void checkNextTick()",
            "io.vertx.core.impl.HAManager:void callFailoverCompleteHandler(io.vertx.core.impl.FailoverCompleteHandler,java.lang.String,io.vertx.core.json.JsonObject,boolean)",
            "io.vertx.core.net.impl.NetServerImpl:io.vertx.core.net.NetServer listen(int,java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:io.vertx.core.net.NetSocket drainHandler(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:io.vertx.core.net.NetSocket sendFile(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$41(io.netty.channel.ChannelFuture,io.vertx.core.Handler,io.netty.util.concurrent.Future)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl:void executeCloseDone(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetServerImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$actualClose$33(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,io.netty.channel.group.ChannelGroupFuture,io.netty.util.concurrent.Future)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$32(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetServerImpl$lambda_listen_32__171:void run()"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:io.vertx.core.net.NetSocket resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl$1:void lambda$netSocket$79(io.vertx.core.net.NetSocket,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:io.vertx.core.streams.ReadStream resume()",
            "io.vertx.core.net.NetSocket:io.vertx.core.streams.ReadStream resume()"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter:void get(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter:void incrementAndGet(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter:void getAndIncrement(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter:void decrementAndGet(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter:void addAndGet(long,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter:void getAndAdd(long,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.shareddata.impl.AsynchronousCounter:void compareAndSet(long,long,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void timedOut()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$new$106(java.lang.Long)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousLock:void lockAquired(io.vertx.core.Context,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.AsynchronousLock:void doAcquire(io.vertx.core.Context,long,io.vertx.core.Handler)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void access$000(io.vertx.core.shareddata.impl.AsynchronousLock,io.vertx.core.Context,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.shareddata.impl.SharedDataImpl:void getLocalCounter(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.SharedDataImpl:void getCounter(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.HAManager:void lambda$new$204(java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager$lambda_new_204__44:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl:io.vertx.core.net.NetServer listen(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.net.impl.NetServerImpl:io.vertx.core.net.NetServer listen(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.net.impl.NetServerImpl:io.vertx.core.net.NetServer listen(int,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.net.impl.NetServerImpl:io.vertx.core.net.NetServer listen(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl:io.vertx.core.net.NetServer listen()"
        ]
    },
    "io.vertx.core.streams.impl.PumpImpl:io.vertx.core.streams.Pump stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.BodyReadStream:io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.BodyReadStream:io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)",
            "io.vertx.core.streams.impl.PumpImpl:io.vertx.core.streams.impl.PumpImpl start()",
            "io.vertx.core.streams.impl.PumpImpl:io.vertx.core.streams.impl.PumpImpl stop()"
        ]
    },
    "io.vertx.core.streams.impl.PumpImpl:io.vertx.core.streams.impl.PumpImpl start()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.streams.impl.PumpImpl:io.vertx.core.streams.Pump start()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(java.lang.String,io.vertx.core.MultiMap,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.http.WebsocketVersion,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(java.lang.String,io.vertx.core.MultiMap,io.vertx.core.http.WebsocketVersion,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.http.WebsocketVersion,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl:io.vertx.core.http.HttpClient websocket(java.lang.String,io.vertx.core.MultiMap,io.vertx.core.http.WebsocketVersion,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl$lambda_handler_75__128:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl$lambda_setTimeout_78__122:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.streams.impl.PumpImpl$lambda_new_221__191:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager:void lambda$doDeployVerticle$163(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.spi.VerticleFactory,java.lang.ClassLoader,java.lang.String,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.ContextImpl,java.util.Iterator,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.HAManager:void doDeployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager$lambda_doDeployVerticle_163__65:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.AsyncFileImpl:void close(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void handleComplete()"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$lambda_closeInternal_292__109:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ServerWebSocketImpl:void connect()",
            "io.vertx.core.impl.ContextImpl:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.impl.ContextImpl:void executeBlocking(io.vertx.core.impl.Action,io.vertx.core.Handler,boolean,boolean,io.vertx.core.Handler)",
            "io.vertx.core.impl.EventLoopContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.HAManager:void deployHADeployments()",
            "io.vertx.core.impl.MultiThreadedWorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void execute(java.lang.Runnable)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void lambda$new$161()",
            "io.vertx.core.impl.WorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.WorkerContext:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.net.impl.NetServerImpl:void addListener(java.lang.Runnable)",
            "io.vertx.core.net.impl.NetServerImpl:void runListeners()"
        ]
    },
    "io.vertx.core.Future:io.vertx.core.Future failedFuture(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$21(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$55(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void reportFailure(java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$32(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$41(io.netty.channel.ChannelFuture,io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.FutureFactoryImpl:io.vertx.core.Future completedFuture(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.Future:io.vertx.core.Future failedFuture(java.lang.String)"
        ]
    },
    "io.vertx.core.Future:io.vertx.core.Future succeededFuture()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void registerHandler(java.lang.String,io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration,boolean,boolean,long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$55(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$41(io.netty.channel.ChannelFuture,io.vertx.core.Handler,io.netty.util.concurrent.Future)"
        ]
    },
    "io.vertx.core.Future:io.vertx.core.Future succeededFuture(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$21(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.impl.DeploymentManager:void reportSuccess(java.lang.Object,io.vertx.core.Context,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$32(io.vertx.core.Handler)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.Starter:void runBare(io.vertx.core.impl.Args)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.Starter:void run(io.vertx.core.impl.Args,java.lang.String[])"
        ]
    },
    "io.vertx.core.Starter:void runVerticle(java.lang.String,io.vertx.core.impl.Args)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.Starter:void run(io.vertx.core.impl.Args,java.lang.String[])"
        ]
    },
    "io.vertx.core.Vertx:io.vertx.core.Vertx vertx()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.WebSocketBase write(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.WebSocketBase:io.vertx.core.streams.WriteStream write(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.streams.WriteStream write(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.streams.impl.PumpImpl:void lambda$new$222(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.ServerWebSocket:io.vertx.core.http.WebSocketBase write(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.ServerWebSocket:io.vertx.core.streams.WriteStream write(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.WebSocketBase writeFinalTextFrame(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.ServerWebSocket:io.vertx.core.http.WebSocketBase writeFinalTextFrame(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.WebSocketBase writeFinalBinaryFrame(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.ServerWebSocket:io.vertx.core.http.WebSocketBase writeFinalBinaryFrame(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.WebSocketImplBase:void writePartialMessage(io.vertx.core.buffer.Buffer,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.WebSocketImplBase:void writeMessageInternal(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writePartialMessage(io.vertx.core.buffer.Buffer,int)"
        ]
    },
    "io.vertx.core.http.impl.WebSocketImplBase:void writeBinaryFrameInternal(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.WebSocketImplBase:void lambda$new$60(io.vertx.core.eventbus.Message)"
        ]
    },
    "io.vertx.core.http.impl.WebSocketImplBase:void writeTextFrameInternal(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.WebSocketImplBase:void lambda$new$61(io.vertx.core.eventbus.Message)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl$5$1$1:void channelRead0(io.netty.channel.ChannelHandlerContext,io.vertx.core.dns.impl.netty.DnsResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.dns.impl.DnsClientImpl$5$1$1:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl$5$1$1:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.AsyncFileImpl:io.vertx.core.file.AsyncFile flush()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.AsyncFileImpl:io.vertx.core.file.AsyncFile flush(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem copy(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem copyRecursive(java.lang.String,java.lang.String,boolean,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem move(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem truncate(java.lang.String,long,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem chmod(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem chmodRecursive(java.lang.String,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem chown(java.lang.String,java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem props(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem lprops(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem link(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem symlink(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem unlink(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem readSymlink(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem delete(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem deleteRecursive(java.lang.String,boolean,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem mkdir(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem mkdirs(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem mkdir(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem mkdirs(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem readDir(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem readDir(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem readFile(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem writeFile(java.lang.String,io.vertx.core.buffer.Buffer,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem open(java.lang.String,io.vertx.core.file.OpenOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:io.vertx.core.http.HttpServerFileUpload streamToFileSystem(java.lang.String)"
        ]
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem createFile(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem createFile(java.lang.String,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem exists(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.FileSystemImpl:io.vertx.core.file.FileSystem fsProps(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.impl.HAManager:void lambda$checkQuorumWhenAdded$208(long,java.lang.String,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager$lambda_checkQuorumWhenAdded_208__47:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void executeBlocking(io.vertx.core.Handler,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration$lambda_endHandler_201__56:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object)",
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus publish(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus publish(java.lang.String,java.lang.Object)",
            "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.eventbus.MessageProducer write(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void sendReply(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.MessageImpl:void sendReply(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void receiveMessage(io.vertx.core.eventbus.impl.MessageImpl,long,io.vertx.core.Handler,io.vertx.core.Handler,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void sendToSubs(io.vertx.core.spi.cluster.ChoosableIterable,io.vertx.core.eventbus.impl.MessageImpl,long,io.vertx.core.Handler,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void sendOrPub(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$181(io.vertx.core.eventbus.impl.MessageImpl,long,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void access$2100(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,long,io.vertx.core.Handler,io.vertx.core.Handler,boolean)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$1:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.file.impl.AsyncFileImpl$2:void completed(java.lang.Integer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl$2:void completed(java.lang.Object,java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl:io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.streams.impl.PumpImpl:io.vertx.core.streams.impl.PumpImpl stop()",
            "io.vertx.core.streams.impl.PumpImpl:void lambda$new$222(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.HttpClientRequest:io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerImpl:void close(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl:void close()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$216(io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl:void lambda$actualClose$22(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,io.netty.channel.group.ChannelGroupFuture,io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerResponseImpl:io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.streams.impl.PumpImpl:io.vertx.core.streams.impl.PumpImpl stop()",
            "io.vertx.core.streams.impl.PumpImpl:void lambda$new$222(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.HttpServerResponse:io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void undeploy(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager:void undeployVerticle(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void lambda$doUndeploy$170(io.vertx.core.impl.Deployment,io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager$DeploymentImpl$lambda_doUndeploy_170__80:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void reportFailure(java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager:void doDeployVerticle(java.util.Iterator,java.lang.Throwable,java.lang.String,java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.impl.ContextImpl,io.vertx.core.impl.ContextImpl,java.lang.ClassLoader,io.vertx.core.Handler)",
            "io.vertx.core.impl.DeploymentManager:void undeployVerticle(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.impl.DeploymentManager:void lambda$doDeploy$169(io.vertx.core.Verticle,io.vertx.core.impl.ContextImpl,java.lang.String,io.vertx.core.impl.DeploymentManager$DeploymentImpl,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.Verticle[],io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$null$168(io.vertx.core.Verticle,java.lang.String,io.vertx.core.impl.DeploymentManager$DeploymentImpl,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.Verticle[],io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void access$300(io.vertx.core.impl.DeploymentManager,java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void reportSuccess(java.lang.Object,io.vertx.core.Context,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager:void lambda$null$168(io.vertx.core.Verticle,java.lang.String,io.vertx.core.impl.DeploymentManager$DeploymentImpl,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.Verticle[],io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void access$600(io.vertx.core.impl.DeploymentManager,java.lang.Object,io.vertx.core.Context,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void deployVerticle(io.vertx.core.Verticle,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:void deployVerticle(io.vertx.core.Verticle,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.VertxImpl$InternalTimerHandler$lambda_new_220__178:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ServerWebSocketImpl:void connect()",
            "io.vertx.core.impl.ContextImpl:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.impl.ContextImpl:void executeBlocking(io.vertx.core.impl.Action,io.vertx.core.Handler,boolean,boolean,io.vertx.core.Handler)",
            "io.vertx.core.impl.EventLoopContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.HAManager:void deployHADeployments()",
            "io.vertx.core.impl.MultiThreadedWorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void execute(java.lang.Runnable)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void lambda$new$161()",
            "io.vertx.core.impl.WorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.WorkerContext:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.net.impl.NetServerImpl:void addListener(java.lang.Runnable)",
            "io.vertx.core.net.impl.NetServerImpl:void runListeners()"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void completionHandler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void setResult(io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void access$300(io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void checkNextTick()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:io.vertx.core.eventbus.MessageConsumer resume()"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void closeClusterManager(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$close$174(io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void callCompletionHandlerAsync(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void unregisterHandler(java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void access$1500(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void sendNoHandlersFailure(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void sendReply(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void receiveMessage(io.vertx.core.eventbus.impl.MessageImpl,long,io.vertx.core.Handler,io.vertx.core.Handler,boolean)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$176(io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$lambda_closeClusterManager_176__29:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientResponseImpl:void doResume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientResponseImpl:io.vertx.core.http.HttpClientResponse resume()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl:io.vertx.core.http.HttpServer listen(int,java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl:io.vertx.core.http.HttpServer listen()",
            "io.vertx.core.http.impl.HttpServerImpl:io.vertx.core.http.HttpServer listen(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerImpl:io.vertx.core.http.HttpServer listen(int,java.lang.String)",
            "io.vertx.core.http.impl.HttpServerImpl:io.vertx.core.http.HttpServer listen(int)",
            "io.vertx.core.http.impl.HttpServerImpl:io.vertx.core.http.HttpServer listen(int,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.http.impl.ServerConnection:void checkNextTick()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerConnection:void resume()",
            "io.vertx.core.http.impl.ServerConnection:void responseComplete()",
            "io.vertx.core.http.impl.ServerConnection:void processMessage(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.HAManager:void callFailoverCompleteHandler(io.vertx.core.impl.FailoverCompleteHandler,java.lang.String,io.vertx.core.json.JsonObject,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager:void checkRemoveSubs(java.lang.String,io.vertx.core.json.JsonObject)",
            "io.vertx.core.impl.HAManager:void callFailoverCompleteHandler(java.lang.String,io.vertx.core.json.JsonObject,boolean)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:io.vertx.core.net.NetSocket drainHandler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetSocketImpl:io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)",
            "io.vertx.core.net.NetSocket:io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:io.vertx.core.net.NetSocket sendFile(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetSocketImpl:io.vertx.core.net.NetSocket sendFile(java.lang.String)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$41(io.netty.channel.ChannelFuture,io.vertx.core.Handler,io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.net.impl.NetServerImpl:void close(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$216(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl:void close()"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl:void lambda$actualClose$33(io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,io.netty.channel.group.ChannelGroupFuture,io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.net.impl.NetServerImpl$lambda_listen_32__171:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ServerWebSocketImpl:void connect()",
            "io.vertx.core.impl.ContextImpl:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.impl.ContextImpl:void executeBlocking(io.vertx.core.impl.Action,io.vertx.core.Handler,boolean,boolean,io.vertx.core.Handler)",
            "io.vertx.core.impl.EventLoopContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.HAManager:void deployHADeployments()",
            "io.vertx.core.impl.MultiThreadedWorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void execute(java.lang.Runnable)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void lambda$new$161()",
            "io.vertx.core.impl.WorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.WorkerContext:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.net.impl.NetServerImpl:void addListener(java.lang.Runnable)",
            "io.vertx.core.net.impl.NetServerImpl:void runListeners()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl$1:void lambda$netSocket$79(io.vertx.core.net.NetSocket,java.lang.Void)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl$1$lambda_netSocket_79__131:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:io.vertx.core.streams.ReadStream resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.BodyReadStream:io.vertx.core.streams.ReadStream resume()",
            "io.vertx.core.streams.impl.PumpImpl:void lambda$new$221(java.lang.Void)"
        ]
    },
    "io.vertx.core.net.NetSocket:io.vertx.core.streams.ReadStream resume()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$new$106(java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter$lambda_new_106__189:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousLock:void doAcquire(io.vertx.core.Context,long,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.AsynchronousLock:void acquire(long,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousLock:void access$000(io.vertx.core.shareddata.impl.AsynchronousLock,io.vertx.core.Context,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void acquire(io.vertx.core.shareddata.impl.AsynchronousLock)"
        ]
    },
    "io.vertx.core.shareddata.impl.SharedDataImpl:void getCounter(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.impl.HAManager$lambda_new_204__44:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl:io.vertx.core.net.NetServer listen()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.streams.impl.PumpImpl:io.vertx.core.streams.Pump start()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void lambda$streamToFileSystem$83(io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.HAManager:void doDeployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager:void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.HAManager:void processFailover(io.vertx.core.json.JsonObject)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:void deployVerticle(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void deployVerticle(java.lang.String)",
            "io.vertx.core.impl.VertxImpl:void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions)",
            "io.vertx.core.Starter:void runVerticle(java.lang.String,io.vertx.core.impl.Args)"
        ]
    },
    "io.vertx.core.Future:io.vertx.core.Future failedFuture(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void registerHandler(java.lang.String,io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration,boolean,boolean,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void access$1600(io.vertx.core.eventbus.impl.EventBusImpl,java.lang.String,io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration,boolean,boolean,long)"
        ]
    },
    "io.vertx.core.Starter:void run(io.vertx.core.impl.Args,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.Starter:void main(java.lang.String[])",
            "io.vertx.core.Starter:void run(java.lang.String)",
            "io.vertx.core.Starter:void run(java.lang.String[])"
        ]
    },
    "io.vertx.core.http.WebSocketBase:io.vertx.core.streams.WriteStream write(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.WebSocketImplBase:void writeMessageInternal(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.ServerWebSocket writeBinaryMessage(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.WebSocketImpl:io.vertx.core.http.WebSocket writeBinaryMessage(io.vertx.core.buffer.Buffer)"
        ]
    },
    "io.vertx.core.http.impl.WebSocketImplBase:void lambda$new$60(io.vertx.core.eventbus.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.WebSocketImplBase$lambda_new_60__132:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.WebSocketImplBase:void lambda$new$61(io.vertx.core.eventbus.Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.WebSocketImplBase$lambda_new_61__133:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.dns.impl.DnsClientImpl$5$1$1:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerFileUploadImpl:io.vertx.core.http.HttpServerFileUpload streamToFileSystem(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.impl.HAManager$lambda_checkQuorumWhenAdded_208__47:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus send(java.lang.String,java.lang.Object,io.vertx.core.eventbus.DeliveryOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.eventbus.MessageProducer write(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.EventBus publish(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.eventbus.MessageProducer write(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.streams.WriteStream write(java.lang.Object)",
            "io.vertx.core.eventbus.MessageProducer:io.vertx.core.streams.WriteStream write(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.MessageImpl:void sendReply(io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.MessageImpl:void fail(int,java.lang.String)",
            "io.vertx.core.eventbus.impl.MessageImpl:void reply(java.lang.Object,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void sendToSubs(io.vertx.core.spi.cluster.ChoosableIterable,io.vertx.core.eventbus.impl.MessageImpl,long,io.vertx.core.Handler,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$181(io.vertx.core.eventbus.impl.MessageImpl,long,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$181(io.vertx.core.eventbus.impl.MessageImpl,long,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$lambda_sendOrPub_181__32:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void access$2100(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.eventbus.impl.MessageImpl,long,io.vertx.core.Handler,io.vertx.core.Handler,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$1:void handle(io.vertx.core.buffer.Buffer)"
        ]
    },
    "io.vertx.core.file.impl.AsyncFileImpl$2:void completed(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerImpl:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl:void finalize()"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void undeployVerticle(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager:void undeployAll(io.vertx.core.Handler)",
            "io.vertx.core.impl.HAManager:void undeployHADeployments()",
            "io.vertx.core.impl.VertxImpl:void undeploy(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager$DeploymentImpl$lambda_doUndeploy_170__80:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void lambda$null$168(io.vertx.core.Verticle,java.lang.String,io.vertx.core.impl.DeploymentManager$DeploymentImpl,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.Verticle[],io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager$lambda_null_168__71:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void access$300(io.vertx.core.impl.DeploymentManager,java.lang.Throwable,io.vertx.core.Context,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void undeploy(io.vertx.core.Handler)",
            "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void lambda$null$171(io.vertx.core.AsyncResult,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void lambda$doUndeploy$170(io.vertx.core.impl.Deployment,io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager:void access$600(io.vertx.core.impl.DeploymentManager,java.lang.Object,io.vertx.core.Context,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void lambda$null$171(io.vertx.core.AsyncResult,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void deployVerticle(io.vertx.core.Verticle,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:void deployVerticle(io.vertx.core.Verticle)",
            "io.vertx.core.impl.VertxImpl:void deployVerticle(io.vertx.core.Verticle,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void deployVerticle(io.vertx.core.Verticle,io.vertx.core.DeploymentOptions)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void access$300(io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void registerHandler(java.lang.String,io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration,boolean,boolean,long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$registerHandler$184(io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:io.vertx.core.eventbus.MessageConsumer resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:io.vertx.core.streams.ReadStream resume()",
            "io.vertx.core.eventbus.MessageConsumer:io.vertx.core.streams.ReadStream resume()"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void close(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void finalize()",
            "io.vertx.core.impl.VertxImpl:void lambda$close$217(io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$close$174(io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_174__27:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void unregisterHandler(java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void unregisterHandler(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void access$1400(io.vertx.core.eventbus.impl.EventBusImpl,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void access$1500(io.vertx.core.eventbus.impl.EventBusImpl,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void doUnregister(io.vertx.core.Handler,boolean)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$lambda_closeClusterManager_176__29:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientResponseImpl:io.vertx.core.http.HttpClientResponse resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl$1:io.vertx.core.http.HttpClientResponse resume()",
            "io.vertx.core.http.impl.HttpClientResponseImpl:io.vertx.core.streams.ReadStream resume()",
            "io.vertx.core.http.HttpClientResponse:io.vertx.core.streams.ReadStream resume()"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl:io.vertx.core.http.HttpServer listen()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerImpl:io.vertx.core.http.HttpServer listen(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerImpl:io.vertx.core.http.HttpServer listen(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerImpl:io.vertx.core.http.HttpServer listen(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerImpl:io.vertx.core.http.HttpServer listen(int,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ServerConnection:void resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerRequestImpl:io.vertx.core.http.HttpServerRequest resume()"
        ]
    },
    "io.vertx.core.http.impl.ServerConnection:void responseComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.HAManager:void checkRemoveSubs(java.lang.String,io.vertx.core.json.JsonObject)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager:void nodeLeft(java.lang.String)"
        ]
    },
    "io.vertx.core.impl.HAManager:void callFailoverCompleteHandler(java.lang.String,io.vertx.core.json.JsonObject,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager:void checkFailover(java.lang.String,io.vertx.core.json.JsonObject)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.streams.impl.PumpImpl:io.vertx.core.streams.impl.PumpImpl stop()",
            "io.vertx.core.streams.impl.PumpImpl:void lambda$new$222(java.lang.Object)"
        ]
    },
    "io.vertx.core.net.NetSocket:io.vertx.core.streams.WriteStream drainHandler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.net.impl.NetSocketImpl:io.vertx.core.net.NetSocket sendFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.net.impl.NetServerImpl:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetServerImpl:void finalize()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl$1$lambda_netSocket_79__131:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter$lambda_new_106__189:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousLock:void acquire(long,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.SharedDataImpl:void getLocalLock(java.lang.String,long,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void acquire(io.vertx.core.shareddata.impl.AsynchronousLock)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.AsynchronousLock:void release()"
        ]
    },
    "io.vertx.core.impl.HAManager:void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager:void lambda$addToHADeployList$209(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.HAManager:void processFailover(io.vertx.core.json.JsonObject)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager:void checkFailover(java.lang.String,io.vertx.core.json.JsonObject)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void deployVerticle(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.impl.VertxImpl:void deployVerticle(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.impl.VertxImpl:void deployVerticle(java.lang.String,io.vertx.core.DeploymentOptions)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void access$1600(io.vertx.core.eventbus.impl.EventBusImpl,java.lang.String,io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration,boolean,boolean,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:io.vertx.core.eventbus.MessageConsumer handler(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.Starter:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.Starter:void run(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.Starter:void runCommandLine(java.lang.String)"
        ]
    },
    "io.vertx.core.Starter:void run(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.ServerWebSocket writeBinaryMessage(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.WebSocketBase writeBinaryMessage(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.ServerWebSocket:io.vertx.core.http.WebSocketBase writeBinaryMessage(io.vertx.core.buffer.Buffer)"
        ]
    },
    "io.vertx.core.http.impl.WebSocketImpl:io.vertx.core.http.WebSocket writeBinaryMessage(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.WebSocketImpl:io.vertx.core.http.WebSocketBase writeBinaryMessage(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.WebSocket:io.vertx.core.http.WebSocketBase writeBinaryMessage(io.vertx.core.buffer.Buffer)"
        ]
    },
    "io.vertx.core.http.impl.WebSocketImplBase$lambda_new_60__132:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.WebSocketImplBase$lambda_new_61__133:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.MessageProducerImpl:io.vertx.core.streams.WriteStream write(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.streams.impl.PumpImpl:void lambda$new$222(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.MessageProducer:io.vertx.core.streams.WriteStream write(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.MessageImpl:void fail(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.MessageImpl:void reply(java.lang.Object,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.MessageImpl:void reply(java.lang.Object)",
            "io.vertx.core.eventbus.impl.MessageImpl:void reply(java.lang.Object,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.MessageImpl:void reply(java.lang.Object,io.vertx.core.eventbus.DeliveryOptions)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$lambda_sendOrPub_181__32:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$1:void handle(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$1:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl:void finalize()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl:void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.http.HttpServerOptions)"
        ]
    },
    "io.vertx.core.impl.HAManager:void undeployHADeployments()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager:void checkHADeployments()"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void undeploy(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:void undeploy(java.lang.String)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager$lambda_null_168__71:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.DeploymentManager$DeploymentImpl:void lambda$null$171(io.vertx.core.AsyncResult,java.util.concurrent.atomic.AtomicInteger,io.vertx.core.impl.ContextImpl,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.DeploymentManager$DeploymentImpl$lambda_null_171__82:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void deployVerticle(io.vertx.core.Verticle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.impl.VertxImpl:void deployVerticle(io.vertx.core.Verticle,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.impl.VertxImpl:void deployVerticle(io.vertx.core.Verticle,io.vertx.core.DeploymentOptions)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$registerHandler$184(io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$lambda_registerHandler_184__36:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:io.vertx.core.streams.ReadStream resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.BodyReadStream:io.vertx.core.streams.ReadStream resume()",
            "io.vertx.core.streams.impl.PumpImpl:void lambda$new$221(java.lang.Void)"
        ]
    },
    "io.vertx.core.eventbus.MessageConsumer:io.vertx.core.streams.ReadStream resume()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void finalize()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void <init>(io.vertx.core.impl.VertxInternal)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void <init>(io.vertx.core.impl.VertxInternal,long,long,io.vertx.core.spi.cluster.ClusterManager,io.vertx.core.impl.HAManager,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void lambda$close$217(io.vertx.core.Handler,io.vertx.core.AsyncResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl$lambda_close_217__162:void handle(java.lang.Object)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$lambda_close_174__27:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void unregisterHandler(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void receiveMessage(io.vertx.core.eventbus.impl.MessageImpl,long,io.vertx.core.Handler,io.vertx.core.Handler,boolean)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$doReceive$189(io.vertx.core.eventbus.impl.EventBusImpl$HandlerHolder,io.vertx.core.eventbus.Message,io.vertx.core.eventbus.impl.MessageImpl,java.lang.Void)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void access$1400(io.vertx.core.eventbus.impl.EventBusImpl,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void doUnregister(io.vertx.core.Handler,boolean)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void doUnregister(io.vertx.core.Handler,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void unregister(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void unregister(boolean)"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl$1:io.vertx.core.http.HttpClientResponse resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl$1:io.vertx.core.http.HttpClientResponse resume()",
            "io.vertx.core.http.impl.HttpClientRequestImpl$1:io.vertx.core.streams.ReadStream resume()",
            "io.vertx.core.http.HttpClientResponse:io.vertx.core.streams.ReadStream resume()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientResponseImpl:io.vertx.core.streams.ReadStream resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.BodyReadStream:io.vertx.core.streams.ReadStream resume()",
            "io.vertx.core.streams.impl.PumpImpl:void lambda$new$221(java.lang.Void)"
        ]
    },
    "io.vertx.core.http.HttpClientResponse:io.vertx.core.streams.ReadStream resume()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpServerRequestImpl:io.vertx.core.http.HttpServerRequest resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:io.vertx.core.http.HttpServerFileUpload resume()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:io.vertx.core.streams.ReadStream resume()",
            "io.vertx.core.http.HttpServerRequest:io.vertx.core.streams.ReadStream resume()"
        ]
    },
    "io.vertx.core.impl.HAManager:void nodeLeft(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager:void access$100(io.vertx.core.impl.HAManager,java.lang.String)"
        ]
    },
    "io.vertx.core.impl.HAManager:void checkFailover(java.lang.String,io.vertx.core.json.JsonObject)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager:void nodeLeft(java.lang.String)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl:void finalize()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.net.impl.NetServerImpl:void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)"
        ]
    },
    "io.vertx.core.shareddata.impl.SharedDataImpl:void getLocalLock(java.lang.String,long,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.SharedDataImpl:void getLockWithTimeout(java.lang.String,long,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.shareddata.impl.AsynchronousLock:void release()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.impl.HAManager:void lambda$addToHADeployList$209(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager$lambda_addToHADeployList_209__48:void run()"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:io.vertx.core.eventbus.MessageConsumer handler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.MessageConsumer consumer(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.MessageConsumer localConsumer(java.lang.String,io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.MessageConsumer registerHandler(java.lang.String,io.vertx.core.Handler,boolean,boolean,long)",
            "io.vertx.core.eventbus.MessageConsumer:io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.WebSocketImplBase:void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.impl.ConnectionBase,boolean,int)",
            "io.vertx.core.net.impl.NetSocketImpl:void <init>(io.vertx.core.impl.VertxInternal,io.netty.channel.Channel,io.vertx.core.impl.ContextImpl,io.vertx.core.net.impl.SSLHelper,boolean,io.vertx.core.spi.metrics.TCPMetrics,java.lang.Object)"
        ]
    },
    "io.vertx.core.Starter:void runCommandLine(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ServerWebSocketImpl:io.vertx.core.http.WebSocketBase writeBinaryMessage(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.ServerWebSocket:io.vertx.core.http.WebSocketBase writeBinaryMessage(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.WebSocketImpl:io.vertx.core.http.WebSocketBase writeBinaryMessage(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.WebSocket:io.vertx.core.http.WebSocketBase writeBinaryMessage(io.vertx.core.buffer.Buffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.MessageImpl:void reply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.MessageImpl:void reply(java.lang.Object,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.MessageImpl:void reply(java.lang.Object,io.vertx.core.eventbus.DeliveryOptions)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$1:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerImpl:void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.http.HttpServerOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:io.vertx.core.http.HttpServer createHttpServer(io.vertx.core.http.HttpServerOptions)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:void undeploy(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.impl.DeploymentManager$DeploymentImpl$lambda_null_171__82:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$lambda_registerHandler_184__36:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void <init>(io.vertx.core.impl.VertxInternal)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void <init>(io.vertx.core.impl.VertxInternal,long,long,io.vertx.core.spi.cluster.ClusterManager,io.vertx.core.impl.HAManager,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.impl.VertxImpl$lambda_close_217__162:void handle(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.datagram.impl.DatagramChannelFutureListener:void notifyHandler(io.netty.channel.ChannelFuture)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void handlePacket(io.vertx.core.datagram.DatagramPacket)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$notifyException$11(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.datagram.impl.DatagramSocketImpl:void lambda$listen$10(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.datagram.impl.PacketWriteStreamImpl:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$3:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$ConvertingHandler:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl$HandlerAdapter:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$304(io.vertx.core.Handler,java.net.UnknownHostException,java.lang.Void)",
            "io.vertx.core.dns.impl.DnsClientImpl:void lambda$reverseLookup$303(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.BodyReadStream:void lambda$handler$162(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer:void lambda$new$203(io.vertx.core.net.NetSocket)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerEntry:void close(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void handle(io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$null$200(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$setResult$199(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$doUnregister$198(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void lambda$completionHandler$197(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendNoHandlersFailure$188(java.lang.String,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$removeSub$187(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$callCompletionHandlerAsync$185(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$convertHandler$183(io.vertx.core.Handler,io.vertx.core.eventbus.Message)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$closeClusterManager$177(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$null$175(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$failed$288(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$1:void lambda$completed$287(java.nio.ByteBuffer,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$failed$290(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl$2:void lambda$done$289(java.nio.ByteBuffer,io.vertx.core.buffer.Buffer,int,io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void checkDrained()",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.file.impl.AsyncFileImpl:void handleEnd()",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doClose$291(io.vertx.core.Handler,io.vertx.core.Future,java.lang.Void)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$284(java.util.concurrent.atomic.AtomicInteger,java.nio.ByteBuffer[],io.vertx.core.Handler,java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.AsyncResult)",
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handshakeComplete$64(io.vertx.core.http.impl.WebSocketImpl)",
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void lambda$handleException$63(io.netty.handler.codec.http.websocketx.WebSocketHandshakeException)",
            "io.vertx.core.http.impl.ClientConnection:void lambda$toWebSocket$62(io.netty.util.concurrent.Future)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$createNewConnection$67(io.vertx.core.Handler,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$checkReuseConnection$66(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager$ConnQueue:void lambda$requestEnded$65(io.vertx.core.http.impl.ConnectionManager$Waiter,io.vertx.core.http.impl.ClientConnection)",
            "io.vertx.core.http.impl.ConnectionManager:void getConnection(int,java.lang.String,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.impl.ContextImpl)",
            "io.vertx.core.http.impl.HttpClientImpl$WebSocketStreamImpl:void lambda$handler$74(io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.WebSocket)",
            "io.vertx.core.http.impl.HttpClientImpl:void createConn(io.vertx.core.impl.ContextImpl,int,java.lang.String,io.netty.channel.Channel,io.vertx.core.Handler,io.vertx.core.Handler,io.vertx.core.http.impl.ConnectionLifeCycleListener)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$connectionFailed$73(io.vertx.core.http.impl.ConnectionLifeCycleListener,io.netty.channel.Channel,io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientImpl:void lambda$new$68(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void handleResponse(io.vertx.core.http.impl.HttpClientResponseImpl)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)",
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$exceptionHandler$77(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpClientResponseImpl$BodyHandler:void notifyHandler(io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleChunk(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleEnd(io.netty.handler.codec.http.LastHttpContent)",
            "io.vertx.core.http.impl.HttpClientResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void doReceiveData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyEndHandler()",
            "io.vertx.core.http.impl.HttpServerFileUploadImpl:void notifyExceptionHandler(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$executeCloseDone$23(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$null$20(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerImpl:void lambda$listen$19(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerRequestImpl$DataFactory:io.netty.handler.codec.http.multipart.FileUpload createFileUpload(io.netty.handler.codec.http.HttpRequest,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.nio.charset.Charset,long)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleData(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleEnd()",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerRequestImpl:void lambda$bodyHandler$50(io.vertx.core.Handler,io.vertx.core.buffer.Buffer,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void end0(io.netty.buffer.ByteBuf)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleDrained()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void handleClosed()",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$doSendFile$56(java.io.File,long,io.vertx.core.Handler)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$54(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$null$53(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.http.impl.ServerConnection:void handleRequest(io.vertx.core.http.impl.HttpServerRequestImpl,io.vertx.core.http.impl.HttpServerResponseImpl)",
            "io.vertx.core.http.impl.ServerConnection:void handleWebsocketConnect(io.vertx.core.http.impl.ServerWebSocketImpl)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleFrame(io.vertx.core.http.impl.ws.WebSocketFrameInternal)",
            "io.vertx.core.http.impl.WebSocketImplBase:void writable()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()",
            "io.vertx.core.impl.ContextImpl:void runCloseHooks(io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$wrapTask$15(boolean,io.vertx.core.impl.ContextTask,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$executeBlocking$14(io.vertx.core.Handler,io.vertx.core.impl.Action,io.vertx.core.Handler)",
            "io.vertx.core.impl.ContextImpl:void lambda$runCloseHooks$12(java.util.concurrent.atomic.AtomicBoolean,io.vertx.core.Handler,java.util.concurrent.atomic.AtomicInteger,int,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.DeploymentManager:void lambda$reportResult$167(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$165(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.impl.DeploymentManager:void lambda$undeployAll$164(java.util.concurrent.atomic.AtomicInteger,java.util.Set,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.FileResolver:void deleteCacheDir(io.vertx.core.Handler)",
            "io.vertx.core.impl.FutureImpl:void checkCallHandler()",
            "io.vertx.core.impl.HAManager:void lambda$doDeployVerticle$206(java.lang.String,io.vertx.core.DeploymentOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void handle(java.lang.Void)",
            "io.vertx.core.impl.VertxImpl$InternalTimerHandler:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl$TimeoutStreamImpl:void handle(java.lang.Long)",
            "io.vertx.core.impl.VertxImpl:void <init>(io.vertx.core.VertxOptions,io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void close(io.vertx.core.Handler)",
            "io.vertx.core.impl.VertxImpl:void lambda$deleteCacheDirAndShutdown$219(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.impl.VertxImpl:void lambda$null$212(io.vertx.core.net.NetServer,io.vertx.core.VertxOptions,io.vertx.core.spi.cluster.AsyncMultiMap,io.vertx.core.eventbus.impl.EventBusImpl$EventBusNetServer,io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.ConnectionBase:void handleException(java.lang.Throwable)",
            "io.vertx.core.net.impl.ConnectionBase:void handleClosed()",
            "io.vertx.core.net.impl.ConnectionBase:void lambda$null$7(io.vertx.core.Handler,io.netty.util.concurrent.Future)",
            "io.vertx.core.net.impl.NetClientImpl:void doFailed(io.vertx.core.Handler,java.lang.Throwable)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$connected$103(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetClientImpl:void lambda$new$98(io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$2:void handle(io.vertx.core.AsyncResult)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void lambda$connected$36(io.vertx.core.net.impl.NetSocketImpl,io.vertx.core.net.impl.HandlerHolder)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$executeCloseDone$34(io.vertx.core.Handler,java.lang.Exception,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$null$31(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.net.impl.NetServerImpl:void lambda$listen$30(io.vertx.core.Handler,java.lang.Throwable,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleDataReceived(io.vertx.core.buffer.Buffer)",
            "io.vertx.core.net.impl.NetSocketImpl:void callDrainHandler()",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$43(io.netty.util.concurrent.Future,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$sendFile$42(io.vertx.core.Handler,java.io.IOException,java.lang.Void)",
            "io.vertx.core.net.impl.NetSocketImpl:void lambda$null$40(io.vertx.core.Handler,io.vertx.core.AsyncResult,java.lang.Void)",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseDelimited()",
            "io.vertx.core.parsetools.impl.RecordParserImpl:void parseFixed()",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$compareAndSet$128(io.vertx.core.Handler,long,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndAdd$127(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$addAndGet$126(io.vertx.core.Handler,long,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$decrementAndGet$125(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$getAndIncrement$124(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$incrementAndGet$123(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousCounter:void lambda$get$122(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock$LockWaiter:void lambda$timedOut$107(java.lang.Void)",
            "io.vertx.core.shareddata.impl.AsynchronousLock:void lambda$lockAquired$105(io.vertx.core.Handler,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getLocalCounter$278(io.vertx.core.Handler,io.vertx.core.shareddata.Counter,java.lang.Void)",
            "io.vertx.core.shareddata.impl.SharedDataImpl:void lambda$getClusterWideMap$277(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.Starter:void lambda$createLoggingHandler$281(java.lang.String,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void unregister(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void unregister(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void unregister()",
            "io.vertx.core.eventbus.impl.EventBusImpl:void unregisterAllHandlers()"
        ]
    },
    "io.vertx.core.http.impl.HttpClientRequestImpl$1:io.vertx.core.streams.ReadStream resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.BodyReadStream:io.vertx.core.streams.ReadStream resume()",
            "io.vertx.core.streams.impl.PumpImpl:void lambda$new$221(java.lang.Void)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerRequestImpl:io.vertx.core.streams.ReadStream resume()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.BodyReadStream:io.vertx.core.streams.ReadStream resume()",
            "io.vertx.core.streams.impl.PumpImpl:void lambda$new$221(java.lang.Void)"
        ]
    },
    "io.vertx.core.http.HttpServerRequest:io.vertx.core.streams.ReadStream resume()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.impl.HAManager:void access$100(io.vertx.core.impl.HAManager,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.HAManager$1:void nodeLeft(java.lang.String)"
        ]
    },
    "io.vertx.core.net.impl.NetServerImpl:void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.NetServerOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:io.vertx.core.net.NetServer createNetServer(io.vertx.core.net.NetServerOptions)"
        ]
    },
    "io.vertx.core.shareddata.impl.SharedDataImpl:void getLockWithTimeout(java.lang.String,long,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.shareddata.impl.SharedDataImpl:void getLock(java.lang.String,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.HAManager$lambda_addToHADeployList_209__48:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.file.impl.AsyncFileImpl:void lambda$doWrite$283(io.vertx.core.Handler,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void prepareHeaders(java.lang.Runnable)",
            "io.vertx.core.http.impl.HttpServerResponseImpl:void lambda$prepareHeaders$58(java.lang.Runnable,io.vertx.core.AsyncResult)",
            "io.vertx.core.http.impl.ServerWebSocketImpl:void connect()",
            "io.vertx.core.impl.ContextImpl:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.impl.ContextImpl:void executeBlocking(io.vertx.core.impl.Action,io.vertx.core.Handler,boolean,boolean,io.vertx.core.Handler)",
            "io.vertx.core.impl.EventLoopContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.HAManager:void deployHADeployments()",
            "io.vertx.core.impl.MultiThreadedWorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void execute(java.lang.Runnable)",
            "io.vertx.core.impl.OrderedExecutorFactory$OrderedExecutor:void lambda$new$161()",
            "io.vertx.core.impl.WorkerContext:void executeAsync(io.vertx.core.Handler)",
            "io.vertx.core.impl.WorkerContext:void executeFromIO(io.vertx.core.impl.ContextTask)",
            "io.vertx.core.net.impl.NetServerImpl:void addListener(java.lang.Runnable)",
            "io.vertx.core.net.impl.NetServerImpl:void runListeners()"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.BodyReadStream:io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)",
            "io.vertx.core.streams.impl.PumpImpl:io.vertx.core.streams.impl.PumpImpl start()",
            "io.vertx.core.streams.impl.PumpImpl:io.vertx.core.streams.impl.PumpImpl stop()"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.MessageConsumer consumer(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.MessageConsumer localConsumer(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:io.vertx.core.eventbus.MessageConsumer registerHandler(java.lang.String,io.vertx.core.Handler,boolean,boolean,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void sendOrPub(io.vertx.core.net.impl.ServerID,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.eventbus.DeliveryOptions,io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.eventbus.MessageConsumer:io.vertx.core.streams.ReadStream handler(io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.WebSocketImplBase:void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.net.impl.ConnectionBase,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerWebSocketImpl:void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.net.impl.ConnectionBase,boolean,java.lang.Runnable,int)",
            "io.vertx.core.http.impl.WebSocketImpl:void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.http.impl.ClientConnection,boolean,int)"
        ]
    },
    "io.vertx.core.net.impl.NetSocketImpl:void <init>(io.vertx.core.impl.VertxInternal,io.netty.channel.Channel,io.vertx.core.impl.ContextImpl,io.vertx.core.net.impl.SSLHelper,boolean,io.vertx.core.spi.metrics.TCPMetrics,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection:io.vertx.core.net.NetSocket createNetSocket()",
            "io.vertx.core.http.impl.ServerConnection:io.vertx.core.net.NetSocket createNetSocket()",
            "io.vertx.core.net.impl.NetClientImpl:void connected(io.vertx.core.impl.ContextImpl,io.netty.channel.Channel,io.vertx.core.Handler)",
            "io.vertx.core.net.impl.NetServerImpl$ServerHandler:void connected(io.netty.channel.Channel,io.vertx.core.net.impl.HandlerHolder)"
        ]
    },
    "io.vertx.core.impl.VertxImpl:io.vertx.core.http.HttpServer createHttpServer(io.vertx.core.http.HttpServerOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:io.vertx.core.http.HttpServer createHttpServer()"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:void unregister()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl$HandlerRegistration:io.vertx.core.eventbus.MessageConsumer handler(io.vertx.core.Handler)",
            "io.vertx.core.eventbus.impl.EventBusImpl:void lambda$sendOrPub$180(java.util.concurrent.atomic.AtomicReference,io.vertx.core.eventbus.impl.MessageImpl,io.vertx.core.Handler,java.lang.Long)",
            "io.vertx.core.http.impl.WebSocketImplBase:void cleanupHandlers()",
            "io.vertx.core.net.impl.NetSocketImpl:void handleClosed()"
        ]
    },
    "io.vertx.core.eventbus.impl.EventBusImpl:void unregisterAllHandlers()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.eventbus.impl.EventBusImpl:void close(io.vertx.core.Handler)"
        ]
    },
    "io.vertx.core.impl.HAManager$1:void nodeLeft(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.impl.VertxImpl:io.vertx.core.net.NetServer createNetServer(io.vertx.core.net.NetServerOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.impl.VertxImpl:io.vertx.core.net.NetServer createNetServer()",
            "io.vertx.core.impl.VertxImpl:void lambda$null$213(io.vertx.core.VertxOptions,io.vertx.core.Handler,io.vertx.core.AsyncResult)"
        ]
    },
    "io.vertx.core.shareddata.impl.SharedDataImpl:void getLock(java.lang.String,io.vertx.core.Handler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.ServerWebSocketImpl:void <init>(io.vertx.core.impl.VertxInternal,java.lang.String,java.lang.String,java.lang.String,io.vertx.core.MultiMap,io.vertx.core.net.impl.ConnectionBase,boolean,java.lang.Runnable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerImpl$ServerHandler:void lambda$handshake$26(io.netty.handler.codec.http.FullHttpRequest,io.netty.channel.Channel,io.vertx.core.net.impl.HandlerHolder,io.netty.handler.codec.http.websocketx.WebSocketServerHandshaker,io.netty.channel.ChannelHandlerContext)",
            "io.vertx.core.http.impl.ServerConnection:io.vertx.core.http.ServerWebSocket upgrade(io.vertx.core.http.HttpServerRequest,io.netty.handler.codec.http.HttpRequest)"
        ]
    },
    "io.vertx.core.http.impl.WebSocketImpl:void <init>(io.vertx.core.impl.VertxInternal,io.vertx.core.http.impl.ClientConnection,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ClientConnection$HandshakeInboundHandler:void handshakeComplete(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpResponse)"
        ]
    },
    "io.vertx.core.http.impl.ClientConnection:io.vertx.core.net.NetSocket createNetSocket()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientResponseImpl:io.vertx.core.net.NetSocket netSocket()"
        ]
    },
    "io.vertx.core.http.impl.ServerConnection:io.vertx.core.net.NetSocket createNetSocket()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpServerRequestImpl:io.vertx.core.net.NetSocket netSocket()"
        ]
    },
    "io.vertx.core.impl.VertxImpl:io.vertx.core.http.HttpServer createHttpServer()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.WebSocketImplBase:void cleanupHandlers()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.WebSocketImplBase:void close()",
            "io.vertx.core.http.impl.WebSocketImplBase:void handleClosed()"
        ]
    },
    "io.vertx.core.impl.VertxImpl:io.vertx.core.net.NetServer createNetServer()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.HttpClientResponseImpl:io.vertx.core.net.NetSocket netSocket()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.HttpClientRequestImpl:void lambda$connectHandler$80(io.vertx.core.Handler,io.vertx.core.http.HttpClientResponse)"
        ]
    },
    "io.vertx.core.http.impl.HttpServerRequestImpl:io.vertx.core.net.NetSocket netSocket()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "io.vertx.core.http.impl.WebSocketImplBase:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "io.vertx.core.http.impl.ServerWebSocketImpl:void close()"
        ]
    }
}