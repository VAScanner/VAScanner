{
    "org.apache.logging.log4j.core.appender.db.jdbc.DataSourceConnectionSource:org.apache.logging.log4j.core.appender.db.jdbc.DataSourceConnectionSource createConnectionSource(java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.net.JndiManager:java.lang.Object lookup(java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.JmsManager:javax.jms.Connection createConnection(org.apache.logging.log4j.core.net.JndiManager)",
            "org.apache.logging.log4j.core.appender.mom.JmsManager:javax.jms.Destination createDestination(org.apache.logging.log4j.core.net.JndiManager)",
            "org.apache.logging.log4j.core.appender.mom.JmsManager:java.lang.Object lookup(java.lang.String)",
            "org.apache.logging.log4j.core.lookup.JndiLookup:java.lang.String lookup(org.apache.logging.log4j.core.LogEvent,java.lang.String)",
            "org.apache.logging.log4j.core.selector.JndiContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean,java.net.URI)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager:javax.jms.Connection createConnection(org.apache.logging.log4j.core.net.JndiManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.JmsManager:void <init>(java.lang.String,org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerConfiguration)",
            "org.apache.logging.log4j.core.appender.mom.JmsManager:javax.jms.Connection access$200(org.apache.logging.log4j.core.appender.mom.JmsManager,org.apache.logging.log4j.core.net.JndiManager)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager:javax.jms.Destination createDestination(org.apache.logging.log4j.core.net.JndiManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.JmsManager:void <init>(java.lang.String,org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerConfiguration)",
            "org.apache.logging.log4j.core.appender.mom.JmsManager:javax.jms.Destination access$400(org.apache.logging.log4j.core.appender.mom.JmsManager,org.apache.logging.log4j.core.net.JndiManager)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager:java.lang.Object lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.lookup.JndiLookup:java.lang.String lookup(org.apache.logging.log4j.core.LogEvent,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.AbstractLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.logging.log4j.core.lookup.Interpolator:java.lang.String lookup(org.apache.logging.log4j.core.LogEvent,java.lang.String)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String resolveVariable(org.apache.logging.log4j.core.LogEvent,java.lang.String,java.lang.StringBuilder,int,int)"
        ]
    },
    "org.apache.logging.log4j.core.selector.JndiContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.util.List,java.lang.String)",
            "org.apache.logging.log4j.core.selector.JndiContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager:void <init>(java.lang.String,org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.JmsManager:void <init>(java.lang.String,org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerConfiguration,org.apache.logging.log4j.core.appender.mom.JmsManager$1)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager:javax.jms.Connection access$200(org.apache.logging.log4j.core.appender.mom.JmsManager,org.apache.logging.log4j.core.net.JndiManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.JmsManager$Reconnector:void reconnect()"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager:javax.jms.Destination access$400(org.apache.logging.log4j.core.appender.mom.JmsManager,org.apache.logging.log4j.core.net.JndiManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.JmsManager$Reconnector:void reconnect()"
        ]
    },
    "org.apache.logging.log4j.core.lookup.AbstractLookup:java.lang.String lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String getSystemProperty(java.lang.String)",
            "org.apache.logging.log4j.core.lookup.Interpolator:java.lang.String lookup(org.apache.logging.log4j.core.LogEvent,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.Interpolator:java.lang.String lookup(org.apache.logging.log4j.core.LogEvent,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.AbstractLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.logging.log4j.core.lookup.Interpolator:java.lang.String lookup(org.apache.logging.log4j.core.LogEvent,java.lang.String)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String resolveVariable(org.apache.logging.log4j.core.LogEvent,java.lang.String,java.lang.StringBuilder,int,int)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String resolveVariable(org.apache.logging.log4j.core.LogEvent,java.lang.String,java.lang.StringBuilder,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:int substitute(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder,int,int,java.util.List)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.ConfigurationSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.ClassLoader,org.apache.logging.log4j.core.config.ConfigurationSource,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.ClassLoader,org.apache.logging.log4j.core.config.Configuration,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.String,java.lang.ClassLoader,java.net.URI,java.lang.Object)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.String,java.lang.ClassLoader,java.util.List,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.selector.JndiContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager:void <init>(java.lang.String,org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerConfiguration,org.apache.logging.log4j.core.appender.mom.JmsManager$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerFactory:org.apache.logging.log4j.core.appender.mom.JmsManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerConfiguration)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager$Reconnector:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.JmsManager:void send(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)",
            "org.apache.logging.log4j.core.appender.mom.JmsManager$Reconnector:void run()"
        ]
    },
    "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String getSystemProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String getHardware()",
            "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String getLocale()",
            "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String getOperatingSystem()",
            "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String getRuntime()",
            "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String getSystemProperty(java.lang.String,java.lang.String)",
            "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String getVirtualMachine()",
            "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String lookup(org.apache.logging.log4j.core.LogEvent,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:int substitute(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder,int,int,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:boolean substitute(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder,int,int)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:int substitute(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder,int,int,java.util.List)"
        ]
    },
    "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.ClassLoader,org.apache.logging.log4j.core.config.ConfigurationSource,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.ClassLoader,org.apache.logging.log4j.core.config.ConfigurationSource)"
        ]
    },
    "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.ClassLoader,org.apache.logging.log4j.core.config.Configuration,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.ClassLoader,org.apache.logging.log4j.core.config.Configuration)"
        ]
    },
    "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.String,java.lang.ClassLoader,java.net.URI,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.String,java.lang.ClassLoader,java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.String,java.lang.ClassLoader,java.net.URI)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.String,java.lang.ClassLoader,java.util.List,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.String,java.lang.ClassLoader,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerFactory:org.apache.logging.log4j.core.appender.mom.JmsManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager:void send(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.JmsAppender:void append(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager$Reconnector:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager:void closeProducer(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.mom.JmsManager:void <init>(java.lang.String,org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerConfiguration)",
            "org.apache.logging.log4j.core.appender.mom.JmsManager:void send(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)",
            "org.apache.logging.log4j.core.config.ConfiguratonFileWatcher:void fileModified(java.io.File)",
            "org.apache.logging.log4j.core.config.ConfigurationScheduler$CronRunnable:void run()",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object execute(org.apache.logging.log4j.core.tools.picocli.CommandLine)",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry:void run()",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable:void run()",
            "org.apache.logging.log4j.core.util.CachedClock:void <init>()",
            "org.apache.logging.log4j.core.util.CoarseCachedClock:void <init>()"
        ]
    },
    "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String getHardware()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String lookup(org.apache.logging.log4j.core.LogEvent,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String getLocale()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String lookup(org.apache.logging.log4j.core.LogEvent,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String getOperatingSystem()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String lookup(org.apache.logging.log4j.core.LogEvent,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String getRuntime()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String lookup(org.apache.logging.log4j.core.LogEvent,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String getSystemProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String getHardware()",
            "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String getOperatingSystem()"
        ]
    },
    "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String getVirtualMachine()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String lookup(org.apache.logging.log4j.core.LogEvent,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.JavaLookup:java.lang.String lookup(org.apache.logging.log4j.core.LogEvent,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.AbstractLookup:java.lang.String lookup(java.lang.String)",
            "org.apache.logging.log4j.core.lookup.Interpolator:java.lang.String lookup(org.apache.logging.log4j.core.LogEvent,java.lang.String)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String resolveVariable(org.apache.logging.log4j.core.LogEvent,java.lang.String,java.lang.StringBuilder,int,int)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:boolean substitute(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,java.lang.String)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,java.lang.String,int,int)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,char[])",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,char[],int,int)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuffer)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuffer,int,int)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder,int,int)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,java.lang.Object)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:boolean replaceIn(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuffer,int,int)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:boolean replaceIn(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:boolean replaceIn(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder,int,int)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:int substitute(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder,int,int,java.util.List)"
        ]
    },
    "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.ClassLoader,org.apache.logging.log4j.core.config.ConfigurationSource)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.ClassLoader,org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.String,java.lang.ClassLoader,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.String,java.lang.ClassLoader,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.String,java.lang.ClassLoader,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.spi.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:org.apache.logging.log4j.core.appender.AbstractManager getManager(java.lang.String,org.apache.logging.log4j.core.appender.ManagerFactory,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsAppender:void append(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager:void closeProducer(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.config.ConfiguratonFileWatcher:void fileModified(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.util.WatchManager$WatchRunnable:void run()"
        ]
    },
    "org.apache.logging.log4j.core.config.ConfigurationScheduler$CronRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.ConfigurationScheduler$CronRunnable:void run()",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object execute(org.apache.logging.log4j.core.tools.picocli.CommandLine)",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry:void run()",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable:void run()"
        ]
    },
    "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object execute(org.apache.logging.log4j.core.tools.picocli.CommandLine)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object access$300(org.apache.logging.log4j.core.tools.picocli.CommandLine)"
        ]
    },
    "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void initialize()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void setTriggeringPolicy(org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy)",
            "org.apache.logging.log4j.core.config.ConfigurationScheduler$CronRunnable:void run()",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:void initializeShutdownCallbackRegistry()",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object execute(org.apache.logging.log4j.core.tools.picocli.CommandLine)",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry:void run()",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable:void run()"
        ]
    },
    "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.ConfigurationScheduler$CronRunnable:void run()",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object execute(org.apache.logging.log4j.core.tools.picocli.CommandLine)",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry:void run()",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable:void run()"
        ]
    },
    "org.apache.logging.log4j.core.util.CachedClock:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.util.CachedClock:org.apache.logging.log4j.core.util.CachedClock instance()"
        ]
    },
    "org.apache.logging.log4j.core.util.CoarseCachedClock:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.util.CoarseCachedClock:org.apache.logging.log4j.core.util.CoarseCachedClock instance()"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.HttpURLConnectionManager:void send(org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.async.AsyncLogger:void actualAsyncLog(org.apache.logging.log4j.core.async.RingBufferLogEvent)",
            "org.apache.logging.log4j.core.config.plugins.visitors.PluginBuilderAttributeVisitor:java.lang.Object visit(org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.config.Node,org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.config.plugins.visitors.PluginValueVisitor:java.lang.Object visit(org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.config.Node,org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.config.plugins.visitors.PluginAttributeVisitor:java.lang.Object visit(org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.config.Node,org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.config.plugins.visitors.PluginAttributeVisitor:java.lang.Object findDefaultValue(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.config.LoggerConfig:void log(java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.layout.GelfLayout:java.lang.StringBuilder toText(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder,boolean)",
            "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:java.util.Map resolveAdditionalFields(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.String)",
            "org.apache.logging.log4j.core.pattern.MessagePatternConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.LiteralPatternConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.String,int,int)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,char[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(char[])"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(char[],int,int)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.StringBuffer)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.StringBuffer,int,int)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.PatternProcessor:void formatFileName(org.apache.logging.log4j.core.lookup.StrSubstitutor,java.lang.StringBuilder,boolean,java.lang.Object)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.StringBuilder,int,int)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(org.apache.logging.log4j.core.LogEvent,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:boolean replaceIn(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:boolean replaceIn(java.lang.StringBuffer,int,int)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:boolean replaceIn(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:boolean replaceIn(java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:boolean replaceIn(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:boolean replaceIn(java.lang.StringBuilder,int,int)"
        ]
    },
    "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.String,java.lang.ClassLoader,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AbstractManager:org.apache.logging.log4j.core.appender.AbstractManager getManager(java.lang.String,org.apache.logging.log4j.core.appender.ManagerFactory,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager getManager(java.lang.String,org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager$AbstractFactoryData,org.apache.logging.log4j.core.appender.ManagerFactory)",
            "org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqManager:org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqManager getJeroMqManager(java.lang.String,long,long,boolean,byte[],boolean,long,long,long,long,int,long,long,long,int,long,int,long,long,long,boolean,java.util.List)",
            "org.apache.logging.log4j.core.appender.mom.JmsAppender$Builder:org.apache.logging.log4j.core.appender.mom.JmsAppender build()",
            "org.apache.logging.log4j.core.appender.mom.JmsManager:org.apache.logging.log4j.core.appender.mom.JmsManager getJmsManager(java.lang.String,java.util.Properties,java.lang.String,java.lang.String,java.lang.String,char[],boolean,long)",
            "org.apache.logging.log4j.core.appender.WriterManager:org.apache.logging.log4j.core.appender.WriterManager getManager(java.lang.String,java.lang.Object,org.apache.logging.log4j.core.appender.ManagerFactory)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:org.apache.logging.log4j.core.appender.OutputStreamManager getManager(java.lang.String,java.lang.Object,org.apache.logging.log4j.core.appender.ManagerFactory)",
            "org.apache.logging.log4j.core.net.SmtpManager:org.apache.logging.log4j.core.net.SmtpManager getSmtpManager(org.apache.logging.log4j.core.config.Configuration,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String,int)",
            "org.apache.logging.log4j.core.net.JndiManager:org.apache.logging.log4j.core.net.JndiManager getDefaultManager()",
            "org.apache.logging.log4j.core.net.JndiManager:org.apache.logging.log4j.core.net.JndiManager getDefaultManager(java.lang.String)",
            "org.apache.logging.log4j.core.net.JndiManager:org.apache.logging.log4j.core.net.JndiManager getJndiManager(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Properties)",
            "org.apache.logging.log4j.core.net.JndiManager:org.apache.logging.log4j.core.net.JndiManager getJndiManager(java.util.Properties)"
        ]
    },
    "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void callAppender0(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.util.WatchManager$WatchRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.ConfigurationScheduler$CronRunnable:void run()",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object execute(org.apache.logging.log4j.core.tools.picocli.CommandLine)",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry:void run()",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable:void run()"
        ]
    },
    "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object access$300(org.apache.logging.log4j.core.tools.picocli.CommandLine)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.tools.picocli.CommandLine$RunAll:java.util.List handleParseResult(java.util.List,java.io.PrintStream,org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$Ansi)",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine$RunFirst:java.util.List handleParseResult(java.util.List,java.io.PrintStream,org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$Ansi)",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine$RunLast:java.util.List handleParseResult(java.util.List,java.io.PrintStream,org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$Ansi)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender$Builder:org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender build()",
            "org.apache.logging.log4j.core.appender.RollingFileAppender$Builder:org.apache.logging.log4j.core.appender.RollingFileAppender build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void setTriggeringPolicy(org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void updateData(java.lang.Object)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void updateData(java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jContextFactory:void initializeShutdownCallbackRegistry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:void <init>(org.apache.logging.log4j.core.selector.ContextSelector,org.apache.logging.log4j.core.util.ShutdownCallbackRegistry)"
        ]
    },
    "org.apache.logging.log4j.core.util.CachedClock:org.apache.logging.log4j.core.util.CachedClock instance()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.util.ClockFactory$3:org.apache.logging.log4j.core.util.Clock get()",
            "org.apache.logging.log4j.core.util.ClockFactory$5:org.apache.logging.log4j.core.util.Clock get()"
        ]
    },
    "org.apache.logging.log4j.core.util.CoarseCachedClock:org.apache.logging.log4j.core.util.CoarseCachedClock instance()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.util.ClockFactory$4:org.apache.logging.log4j.core.util.Clock get()",
            "org.apache.logging.log4j.core.util.ClockFactory$6:org.apache.logging.log4j.core.util.Clock get()"
        ]
    },
    "org.apache.logging.log4j.core.appender.routing.RoutingAppender:void append(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.HttpURLConnectionManager:void send(org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.HttpAppender:void append(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLogger:void actualAsyncLog(org.apache.logging.log4j.core.async.RingBufferLogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.RingBufferLogEvent:void execute(boolean)"
        ]
    },
    "org.apache.logging.log4j.core.config.plugins.visitors.PluginBuilderAttributeVisitor:java.lang.Object visit(org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.config.Node,org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:void injectFields(org.apache.logging.log4j.core.util.Builder)",
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object[] generateParameters(java.lang.reflect.Method)"
        ]
    },
    "org.apache.logging.log4j.core.config.plugins.visitors.PluginValueVisitor:java.lang.Object visit(org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.config.Node,org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:void injectFields(org.apache.logging.log4j.core.util.Builder)",
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object[] generateParameters(java.lang.reflect.Method)"
        ]
    },
    "org.apache.logging.log4j.core.config.plugins.visitors.PluginAttributeVisitor:java.lang.Object visit(org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.config.Node,org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:void injectFields(org.apache.logging.log4j.core.util.Builder)",
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object[] generateParameters(java.lang.reflect.Method)"
        ]
    },
    "org.apache.logging.log4j.core.config.plugins.visitors.PluginAttributeVisitor:java.lang.Object findDefaultValue(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.visitors.PluginAttributeVisitor:java.lang.Object visit(org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.config.Node,org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.config.LoggerConfig:void log(java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AwaitUnconditionallyReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.config.DefaultReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.config.LockingReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.layout.GelfLayout:java.lang.StringBuilder toText(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.GelfLayout:byte[] toByteArray(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.layout.GelfLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.GelfLayout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:java.util.Map resolveAdditionalFields(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:java.lang.Object wrapLogEvent(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager:void send(byte[])",
            "org.apache.logging.log4j.core.appender.rewrite.PropertiesRewritePolicy:org.apache.logging.log4j.core.LogEvent rewrite(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.rolling.action.AbstractPathAction:java.nio.file.Path getBasePath()",
            "org.apache.logging.log4j.core.config.composite.CompositeConfiguration:void <init>(java.util.List)",
            "org.apache.logging.log4j.core.config.json.JsonConfiguration:void <init>(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.config.xml.XmlConfiguration:void <init>(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI)",
            "org.apache.logging.log4j.core.pattern.LiteralPatternConverter:void format(java.lang.Object,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.LiteralPatternConverter:void format(java.lang.StringBuilder,java.lang.Object[])"
        ]
    },
    "org.apache.logging.log4j.core.pattern.MessagePatternConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void formatWithInfo(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.LogEventPatternConverter:void format(java.lang.Object,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.LiteralPatternConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void formatWithInfo(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.LogEventPatternConverter:void format(java.lang.Object,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(char[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(char[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.StringBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.rolling.PatternProcessor:void formatFileName(org.apache.logging.log4j.core.lookup.StrSubstitutor,java.lang.StringBuilder,boolean,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy:java.lang.String getCurrentFileName(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.appender.rolling.PatternProcessor:void formatFileName(org.apache.logging.log4j.core.lookup.StrSubstitutor,java.lang.StringBuilder,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.StringBuilder,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:boolean replaceIn(java.lang.StringBuffer,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:boolean replaceIn(java.lang.StringBuffer)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:boolean replaceIn(java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:boolean replaceIn(java.lang.StringBuilder,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.Configurator:org.apache.logging.log4j.core.LoggerContext initialize(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager getManager(java.lang.String,org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager$AbstractFactoryData,org.apache.logging.log4j.core.appender.ManagerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager getJDBCDatabaseManager(java.lang.String,int,org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource,java.lang.String,org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig[])",
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager getManager(java.lang.String,int,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource,java.lang.String,org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig[],org.apache.logging.log4j.core.appender.db.ColumnMapping[])",
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager getManager(java.lang.String,int,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource,java.lang.String,org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig[],org.apache.logging.log4j.core.appender.db.ColumnMapping[],boolean,long)",
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager getManager(java.lang.String,int,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource,java.lang.String,org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig[],org.apache.logging.log4j.core.appender.db.ColumnMapping[],boolean,long,boolean)",
            "org.apache.logging.log4j.core.appender.nosql.NoSqlDatabaseManager:org.apache.logging.log4j.core.appender.nosql.NoSqlDatabaseManager getNoSqlDatabaseManager(java.lang.String,int,org.apache.logging.log4j.core.appender.nosql.NoSqlProvider)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqManager:org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqManager getJeroMqManager(java.lang.String,long,long,boolean,byte[],boolean,long,long,long,long,int,long,long,long,int,long,int,long,long,long,boolean,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender:void <init>(java.lang.String,org.apache.logging.log4j.core.Filter,org.apache.logging.log4j.core.Layout,boolean,java.util.List,long,long,boolean,byte[],boolean,long,long,long,long,int,long,long,long,int,long,int,long,long,long,boolean,org.apache.logging.log4j.core.config.Property[])"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsAppender$Builder:org.apache.logging.log4j.core.appender.mom.JmsAppender build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.JmsAppender$Builder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager:org.apache.logging.log4j.core.appender.mom.JmsManager getJmsManager(java.lang.String,java.util.Properties,java.lang.String,java.lang.String,java.lang.String,char[],boolean,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.WriterManager:org.apache.logging.log4j.core.appender.WriterManager getManager(java.lang.String,java.lang.Object,org.apache.logging.log4j.core.appender.ManagerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.WriterAppender:org.apache.logging.log4j.core.appender.WriterManager getManager(java.io.Writer,boolean,org.apache.logging.log4j.core.StringLayout)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:org.apache.logging.log4j.core.appender.OutputStreamManager getManager(java.lang.String,java.lang.Object,org.apache.logging.log4j.core.appender.ManagerFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager getRollingRandomAccessFileManager(java.lang.String,java.lang.String,boolean,boolean,int,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:org.apache.logging.log4j.core.appender.rolling.RollingFileManager getFileManager(java.lang.String,java.lang.String,boolean,boolean,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.appender.ConsoleAppender:org.apache.logging.log4j.core.appender.OutputStreamManager getDefaultManager(org.apache.logging.log4j.core.appender.ConsoleAppender$Target,boolean,boolean,org.apache.logging.log4j.core.Layout)",
            "org.apache.logging.log4j.core.appender.ConsoleAppender:org.apache.logging.log4j.core.appender.OutputStreamManager getManager(org.apache.logging.log4j.core.appender.ConsoleAppender$Target,boolean,boolean,org.apache.logging.log4j.core.Layout)",
            "org.apache.logging.log4j.core.appender.OutputStreamAppender:org.apache.logging.log4j.core.appender.OutputStreamManager getManager(java.io.OutputStream,boolean,org.apache.logging.log4j.core.Layout)",
            "org.apache.logging.log4j.core.appender.RandomAccessFileManager:org.apache.logging.log4j.core.appender.RandomAccessFileManager getFileManager(java.lang.String,boolean,boolean,int,java.lang.String,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.appender.MemoryMappedFileManager:org.apache.logging.log4j.core.appender.MemoryMappedFileManager getFileManager(java.lang.String,boolean,boolean,int,java.lang.String,org.apache.logging.log4j.core.Layout)",
            "org.apache.logging.log4j.core.appender.FileManager:org.apache.logging.log4j.core.appender.FileManager getFileManager(java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,org.apache.logging.log4j.core.Layout,int,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.net.DatagramSocketManager:org.apache.logging.log4j.core.net.DatagramSocketManager getSocketManager(java.lang.String,int,org.apache.logging.log4j.core.Layout,int)",
            "org.apache.logging.log4j.core.net.TcpSocketManager:org.apache.logging.log4j.core.net.TcpSocketManager getSocketManager(java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int,org.apache.logging.log4j.core.net.SocketOptions)",
            "org.apache.logging.log4j.core.net.SslSocketManager:org.apache.logging.log4j.core.net.SslSocketManager getSocketManager(org.apache.logging.log4j.core.net.ssl.SslConfiguration,java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int,org.apache.logging.log4j.core.net.SocketOptions)"
        ]
    },
    "org.apache.logging.log4j.core.net.SmtpManager:org.apache.logging.log4j.core.net.SmtpManager getSmtpManager(org.apache.logging.log4j.core.config.Configuration,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,boolean,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.SmtpAppender:org.apache.logging.log4j.core.appender.SmtpAppender createAppender(org.apache.logging.log4j.core.config.Configuration,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.net.JndiManager:org.apache.logging.log4j.core.net.JndiManager getDefaultManager()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.JndiLookup:java.lang.String lookup(org.apache.logging.log4j.core.LogEvent,java.lang.String)",
            "org.apache.logging.log4j.core.selector.JndiContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean,java.net.URI)"
        ]
    },
    "org.apache.logging.log4j.core.net.JndiManager:org.apache.logging.log4j.core.net.JndiManager getDefaultManager(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.net.JndiManager:org.apache.logging.log4j.core.net.JndiManager getJndiManager(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.net.JndiManager:org.apache.logging.log4j.core.net.JndiManager getJndiManager(java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerConfiguration:org.apache.logging.log4j.core.net.JndiManager getJndiManager()"
        ]
    },
    "org.apache.logging.log4j.core.config.AppenderControl:void callAppender0(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void callAppenderPreventRecursion(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AbstractManager:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.mom.JmsManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.mom.JmsAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.appender.AbstractManager:void close()",
            "org.apache.logging.log4j.core.appender.HttpAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.AbstractWriterAppender:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.tools.picocli.CommandLine$RunAll:java.util.List handleParseResult(java.util.List,java.io.PrintStream,org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$Ansi)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.util.List parseWithHandlers(org.apache.logging.log4j.core.tools.picocli.CommandLine$IParseResultHandler,java.io.PrintStream,org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$Ansi,org.apache.logging.log4j.core.tools.picocli.CommandLine$IExceptionHandler,java.lang.String[])"
        ]
    },
    "org.apache.logging.log4j.core.tools.picocli.CommandLine$RunFirst:java.util.List handleParseResult(java.util.List,java.io.PrintStream,org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$Ansi)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.util.List parseWithHandlers(org.apache.logging.log4j.core.tools.picocli.CommandLine$IParseResultHandler,java.io.PrintStream,org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$Ansi,org.apache.logging.log4j.core.tools.picocli.CommandLine$IExceptionHandler,java.lang.String[])"
        ]
    },
    "org.apache.logging.log4j.core.tools.picocli.CommandLine$RunLast:java.util.List handleParseResult(java.util.List,java.io.PrintStream,org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$Ansi)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.util.List parseWithHandlers(org.apache.logging.log4j.core.tools.picocli.CommandLine$IParseResultHandler,java.io.PrintStream,org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$Ansi,org.apache.logging.log4j.core.tools.picocli.CommandLine$IExceptionHandler,java.lang.String[])"
        ]
    },
    "org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender$Builder:org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender$Builder:java.lang.Object build()",
            "org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender:org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender createAppender(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.Configuration)"
        ]
    },
    "org.apache.logging.log4j.core.appender.RollingFileAppender$Builder:org.apache.logging.log4j.core.appender.RollingFileAppender build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.RollingFileAppender$Builder:java.lang.Object build()",
            "org.apache.logging.log4j.core.appender.RollingFileAppender:org.apache.logging.log4j.core.appender.RollingFileAppender createAppender(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.Configuration)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void updateData(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:org.apache.logging.log4j.core.appender.AbstractManager getManager(java.lang.String,org.apache.logging.log4j.core.appender.ManagerFactory,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void updateData(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:org.apache.logging.log4j.core.appender.AbstractManager getManager(java.lang.String,org.apache.logging.log4j.core.appender.ManagerFactory,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jContextFactory:void <init>(org.apache.logging.log4j.core.selector.ContextSelector,org.apache.logging.log4j.core.util.ShutdownCallbackRegistry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:void <init>()",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:void <init>(org.apache.logging.log4j.core.selector.ContextSelector)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:void <init>(org.apache.logging.log4j.core.util.ShutdownCallbackRegistry)"
        ]
    },
    "org.apache.logging.log4j.core.util.ClockFactory$3:org.apache.logging.log4j.core.util.Clock get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.util.ClockFactory$3:java.lang.Object get()"
        ]
    },
    "org.apache.logging.log4j.core.util.ClockFactory$5:org.apache.logging.log4j.core.util.Clock get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.util.ClockFactory$5:java.lang.Object get()"
        ]
    },
    "org.apache.logging.log4j.core.util.ClockFactory$4:org.apache.logging.log4j.core.util.Clock get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.util.ClockFactory$4:java.lang.Object get()"
        ]
    },
    "org.apache.logging.log4j.core.util.ClockFactory$6:org.apache.logging.log4j.core.util.Clock get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.util.ClockFactory$6:java.lang.Object get()"
        ]
    },
    "org.apache.logging.log4j.core.appender.HttpAppender:void append(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.async.RingBufferLogEvent:void execute(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.RingBufferLogEventHandler:void onEvent(org.apache.logging.log4j.core.async.RingBufferLogEvent,long,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:void injectFields(org.apache.logging.log4j.core.util.Builder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object[] generateParameters(java.lang.reflect.Method)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.config.AwaitUnconditionallyReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void logMessageInCurrentThread(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.Logger:void logMessage(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void logMessageInCurrentThread(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.Logger:void logMessage(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.config.DefaultReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void logMessageInCurrentThread(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.Logger:void logMessage(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.config.LockingReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void logMessageInCurrentThread(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.Logger:void logMessage(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.layout.GelfLayout:byte[] toByteArray(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender:void tryAppend(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void writeByteArrayToManager(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.HttpURLConnectionManager:void send(org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.layout.AbstractLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.net.SmtpManager:void writeBuffer(org.apache.logging.log4j.core.LogEvent[],org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.Layout,java.io.OutputStream)"
        ]
    },
    "org.apache.logging.log4j.core.layout.GelfLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.GelfLayout:void encode(java.lang.Object,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.AbstractLayout:void encode(java.lang.Object,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.layout.GelfLayout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.GelfLayout:java.io.Serializable toSerializable(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:java.lang.Object wrapLogEvent(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:void toSerializable(org.apache.logging.log4j.core.LogEvent,java.io.Writer)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager:void send(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender:void tryAppend(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rewrite.PropertiesRewritePolicy:org.apache.logging.log4j.core.LogEvent rewrite(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rewrite.RewriteAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:void append(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.AbstractPathAction:java.nio.file.Path getBasePath()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.DeleteAction:java.util.List callScript()",
            "org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction:java.lang.String toString()",
            "org.apache.logging.log4j.core.appender.rolling.action.AbstractPathAction:boolean execute()",
            "org.apache.logging.log4j.core.appender.rolling.action.AbstractPathAction:boolean execute(java.nio.file.FileVisitor)",
            "org.apache.logging.log4j.core.appender.rolling.action.AbstractPathAction:java.lang.String toString()"
        ]
    },
    "org.apache.logging.log4j.core.config.composite.CompositeConfiguration:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.composite.CompositeConfiguration:org.apache.logging.log4j.core.config.Configuration reconfigure()",
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.util.List,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.config.json.JsonConfiguration:void <init>(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.json.JsonConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.config.json.JsonConfiguration:org.apache.logging.log4j.core.config.Configuration reconfigure()",
            "org.apache.logging.log4j.core.config.yaml.YamlConfiguration:void <init>(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)"
        ]
    },
    "org.apache.logging.log4j.core.config.xml.XmlConfiguration:void <init>(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.xml.XmlConfiguration:org.apache.logging.log4j.core.config.Configuration reconfigure()",
            "org.apache.logging.log4j.core.config.xml.XmlConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)"
        ]
    },
    "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.composite.CompositeConfiguration:org.apache.logging.log4j.core.config.Configuration reconfigure()",
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI,java.lang.ClassLoader)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.util.List,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.LiteralPatternConverter:void format(java.lang.Object,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.pattern.LiteralPatternConverter:void format(java.lang.StringBuilder,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.PatternProcessor:void formatFileName(java.lang.StringBuilder,java.lang.Object[])"
        ]
    },
    "org.apache.logging.log4j.core.pattern.PatternFormatter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.PatternLayout$PatternSerializer:java.lang.StringBuilder toSerializable(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.layout.Rfc5424Layout$FieldFormatter:org.apache.logging.log4j.core.layout.Rfc5424Layout$StructuredDataElement format(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.layout.PatternLayout$PatternSelectorSerializer:java.lang.StringBuilder toSerializable(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.layout.Rfc5424Layout:void appendMessage(java.lang.StringBuilder,org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.pattern.RegexReplacementConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.EqualsBaseReplacementConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.EqualsBaseReplacementConverter:void parseSubstitution(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.HighlightConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.VariablesNotEmptyReplacementConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.EncodingPatternConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.ThrowablePatternConverter:java.lang.String getSuffix(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.MaxLengthConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.StyleConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.PatternFormatter:void formatWithInfo(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.LogEventPatternConverter:void format(java.lang.Object,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.DatePatternConverter:void format(java.lang.Object,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy:java.lang.String getCurrentFileName(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy:org.apache.logging.log4j.core.appender.rolling.RolloverDescription rollover(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:java.lang.String getFileName()"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.PatternProcessor:void formatFileName(org.apache.logging.log4j.core.lookup.StrSubstitutor,java.lang.StringBuilder,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy:org.apache.logging.log4j.core.appender.rolling.RolloverDescription rollover(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy:int purgeAscending(int,int,org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy:int purgeDescending(int,int,org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy:org.apache.logging.log4j.core.appender.rolling.RolloverDescription rollover(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.appender.rolling.AbstractRolloverStrategy:java.util.SortedMap getEligibleFiles(org.apache.logging.log4j.core.appender.rolling.RollingFileManager,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Map,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:boolean replaceIn(java.lang.StringBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager getJDBCDatabaseManager(java.lang.String,int,org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource,java.lang.String,org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager getManager(java.lang.String,int,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource,java.lang.String,org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig[],org.apache.logging.log4j.core.appender.db.ColumnMapping[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager getManager(java.lang.String,int,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource,java.lang.String,org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig[],org.apache.logging.log4j.core.appender.db.ColumnMapping[],boolean,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager getManager(java.lang.String,int,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource,java.lang.String,org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig[],org.apache.logging.log4j.core.appender.db.ColumnMapping[],boolean,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender$Builder:org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.nosql.NoSqlDatabaseManager:org.apache.logging.log4j.core.appender.nosql.NoSqlDatabaseManager getNoSqlDatabaseManager(java.lang.String,int,org.apache.logging.log4j.core.appender.nosql.NoSqlProvider)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.nosql.NoSqlAppender$Builder:org.apache.logging.log4j.core.appender.nosql.NoSqlAppender build()",
            "org.apache.logging.log4j.core.appender.nosql.NoSqlAppender:org.apache.logging.log4j.core.appender.nosql.NoSqlAppender createAppender(java.lang.String,java.lang.String,org.apache.logging.log4j.core.Filter,java.lang.String,org.apache.logging.log4j.core.appender.nosql.NoSqlProvider)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender:void <init>(java.lang.String,org.apache.logging.log4j.core.Filter,org.apache.logging.log4j.core.Layout,boolean,java.util.List,long,long,boolean,byte[],boolean,long,long,long,long,int,long,long,long,int,long,int,long,long,long,boolean,org.apache.logging.log4j.core.config.Property[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender:org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender createAppender(java.lang.String,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,org.apache.logging.log4j.core.config.Property[],boolean,long,long,boolean,byte[],boolean,long,long,long,long,int,long,long,long,int,long,int,long,long,long,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsAppender$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.WriterAppender:org.apache.logging.log4j.core.appender.WriterManager getManager(java.io.Writer,boolean,org.apache.logging.log4j.core.StringLayout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.WriterAppender:org.apache.logging.log4j.core.appender.WriterAppender createAppender(org.apache.logging.log4j.core.StringLayout,org.apache.logging.log4j.core.Filter,java.io.Writer,java.lang.String,boolean,boolean)",
            "org.apache.logging.log4j.core.appender.WriterAppender:org.apache.logging.log4j.core.appender.WriterManager access$000(java.io.Writer,boolean,org.apache.logging.log4j.core.StringLayout)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager getRollingRandomAccessFileManager(java.lang.String,java.lang.String,boolean,boolean,int,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender$Builder:org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:org.apache.logging.log4j.core.appender.rolling.RollingFileManager getFileManager(java.lang.String,java.lang.String,boolean,boolean,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,int,boolean,boolean,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.RollingFileAppender$Builder:org.apache.logging.log4j.core.appender.RollingFileAppender build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.ConsoleAppender:org.apache.logging.log4j.core.appender.OutputStreamManager getDefaultManager(org.apache.logging.log4j.core.appender.ConsoleAppender$Target,boolean,boolean,org.apache.logging.log4j.core.Layout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.ConsoleAppender:org.apache.logging.log4j.core.appender.ConsoleAppender createDefaultAppenderForLayout(org.apache.logging.log4j.core.Layout)"
        ]
    },
    "org.apache.logging.log4j.core.appender.ConsoleAppender:org.apache.logging.log4j.core.appender.OutputStreamManager getManager(org.apache.logging.log4j.core.appender.ConsoleAppender$Target,boolean,boolean,org.apache.logging.log4j.core.Layout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.ConsoleAppender:org.apache.logging.log4j.core.appender.ConsoleAppender createAppender(org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.logging.log4j.core.appender.ConsoleAppender:org.apache.logging.log4j.core.appender.ConsoleAppender createAppender(org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,org.apache.logging.log4j.core.appender.ConsoleAppender$Target,java.lang.String,boolean,boolean,boolean)",
            "org.apache.logging.log4j.core.appender.ConsoleAppender:org.apache.logging.log4j.core.appender.OutputStreamManager access$300(org.apache.logging.log4j.core.appender.ConsoleAppender$Target,boolean,boolean,org.apache.logging.log4j.core.Layout)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamAppender:org.apache.logging.log4j.core.appender.OutputStreamManager getManager(java.io.OutputStream,boolean,org.apache.logging.log4j.core.Layout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamAppender:org.apache.logging.log4j.core.appender.OutputStreamAppender createAppender(org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.io.OutputStream,java.lang.String,boolean,boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamAppender:org.apache.logging.log4j.core.appender.OutputStreamManager access$000(java.io.OutputStream,boolean,org.apache.logging.log4j.core.Layout)"
        ]
    },
    "org.apache.logging.log4j.core.appender.RandomAccessFileManager:org.apache.logging.log4j.core.appender.RandomAccessFileManager getFileManager(java.lang.String,boolean,boolean,int,java.lang.String,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.RandomAccessFileAppender$Builder:org.apache.logging.log4j.core.appender.RandomAccessFileAppender build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.MemoryMappedFileManager:org.apache.logging.log4j.core.appender.MemoryMappedFileManager getFileManager(java.lang.String,boolean,boolean,int,java.lang.String,org.apache.logging.log4j.core.Layout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.MemoryMappedFileAppender$Builder:org.apache.logging.log4j.core.appender.MemoryMappedFileAppender build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.FileManager:org.apache.logging.log4j.core.appender.FileManager getFileManager(java.lang.String,boolean,boolean,boolean,boolean,java.lang.String,org.apache.logging.log4j.core.Layout,int,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.FileAppender$Builder:org.apache.logging.log4j.core.appender.FileAppender build()"
        ]
    },
    "org.apache.logging.log4j.core.net.DatagramSocketManager:org.apache.logging.log4j.core.net.DatagramSocketManager getSocketManager(java.lang.String,int,org.apache.logging.log4j.core.Layout,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.SocketAppender:org.apache.logging.log4j.core.net.AbstractSocketManager createSocketManager(java.lang.String,org.apache.logging.log4j.core.net.Protocol,java.lang.String,int,int,org.apache.logging.log4j.core.net.ssl.SslConfiguration,int,boolean,org.apache.logging.log4j.core.Layout,int,org.apache.logging.log4j.core.net.SocketOptions)"
        ]
    },
    "org.apache.logging.log4j.core.net.TcpSocketManager:org.apache.logging.log4j.core.net.TcpSocketManager getSocketManager(java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int,org.apache.logging.log4j.core.net.SocketOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.SocketAppender:org.apache.logging.log4j.core.net.AbstractSocketManager createSocketManager(java.lang.String,org.apache.logging.log4j.core.net.Protocol,java.lang.String,int,int,org.apache.logging.log4j.core.net.ssl.SslConfiguration,int,boolean,org.apache.logging.log4j.core.Layout,int,org.apache.logging.log4j.core.net.SocketOptions)",
            "org.apache.logging.log4j.core.net.TcpSocketManager:org.apache.logging.log4j.core.net.TcpSocketManager getSocketManager(java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int)"
        ]
    },
    "org.apache.logging.log4j.core.net.SslSocketManager:org.apache.logging.log4j.core.net.SslSocketManager getSocketManager(org.apache.logging.log4j.core.net.ssl.SslConfiguration,java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int,org.apache.logging.log4j.core.net.SocketOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.SocketAppender:org.apache.logging.log4j.core.net.AbstractSocketManager createSocketManager(java.lang.String,org.apache.logging.log4j.core.net.Protocol,java.lang.String,int,int,org.apache.logging.log4j.core.net.ssl.SslConfiguration,int,boolean,org.apache.logging.log4j.core.Layout,int,org.apache.logging.log4j.core.net.SocketOptions)",
            "org.apache.logging.log4j.core.net.SslSocketManager:org.apache.logging.log4j.core.net.SslSocketManager getSocketManager(org.apache.logging.log4j.core.net.ssl.SslConfiguration,java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int)"
        ]
    },
    "org.apache.logging.log4j.core.appender.SmtpAppender:org.apache.logging.log4j.core.appender.SmtpAppender createAppender(org.apache.logging.log4j.core.config.Configuration,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerConfiguration:org.apache.logging.log4j.core.net.JndiManager getJndiManager()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.JmsManager:void <init>(java.lang.String,org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerConfiguration)",
            "org.apache.logging.log4j.core.appender.mom.JmsManager:org.apache.logging.log4j.core.net.JndiManager getJndiManager()"
        ]
    },
    "org.apache.logging.log4j.core.config.AppenderControl:void callAppenderPreventRecursion(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void callAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.JmsAppender:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:boolean stop(long,java.util.concurrent.TimeUnit,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractFileAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.RollingFileAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.FileAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.RandomAccessFileAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.MemoryMappedFileAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.SocketAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AbstractManager:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender:void replaceManager(org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager)",
            "org.apache.logging.log4j.core.appender.mom.JmsManager:boolean closeJndiManager()",
            "org.apache.logging.log4j.core.appender.AbstractManager:void release()",
            "org.apache.logging.log4j.core.lookup.JndiLookup:java.lang.String lookup(org.apache.logging.log4j.core.LogEvent,java.lang.String)",
            "org.apache.logging.log4j.core.selector.JndiContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean,java.net.URI)",
            "org.apache.logging.log4j.core.util.Closer:boolean close(java.lang.AutoCloseable)"
        ]
    },
    "org.apache.logging.log4j.core.appender.HttpAppender:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AbstractWriterAppender:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.util.List parseWithHandlers(org.apache.logging.log4j.core.tools.picocli.CommandLine$IParseResultHandler,java.io.PrintStream,org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$Ansi,org.apache.logging.log4j.core.tools.picocli.CommandLine$IExceptionHandler,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.util.List parseWithHandler(org.apache.logging.log4j.core.tools.picocli.CommandLine$IParseResultHandler,java.io.PrintStream,java.lang.String[])",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object call(java.util.concurrent.Callable,java.io.PrintStream,org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$Ansi,java.lang.String[])",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:void run(java.lang.Runnable,java.io.PrintStream,org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$Ansi,java.lang.String[])"
        ]
    },
    "org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender:org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender createAppender(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.RollingFileAppender$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.RollingFileAppender:org.apache.logging.log4j.core.appender.RollingFileAppender createAppender(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.impl.Log4jContextFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.impl.Log4jContextFactory:void <init>(org.apache.logging.log4j.core.selector.ContextSelector)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.impl.Log4jContextFactory:void <init>(org.apache.logging.log4j.core.util.ShutdownCallbackRegistry)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.util.ClockFactory$3:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy:org.apache.logging.log4j.core.config.LoggerConfig getActiveLoggerConfig(org.apache.logging.log4j.util.Supplier)",
            "org.apache.logging.log4j.core.config.LockingReliabilityStrategy:org.apache.logging.log4j.core.config.LoggerConfig getActiveLoggerConfig(org.apache.logging.log4j.util.Supplier)",
            "org.apache.logging.log4j.core.util.ClockFactory:org.apache.logging.log4j.core.util.Clock createClock()"
        ]
    },
    "org.apache.logging.log4j.core.util.ClockFactory$5:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy:org.apache.logging.log4j.core.config.LoggerConfig getActiveLoggerConfig(org.apache.logging.log4j.util.Supplier)",
            "org.apache.logging.log4j.core.config.LockingReliabilityStrategy:org.apache.logging.log4j.core.config.LoggerConfig getActiveLoggerConfig(org.apache.logging.log4j.util.Supplier)",
            "org.apache.logging.log4j.core.util.ClockFactory:org.apache.logging.log4j.core.util.Clock createClock()"
        ]
    },
    "org.apache.logging.log4j.core.util.ClockFactory$4:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy:org.apache.logging.log4j.core.config.LoggerConfig getActiveLoggerConfig(org.apache.logging.log4j.util.Supplier)",
            "org.apache.logging.log4j.core.config.LockingReliabilityStrategy:org.apache.logging.log4j.core.config.LoggerConfig getActiveLoggerConfig(org.apache.logging.log4j.util.Supplier)",
            "org.apache.logging.log4j.core.util.ClockFactory:org.apache.logging.log4j.core.util.Clock createClock()"
        ]
    },
    "org.apache.logging.log4j.core.util.ClockFactory$6:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy:org.apache.logging.log4j.core.config.LoggerConfig getActiveLoggerConfig(org.apache.logging.log4j.util.Supplier)",
            "org.apache.logging.log4j.core.config.LockingReliabilityStrategy:org.apache.logging.log4j.core.config.LoggerConfig getActiveLoggerConfig(org.apache.logging.log4j.util.Supplier)",
            "org.apache.logging.log4j.core.util.ClockFactory:org.apache.logging.log4j.core.util.Clock createClock()"
        ]
    },
    "org.apache.logging.log4j.core.async.RingBufferLogEventHandler:void onEvent(org.apache.logging.log4j.core.async.RingBufferLogEvent,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.RingBufferLogEventHandler:void onEvent(java.lang.Object,long,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:java.lang.Object createPluginObject(org.apache.logging.log4j.core.config.plugins.util.PluginType,org.apache.logging.log4j.core.config.Node,org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLogger:void logMessageInCurrentThread(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void handleRingBufferFull(org.apache.logging.log4j.core.async.RingBufferLogEventTranslator)",
            "org.apache.logging.log4j.core.async.AsyncLogger:void handleRingBufferFull(java.lang.StackTraceElement,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.Logger:void logMessage(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender:void append(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender:void tryAppend(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender:void append(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void writeByteArrayToManager(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void tryAppend(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.SocketAppender:void directEncodeEvent(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.AbstractLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.GelfLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.AbstractLayout:void encode(java.lang.Object,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.PatternLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.net.SmtpManager:void writeBuffer(org.apache.logging.log4j.core.LogEvent[],org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.Layout,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.SmtpManager:void writeContent(org.apache.logging.log4j.core.LogEvent[],org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.Layout,java.io.ByteArrayOutputStream)"
        ]
    },
    "org.apache.logging.log4j.core.layout.GelfLayout:void encode(java.lang.Object,org.apache.logging.log4j.core.layout.ByteBufferDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void directEncodeEvent(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.layout.GelfLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.PatternLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.layout.AbstractLayout:void encode(java.lang.Object,org.apache.logging.log4j.core.layout.ByteBufferDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void directEncodeEvent(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.layout.GelfLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.PatternLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.layout.GelfLayout:java.io.Serializable toSerializable(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void writeInternal(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)",
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void flush()",
            "org.apache.logging.log4j.core.appender.AbstractAppender:java.io.Serializable toSerializable(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.AbstractWriterAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.layout.AbstractStringLayout:byte[] toByteArray(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:void toSerializable(org.apache.logging.log4j.core.LogEvent,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.XmlLayout:void toSerializable(org.apache.logging.log4j.core.LogEvent,java.io.Writer)",
            "org.apache.logging.log4j.core.layout.JsonLayout:void toSerializable(org.apache.logging.log4j.core.LogEvent,java.io.Writer)",
            "org.apache.logging.log4j.core.layout.YamlLayout:void toSerializable(org.apache.logging.log4j.core.LogEvent,java.io.Writer)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rewrite.RewriteAppender:void append(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.DeleteAction:java.util.List callScript()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.DeleteAction:boolean executeScript()"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:java.lang.Object truncate(java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.config.builder.impl.DefaultComponentBuilder:org.apache.logging.log4j.core.config.builder.api.ComponentBuilder addAttribute(java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.config.plugins.validation.validators.ValidPortValidator:boolean isValid(java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.config.plugins.validation.validators.ValidHostValidator:boolean isValid(java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.config.ConfigurationScheduler:java.lang.String toString()",
            "org.apache.logging.log4j.core.config.Node:java.lang.String toString()",
            "org.apache.logging.log4j.core.filter.RegexFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)",
            "org.apache.logging.log4j.core.layout.ScriptPatternSelector:org.apache.logging.log4j.core.pattern.PatternFormatter[] getFormatters(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.AbstractPathAction:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.CompositeAction:boolean execute()",
            "org.apache.logging.log4j.core.appender.rolling.action.DeleteAction:boolean execute()",
            "org.apache.logging.log4j.core.appender.rolling.action.AbstractAction:void run()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager$AsyncAction:boolean execute()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean rollover(org.apache.logging.log4j.core.appender.rolling.RolloverStrategy)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.AbstractPathAction:boolean execute(java.nio.file.FileVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.DeleteAction:java.util.List getSortedPaths()",
            "org.apache.logging.log4j.core.appender.rolling.action.AbstractPathAction:boolean execute()"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.AbstractPathAction:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:java.lang.Object truncate(java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.config.builder.impl.DefaultComponentBuilder:org.apache.logging.log4j.core.config.builder.api.ComponentBuilder addAttribute(java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.config.plugins.validation.validators.ValidPortValidator:boolean isValid(java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.config.plugins.validation.validators.ValidHostValidator:boolean isValid(java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.config.ConfigurationScheduler:java.lang.String toString()",
            "org.apache.logging.log4j.core.config.Node:java.lang.String toString()",
            "org.apache.logging.log4j.core.filter.RegexFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)",
            "org.apache.logging.log4j.core.layout.ScriptPatternSelector:org.apache.logging.log4j.core.pattern.PatternFormatter[] getFormatters(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)"
        ]
    },
    "org.apache.logging.log4j.core.config.composite.CompositeConfiguration:org.apache.logging.log4j.core.config.Configuration reconfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LoggerContext:void onChange(org.apache.logging.log4j.core.config.Reconfigurable)"
        ]
    },
    "org.apache.logging.log4j.core.config.json.JsonConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,boolean,java.lang.String)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI,java.lang.ClassLoader)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:void setConfigLocationUri(java.lang.String)",
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:void setConfigText(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.config.json.JsonConfiguration:org.apache.logging.log4j.core.config.Configuration reconfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LoggerContext:void onChange(org.apache.logging.log4j.core.config.Reconfigurable)"
        ]
    },
    "org.apache.logging.log4j.core.config.yaml.YamlConfiguration:void <init>(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.yaml.YamlConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.config.yaml.YamlConfiguration:org.apache.logging.log4j.core.config.Configuration reconfigure()"
        ]
    },
    "org.apache.logging.log4j.core.config.xml.XmlConfiguration:org.apache.logging.log4j.core.config.Configuration reconfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LoggerContext:void onChange(org.apache.logging.log4j.core.config.Reconfigurable)"
        ]
    },
    "org.apache.logging.log4j.core.config.xml.XmlConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,boolean,java.lang.String)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI,java.lang.ClassLoader)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:void setConfigLocationUri(java.lang.String)",
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:void setConfigText(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.config.ConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LoggerContext:void reconfigure(java.net.URI)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.PatternProcessor:void formatFileName(java.lang.StringBuilder,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.PatternProcessor:void formatFileName(java.lang.StringBuilder,boolean,java.lang.Object)",
            "org.apache.logging.log4j.core.appender.rolling.PatternProcessor:void formatFileName(org.apache.logging.log4j.core.lookup.StrSubstitutor,java.lang.StringBuilder,boolean,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.layout.PatternLayout$PatternSerializer:java.lang.StringBuilder toSerializable(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.PatternLayout$PatternSerializer:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.layout.PatternLayout:java.lang.StringBuilder toText(org.apache.logging.log4j.core.layout.AbstractStringLayout$Serializer2,org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.layout.Rfc5424Layout$FieldFormatter:org.apache.logging.log4j.core.layout.Rfc5424Layout$StructuredDataElement format(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.Rfc5424Layout:void appendStructuredElements(java.lang.StringBuilder,org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.PatternLayout$PatternSelectorSerializer:java.lang.StringBuilder toSerializable(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.PatternLayout$PatternSelectorSerializer:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.layout.PatternLayout:java.lang.StringBuilder toText(org.apache.logging.log4j.core.layout.AbstractStringLayout$Serializer2,org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.layout.Rfc5424Layout:void appendMessage(java.lang.StringBuilder,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.Rfc5424Layout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.RegexReplacementConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void formatWithInfo(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.LogEventPatternConverter:void format(java.lang.Object,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.EqualsBaseReplacementConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void formatWithInfo(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.LogEventPatternConverter:void format(java.lang.Object,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.EqualsBaseReplacementConverter:void parseSubstitution(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.EqualsBaseReplacementConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.HighlightConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void formatWithInfo(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.LogEventPatternConverter:void format(java.lang.Object,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.VariablesNotEmptyReplacementConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void formatWithInfo(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.LogEventPatternConverter:void format(java.lang.Object,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.EncodingPatternConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void formatWithInfo(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.LogEventPatternConverter:void format(java.lang.Object,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.ThrowablePatternConverter:java.lang.String getSuffix(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.RootThrowablePatternConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.ThrowablePatternConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.AbstractStyleNameConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void formatWithInfo(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.LogEventPatternConverter:void format(java.lang.Object,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.MaxLengthConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void formatWithInfo(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.LogEventPatternConverter:void format(java.lang.Object,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.StyleConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void formatWithInfo(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.LogEventPatternConverter:void format(java.lang.Object,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.DatePatternConverter:void format(java.lang.Object,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.DatePatternConverter:void format(java.lang.StringBuilder,java.lang.Object[])"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy:org.apache.logging.log4j.core.appender.rolling.RolloverDescription rollover(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean rollover(org.apache.logging.log4j.core.appender.rolling.RolloverStrategy)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:java.lang.String getFileName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy:org.apache.logging.log4j.core.appender.rolling.RolloverDescription rollover(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void writeToDestination(byte[],int,int)",
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void createFileAfterRollover()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void initialize()",
            "org.apache.logging.log4j.core.appender.FileManager:java.io.OutputStream createOutputStream()"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy:int purgeAscending(int,int,org.apache.logging.log4j.core.appender.rolling.RollingFileManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy:int purge(int,int,org.apache.logging.log4j.core.appender.rolling.RollingFileManager)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy:int purgeDescending(int,int,org.apache.logging.log4j.core.appender.rolling.RollingFileManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy:int purge(int,int,org.apache.logging.log4j.core.appender.rolling.RollingFileManager)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy:org.apache.logging.log4j.core.appender.rolling.RolloverDescription rollover(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean rollover(org.apache.logging.log4j.core.appender.rolling.RolloverStrategy)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.AbstractRolloverStrategy:java.util.SortedMap getEligibleFiles(org.apache.logging.log4j.core.appender.rolling.RollingFileManager,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy:int purgeDescending(int,int,org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.appender.rolling.AbstractRolloverStrategy:java.util.SortedMap getEligibleFiles(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)"
        ]
    },
    "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender$Builder:org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender$Builder:java.lang.Object build()",
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender:org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender createAppender(java.lang.String,java.lang.String,org.apache.logging.log4j.core.Filter,org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource,java.lang.String,java.lang.String,org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig[])"
        ]
    },
    "org.apache.logging.log4j.core.appender.nosql.NoSqlAppender$Builder:org.apache.logging.log4j.core.appender.nosql.NoSqlAppender build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.nosql.NoSqlAppender$Builder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.nosql.NoSqlAppender:org.apache.logging.log4j.core.appender.nosql.NoSqlAppender createAppender(java.lang.String,java.lang.String,org.apache.logging.log4j.core.Filter,java.lang.String,org.apache.logging.log4j.core.appender.nosql.NoSqlProvider)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender:org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender createAppender(java.lang.String,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,org.apache.logging.log4j.core.config.Property[],boolean,long,long,boolean,byte[],boolean,long,long,long,long,int,long,long,long,int,long,int,long,long,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.WriterAppender:org.apache.logging.log4j.core.appender.WriterAppender createAppender(org.apache.logging.log4j.core.StringLayout,org.apache.logging.log4j.core.Filter,java.io.Writer,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.WriterAppender:org.apache.logging.log4j.core.appender.WriterManager access$000(java.io.Writer,boolean,org.apache.logging.log4j.core.StringLayout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.WriterAppender$Builder:org.apache.logging.log4j.core.appender.WriterAppender build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.ConsoleAppender:org.apache.logging.log4j.core.appender.ConsoleAppender createDefaultAppenderForLayout(org.apache.logging.log4j.core.Layout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void setToDefault()"
        ]
    },
    "org.apache.logging.log4j.core.appender.ConsoleAppender:org.apache.logging.log4j.core.appender.ConsoleAppender createAppender(org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.ConsoleAppender:org.apache.logging.log4j.core.appender.ConsoleAppender createAppender(org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,org.apache.logging.log4j.core.appender.ConsoleAppender$Target,java.lang.String,boolean,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.ConsoleAppender:org.apache.logging.log4j.core.appender.OutputStreamManager access$300(org.apache.logging.log4j.core.appender.ConsoleAppender$Target,boolean,boolean,org.apache.logging.log4j.core.Layout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.ConsoleAppender$Builder:org.apache.logging.log4j.core.appender.ConsoleAppender build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamAppender:org.apache.logging.log4j.core.appender.OutputStreamAppender createAppender(org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.io.OutputStream,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.OutputStreamAppender:org.apache.logging.log4j.core.appender.OutputStreamManager access$000(java.io.OutputStream,boolean,org.apache.logging.log4j.core.Layout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamAppender$Builder:org.apache.logging.log4j.core.appender.OutputStreamAppender build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.RandomAccessFileAppender$Builder:org.apache.logging.log4j.core.appender.RandomAccessFileAppender build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.RandomAccessFileAppender$Builder:java.lang.Object build()",
            "org.apache.logging.log4j.core.appender.RandomAccessFileAppender:org.apache.logging.log4j.core.appender.RandomAccessFileAppender createAppender(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.Configuration)"
        ]
    },
    "org.apache.logging.log4j.core.appender.MemoryMappedFileAppender$Builder:org.apache.logging.log4j.core.appender.MemoryMappedFileAppender build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.MemoryMappedFileAppender$Builder:java.lang.Object build()",
            "org.apache.logging.log4j.core.appender.MemoryMappedFileAppender:org.apache.logging.log4j.core.appender.MemoryMappedFileAppender createAppender(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.Configuration)"
        ]
    },
    "org.apache.logging.log4j.core.appender.FileAppender$Builder:org.apache.logging.log4j.core.appender.FileAppender build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.FileAppender$Builder:java.lang.Object build()",
            "org.apache.logging.log4j.core.appender.FileAppender:org.apache.logging.log4j.core.appender.FileAppender createAppender(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.Configuration)"
        ]
    },
    "org.apache.logging.log4j.core.appender.SocketAppender:org.apache.logging.log4j.core.net.AbstractSocketManager createSocketManager(java.lang.String,org.apache.logging.log4j.core.net.Protocol,java.lang.String,int,int,org.apache.logging.log4j.core.net.ssl.SslConfiguration,int,boolean,org.apache.logging.log4j.core.Layout,int,org.apache.logging.log4j.core.net.SocketOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.SyslogAppender$Builder:org.apache.logging.log4j.core.appender.SyslogAppender build()",
            "org.apache.logging.log4j.core.appender.SocketAppender$Builder:org.apache.logging.log4j.core.appender.SocketAppender build()",
            "org.apache.logging.log4j.core.appender.SocketAppender:org.apache.logging.log4j.core.net.AbstractSocketManager createSocketManager(java.lang.String,org.apache.logging.log4j.core.net.Protocol,java.lang.String,int,int,org.apache.logging.log4j.core.net.ssl.SslConfiguration,int,boolean,org.apache.logging.log4j.core.Layout,int)"
        ]
    },
    "org.apache.logging.log4j.core.net.TcpSocketManager:org.apache.logging.log4j.core.net.TcpSocketManager getSocketManager(java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.net.SslSocketManager:org.apache.logging.log4j.core.net.SslSocketManager getSocketManager(org.apache.logging.log4j.core.net.ssl.SslConfiguration,java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager:org.apache.logging.log4j.core.net.JndiManager getJndiManager()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.JmsManager$Reconnector:void reconnect()"
        ]
    },
    "org.apache.logging.log4j.core.config.AppenderControl:void callAppender(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rewrite.RewriteAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.FailoverAppender:void callAppender(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.FailoverAppender:void failover(org.apache.logging.log4j.core.LogEvent,java.lang.Exception)",
            "org.apache.logging.log4j.core.appender.AsyncAppender$AsyncThread:void run()",
            "org.apache.logging.log4j.core.appender.AsyncAppender$AsyncThread:boolean callAppenders(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.AsyncAppender:void logToErrorAppenderIfNecessary(boolean,org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.config.LoggerConfig:void callAppenders(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.mom.JmsAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.appender.HttpAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.AbstractWriterAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.AsyncAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:boolean commitAndCloseAll()",
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void setTriggeringPolicy(org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:void deleteAppender(java.lang.String)",
            "org.apache.logging.log4j.core.config.Configurator:void shutdown(org.apache.logging.log4j.core.LoggerContext)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void removeAppender(java.lang.String)",
            "org.apache.logging.log4j.core.config.LoggerConfig:void cleanupFilter(org.apache.logging.log4j.core.config.AppenderControl)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.LoggerContext:void close()",
            "org.apache.logging.log4j.core.LoggerContext:void terminate()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.core.config.Configuration setConfiguration(org.apache.logging.log4j.core.config.Configuration)"
        ]
    },
    "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.async.AsyncLoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.Configurator:boolean shutdown(org.apache.logging.log4j.core.LoggerContext,long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.LoggerContext$1:void run()"
        ]
    },
    "org.apache.logging.log4j.core.appender.AbstractFileAppender:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.RollingFileAppender:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.FileAppender:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.RandomAccessFileAppender:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.MemoryMappedFileAppender:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.SocketAppender:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender:void replaceManager(org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.mom.JmsManager:boolean closeJndiManager()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.JmsManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.mom.JmsManager:void send(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AbstractManager:void release()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.util.Closer:boolean close(java.lang.AutoCloseable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void closeResources(boolean)",
            "org.apache.logging.log4j.core.util.Closer:boolean closeSilently(java.lang.AutoCloseable)"
        ]
    },
    "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.util.List parseWithHandler(org.apache.logging.log4j.core.tools.picocli.CommandLine$IParseResultHandler,java.io.PrintStream,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object call(java.util.concurrent.Callable,java.io.PrintStream,org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$Ansi,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object call(java.util.concurrent.Callable,java.io.PrintStream,java.lang.String[])"
        ]
    },
    "org.apache.logging.log4j.core.tools.picocli.CommandLine:void run(java.lang.Runnable,java.io.PrintStream,org.apache.logging.log4j.core.tools.picocli.CommandLine$Help$Ansi,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:void run(java.lang.Runnable,java.io.PrintStream,java.lang.String[])"
        ]
    },
    "org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy:org.apache.logging.log4j.core.config.LoggerConfig getActiveLoggerConfig(org.apache.logging.log4j.util.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy:org.apache.logging.log4j.core.config.LoggerConfig getActiveLoggerConfig(org.apache.logging.log4j.util.Supplier)",
            "org.apache.logging.log4j.core.config.LockingReliabilityStrategy:org.apache.logging.log4j.core.config.LoggerConfig getActiveLoggerConfig(org.apache.logging.log4j.util.Supplier)"
        ]
    },
    "org.apache.logging.log4j.core.config.LockingReliabilityStrategy:org.apache.logging.log4j.core.config.LoggerConfig getActiveLoggerConfig(org.apache.logging.log4j.util.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy:org.apache.logging.log4j.core.config.LoggerConfig getActiveLoggerConfig(org.apache.logging.log4j.util.Supplier)",
            "org.apache.logging.log4j.core.config.LockingReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.config.LockingReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.config.LockingReliabilityStrategy:org.apache.logging.log4j.core.config.LoggerConfig getActiveLoggerConfig(org.apache.logging.log4j.util.Supplier)"
        ]
    },
    "org.apache.logging.log4j.core.util.ClockFactory:org.apache.logging.log4j.core.util.Clock createClock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.util.ClockFactory:org.apache.logging.log4j.core.util.Clock getClock()"
        ]
    },
    "org.apache.logging.log4j.core.async.RingBufferLogEventHandler:void onEvent(java.lang.Object,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.AbstractConfiguration:java.lang.Object createPluginObject(org.apache.logging.log4j.core.config.plugins.util.PluginType,org.apache.logging.log4j.core.config.Node,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void createConfiguration(org.apache.logging.log4j.core.config.Node,org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLogger:void handleRingBufferFull(org.apache.logging.log4j.core.async.RingBufferLogEventTranslator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void publish(org.apache.logging.log4j.core.async.RingBufferLogEventTranslator)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLogger:void handleRingBufferFull(java.lang.StackTraceElement,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void logWithVarargTranslator(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender:void append(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void tryAppend(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void append(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.SocketAppender:void directEncodeEvent(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void tryAppend(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.PatternLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.AbstractLayout:void encode(java.lang.Object,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.PatternLayout:void encode(java.lang.Object,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.net.SmtpManager:void writeContent(org.apache.logging.log4j.core.LogEvent[],org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.Layout,java.io.ByteArrayOutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.SmtpManager:byte[] formatContentToBytes(org.apache.logging.log4j.core.LogEvent[],org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.Layout)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void directEncodeEvent(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void tryAppend(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void writeInternal(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void writeThrough(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)",
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void flush()",
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void writeInternal(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void writeThrough(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void buffer(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:boolean shutdown()"
        ]
    },
    "org.apache.logging.log4j.core.appender.AbstractAppender:java.io.Serializable toSerializable(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.mom.JmsAppender:void append(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AbstractWriterAppender:void append(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.AbstractStringLayout:byte[] toByteArray(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender:void tryAppend(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void writeByteArrayToManager(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.HttpURLConnectionManager:void send(org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.layout.AbstractLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.net.SmtpManager:void writeBuffer(org.apache.logging.log4j.core.LogEvent[],org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.Layout,java.io.OutputStream)"
        ]
    },
    "org.apache.logging.log4j.core.layout.XmlLayout:void toSerializable(org.apache.logging.log4j.core.LogEvent,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.JsonLayout:void toSerializable(org.apache.logging.log4j.core.LogEvent,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.YamlLayout:void toSerializable(org.apache.logging.log4j.core.LogEvent,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.DeleteAction:boolean executeScript()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.DeleteAction:boolean execute()"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:java.lang.Object truncate(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void setStatementObject(int,java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void writeInternal(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)"
        ]
    },
    "org.apache.logging.log4j.core.config.builder.impl.DefaultComponentBuilder:org.apache.logging.log4j.core.config.builder.api.ComponentBuilder addAttribute(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.plugins.validation.validators.ValidPortValidator:boolean isValid(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:void injectFields(org.apache.logging.log4j.core.util.Builder)",
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object[] generateParameters(java.lang.reflect.Method)",
            "org.apache.logging.log4j.core.config.plugins.validation.validators.ValidPortValidator:boolean isValid(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.config.plugins.validation.validators.ValidHostValidator:boolean isValid(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:void injectFields(org.apache.logging.log4j.core.util.Builder)",
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object[] generateParameters(java.lang.reflect.Method)"
        ]
    },
    "org.apache.logging.log4j.core.config.ConfigurationScheduler:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:java.lang.Object truncate(java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy:void initialize(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.config.builder.impl.DefaultComponentBuilder:org.apache.logging.log4j.core.config.builder.api.ComponentBuilder addAttribute(java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.config.plugins.validation.validators.ValidPortValidator:boolean isValid(java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.config.plugins.validation.validators.ValidHostValidator:boolean isValid(java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.config.Node:java.lang.String toString()",
            "org.apache.logging.log4j.core.filter.RegexFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)",
            "org.apache.logging.log4j.core.layout.ScriptPatternSelector:org.apache.logging.log4j.core.pattern.PatternFormatter[] getFormatters(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)"
        ]
    },
    "org.apache.logging.log4j.core.config.Node:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:java.lang.Object truncate(java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.config.builder.impl.DefaultComponentBuilder:org.apache.logging.log4j.core.config.builder.api.ComponentBuilder addAttribute(java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.config.plugins.validation.validators.ValidPortValidator:boolean isValid(java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.config.plugins.validation.validators.ValidHostValidator:boolean isValid(java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.config.plugins.visitors.PluginElementVisitor:java.lang.Object visit(org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.config.Node,org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.config.Node:java.lang.String toString()",
            "org.apache.logging.log4j.core.filter.RegexFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)",
            "org.apache.logging.log4j.core.layout.ScriptPatternSelector:org.apache.logging.log4j.core.pattern.PatternFormatter[] getFormatters(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.lookup.StrSubstitutor:java.lang.String replace(java.lang.Object,java.util.Properties)"
        ]
    },
    "org.apache.logging.log4j.core.filter.RegexFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Throwable)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.CharSequence,java.lang.Throwable)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.layout.ScriptPatternSelector:org.apache.logging.log4j.core.pattern.PatternFormatter[] getFormatters(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.PatternLayout$PatternSelectorSerializer:java.lang.StringBuilder toSerializable(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.CompositeAction:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.CompositeAction:void run()",
            "org.apache.logging.log4j.core.appender.rolling.action.CompositeAction:boolean execute()",
            "org.apache.logging.log4j.core.appender.rolling.action.AbstractAction:void run()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager$AsyncAction:boolean execute()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean rollover(org.apache.logging.log4j.core.appender.rolling.RolloverStrategy)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.DeleteAction:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.CompositeAction:boolean execute()",
            "org.apache.logging.log4j.core.appender.rolling.action.AbstractAction:void run()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager$AsyncAction:boolean execute()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean rollover(org.apache.logging.log4j.core.appender.rolling.RolloverStrategy)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.AbstractAction:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean rollover(org.apache.logging.log4j.core.appender.rolling.RolloverStrategy)",
            "org.apache.logging.log4j.core.config.ConfigurationScheduler$CronRunnable:void run()",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object execute(org.apache.logging.log4j.core.tools.picocli.CommandLine)",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry:void run()",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable:void run()"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager$AsyncAction:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.CompositeAction:boolean execute()",
            "org.apache.logging.log4j.core.appender.rolling.action.AbstractAction:void run()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager$AsyncAction:boolean execute()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean rollover(org.apache.logging.log4j.core.appender.rolling.RolloverStrategy)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean rollover(org.apache.logging.log4j.core.appender.rolling.RolloverStrategy)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void rollover()"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.DeleteAction:java.util.List getSortedPaths()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.DeleteAction:java.util.List callScript()",
            "org.apache.logging.log4j.core.appender.rolling.action.DeleteAction:boolean execute(java.nio.file.FileVisitor)"
        ]
    },
    "org.apache.logging.log4j.core.LoggerContext:void onChange(org.apache.logging.log4j.core.config.Reconfigurable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.ConfiguratonFileWatcher$ReconfigurationRunnable:void run()"
        ]
    },
    "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI)"
        ]
    },
    "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,boolean,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI)"
        ]
    },
    "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,boolean,java.lang.String)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI,java.lang.ClassLoader)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:void setConfigLocationUri(java.lang.String)",
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:void setConfigText(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.config.ConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.composite.CompositeConfiguration:org.apache.logging.log4j.core.config.Configuration reconfigure()",
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI,java.lang.ClassLoader)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.util.List,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:void setConfigLocationUri(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:void setConfigText(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.yaml.YamlConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,boolean,java.lang.String)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI,java.lang.ClassLoader)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:void setConfigLocationUri(java.lang.String)",
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:void setConfigText(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.config.yaml.YamlConfiguration:org.apache.logging.log4j.core.config.Configuration reconfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LoggerContext:void onChange(org.apache.logging.log4j.core.config.Reconfigurable)"
        ]
    },
    "org.apache.logging.log4j.core.LoggerContext:void reconfigure(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LoggerContext:void setConfigLocation(java.net.URI)",
            "org.apache.logging.log4j.core.LoggerContext:void reconfigure()"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.PatternProcessor:void formatFileName(java.lang.StringBuilder,boolean,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.layout.PatternLayout$PatternSerializer:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.AbstractStringLayout:java.lang.String serializeToString(org.apache.logging.log4j.core.layout.AbstractStringLayout$Serializer)",
            "org.apache.logging.log4j.core.layout.PatternLayout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.net.SmtpManager:javax.mail.internet.MimeMessage createMimeMessage(org.apache.logging.log4j.core.net.SmtpManager$FactoryData,javax.mail.Session,org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.PatternLayout:java.lang.StringBuilder toText(org.apache.logging.log4j.core.layout.AbstractStringLayout$Serializer2,org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.PatternLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.layout.Rfc5424Layout:void appendStructuredElements(java.lang.StringBuilder,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.Rfc5424Layout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.PatternLayout$PatternSelectorSerializer:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.AbstractStringLayout:java.lang.String serializeToString(org.apache.logging.log4j.core.layout.AbstractStringLayout$Serializer)",
            "org.apache.logging.log4j.core.layout.PatternLayout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.net.SmtpManager:javax.mail.internet.MimeMessage createMimeMessage(org.apache.logging.log4j.core.net.SmtpManager$FactoryData,javax.mail.Session,org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.Rfc5424Layout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.Rfc5424Layout:java.io.Serializable toSerializable(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.RootThrowablePatternConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void formatWithInfo(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.LogEventPatternConverter:void format(java.lang.Object,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.ThrowablePatternConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.RootThrowablePatternConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void formatWithInfo(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.LogEventPatternConverter:void format(java.lang.Object,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.ExtendedThrowablePatternConverter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void format(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.PatternFormatter:void formatWithInfo(org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)",
            "org.apache.logging.log4j.core.pattern.LogEventPatternConverter:void format(java.lang.Object,java.lang.StringBuilder)"
        ]
    },
    "org.apache.logging.log4j.core.pattern.DatePatternConverter:void format(java.lang.StringBuilder,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.PatternProcessor:void formatFileName(java.lang.StringBuilder,java.lang.Object[])"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void writeToDestination(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[],int,int,boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void flushBuffer(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void createFileAfterRollover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void rollover()"
        ]
    },
    "org.apache.logging.log4j.core.appender.FileManager:java.io.OutputStream createOutputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void createFileAfterRollover()",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:java.io.OutputStream getOutputStream()"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy:int purge(int,int,org.apache.logging.log4j.core.appender.rolling.RollingFileManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy:org.apache.logging.log4j.core.appender.rolling.RolloverDescription rollover(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.AbstractRolloverStrategy:java.util.SortedMap getEligibleFiles(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy:int purge(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy:java.lang.String getCurrentFileName(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy:int purgeAscending(int,int,org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.appender.rolling.DefaultRolloverStrategy:org.apache.logging.log4j.core.appender.rolling.RolloverDescription rollover(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender:org.apache.logging.log4j.core.appender.db.jdbc.JdbcAppender createAppender(java.lang.String,java.lang.String,org.apache.logging.log4j.core.Filter,org.apache.logging.log4j.core.appender.db.jdbc.ConnectionSource,java.lang.String,java.lang.String,org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.nosql.NoSqlAppender$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.WriterAppender$Builder:org.apache.logging.log4j.core.appender.WriterAppender build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.WriterAppender$Builder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.config.AbstractConfiguration:void setToDefault()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void doConfigure()",
            "org.apache.logging.log4j.core.config.DefaultConfiguration:void <init>()"
        ]
    },
    "org.apache.logging.log4j.core.appender.ConsoleAppender$Builder:org.apache.logging.log4j.core.appender.ConsoleAppender build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.ConsoleAppender$Builder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamAppender$Builder:org.apache.logging.log4j.core.appender.OutputStreamAppender build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamAppender$Builder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.RandomAccessFileAppender$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.RandomAccessFileAppender:org.apache.logging.log4j.core.appender.RandomAccessFileAppender createAppender(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.MemoryMappedFileAppender$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.MemoryMappedFileAppender:org.apache.logging.log4j.core.appender.MemoryMappedFileAppender createAppender(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.FileAppender$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.FileAppender:org.apache.logging.log4j.core.appender.FileAppender createAppender(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.SyslogAppender$Builder:org.apache.logging.log4j.core.appender.SyslogAppender build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.SyslogAppender$Builder:java.lang.Object build()",
            "org.apache.logging.log4j.core.appender.SyslogAppender:org.apache.logging.log4j.core.appender.SyslogAppender createAppender(java.lang.String,int,java.lang.String,org.apache.logging.log4j.core.net.ssl.SslConfiguration,int,int,boolean,java.lang.String,boolean,boolean,org.apache.logging.log4j.core.net.Facility,java.lang.String,int,boolean,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.Filter,org.apache.logging.log4j.core.config.Configuration,java.nio.charset.Charset,java.lang.String,org.apache.logging.log4j.core.layout.LoggerFields[],boolean)"
        ]
    },
    "org.apache.logging.log4j.core.appender.SocketAppender$Builder:org.apache.logging.log4j.core.appender.SocketAppender build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.SocketAppender$Builder:java.lang.Object build()",
            "org.apache.logging.log4j.core.appender.SocketAppender:org.apache.logging.log4j.core.appender.SocketAppender createAppender(java.lang.String,int,org.apache.logging.log4j.core.net.Protocol,org.apache.logging.log4j.core.net.ssl.SslConfiguration,int,int,boolean,java.lang.String,boolean,boolean,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,boolean,org.apache.logging.log4j.core.config.Configuration)"
        ]
    },
    "org.apache.logging.log4j.core.appender.SocketAppender:org.apache.logging.log4j.core.net.AbstractSocketManager createSocketManager(java.lang.String,org.apache.logging.log4j.core.net.Protocol,java.lang.String,int,int,org.apache.logging.log4j.core.net.ssl.SslConfiguration,int,boolean,org.apache.logging.log4j.core.Layout,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.FailoverAppender:void callAppender(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.FailoverAppender:void append(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.FailoverAppender:void failover(org.apache.logging.log4j.core.LogEvent,java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.FailoverAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.FailoverAppender:void callAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AsyncAppender$AsyncThread:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager:void closeProducer(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.AsyncAppender:void start()",
            "org.apache.logging.log4j.core.config.ConfiguratonFileWatcher:void fileModified(java.io.File)",
            "org.apache.logging.log4j.core.config.ConfigurationScheduler$CronRunnable:void run()",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object execute(org.apache.logging.log4j.core.tools.picocli.CommandLine)",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry:void run()",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable:void run()",
            "org.apache.logging.log4j.core.util.CachedClock:void <init>()",
            "org.apache.logging.log4j.core.util.CoarseCachedClock:void <init>()"
        ]
    },
    "org.apache.logging.log4j.core.appender.AsyncAppender$AsyncThread:boolean callAppenders(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AsyncAppender$AsyncThread:void run()",
            "org.apache.logging.log4j.core.appender.AsyncAppender:void logMessageInCurrentThread(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AsyncAppender:void logToErrorAppenderIfNecessary(boolean,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AsyncAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.AsyncAppender:void logMessageInCurrentThread(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.AsyncAppender:void logMessageInBackgroundThread(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.config.LoggerConfig:void callAppenders(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void callAppenders(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.config.LoggerConfig:void processLogEvent(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.config.LoggerConfig$LoggerConfigPredicate)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AsyncAppender:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfig:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:boolean commitAndCloseAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:boolean shutdownInternal()"
        ]
    },
    "org.apache.logging.log4j.core.appender.routing.RoutingAppender:void deleteAppender(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.routing.IdlePurgePolicy:void purge()"
        ]
    },
    "org.apache.logging.log4j.core.config.Configurator:void shutdown(org.apache.logging.log4j.core.LoggerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.AbstractConfiguration:void removeAppender(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.LoggerConfig:void cleanupFilter(org.apache.logging.log4j.core.config.AppenderControl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.LoggerConfig:void removeAppender(java.lang.String)",
            "org.apache.logging.log4j.core.config.LoggerConfig:void clearAppenders()"
        ]
    },
    "org.apache.logging.log4j.core.LoggerContext:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.util.Closer:boolean close(java.lang.AutoCloseable)"
        ]
    },
    "org.apache.logging.log4j.core.LoggerContext:void terminate()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.core.config.Configuration setConfiguration(org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LoggerContext:void start(org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.LoggerContext:void reconfigure(java.net.URI)",
            "org.apache.logging.log4j.core.LoggerContext:void onChange(org.apache.logging.log4j.core.config.Reconfigurable)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.Configurator:boolean shutdown(org.apache.logging.log4j.core.LoggerContext,long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.CompositeFilter:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.filter.AbstractFilterable:boolean stop(long,java.util.concurrent.TimeUnit,boolean)",
            "org.apache.logging.log4j.core.AbstractLifeCycle:void stop()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.LoggerContext$1:void run()"
        ]
    },
    "org.apache.logging.log4j.core.config.Configurator:boolean shutdown(org.apache.logging.log4j.core.LoggerContext,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.LoggerContext$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.ConfigurationScheduler$CronRunnable:void run()",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object execute(org.apache.logging.log4j.core.tools.picocli.CommandLine)",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry:void run()",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable:void run()"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void closeResources(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void checkConnection()",
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:boolean commitAndClose()",
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager$Reconnector:void reconnect()"
        ]
    },
    "org.apache.logging.log4j.core.util.Closer:boolean closeSilently(java.lang.AutoCloseable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void writeInternal(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)",
            "org.apache.logging.log4j.core.appender.nosql.NoSqlDatabaseManager:boolean shutdownInternal()",
            "org.apache.logging.log4j.core.appender.MemoryMappedFileManager$MemoryMappedFileManagerFactory:org.apache.logging.log4j.core.appender.MemoryMappedFileManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.MemoryMappedFileManager$FactoryData)",
            "org.apache.logging.log4j.core.config.xml.XmlConfiguration:void <init>(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:java.lang.String readContents(java.io.InputStream,java.nio.charset.Charset)",
            "org.apache.logging.log4j.core.net.TcpSocketManager$TcpSocketManagerFactory:org.apache.logging.log4j.core.net.TcpSocketManager createManager(java.lang.String,org.apache.logging.log4j.core.net.TcpSocketManager$FactoryData)",
            "org.apache.logging.log4j.core.net.TcpSocketManager$Reconnector:void reconnect()",
            "org.apache.logging.log4j.core.util.Throwables:java.util.List toStringList(java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object call(java.util.concurrent.Callable,java.io.PrintStream,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.tools.picocli.CommandLine:void run(java.lang.Runnable,java.io.PrintStream,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void actualAsyncLog(org.apache.logging.log4j.core.async.RingBufferLogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.config.LockingReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void actualAsyncLog(org.apache.logging.log4j.core.async.RingBufferLogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.util.ClockFactory:org.apache.logging.log4j.core.util.Clock getClock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.IfLastModified:void <clinit>()",
            "org.apache.logging.log4j.core.async.AsyncLogger:void <clinit>()",
            "org.apache.logging.log4j.core.filter.TimeFilter:void <clinit>()",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:void <clinit>()",
            "org.apache.logging.log4j.core.impl.ReusableLogEventFactory:void <clinit>()"
        ]
    },
    "org.apache.logging.log4j.core.config.AbstractConfiguration:void createConfiguration(org.apache.logging.log4j.core.config.Node,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:org.apache.logging.log4j.core.Appender createAppender(org.apache.logging.log4j.core.appender.routing.Route,org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.AppenderSet:org.apache.logging.log4j.core.Appender createAppender(java.lang.String,java.lang.String)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void doConfigure()",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void createConfiguration(org.apache.logging.log4j.core.config.Node,org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLogger:void publish(org.apache.logging.log4j.core.async.RingBufferLogEventTranslator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void logWithThreadLocalTranslator(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLogger:void logWithVarargTranslator(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void logMessage(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void append(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.RollingFileAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.RandomAccessFileAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.MemoryMappedFileAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.PatternLayout:void encode(java.lang.Object,org.apache.logging.log4j.core.layout.ByteBufferDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void directEncodeEvent(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.layout.GelfLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.PatternLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.net.SmtpManager:byte[] formatContentToBytes(org.apache.logging.log4j.core.LogEvent[],org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.Layout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.SmtpManager:void sendEvents(org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void writeThrough(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void write(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void writeInternal(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void writeThrough(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void write(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void buffer(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void write(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:boolean shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender:void append(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.XmlLayout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.layout.JsonLayout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.layout.YamlLayout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void setStatementObject(int,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void setFields(org.apache.logging.log4j.message.MapMessage)",
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void writeInternal(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy:void initialize(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:void initialize(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void initialize()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void setTriggeringPolicy(org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy)"
        ]
    },
    "org.apache.logging.log4j.core.config.plugins.visitors.PluginElementVisitor:java.lang.Object visit(org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.config.Node,org.apache.logging.log4j.core.LogEvent,java.lang.StringBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:void injectFields(org.apache.logging.log4j.core.util.Builder)",
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object[] generateParameters(java.lang.reflect.Method)"
        ]
    },
    "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Throwable)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.CharSequence,java.lang.Throwable)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.CharSequence,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.CharSequence,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.CompositeAction:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.ConfigurationScheduler$CronRunnable:void run()",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object execute(org.apache.logging.log4j.core.tools.picocli.CommandLine)",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry:void run()",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable:void run()"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void rollover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.OnStartupTriggeringPolicy:void initialize(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void checkRollover(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void rollover(java.util.Date,java.util.Date)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.DeleteAction:boolean execute(java.nio.file.FileVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.AbstractPathAction:boolean execute()"
        ]
    },
    "org.apache.logging.log4j.core.config.ConfiguratonFileWatcher$ReconfigurationRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.ConfigurationScheduler$CronRunnable:void run()",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object execute(org.apache.logging.log4j.core.tools.picocli.CommandLine)",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry:void run()",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable:void run()"
        ]
    },
    "org.apache.logging.log4j.core.LoggerContext:void setConfigLocation(java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.osgi.BundleContextSelector:org.apache.logging.log4j.core.LoggerContext locateContext(org.osgi.framework.Bundle,java.net.URI)",
            "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector:org.apache.logging.log4j.core.LoggerContext locateContext(java.lang.ClassLoader,java.net.URI)"
        ]
    },
    "org.apache.logging.log4j.core.LoggerContext:void reconfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LoggerContext:void start()"
        ]
    },
    "org.apache.logging.log4j.core.layout.AbstractStringLayout:java.lang.String serializeToString(org.apache.logging.log4j.core.layout.AbstractStringLayout$Serializer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.AbstractStringLayout:byte[] serializeToBytes(org.apache.logging.log4j.core.layout.AbstractStringLayout$Serializer,byte[])",
            "org.apache.logging.log4j.core.layout.JsonLayout:byte[] getHeader()",
            "org.apache.logging.log4j.core.layout.JsonLayout:byte[] getFooter()",
            "org.apache.logging.log4j.core.layout.YamlLayout:byte[] getHeader()",
            "org.apache.logging.log4j.core.layout.YamlLayout:byte[] getFooter()"
        ]
    },
    "org.apache.logging.log4j.core.layout.PatternLayout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void writeInternal(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)",
            "org.apache.logging.log4j.core.layout.PatternLayout:java.io.Serializable toSerializable(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.net.SmtpManager:javax.mail.internet.MimeMessage createMimeMessage(org.apache.logging.log4j.core.net.SmtpManager$FactoryData,javax.mail.Session,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.SmtpManager:void connect(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.Rfc5424Layout:java.io.Serializable toSerializable(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void writeInternal(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)",
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void flush()",
            "org.apache.logging.log4j.core.appender.AbstractAppender:java.io.Serializable toSerializable(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.AbstractWriterAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.layout.AbstractStringLayout:byte[] toByteArray(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[],int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[])",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[],boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void writeBytes(byte[],int,int)",
            "org.apache.logging.log4j.core.appender.FileManager:void write(byte[],int,int,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:void flushBuffer(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void flush()",
            "org.apache.logging.log4j.core.appender.RandomAccessFileManager:void flush()",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void flush()",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:java.nio.ByteBuffer drain(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void createFileAfterRollover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void rollover()"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:java.io.OutputStream getOutputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void <init>(java.io.OutputStream,java.lang.String,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.io.OutputStream,java.lang.String,boolean,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void writeToDestination(byte[],int,int)",
            "org.apache.logging.log4j.core.appender.FileManager:void write(byte[],int,int,boolean)",
            "org.apache.logging.log4j.core.appender.FileManager:void writeToDestination(byte[],int,int)",
            "org.apache.logging.log4j.core.net.TcpSocketManager:void writeAndFlush(byte[],int,int,boolean)",
            "org.apache.logging.log4j.core.net.TcpSocketManager:java.io.OutputStream access$400(org.apache.logging.log4j.core.net.TcpSocketManager)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy:int purge(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.DirectWriteRolloverStrategy:org.apache.logging.log4j.core.appender.rolling.RolloverDescription rollover(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)"
        ]
    },
    "org.apache.logging.log4j.core.appender.WriterAppender$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.config.AbstractConfiguration:void doConfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void initialize()"
        ]
    },
    "org.apache.logging.log4j.core.config.DefaultConfiguration:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.SmtpAppender:org.apache.logging.log4j.core.appender.SmtpAppender createAppender(org.apache.logging.log4j.core.config.Configuration,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI)",
            "org.apache.logging.log4j.core.layout.JsonLayout:org.apache.logging.log4j.core.layout.JsonLayout createDefaultLayout()",
            "org.apache.logging.log4j.core.layout.PatternLayout$Builder:org.apache.logging.log4j.core.layout.PatternLayout build()",
            "org.apache.logging.log4j.core.layout.YamlLayout:org.apache.logging.log4j.core.layout.AbstractJacksonLayout createDefaultLayout()",
            "org.apache.logging.log4j.core.LoggerContext:void <init>(java.lang.String,java.lang.Object,java.net.URI)",
            "org.apache.logging.log4j.core.LoggerContext:void <init>(java.lang.String,java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.appender.ConsoleAppender$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamAppender$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.SyslogAppender$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.SyslogAppender:org.apache.logging.log4j.core.appender.SyslogAppender createAppender(java.lang.String,int,java.lang.String,org.apache.logging.log4j.core.net.ssl.SslConfiguration,int,int,boolean,java.lang.String,boolean,boolean,org.apache.logging.log4j.core.net.Facility,java.lang.String,int,boolean,java.lang.String,java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.Filter,org.apache.logging.log4j.core.config.Configuration,java.nio.charset.Charset,java.lang.String,org.apache.logging.log4j.core.layout.LoggerFields[],boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.SocketAppender$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.SocketAppender:org.apache.logging.log4j.core.appender.SocketAppender createAppender(java.lang.String,int,org.apache.logging.log4j.core.net.Protocol,org.apache.logging.log4j.core.net.ssl.SslConfiguration,int,int,boolean,java.lang.String,boolean,boolean,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,boolean,org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.SocketAppender:org.apache.logging.log4j.core.appender.SocketAppender createAppender(java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.net.ssl.SslConfiguration,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String,org.apache.logging.log4j.core.config.Configuration)"
        ]
    },
    "org.apache.logging.log4j.core.appender.FailoverAppender:void append(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AsyncAppender:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void initialize()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void setTriggeringPolicy(org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:org.apache.logging.log4j.core.Appender createAppender(org.apache.logging.log4j.core.appender.routing.Route,org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.AppenderSet:org.apache.logging.log4j.core.Appender createAppender(java.lang.String,java.lang.String)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void start()",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:void initializeShutdownCallbackRegistry()"
        ]
    },
    "org.apache.logging.log4j.core.appender.AsyncAppender:void logMessageInCurrentThread(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AsyncAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.async.EventRoute$2:void logMessage(org.apache.logging.log4j.core.appender.AsyncAppender,org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AsyncAppender:void append(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AsyncAppender:void logMessageInBackgroundThread(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.EventRoute$1:void logMessage(org.apache.logging.log4j.core.appender.AsyncAppender,org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void callAppenders(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.LoggerConfig:void processLogEvent(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.config.LoggerConfig$LoggerConfigPredicate)"
        ]
    },
    "org.apache.logging.log4j.core.config.LoggerConfig:void processLogEvent(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.config.LoggerConfig$LoggerConfigPredicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.LoggerConfig:void log(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.config.LoggerConfig$LoggerConfigPredicate)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:boolean shutdownInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:boolean shutdown()"
        ]
    },
    "org.apache.logging.log4j.core.appender.routing.IdlePurgePolicy:void purge()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.routing.IdlePurgePolicy:void run()"
        ]
    },
    "org.apache.logging.log4j.core.config.LoggerConfig:void removeAppender(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void removeAppender(java.lang.String)",
            "org.apache.logging.log4j.core.Logger:void removeAppender(org.apache.logging.log4j.core.Appender)"
        ]
    },
    "org.apache.logging.log4j.core.config.LoggerConfig:void clearAppenders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AbstractConfiguration:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.LoggerContext:void start(org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerContext:void start(org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.util.List,java.lang.String)",
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:void setConfigLocationUri(java.lang.String)",
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:void setConfigText(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void checkConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void connectAndStart()"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:boolean commitAndClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:boolean commitAndCloseAll()",
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void writeThrough(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)",
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void flush()",
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void writeThrough(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager$Reconnector:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void reconnectOn(java.lang.Exception)",
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager$Reconnector:void run()"
        ]
    },
    "org.apache.logging.log4j.core.appender.nosql.NoSqlDatabaseManager:boolean shutdownInternal()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:boolean shutdown()"
        ]
    },
    "org.apache.logging.log4j.core.appender.MemoryMappedFileManager$MemoryMappedFileManagerFactory:org.apache.logging.log4j.core.appender.MemoryMappedFileManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.MemoryMappedFileManager$FactoryData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.MemoryMappedFileManager$MemoryMappedFileManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:java.lang.String readContents(java.io.InputStream,java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:java.lang.String getConfigText(java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.net.TcpSocketManager$TcpSocketManagerFactory:org.apache.logging.log4j.core.net.TcpSocketManager createManager(java.lang.String,org.apache.logging.log4j.core.net.TcpSocketManager$FactoryData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.TcpSocketManager$TcpSocketManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.net.TcpSocketManager$Reconnector:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.TcpSocketManager:void write(byte[],int,int,boolean)",
            "org.apache.logging.log4j.core.net.TcpSocketManager$Reconnector:void run()"
        ]
    },
    "org.apache.logging.log4j.core.util.Throwables:java.util.List toStringList(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor:void enqueueEvent(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.async.AsyncLoggerConfig)",
            "org.apache.logging.log4j.core.async.AsyncLoggerDisruptor:boolean tryPublish(org.apache.logging.log4j.core.async.RingBufferLogEventTranslator)",
            "org.apache.logging.log4j.core.async.AsyncLoggerDisruptor:void enqueueLogMessageInfo(org.apache.logging.log4j.core.async.RingBufferLogEventTranslator)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.IfLastModified:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.IfLastModified:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfLastModified:org.apache.logging.log4j.core.appender.rolling.action.IfLastModified createAgeCondition(org.apache.logging.log4j.core.appender.rolling.action.Duration,org.apache.logging.log4j.core.appender.rolling.action.PathCondition[])",
            "org.apache.logging.log4j.core.appender.rolling.action.IfLastModified:void <clinit>()"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLogger:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void initTranslator(org.apache.logging.log4j.core.async.RingBufferLogEventTranslator,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.async.AsyncLogger:void initTranslatorThreadValues(org.apache.logging.log4j.core.async.RingBufferLogEventTranslator)",
            "org.apache.logging.log4j.core.async.AsyncLogger:void logWithVarargTranslator(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.async.AsyncLogger:void translateTo(org.apache.logging.log4j.core.async.RingBufferLogEvent,long,java.lang.Object[])",
            "org.apache.logging.log4j.core.async.AsyncLogger:void <clinit>()",
            "org.apache.logging.log4j.core.async.AsyncLoggerContext:org.apache.logging.log4j.core.Logger newInstance(org.apache.logging.log4j.core.LoggerContext,java.lang.String,org.apache.logging.log4j.message.MessageFactory)"
        ]
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter()",
            "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.filter.TimeFilter createFilter(java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.Filter$Result,org.apache.logging.log4j.core.Filter$Result)",
            "org.apache.logging.log4j.core.filter.TimeFilter:long parseTimestamp(java.lang.String,long)",
            "org.apache.logging.log4j.core.filter.TimeFilter:void <clinit>()"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AsyncAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.config.LoggerConfig:void log(java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:void <init>()",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:void <init>(long)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:void <init>(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.util.List,java.lang.Throwable)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:void <init>(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable,java.util.Map,org.apache.logging.log4j.ThreadContext$ContextStack,java.lang.String,java.lang.StackTraceElement,long)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent createEvent(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable,org.apache.logging.log4j.core.impl.ThrowableProxy,java.util.Map,org.apache.logging.log4j.ThreadContext$ContextStack,java.lang.String,java.lang.StackTraceElement,long)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.util.StringMap createContextData(java.util.List)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.util.NanoClock getNanoClock()",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:void setNanoClock(org.apache.logging.log4j.core.util.NanoClock)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent deserialize(java.io.Serializable)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent createMemento(org.apache.logging.log4j.core.LogEvent,boolean)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.util.StringMap access$000(java.util.List)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.util.Clock access$800()",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:void <clinit>()",
            "org.apache.logging.log4j.core.impl.DefaultLogEventFactory:org.apache.logging.log4j.core.LogEvent createEvent(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.util.List,java.lang.Throwable)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder:void <init>()",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder:void <init>(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder:org.apache.logging.log4j.core.impl.Log4jLogEvent build()",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder:void initTimeFields()",
            "org.apache.logging.log4j.core.impl.MutableLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent createMemento()",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent$LogEventProxy:void <init>(org.apache.logging.log4j.core.impl.Log4jLogEvent,boolean)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent$LogEventProxy:java.lang.Object readResolve()",
            "org.apache.logging.log4j.core.impl.ReusableLogEventFactory:org.apache.logging.log4j.core.LogEvent createEvent(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.util.List,java.lang.Throwable)",
            "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:org.apache.logging.log4j.core.LogEvent convertMutableToLog4jEvent(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.core.config.Configuration setConfiguration(org.apache.logging.log4j.core.config.Configuration)"
        ]
    },
    "org.apache.logging.log4j.core.impl.ReusableLogEventFactory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.LoggerConfig:void log(java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.config.LoggerConfig:void <clinit>()",
            "org.apache.logging.log4j.core.impl.ReusableLogEventFactory:org.apache.logging.log4j.core.LogEvent createEvent(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.util.List,java.lang.Throwable)",
            "org.apache.logging.log4j.core.impl.ReusableLogEventFactory:void <clinit>()"
        ]
    },
    "org.apache.logging.log4j.core.appender.routing.RoutingAppender:org.apache.logging.log4j.core.Appender createAppender(org.apache.logging.log4j.core.appender.routing.Route,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:org.apache.logging.log4j.core.config.AppenderControl getControl(java.lang.String,org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.AppenderSet:org.apache.logging.log4j.core.Appender createAppender(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.ScriptAppenderSelector$Builder:org.apache.logging.log4j.core.Appender build()"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLogger:void logWithThreadLocalTranslator(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void logMessage(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLogger:void logMessage(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.RollingFileAppender:void append(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender:void append(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.RandomAccessFileAppender:void append(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.MemoryMappedFileAppender:void append(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.net.SmtpManager:void sendEvents(org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.SmtpAppender:void append(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void write(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void write(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseAppender:void append(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.layout.XmlLayout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:java.io.Serializable toSerializable(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.JsonLayout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:java.io.Serializable toSerializable(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.layout.YamlLayout:java.lang.String toSerializable(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:java.io.Serializable toSerializable(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void setFields(org.apache.logging.log4j.message.MapMessage)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void writeInternal(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:void initialize(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:void initialize(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void initialize()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void setTriggeringPolicy(org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy)"
        ]
    },
    "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.CharSequence,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.rolling.OnStartupTriggeringPolicy:void initialize(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CompositeTriggeringPolicy:void initialize(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void initialize()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void setTriggeringPolicy(org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void checkRollover(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.RollingFileAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender:void append(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void rollover(java.util.Date,java.util.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy:void rollover()"
        ]
    },
    "org.apache.logging.log4j.core.osgi.BundleContextSelector:org.apache.logging.log4j.core.LoggerContext locateContext(org.osgi.framework.Bundle,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.osgi.BundleContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean,java.net.URI)"
        ]
    },
    "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector:org.apache.logging.log4j.core.LoggerContext locateContext(java.lang.ClassLoader,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean,java.net.URI)"
        ]
    },
    "org.apache.logging.log4j.core.LoggerContext:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void initialize()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void setTriggeringPolicy(org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy)",
            "org.apache.logging.log4j.core.async.AsyncLoggerContext:void start()",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:void initializeShutdownCallbackRegistry()",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.util.List,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.layout.AbstractStringLayout:byte[] serializeToBytes(org.apache.logging.log4j.core.layout.AbstractStringLayout$Serializer,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.AbstractStringLayout:byte[] getFooter()",
            "org.apache.logging.log4j.core.layout.AbstractStringLayout:byte[] getHeader()"
        ]
    },
    "org.apache.logging.log4j.core.layout.JsonLayout:byte[] getHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender:void tryAppend(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void writeHeader()",
            "org.apache.logging.log4j.core.appender.WriterManager:void <init>(java.io.Writer,java.lang.String,org.apache.logging.log4j.core.StringLayout,boolean)",
            "org.apache.logging.log4j.core.appender.WriterManager:void setWriter(java.io.Writer)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void <init>(java.io.OutputStream,java.lang.String,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.io.OutputStream,java.lang.String,boolean,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void setOutputStream(java.io.OutputStream)",
            "org.apache.logging.log4j.core.net.DatagramSocketManager$DatagramSocketManagerFactory:org.apache.logging.log4j.core.net.DatagramSocketManager createManager(java.lang.String,org.apache.logging.log4j.core.net.DatagramSocketManager$FactoryData)",
            "org.apache.logging.log4j.core.net.SmtpManager:void writeHeader(org.apache.logging.log4j.core.Layout,java.io.OutputStream)"
        ]
    },
    "org.apache.logging.log4j.core.layout.JsonLayout:byte[] getFooter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.WriterManager:void writeFooter()",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void writeFooter()",
            "org.apache.logging.log4j.core.net.DatagramSocketManager$DatagramSocketManagerFactory:org.apache.logging.log4j.core.net.DatagramSocketManager createManager(java.lang.String,org.apache.logging.log4j.core.net.DatagramSocketManager$FactoryData)",
            "org.apache.logging.log4j.core.net.SmtpManager:void writeFooter(org.apache.logging.log4j.core.Layout,java.io.OutputStream)"
        ]
    },
    "org.apache.logging.log4j.core.layout.YamlLayout:byte[] getHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender:void tryAppend(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void writeHeader()",
            "org.apache.logging.log4j.core.appender.WriterManager:void <init>(java.io.Writer,java.lang.String,org.apache.logging.log4j.core.StringLayout,boolean)",
            "org.apache.logging.log4j.core.appender.WriterManager:void setWriter(java.io.Writer)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void <init>(java.io.OutputStream,java.lang.String,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.io.OutputStream,java.lang.String,boolean,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void setOutputStream(java.io.OutputStream)",
            "org.apache.logging.log4j.core.net.DatagramSocketManager$DatagramSocketManagerFactory:org.apache.logging.log4j.core.net.DatagramSocketManager createManager(java.lang.String,org.apache.logging.log4j.core.net.DatagramSocketManager$FactoryData)",
            "org.apache.logging.log4j.core.net.SmtpManager:void writeHeader(org.apache.logging.log4j.core.Layout,java.io.OutputStream)"
        ]
    },
    "org.apache.logging.log4j.core.layout.YamlLayout:byte[] getFooter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.WriterManager:void writeFooter()",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void writeFooter()",
            "org.apache.logging.log4j.core.net.DatagramSocketManager$DatagramSocketManagerFactory:org.apache.logging.log4j.core.net.DatagramSocketManager createManager(java.lang.String,org.apache.logging.log4j.core.net.DatagramSocketManager$FactoryData)",
            "org.apache.logging.log4j.core.net.SmtpManager:void writeFooter(org.apache.logging.log4j.core.Layout,java.io.OutputStream)"
        ]
    },
    "org.apache.logging.log4j.core.layout.PatternLayout:java.io.Serializable toSerializable(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void writeInternal(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)",
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void flush()",
            "org.apache.logging.log4j.core.appender.AbstractAppender:java.io.Serializable toSerializable(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.AbstractWriterAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.layout.AbstractStringLayout:byte[] toByteArray(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.net.SmtpManager:void connect(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.SmtpManager:void sendEvents(org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void writeFooter()"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void writeByteArrayToManager(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:void writeBytes(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[],int,int)",
            "org.apache.logging.log4j.core.layout.AbstractLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:void encodeTextFallBack(java.nio.charset.Charset,java.lang.StringBuilder,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.appender.FileManager:void write(byte[],int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void write(byte[],int,int,boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[])",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[],boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void writeBytes(byte[],int,int)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:boolean closeOutputStream()",
            "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void directEncodeEvent(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[],int,int,boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:boolean closeOutputStream()"
        ]
    },
    "org.apache.logging.log4j.core.appender.RandomAccessFileManager:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.RandomAccessFileManager:boolean closeOutputStream()",
            "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void directEncodeEvent(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[],int,int,boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:boolean closeOutputStream()"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender:void directEncodeEvent(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[],int,int,boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:boolean closeOutputStream()"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:java.nio.ByteBuffer drain(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.ByteBufferDestinationHelper:void writeToUnsynchronized(java.nio.ByteBuffer,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.ByteBufferDestinationHelper:void writeToUnsynchronized(byte[],int,int,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:java.nio.ByteBuffer drainIfByteBufferFull(org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.ByteBuffer,java.nio.charset.CoderResult)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:void <init>(java.io.OutputStream,java.lang.String,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.MemoryMappedFileManager:void <init>(java.io.RandomAccessFile,java.lang.String,java.io.OutputStream,boolean,long,int,java.lang.String,org.apache.logging.log4j.core.Layout,boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void <init>(java.io.OutputStream,java.lang.String,org.apache.logging.log4j.core.Layout,boolean,int)",
            "org.apache.logging.log4j.core.appender.FileManager:void <init>(java.lang.String,java.io.OutputStream,boolean,boolean,java.lang.String,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.io.OutputStream,java.lang.String,boolean,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.RandomAccessFileManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.io.RandomAccessFile,java.lang.String,java.io.OutputStream,int,java.lang.String,org.apache.logging.log4j.core.Layout,boolean)",
            "org.apache.logging.log4j.core.appender.FileManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.io.OutputStream,boolean,boolean,boolean,java.lang.String,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)",
            "org.apache.logging.log4j.core.appender.FileManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.io.OutputStream,boolean,boolean,boolean,java.lang.String,org.apache.logging.log4j.core.Layout,java.lang.String,java.lang.String,java.lang.String,boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:void writeToDestination(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[],int,int,boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void flushBuffer(java.nio.ByteBuffer)",
            "org.apache.logging.log4j.core.appender.FileManager:void writeToDestination(byte[],int,int)"
        ]
    },
    "org.apache.logging.log4j.core.appender.FileManager:void writeToDestination(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void writeToDestination(byte[],int,int)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[],int,int,boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void flushBuffer(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.logging.log4j.core.net.TcpSocketManager:void writeAndFlush(byte[],int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.TcpSocketManager:void write(byte[],int,int,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.net.TcpSocketManager:java.io.OutputStream access$400(org.apache.logging.log4j.core.net.TcpSocketManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.TcpSocketManager$Reconnector:void reconnect()"
        ]
    },
    "org.apache.logging.log4j.core.config.AbstractConfiguration:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder:org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration build(boolean)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void start()"
        ]
    },
    "org.apache.logging.log4j.core.layout.JsonLayout:org.apache.logging.log4j.core.layout.JsonLayout createDefaultLayout()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.layout.PatternLayout$Builder:org.apache.logging.log4j.core.layout.PatternLayout build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig$Builder:org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig build()",
            "org.apache.logging.log4j.core.appender.db.ColumnMapping$Builder:org.apache.logging.log4j.core.appender.db.ColumnMapping build()",
            "org.apache.logging.log4j.core.appender.AbstractAppender$Builder:org.apache.logging.log4j.core.Layout getOrCreateLayout(java.nio.charset.Charset)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void setToDefault()",
            "org.apache.logging.log4j.core.layout.PatternLayout$Builder:java.lang.Object build()",
            "org.apache.logging.log4j.core.layout.PatternLayout:org.apache.logging.log4j.core.layout.PatternLayout createLayout(java.lang.String,org.apache.logging.log4j.core.layout.PatternSelector,org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.pattern.RegexReplacement,java.nio.charset.Charset,boolean,boolean,java.lang.String,java.lang.String)",
            "org.apache.logging.log4j.core.layout.PatternLayout:org.apache.logging.log4j.core.layout.PatternLayout createDefaultLayout()",
            "org.apache.logging.log4j.core.layout.PatternLayout:org.apache.logging.log4j.core.layout.PatternLayout createDefaultLayout(org.apache.logging.log4j.core.config.Configuration)"
        ]
    },
    "org.apache.logging.log4j.core.layout.YamlLayout:org.apache.logging.log4j.core.layout.AbstractJacksonLayout createDefaultLayout()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.LoggerContext:void <init>(java.lang.String,java.lang.Object,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerContext:void <init>(java.lang.String,java.lang.Object,java.net.URI)",
            "org.apache.logging.log4j.core.osgi.BundleContextSelector:org.apache.logging.log4j.core.LoggerContext locateContext(org.osgi.framework.Bundle,java.net.URI)",
            "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector:org.apache.logging.log4j.core.LoggerContext createContext(java.lang.String,java.net.URI)",
            "org.apache.logging.log4j.core.selector.JndiContextSelector:org.apache.logging.log4j.core.LoggerContext locateContext(java.lang.String,java.lang.Object,java.net.URI)",
            "org.apache.logging.log4j.core.LoggerContext:void <init>(java.lang.String)",
            "org.apache.logging.log4j.core.LoggerContext:void <init>(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.LoggerContext:void <init>(java.lang.String,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerContext:void <init>(java.lang.String,java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.appender.SocketAppender:org.apache.logging.log4j.core.appender.SocketAppender createAppender(java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.net.ssl.SslConfiguration,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String,org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.AbstractConfiguration:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void initialize()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void setTriggeringPolicy(org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:void initializeShutdownCallbackRegistry()",
            "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.core.config.Configuration setConfiguration(org.apache.logging.log4j.core.config.Configuration)"
        ]
    },
    "org.apache.logging.log4j.core.async.EventRoute$2:void logMessage(org.apache.logging.log4j.core.appender.AsyncAppender,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AsyncAppender:void append(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.async.EventRoute$1:void logMessage(org.apache.logging.log4j.core.appender.AsyncAppender,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AsyncAppender:void append(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.config.LoggerConfig:void log(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.config.LoggerConfig$LoggerConfigPredicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void log(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.config.LoggerConfig$LoggerConfigPredicate)",
            "org.apache.logging.log4j.core.config.LoggerConfig:void log(java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.config.LoggerConfig:void log(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.config.LoggerConfig:void logParent(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.config.LoggerConfig$LoggerConfigPredicate)"
        ]
    },
    "org.apache.logging.log4j.core.appender.routing.IdlePurgePolicy:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void initialize()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void setTriggeringPolicy(org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy)",
            "org.apache.logging.log4j.core.config.ConfigurationScheduler$CronRunnable:void run()",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:void initializeShutdownCallbackRegistry()",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object execute(org.apache.logging.log4j.core.tools.picocli.CommandLine)",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry:void run()",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable:void run()"
        ]
    },
    "org.apache.logging.log4j.core.Logger:void removeAppender(org.apache.logging.log4j.core.Appender)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerContext:void start(org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.util.List,java.lang.String)",
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:void setConfigLocationUri(java.lang.String)",
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:void setConfigText(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void connectAndStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void writeThrough(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)",
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void flush()",
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void writeThrough(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void reconnectOn(java.lang.Exception)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void connectAndStart()"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager$Reconnector:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void reconnectOn(java.lang.Exception)",
            "org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager:void closeProducer(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.ConfiguratonFileWatcher:void fileModified(java.io.File)",
            "org.apache.logging.log4j.core.config.ConfigurationScheduler$CronRunnable:void run()",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object execute(org.apache.logging.log4j.core.tools.picocli.CommandLine)",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry:void run()",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable:void run()",
            "org.apache.logging.log4j.core.util.CachedClock:void <init>()",
            "org.apache.logging.log4j.core.util.CoarseCachedClock:void <init>()"
        ]
    },
    "org.apache.logging.log4j.core.appender.MemoryMappedFileManager$MemoryMappedFileManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:org.apache.logging.log4j.core.appender.AbstractManager getManager(java.lang.String,org.apache.logging.log4j.core.appender.ManagerFactory,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:java.lang.String getConfigText(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:java.lang.String getConfigText()"
        ]
    },
    "org.apache.logging.log4j.core.net.TcpSocketManager$TcpSocketManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:org.apache.logging.log4j.core.appender.AbstractManager getManager(java.lang.String,org.apache.logging.log4j.core.appender.ManagerFactory,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.net.TcpSocketManager:void write(byte[],int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[])",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[],boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void writeBytes(byte[],int,int)"
        ]
    },
    "org.apache.logging.log4j.core.net.TcpSocketManager$Reconnector:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.kafka.KafkaManager:void closeProducer(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.config.ConfiguratonFileWatcher:void fileModified(java.io.File)",
            "org.apache.logging.log4j.core.config.ConfigurationScheduler$CronRunnable:void run()",
            "org.apache.logging.log4j.core.net.TcpSocketManager:void <init>(java.lang.String,java.io.OutputStream,java.net.Socket,java.net.InetAddress,java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int,org.apache.logging.log4j.core.net.SocketOptions)",
            "org.apache.logging.log4j.core.net.TcpSocketManager:void write(byte[],int,int,boolean)",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object execute(org.apache.logging.log4j.core.tools.picocli.CommandLine)",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry:void run()",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable:void run()",
            "org.apache.logging.log4j.core.util.CachedClock:void <init>()",
            "org.apache.logging.log4j.core.util.CoarseCachedClock:void <init>()"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor:void enqueueEvent(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.async.AsyncLoggerConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void logInBackgroundThread(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerDisruptor:boolean tryPublish(org.apache.logging.log4j.core.async.RingBufferLogEventTranslator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void publish(org.apache.logging.log4j.core.async.RingBufferLogEventTranslator)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerDisruptor:void enqueueLogMessageInfo(org.apache.logging.log4j.core.async.RingBufferLogEventTranslator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void handleRingBufferFull(org.apache.logging.log4j.core.async.RingBufferLogEventTranslator)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.IfLastModified:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.DeletingVisitor:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfAll:boolean accept(org.apache.logging.log4j.core.appender.rolling.action.PathCondition[],java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfNot:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfAny:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction$1:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.IfLastModified:org.apache.logging.log4j.core.appender.rolling.action.IfLastModified createAgeCondition(org.apache.logging.log4j.core.appender.rolling.action.Duration,org.apache.logging.log4j.core.appender.rolling.action.PathCondition[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.async.AsyncLogger:void initTranslator(org.apache.logging.log4j.core.async.RingBufferLogEventTranslator,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void logWithThreadLocalTranslator(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLogger:void initTranslatorThreadValues(org.apache.logging.log4j.core.async.RingBufferLogEventTranslator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void logWithThreadLocalTranslator(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLogger:void translateTo(org.apache.logging.log4j.core.async.RingBufferLogEvent,long,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void translateTo(java.lang.Object,long,java.lang.Object[])"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerContext:org.apache.logging.log4j.core.Logger newInstance(org.apache.logging.log4j.core.LoggerContext,java.lang.String,org.apache.logging.log4j.message.MessageFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.core.Logger getLogger(java.lang.String,org.apache.logging.log4j.message.MessageFactory)"
        ]
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)",
            "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object[])",
            "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.filter.TimeFilter createFilter(java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.Filter$Result,org.apache.logging.log4j.core.Filter$Result)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:long parseTimestamp(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.filter.TimeFilter createFilter(java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.Filter$Result,org.apache.logging.log4j.core.Filter$Result)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:void <init>(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:void <init>(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.util.List,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:void <init>(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.impl.DefaultLogEventFactory:org.apache.logging.log4j.core.LogEvent createEvent(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.util.List,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:void <init>(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable,java.util.Map,org.apache.logging.log4j.ThreadContext$ContextStack,java.lang.String,java.lang.StackTraceElement,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent createEvent(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable,org.apache.logging.log4j.core.impl.ThrowableProxy,java.util.Map,org.apache.logging.log4j.ThreadContext$ContextStack,java.lang.String,java.lang.StackTraceElement,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.util.StringMap createContextData(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:void <init>(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.util.List,java.lang.Throwable)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.util.StringMap access$000(java.util.List)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.util.NanoClock getNanoClock()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.ReusableLogEventFactory:org.apache.logging.log4j.core.LogEvent createEvent(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.util.List,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:void setNanoClock(org.apache.logging.log4j.core.util.NanoClock)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.core.config.Configuration setConfiguration(org.apache.logging.log4j.core.config.Configuration)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent deserialize(java.io.Serializable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent createMemento(org.apache.logging.log4j.core.LogEvent,boolean)",
            "org.apache.logging.log4j.core.impl.MutableLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent createMemento()"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent createMemento(org.apache.logging.log4j.core.LogEvent,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AsyncAppender:void append(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.util.StringMap access$000(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder:void <init>()",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder:void <init>(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.util.Clock access$800()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder:void initTimeFields()"
        ]
    },
    "org.apache.logging.log4j.core.impl.DefaultLogEventFactory:org.apache.logging.log4j.core.LogEvent createEvent(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.util.List,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.LoggerConfig:void log(java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.layout.AbstractStringLayout:java.lang.String serializeToString(org.apache.logging.log4j.core.layout.AbstractStringLayout$Serializer)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.PatternProcessor:void formatFileName(org.apache.logging.log4j.core.lookup.StrSubstitutor,java.lang.StringBuilder,boolean,java.lang.Object)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder newBuilder()"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder:void <init>(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rewrite.LoggerNameLevelRewritePolicy:org.apache.logging.log4j.core.LogEvent rewrite(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.rewrite.PropertiesRewritePolicy:org.apache.logging.log4j.core.LogEvent rewrite(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.rewrite.MapRewritePolicy:org.apache.logging.log4j.core.LogEvent rewrite(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.async.RingBufferLogEvent:org.apache.logging.log4j.core.LogEvent createMemento()",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder asBuilder()",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.LogEvent createMemento(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder:org.apache.logging.log4j.core.impl.Log4jLogEvent build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rewrite.LoggerNameLevelRewritePolicy:org.apache.logging.log4j.core.LogEvent rewrite(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.rewrite.PropertiesRewritePolicy:org.apache.logging.log4j.core.LogEvent rewrite(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.rewrite.MapRewritePolicy:org.apache.logging.log4j.core.LogEvent rewrite(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.rolling.PatternProcessor:void formatFileName(org.apache.logging.log4j.core.lookup.StrSubstitutor,java.lang.StringBuilder,boolean,java.lang.Object)",
            "org.apache.logging.log4j.core.async.RingBufferLogEvent:org.apache.logging.log4j.core.LogEvent createMemento()",
            "org.apache.logging.log4j.core.config.LoggerConfig:void log(java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.LogEvent createMemento(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder:void initTimeFields()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder:org.apache.logging.log4j.core.impl.Log4jLogEvent build()"
        ]
    },
    "org.apache.logging.log4j.core.impl.MutableLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent createMemento()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor:org.apache.logging.log4j.core.LogEvent prepareEvent(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.impl.MutableLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent toImmutable()",
            "org.apache.logging.log4j.core.net.SmtpManager:void add(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent$LogEventProxy:void <init>(org.apache.logging.log4j.core.impl.Log4jLogEvent,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:java.lang.Object writeReplace()",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:java.io.Serializable serialize(org.apache.logging.log4j.core.LogEvent,boolean)",
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:java.io.Serializable serialize(org.apache.logging.log4j.core.impl.Log4jLogEvent,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent$LogEventProxy:java.lang.Object readResolve()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.impl.ReusableLogEventFactory:org.apache.logging.log4j.core.LogEvent createEvent(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.util.List,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.LoggerConfig:void log(java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:org.apache.logging.log4j.core.LogEvent convertMutableToLog4jEvent(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:void toSerializable(org.apache.logging.log4j.core.LogEvent,java.io.Writer)"
        ]
    },
    "org.apache.logging.log4j.core.config.LoggerConfig:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig$RootLogger:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig$RootLogger:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,org.apache.logging.log4j.Level,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void log(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.config.LoggerConfig$LoggerConfigPredicate)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void start()",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:org.apache.logging.log4j.core.config.LoggerConfig createLogger(boolean,org.apache.logging.log4j.Level,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void <clinit>()",
            "org.apache.logging.log4j.core.config.Configurator:boolean setLevel(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void <init>(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void addLoggerAppender(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.core.Appender)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void addLoggerFilter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void setLoggerAdditive(org.apache.logging.log4j.core.Logger,boolean)",
            "org.apache.logging.log4j.core.config.LoggerConfig$RootLogger:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,org.apache.logging.log4j.Level,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.config.LoggerConfig:void <init>()",
            "org.apache.logging.log4j.core.config.LoggerConfig:void <init>(java.lang.String,org.apache.logging.log4j.Level,boolean)",
            "org.apache.logging.log4j.core.config.LoggerConfig:void <init>(java.lang.String,java.util.List,org.apache.logging.log4j.core.Filter,org.apache.logging.log4j.Level,boolean,org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,boolean)",
            "org.apache.logging.log4j.core.config.LoggerConfig:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,org.apache.logging.log4j.Level,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.config.LoggerConfig:org.apache.logging.log4j.core.config.LoggerConfig createLogger(boolean,org.apache.logging.log4j.Level,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.config.LoggerConfig:boolean includeLocation(java.lang.String)",
            "org.apache.logging.log4j.core.config.LoggerConfig:void <clinit>()"
        ]
    },
    "org.apache.logging.log4j.core.appender.routing.RoutingAppender:org.apache.logging.log4j.core.config.AppenderControl getControl(java.lang.String,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:void append(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.ScriptAppenderSelector$Builder:org.apache.logging.log4j.core.Appender build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.ScriptAppenderSelector$Builder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.SmtpAppender:void append(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void tryCallAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void write(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:java.io.Serializable toSerializable(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.JdbcDatabaseManager:void writeInternal(org.apache.logging.log4j.core.LogEvent,java.io.Serializable)",
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void flush()",
            "org.apache.logging.log4j.core.appender.AbstractAppender:java.io.Serializable toSerializable(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.AbstractWriterAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.layout.AbstractStringLayout:byte[] toByteArray(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy:void rollover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy:void initialize(org.apache.logging.log4j.core.appender.rolling.RollingFileManager)",
            "org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy:void access$100(org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy)"
        ]
    },
    "org.apache.logging.log4j.core.osgi.BundleContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.util.List,java.lang.String)",
            "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.util.List,java.lang.String)",
            "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerContext:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void initialize()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void setTriggeringPolicy(org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:void initializeShutdownCallbackRegistry()",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.util.List,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.layout.AbstractStringLayout:byte[] getFooter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.WriterManager:void writeFooter()",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void writeFooter()",
            "org.apache.logging.log4j.core.net.DatagramSocketManager$DatagramSocketManagerFactory:org.apache.logging.log4j.core.net.DatagramSocketManager createManager(java.lang.String,org.apache.logging.log4j.core.net.DatagramSocketManager$FactoryData)",
            "org.apache.logging.log4j.core.net.SmtpManager:void writeFooter(org.apache.logging.log4j.core.Layout,java.io.OutputStream)"
        ]
    },
    "org.apache.logging.log4j.core.layout.AbstractStringLayout:byte[] getHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.kafka.KafkaAppender:void tryAppend(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void writeHeader()",
            "org.apache.logging.log4j.core.appender.WriterManager:void <init>(java.io.Writer,java.lang.String,org.apache.logging.log4j.core.StringLayout,boolean)",
            "org.apache.logging.log4j.core.appender.WriterManager:void setWriter(java.io.Writer)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void <init>(java.io.OutputStream,java.lang.String,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.io.OutputStream,java.lang.String,boolean,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void setOutputStream(java.io.OutputStream)",
            "org.apache.logging.log4j.core.net.DatagramSocketManager$DatagramSocketManagerFactory:org.apache.logging.log4j.core.net.DatagramSocketManager createManager(java.lang.String,org.apache.logging.log4j.core.net.DatagramSocketManager$FactoryData)",
            "org.apache.logging.log4j.core.net.SmtpManager:void writeHeader(org.apache.logging.log4j.core.Layout,java.io.OutputStream)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void writeHeader()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.io.RandomAccessFile,java.lang.String,java.lang.String,java.io.OutputStream,boolean,boolean,int,long,long,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,java.lang.String,java.lang.String,java.lang.String,boolean)",
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void createFileAfterRollover(java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.appender.WriterManager:void <init>(java.io.Writer,java.lang.String,org.apache.logging.log4j.core.StringLayout,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.WriterAppender$WriterManagerFactory:org.apache.logging.log4j.core.appender.WriterManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.WriterAppender$FactoryData)"
        ]
    },
    "org.apache.logging.log4j.core.appender.WriterManager:void setWriter(java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:void setOutputStream(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void createFileAfterRollover()",
            "org.apache.logging.log4j.core.net.TcpSocketManager:void access$500(org.apache.logging.log4j.core.net.TcpSocketManager,java.io.OutputStream)"
        ]
    },
    "org.apache.logging.log4j.core.net.DatagramSocketManager$DatagramSocketManagerFactory:org.apache.logging.log4j.core.net.DatagramSocketManager createManager(java.lang.String,org.apache.logging.log4j.core.net.DatagramSocketManager$FactoryData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.DatagramSocketManager$DatagramSocketManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.net.SmtpManager:void writeHeader(org.apache.logging.log4j.core.Layout,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.SmtpManager:void writeContent(org.apache.logging.log4j.core.LogEvent[],org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.Layout,java.io.ByteArrayOutputStream)"
        ]
    },
    "org.apache.logging.log4j.core.appender.WriterManager:void writeFooter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.WriterManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:void writeFooter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean rollover(org.apache.logging.log4j.core.appender.rolling.RolloverStrategy)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.net.SmtpManager:void writeFooter(org.apache.logging.log4j.core.Layout,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.SmtpManager:void writeContent(org.apache.logging.log4j.core.LogEvent[],org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.Layout,java.io.ByteArrayOutputStream)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.layout.TextEncoderHelper:void encodeTextFallBack(java.nio.charset.Charset,java.lang.StringBuilder,org.apache.logging.log4j.core.layout.ByteBufferDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.LockingStringBuilderEncoder:void encode(java.lang.StringBuilder,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.StringBuilderEncoder:void encode(java.lang.StringBuilder,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void write(byte[],int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void write(byte[],int,int,boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[])",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[],boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void writeBytes(byte[],int,int)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:boolean closeOutputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean rollover(org.apache.logging.log4j.core.appender.rolling.RolloverStrategy)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:boolean closeOutputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean rollover(org.apache.logging.log4j.core.appender.rolling.RolloverStrategy)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.net.TcpSocketManager:boolean closeOutputStream()"
        ]
    },
    "org.apache.logging.log4j.core.appender.RandomAccessFileManager:boolean closeOutputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.layout.ByteBufferDestinationHelper:void writeToUnsynchronized(java.nio.ByteBuffer,org.apache.logging.log4j.core.layout.ByteBufferDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void writeBytes(java.nio.ByteBuffer)",
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:java.nio.ByteBuffer drainIfByteBufferFull(org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.ByteBuffer,java.nio.charset.CoderResult)",
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:void flushRemainingBytes(java.nio.charset.CharsetEncoder,org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.logging.log4j.core.layout.ByteBufferDestinationHelper:void writeToUnsynchronized(byte[],int,int,org.apache.logging.log4j.core.layout.ByteBufferDestination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.layout.TextEncoderHelper:java.nio.ByteBuffer drainIfByteBufferFull(org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.ByteBuffer,java.nio.charset.CoderResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:java.nio.ByteBuffer writeAndEncodeAsMuchAsPossible(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,boolean,org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.ByteBuffer,java.nio.charset.CoderResult)",
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:java.nio.ByteBuffer encodeAsMuchAsPossible(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,boolean,org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.ByteBuffer)",
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:void flushRemainingBytes(java.nio.charset.CharsetEncoder,org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.logging.log4j.core.appender.MemoryMappedFileManager:void <init>(java.io.RandomAccessFile,java.lang.String,java.io.OutputStream,boolean,long,int,java.lang.String,org.apache.logging.log4j.core.Layout,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.MemoryMappedFileManager$MemoryMappedFileManagerFactory:org.apache.logging.log4j.core.appender.MemoryMappedFileManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.MemoryMappedFileManager$FactoryData)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:void <init>(java.io.OutputStream,java.lang.String,org.apache.logging.log4j.core.Layout,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void <init>(java.io.OutputStream,java.lang.String,org.apache.logging.log4j.core.Layout,boolean)",
            "org.apache.logging.log4j.core.net.AbstractSocketManager:void <init>(java.lang.String,java.io.OutputStream,java.net.InetAddress,java.lang.String,int,org.apache.logging.log4j.core.Layout,boolean,int)"
        ]
    },
    "org.apache.logging.log4j.core.appender.FileManager:void <init>(java.lang.String,java.io.OutputStream,boolean,boolean,java.lang.String,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void <init>(java.lang.String,java.lang.String,java.io.OutputStream,boolean,long,long,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)",
            "org.apache.logging.log4j.core.appender.FileManager:void <init>(java.lang.String,java.io.OutputStream,boolean,boolean,java.lang.String,org.apache.logging.log4j.core.Layout,int,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.appender.RandomAccessFileManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.io.RandomAccessFile,java.lang.String,java.io.OutputStream,int,java.lang.String,org.apache.logging.log4j.core.Layout,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.RandomAccessFileManager$RandomAccessFileManagerFactory:org.apache.logging.log4j.core.appender.RandomAccessFileManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.RandomAccessFileManager$FactoryData)"
        ]
    },
    "org.apache.logging.log4j.core.appender.FileManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.io.OutputStream,boolean,boolean,boolean,java.lang.String,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.lang.String,java.io.OutputStream,boolean,boolean,long,long,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.logging.log4j.core.appender.FileManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.io.OutputStream,boolean,boolean,boolean,java.lang.String,org.apache.logging.log4j.core.Layout,java.lang.String,java.lang.String,java.lang.String,boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.lang.String,java.io.OutputStream,boolean,boolean,long,long,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,java.lang.String,java.lang.String,java.lang.String,boolean,java.nio.ByteBuffer)",
            "org.apache.logging.log4j.core.appender.FileManager$FileManagerFactory:org.apache.logging.log4j.core.appender.FileManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.FileManager$FactoryData)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void writeToDestination(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[],int,int,boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void flushBuffer(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder:org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration build(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder:org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration build()",
            "org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder:org.apache.logging.log4j.core.config.Configuration build(boolean)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig$Builder:org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig$Builder:java.lang.Object build()",
            "org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig:org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig createColumnConfig(org.apache.logging.log4j.core.config.Configuration,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.ColumnMapping$Builder:org.apache.logging.log4j.core.appender.db.ColumnMapping build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.ColumnMapping$Builder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.AbstractAppender$Builder:org.apache.logging.log4j.core.Layout getOrCreateLayout(java.nio.charset.Charset)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.ConsoleAppender$Builder:org.apache.logging.log4j.core.appender.ConsoleAppender build()"
        ]
    },
    "org.apache.logging.log4j.core.layout.PatternLayout$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.layout.PatternLayout:org.apache.logging.log4j.core.layout.PatternLayout createLayout(java.lang.String,org.apache.logging.log4j.core.layout.PatternSelector,org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.pattern.RegexReplacement,java.nio.charset.Charset,boolean,boolean,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.layout.PatternLayout:org.apache.logging.log4j.core.layout.PatternLayout createDefaultLayout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender:org.apache.logging.log4j.core.appender.mom.jeromq.JeroMqAppender createAppender(java.lang.String,org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,org.apache.logging.log4j.core.config.Property[],boolean,long,long,boolean,byte[],boolean,long,long,long,long,int,long,long,long,int,long,int,long,long,long,boolean)",
            "org.apache.logging.log4j.core.appender.ConsoleAppender:org.apache.logging.log4j.core.appender.ConsoleAppender createAppender(org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.logging.log4j.core.appender.ConsoleAppender:org.apache.logging.log4j.core.appender.ConsoleAppender createAppender(org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,org.apache.logging.log4j.core.appender.ConsoleAppender$Target,java.lang.String,boolean,boolean,boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamAppender:org.apache.logging.log4j.core.appender.OutputStreamAppender createAppender(org.apache.logging.log4j.core.Layout,org.apache.logging.log4j.core.Filter,java.io.OutputStream,java.lang.String,boolean,boolean)",
            "org.apache.logging.log4j.core.appender.WriterAppender$Builder:org.apache.logging.log4j.core.appender.WriterAppender build()",
            "org.apache.logging.log4j.core.appender.WriterAppender:org.apache.logging.log4j.core.appender.WriterAppender createAppender(org.apache.logging.log4j.core.StringLayout,org.apache.logging.log4j.core.Filter,java.io.Writer,java.lang.String,boolean,boolean)",
            "org.apache.logging.log4j.core.appender.AbstractAppender$Builder:org.apache.logging.log4j.core.Layout getOrCreateLayout()",
            "org.apache.logging.log4j.core.appender.OutputStreamAppender$Builder:org.apache.logging.log4j.core.appender.OutputStreamAppender build()"
        ]
    },
    "org.apache.logging.log4j.core.layout.PatternLayout:org.apache.logging.log4j.core.layout.PatternLayout createDefaultLayout(org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerContext:void <init>(java.lang.String,java.lang.Object,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerContextSelector:org.apache.logging.log4j.core.LoggerContext createContext(java.lang.String,java.net.URI)"
        ]
    },
    "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector:org.apache.logging.log4j.core.LoggerContext createContext(java.lang.String,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector:org.apache.logging.log4j.core.LoggerContext locateContext(java.lang.ClassLoader,java.net.URI)",
            "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector:org.apache.logging.log4j.core.LoggerContext getDefault()"
        ]
    },
    "org.apache.logging.log4j.core.selector.JndiContextSelector:org.apache.logging.log4j.core.LoggerContext locateContext(java.lang.String,java.lang.Object,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.selector.JndiContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean,java.net.URI)"
        ]
    },
    "org.apache.logging.log4j.core.LoggerContext:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerContext:void <init>(java.lang.String)",
            "org.apache.logging.log4j.core.selector.BasicContextSelector:void <clinit>()",
            "org.apache.logging.log4j.core.selector.JndiContextSelector:void <clinit>()"
        ]
    },
    "org.apache.logging.log4j.core.LoggerContext:void <init>(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerContext:void <init>(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerContext:void <init>(java.lang.String,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void log(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.config.LoggerConfig$LoggerConfigPredicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void logToAsyncLoggerConfigsOnCurrentThread(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.config.LoggerConfig:void log(java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.config.LoggerConfig:void log(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.config.LoggerConfig:void logParent(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.config.LoggerConfig$LoggerConfigPredicate)"
        ]
    },
    "org.apache.logging.log4j.core.config.LoggerConfig:void log(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AwaitUnconditionallyReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.config.DefaultReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.config.LockingReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:void logEvent(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.config.LoggerConfig:void logParent(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.config.LoggerConfig$LoggerConfigPredicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.LoggerConfig:void processLogEvent(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.config.LoggerConfig$LoggerConfigPredicate)"
        ]
    },
    "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:java.lang.String getConfigText()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.net.TcpSocketManager:void <init>(java.lang.String,java.io.OutputStream,java.net.Socket,java.net.InetAddress,java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int,org.apache.logging.log4j.core.net.SocketOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.TcpSocketManager$TcpSocketManagerFactory:org.apache.logging.log4j.core.net.TcpSocketManager createManager(java.lang.String,java.io.OutputStream,java.net.Socket,java.net.InetAddress,org.apache.logging.log4j.core.net.TcpSocketManager$FactoryData)",
            "org.apache.logging.log4j.core.net.TcpSocketManager:void <init>(java.lang.String,java.io.OutputStream,java.net.Socket,java.net.InetAddress,java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int)",
            "org.apache.logging.log4j.core.net.SslSocketManager:void <init>(java.lang.String,java.io.OutputStream,java.net.Socket,org.apache.logging.log4j.core.net.ssl.SslConfiguration,java.net.InetAddress,java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int)",
            "org.apache.logging.log4j.core.net.SslSocketManager:void <init>(java.lang.String,java.io.OutputStream,java.net.Socket,org.apache.logging.log4j.core.net.ssl.SslConfiguration,java.net.InetAddress,java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int,org.apache.logging.log4j.core.net.SocketOptions)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void logInBackgroundThread(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.EventRoute$1:void logMessage(org.apache.logging.log4j.core.async.AsyncLoggerConfig,org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.DeletingVisitor:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.DeletingVisitor:java.nio.file.FileVisitResult visitFile(java.lang.Object,java.nio.file.attribute.BasicFileAttributes)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.IfAll:boolean accept(org.apache.logging.log4j.core.appender.rolling.action.PathCondition[],java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.IfAll:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfFileName:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfLastModified:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfAccumulatedFileCount:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfAccumulatedFileSize:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.IfNot:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.DeletingVisitor:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfAll:boolean accept(org.apache.logging.log4j.core.appender.rolling.action.PathCondition[],java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfNot:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfAny:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction$1:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.IfAny:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.DeletingVisitor:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfAll:boolean accept(org.apache.logging.log4j.core.appender.rolling.action.PathCondition[],java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfNot:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfAny:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction$1:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction$1:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction$1:java.nio.file.FileVisitResult visitFile(java.lang.Object,java.nio.file.attribute.BasicFileAttributes)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLogger:void translateTo(java.lang.Object,long,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.core.Logger getLogger(java.lang.String,org.apache.logging.log4j.message.MessageFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:org.apache.logging.log4j.core.Logger getParent()",
            "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.core.Logger getLogger(java.lang.String)",
            "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.spi.ExtendedLogger getLogger(java.lang.String,org.apache.logging.log4j.message.MessageFactory)"
        ]
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Throwable)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.CharSequence,java.lang.Throwable)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.Object,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object[])",
            "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.TimeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:void <init>(java.lang.String,org.apache.logging.log4j.Marker,java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder newBuilder()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.LoggerConfig:void log(java.lang.String,java.lang.String,org.apache.logging.log4j.Marker,org.apache.logging.log4j.Level,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rewrite.LoggerNameLevelRewritePolicy:org.apache.logging.log4j.core.LogEvent rewrite(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rewrite.RewriteAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:void append(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rewrite.MapRewritePolicy:org.apache.logging.log4j.core.LogEvent rewrite(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rewrite.RewriteAppender:void append(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.appender.routing.RoutingAppender:void append(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.async.RingBufferLogEvent:org.apache.logging.log4j.core.LogEvent createMemento()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor:org.apache.logging.log4j.core.LogEvent ensureImmutable(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.async.RingBufferLogEvent:org.apache.logging.log4j.core.LogEvent toImmutable()"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder asBuilder()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.LogEvent createMemento(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.AbstractJacksonLayout:org.apache.logging.log4j.core.LogEvent convertMutableToLog4jEvent(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor:org.apache.logging.log4j.core.LogEvent prepareEvent(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor:void enqueueEvent(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.async.AsyncLoggerConfig)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor:boolean tryEnqueue(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.async.AsyncLoggerConfig)"
        ]
    },
    "org.apache.logging.log4j.core.impl.MutableLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent toImmutable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.MutableLogEvent:org.apache.logging.log4j.core.LogEvent toImmutable()"
        ]
    },
    "org.apache.logging.log4j.core.net.SmtpManager:void add(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.SmtpAppender:boolean isFiltered(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:java.lang.Object writeReplace()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:java.io.Serializable serialize(org.apache.logging.log4j.core.LogEvent,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent createMemento(org.apache.logging.log4j.core.LogEvent,boolean)",
            "org.apache.logging.log4j.core.impl.MutableLogEvent:org.apache.logging.log4j.core.impl.Log4jLogEvent createMemento()"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jLogEvent:java.io.Serializable serialize(org.apache.logging.log4j.core.impl.Log4jLogEvent,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfig$RootLogger:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfig$RootLogger:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,org.apache.logging.log4j.Level,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void initialize()",
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void setTriggeringPolicy(org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void start()",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:void initializeShutdownCallbackRegistry()"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfig:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfig:org.apache.logging.log4j.core.config.LoggerConfig createLogger(boolean,org.apache.logging.log4j.Level,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig$RootLogger:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig$RootLogger:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,org.apache.logging.log4j.Level,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void log(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.config.LoggerConfig$LoggerConfigPredicate)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void start()",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:org.apache.logging.log4j.core.config.LoggerConfig createLogger(boolean,org.apache.logging.log4j.Level,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void <clinit>()"
        ]
    },
    "org.apache.logging.log4j.core.config.Configurator:boolean setLevel(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.core.config.Configuration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.Configurator:void setAllLevels(java.lang.String,org.apache.logging.log4j.Level)",
            "org.apache.logging.log4j.core.config.Configurator:void setLevel(java.util.Map)",
            "org.apache.logging.log4j.core.config.Configurator:void setLevel(java.lang.String,org.apache.logging.log4j.Level)"
        ]
    },
    "org.apache.logging.log4j.core.config.AbstractConfiguration:void <init>(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration:void <init>(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource,org.apache.logging.log4j.core.config.builder.api.Component)",
            "org.apache.logging.log4j.core.config.composite.CompositeConfiguration:void <init>(java.util.List)",
            "org.apache.logging.log4j.core.config.json.JsonConfiguration:void <init>(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.config.xml.XmlConfiguration:void <init>(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.config.DefaultConfiguration:void <init>()",
            "org.apache.logging.log4j.core.config.NullConfiguration:void <init>()"
        ]
    },
    "org.apache.logging.log4j.core.config.AbstractConfiguration:void addLoggerAppender(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.core.Appender)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:void addAppender(org.apache.logging.log4j.core.Appender)"
        ]
    },
    "org.apache.logging.log4j.core.config.AbstractConfiguration:void addLoggerFilter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.core.Filter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:void addFilter(org.apache.logging.log4j.core.Filter)"
        ]
    },
    "org.apache.logging.log4j.core.config.AbstractConfiguration:void setLoggerAdditive(org.apache.logging.log4j.core.Logger,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:void setAdditive(boolean)"
        ]
    },
    "org.apache.logging.log4j.core.config.LoggerConfig$RootLogger:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,org.apache.logging.log4j.Level,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.LoggerConfig:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig$RootLogger:void <init>()",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void <init>(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.config.LoggerConfig$RootLogger:void <init>()"
        ]
    },
    "org.apache.logging.log4j.core.config.LoggerConfig:void <init>(java.lang.String,org.apache.logging.log4j.Level,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.Configurator:boolean setLevel(java.lang.String,org.apache.logging.log4j.Level,org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void addLoggerAppender(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.core.Appender)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void addLoggerFilter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.config.AbstractConfiguration:void setLoggerAdditive(org.apache.logging.log4j.core.Logger,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.config.LoggerConfig:void <init>(java.lang.String,java.util.List,org.apache.logging.log4j.core.Filter,org.apache.logging.log4j.Level,boolean,org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void <init>(java.lang.String,java.util.List,org.apache.logging.log4j.core.Filter,org.apache.logging.log4j.Level,boolean,org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,boolean)",
            "org.apache.logging.log4j.core.config.LoggerConfig$RootLogger:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,org.apache.logging.log4j.Level,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.config.LoggerConfig:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,org.apache.logging.log4j.Level,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.config.LoggerConfig:org.apache.logging.log4j.core.config.LoggerConfig createLogger(boolean,org.apache.logging.log4j.Level,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)"
        ]
    },
    "org.apache.logging.log4j.core.config.LoggerConfig:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,org.apache.logging.log4j.Level,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.LoggerConfig:org.apache.logging.log4j.core.config.LoggerConfig createLogger(boolean,org.apache.logging.log4j.Level,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.LoggerConfig:boolean includeLocation(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.ScriptAppenderSelector$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy:void access$100(org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy$CronTrigger:void run()"
        ]
    },
    "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.io.RandomAccessFile,java.lang.String,java.lang.String,java.io.OutputStream,boolean,boolean,int,long,long,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,java.lang.String,java.lang.String,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager$RollingRandomAccessFileManagerFactory:org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager$FactoryData)",
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.io.RandomAccessFile,java.lang.String,java.lang.String,java.io.OutputStream,boolean,boolean,int,long,long,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void createFileAfterRollover(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void writeToDestination(byte[],int,int)",
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void createFileAfterRollover()"
        ]
    },
    "org.apache.logging.log4j.core.appender.WriterAppender$WriterManagerFactory:org.apache.logging.log4j.core.appender.WriterManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.WriterAppender$FactoryData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.WriterAppender$WriterManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.net.TcpSocketManager:void access$500(org.apache.logging.log4j.core.net.TcpSocketManager,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.TcpSocketManager$Reconnector:void reconnect()"
        ]
    },
    "org.apache.logging.log4j.core.net.DatagramSocketManager$DatagramSocketManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:org.apache.logging.log4j.core.appender.AbstractManager getManager(java.lang.String,org.apache.logging.log4j.core.appender.ManagerFactory,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.appender.WriterManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.appender.AbstractManager:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.layout.LockingStringBuilderEncoder:void encode(java.lang.StringBuilder,org.apache.logging.log4j.core.layout.ByteBufferDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.LockingStringBuilderEncoder:void encode(java.lang.Object,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.layout.StringBuilderEncoder:void encode(java.lang.StringBuilder,org.apache.logging.log4j.core.layout.ByteBufferDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.StringBuilderEncoder:void encode(java.lang.Object,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void write(byte[],int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[])",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void write(byte[],boolean)",
            "org.apache.logging.log4j.core.appender.OutputStreamManager:void writeBytes(byte[],int,int)"
        ]
    },
    "org.apache.logging.log4j.core.net.TcpSocketManager:boolean closeOutputStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamManager:boolean releaseSub(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:void writeBytes(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:void writeEncodedText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,java.nio.ByteBuffer,org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.charset.CoderResult)"
        ]
    },
    "org.apache.logging.log4j.core.layout.TextEncoderHelper:void flushRemainingBytes(java.nio.charset.CharsetEncoder,org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:void writeEncodedText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,java.nio.ByteBuffer,org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.charset.CoderResult)",
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:void writeChunkedEncodedText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.ByteBuffer,java.nio.charset.CoderResult)",
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:void encodeChunkedText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,java.nio.ByteBuffer,java.lang.StringBuilder,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:void encodeText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.layout.TextEncoderHelper:java.nio.ByteBuffer writeAndEncodeAsMuchAsPossible(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,boolean,org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.ByteBuffer,java.nio.charset.CoderResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:void writeChunkedEncodedText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.ByteBuffer,java.nio.charset.CoderResult)",
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:void encodeChunkedText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,java.nio.ByteBuffer,java.lang.StringBuilder,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.layout.TextEncoderHelper:java.nio.ByteBuffer encodeAsMuchAsPossible(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,boolean,org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:void encodeText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamManager:void <init>(java.io.OutputStream,java.lang.String,org.apache.logging.log4j.core.Layout,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.ConsoleAppender$ConsoleManagerFactory:org.apache.logging.log4j.core.appender.OutputStreamManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.ConsoleAppender$FactoryData)",
            "org.apache.logging.log4j.core.appender.OutputStreamAppender$OutputStreamManagerFactory:org.apache.logging.log4j.core.appender.OutputStreamManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.OutputStreamAppender$FactoryData)"
        ]
    },
    "org.apache.logging.log4j.core.net.AbstractSocketManager:void <init>(java.lang.String,java.io.OutputStream,java.net.InetAddress,java.lang.String,int,org.apache.logging.log4j.core.Layout,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.DatagramSocketManager:void <init>(java.lang.String,java.io.OutputStream,java.net.InetAddress,java.lang.String,int,org.apache.logging.log4j.core.Layout,int)",
            "org.apache.logging.log4j.core.net.TcpSocketManager:void <init>(java.lang.String,java.io.OutputStream,java.net.Socket,java.net.InetAddress,java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int,org.apache.logging.log4j.core.net.SocketOptions)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void <init>(java.lang.String,java.lang.String,java.io.OutputStream,boolean,long,long,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void <init>(java.lang.String,java.lang.String,java.io.OutputStream,boolean,long,long,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,int,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.appender.FileManager:void <init>(java.lang.String,java.io.OutputStream,boolean,boolean,java.lang.String,org.apache.logging.log4j.core.Layout,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.RandomAccessFileManager$RandomAccessFileManagerFactory:org.apache.logging.log4j.core.appender.RandomAccessFileManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.RandomAccessFileManager$FactoryData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.RandomAccessFileManager$RandomAccessFileManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.lang.String,java.io.OutputStream,boolean,boolean,long,long,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.lang.String,java.io.OutputStream,boolean,boolean,long,long,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,java.lang.String,java.lang.String,java.lang.String,boolean,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager$RollingFileManagerFactory:org.apache.logging.log4j.core.appender.rolling.RollingFileManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.rolling.RollingFileManager$FactoryData)",
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.io.RandomAccessFile,java.lang.String,java.lang.String,java.io.OutputStream,boolean,boolean,int,long,long,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,java.lang.String,java.lang.String,java.lang.String,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.appender.FileManager$FileManagerFactory:org.apache.logging.log4j.core.appender.FileManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.FileManager$FactoryData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.FileManager$FileManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder:org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder:org.apache.logging.log4j.core.config.Configuration build(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder:org.apache.logging.log4j.core.config.properties.PropertiesConfiguration build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig:org.apache.logging.log4j.core.appender.db.jdbc.ColumnConfig createColumnConfig(org.apache.logging.log4j.core.config.Configuration,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.db.ColumnMapping$Builder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.appender.AbstractAppender$Builder:org.apache.logging.log4j.core.Layout getOrCreateLayout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender$Builder:org.apache.logging.log4j.core.appender.RollingRandomAccessFileAppender build()",
            "org.apache.logging.log4j.core.appender.RollingFileAppender$Builder:org.apache.logging.log4j.core.appender.RollingFileAppender build()",
            "org.apache.logging.log4j.core.appender.FileAppender$Builder:org.apache.logging.log4j.core.appender.FileAppender build()",
            "org.apache.logging.log4j.core.appender.RandomAccessFileAppender$Builder:org.apache.logging.log4j.core.appender.RandomAccessFileAppender build()",
            "org.apache.logging.log4j.core.appender.MemoryMappedFileAppender$Builder:org.apache.logging.log4j.core.appender.MemoryMappedFileAppender build()"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerContextSelector:org.apache.logging.log4j.core.LoggerContext createContext(java.lang.String,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector:org.apache.logging.log4j.core.LoggerContext locateContext(java.lang.ClassLoader,java.net.URI)",
            "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector:org.apache.logging.log4j.core.LoggerContext getDefault()"
        ]
    },
    "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector:org.apache.logging.log4j.core.LoggerContext getDefault()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.osgi.BundleContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean,java.net.URI)",
            "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean,java.net.URI)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerContext:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.selector.BasicContextSelector:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.selector.BasicContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean)",
            "org.apache.logging.log4j.core.selector.BasicContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean,java.net.URI)",
            "org.apache.logging.log4j.core.selector.BasicContextSelector:org.apache.logging.log4j.core.LoggerContext locateContext(java.lang.String,java.lang.String)",
            "org.apache.logging.log4j.core.selector.BasicContextSelector:java.util.List getLoggerContexts()",
            "org.apache.logging.log4j.core.selector.BasicContextSelector:void <clinit>()"
        ]
    },
    "org.apache.logging.log4j.core.selector.JndiContextSelector:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.selector.JndiContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean,java.net.URI)",
            "org.apache.logging.log4j.core.selector.JndiContextSelector:org.apache.logging.log4j.core.LoggerContext locateContext(java.lang.String,java.lang.Object,java.net.URI)",
            "org.apache.logging.log4j.core.selector.JndiContextSelector:void removeContext(org.apache.logging.log4j.core.LoggerContext)",
            "org.apache.logging.log4j.core.selector.JndiContextSelector:org.apache.logging.log4j.core.LoggerContext removeContext(java.lang.String)",
            "org.apache.logging.log4j.core.selector.JndiContextSelector:java.util.List getLoggerContexts()",
            "org.apache.logging.log4j.core.selector.JndiContextSelector:void <clinit>()"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerContext:void <init>(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void logToAsyncLoggerConfigsOnCurrentThread(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.EventRoute$2:void logMessage(org.apache.logging.log4j.core.async.AsyncLoggerConfig,org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapperHandler:void onEvent(org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapper,long,boolean)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void handleQueueFull(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.config.AwaitUnconditionallyReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void actualAsyncLog(org.apache.logging.log4j.core.async.RingBufferLogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.config.DefaultReliabilityStrategy:void log(org.apache.logging.log4j.util.Supplier,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLogger:void actualAsyncLog(org.apache.logging.log4j.core.async.RingBufferLogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:void logEvent(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LogEventListener:void log(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.net.TcpSocketManager$TcpSocketManagerFactory:org.apache.logging.log4j.core.net.TcpSocketManager createManager(java.lang.String,java.io.OutputStream,java.net.Socket,java.net.InetAddress,org.apache.logging.log4j.core.net.TcpSocketManager$FactoryData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.TcpSocketManager$TcpSocketManagerFactory:org.apache.logging.log4j.core.net.TcpSocketManager createManager(java.lang.String,org.apache.logging.log4j.core.net.TcpSocketManager$FactoryData)"
        ]
    },
    "org.apache.logging.log4j.core.net.TcpSocketManager:void <init>(java.lang.String,java.io.OutputStream,java.net.Socket,java.net.InetAddress,java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.net.SslSocketManager:void <init>(java.lang.String,java.io.OutputStream,java.net.Socket,org.apache.logging.log4j.core.net.ssl.SslConfiguration,java.net.InetAddress,java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.net.SslSocketManager:void <init>(java.lang.String,java.io.OutputStream,java.net.Socket,org.apache.logging.log4j.core.net.ssl.SslConfiguration,java.net.InetAddress,java.lang.String,int,int,int,boolean,org.apache.logging.log4j.core.Layout,int,org.apache.logging.log4j.core.net.SocketOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.SslSocketManager$SslSocketManagerFactory:org.apache.logging.log4j.core.net.SslSocketManager createManager(java.lang.String,java.io.OutputStream,java.net.Socket,java.net.InetAddress,org.apache.logging.log4j.core.net.SslSocketManager$SslFactoryData)"
        ]
    },
    "org.apache.logging.log4j.core.async.EventRoute$1:void logMessage(org.apache.logging.log4j.core.async.AsyncLoggerConfig,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void handleQueueFull(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.DeletingVisitor:java.nio.file.FileVisitResult visitFile(java.lang.Object,java.nio.file.attribute.BasicFileAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.DeleteAction:boolean execute(java.nio.file.FileVisitor)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.IfAll:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.DeletingVisitor:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfAll:boolean accept(org.apache.logging.log4j.core.appender.rolling.action.PathCondition[],java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfNot:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfAny:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction$1:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.IfFileName:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.DeletingVisitor:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfAll:boolean accept(org.apache.logging.log4j.core.appender.rolling.action.PathCondition[],java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfNot:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfAny:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction$1:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.IfAccumulatedFileCount:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.DeletingVisitor:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfAll:boolean accept(org.apache.logging.log4j.core.appender.rolling.action.PathCondition[],java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfNot:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfAny:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction$1:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.IfAccumulatedFileSize:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.DeletingVisitor:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfAll:boolean accept(org.apache.logging.log4j.core.appender.rolling.action.PathCondition[],java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfNot:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.IfAny:boolean accept(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)",
            "org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction$1:java.nio.file.FileVisitResult visitFile(java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.action.PosixViewAttributeAction$1:java.nio.file.FileVisitResult visitFile(java.lang.Object,java.nio.file.attribute.BasicFileAttributes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.action.DeleteAction:boolean execute(java.nio.file.FileVisitor)"
        ]
    },
    "org.apache.logging.log4j.core.Logger:org.apache.logging.log4j.core.Logger getParent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:void setLevel(org.apache.logging.log4j.Level)"
        ]
    },
    "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.core.Logger getLogger(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LogEventListener:void log(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.core.Logger getRootLogger()",
            "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.spi.ExtendedLogger getLogger(java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.spi.ExtendedLogger getLogger(java.lang.String,org.apache.logging.log4j.message.MessageFactory)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LogEventListener:void log(org.apache.logging.log4j.core.LogEvent)",
            "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)"
        ]
    },
    "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object[])",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.AbstractFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.filter.CompositeFilter:org.apache.logging.log4j.core.Filter$Result filter(org.apache.logging.log4j.core.Logger,org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)",
            "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.Logger$PrivateConfig:boolean filter(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor:org.apache.logging.log4j.core.LogEvent ensureImmutable(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor:org.apache.logging.log4j.core.LogEvent prepareEvent(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.async.RingBufferLogEvent:org.apache.logging.log4j.core.LogEvent toImmutable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void buffer(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor:boolean tryEnqueue(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.async.AsyncLoggerConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void logToAsyncDelegate(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.impl.MutableLogEvent:org.apache.logging.log4j.core.LogEvent toImmutable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.db.AbstractDatabaseManager:void buffer(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.appender.SmtpAppender:boolean isFiltered(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:boolean isFilteredByAppender(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.config.Configurator:void setAllLevels(java.lang.String,org.apache.logging.log4j.Level)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.Configurator:void setLevel(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.Configurator:void setLevel(java.lang.String,org.apache.logging.log4j.Level)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration:void <init>(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource,org.apache.logging.log4j.core.config.builder.api.Component)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.properties.PropertiesConfiguration:void <init>(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource,org.apache.logging.log4j.core.config.builder.api.Component)"
        ]
    },
    "org.apache.logging.log4j.core.config.NullConfiguration:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LoggerContext:void <clinit>()"
        ]
    },
    "org.apache.logging.log4j.core.Logger:void addAppender(org.apache.logging.log4j.core.Appender)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:void addFilter(org.apache.logging.log4j.core.Filter)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:void setAdditive(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfig$RootLogger:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.config.LoggerConfig$RootLogger:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void <init>(java.lang.String,java.util.List,org.apache.logging.log4j.core.Filter,org.apache.logging.log4j.Level,boolean,org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig$RootLogger:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig$RootLogger:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,org.apache.logging.log4j.Level,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:org.apache.logging.log4j.core.config.LoggerConfig createLogger(java.lang.String,java.lang.String,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)",
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:org.apache.logging.log4j.core.config.LoggerConfig createLogger(boolean,org.apache.logging.log4j.Level,java.lang.String,java.lang.String,org.apache.logging.log4j.core.config.AppenderRef[],org.apache.logging.log4j.core.config.Property[],org.apache.logging.log4j.core.config.Configuration,org.apache.logging.log4j.core.Filter)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.CronTriggeringPolicy$CronTrigger:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.ConfigurationScheduler$CronRunnable:void run()",
            "org.apache.logging.log4j.core.tools.picocli.CommandLine:java.lang.Object execute(org.apache.logging.log4j.core.tools.picocli.CommandLine)",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry:void run()",
            "org.apache.logging.log4j.core.util.DefaultShutdownCallbackRegistry$RegisteredCancellable:void run()"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager$RollingRandomAccessFileManagerFactory:org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager$FactoryData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager$RollingRandomAccessFileManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager:void <init>(org.apache.logging.log4j.core.LoggerContext,java.io.RandomAccessFile,java.lang.String,java.lang.String,java.io.OutputStream,boolean,boolean,int,long,long,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.WriterAppender$WriterManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:org.apache.logging.log4j.core.appender.AbstractManager getManager(java.lang.String,org.apache.logging.log4j.core.appender.ManagerFactory,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.layout.LockingStringBuilderEncoder:void encode(java.lang.Object,org.apache.logging.log4j.core.layout.ByteBufferDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.GelfLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.PatternLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.layout.StringBuilderEncoder:void encode(java.lang.Object,org.apache.logging.log4j.core.layout.ByteBufferDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.GelfLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.PatternLayout:void encode(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.layout.TextEncoderHelper:void writeEncodedText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,java.nio.ByteBuffer,org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.charset.CoderResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:void encodeText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,java.nio.ByteBuffer,java.lang.StringBuilder,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:void encodeChunkedText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,java.nio.ByteBuffer,java.lang.StringBuilder,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.layout.TextEncoderHelper:void writeChunkedEncodedText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.ByteBuffer,java.nio.charset.CoderResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:void writeEncodedText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,java.nio.ByteBuffer,org.apache.logging.log4j.core.layout.ByteBufferDestination,java.nio.charset.CoderResult)"
        ]
    },
    "org.apache.logging.log4j.core.layout.TextEncoderHelper:void encodeChunkedText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,java.nio.ByteBuffer,java.lang.StringBuilder,org.apache.logging.log4j.core.layout.ByteBufferDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.TextEncoderHelper:void encodeText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,java.nio.ByteBuffer,java.lang.StringBuilder,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.layout.TextEncoderHelper:void encodeText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,org.apache.logging.log4j.core.layout.ByteBufferDestination)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.ConsoleAppender$ConsoleManagerFactory:org.apache.logging.log4j.core.appender.OutputStreamManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.ConsoleAppender$FactoryData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.ConsoleAppender$ConsoleManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamAppender$OutputStreamManagerFactory:org.apache.logging.log4j.core.appender.OutputStreamManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.OutputStreamAppender$FactoryData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.OutputStreamAppender$OutputStreamManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.net.DatagramSocketManager:void <init>(java.lang.String,java.io.OutputStream,java.net.InetAddress,java.lang.String,int,org.apache.logging.log4j.core.Layout,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.DatagramSocketManager$DatagramSocketManagerFactory:org.apache.logging.log4j.core.net.DatagramSocketManager createManager(java.lang.String,org.apache.logging.log4j.core.net.DatagramSocketManager$FactoryData)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager:void <init>(java.lang.String,java.lang.String,java.io.OutputStream,boolean,long,long,org.apache.logging.log4j.core.appender.rolling.TriggeringPolicy,org.apache.logging.log4j.core.appender.rolling.RolloverStrategy,java.lang.String,org.apache.logging.log4j.core.Layout,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.appender.RandomAccessFileManager$RandomAccessFileManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:org.apache.logging.log4j.core.appender.AbstractManager getManager(java.lang.String,org.apache.logging.log4j.core.appender.ManagerFactory,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager$RollingFileManagerFactory:org.apache.logging.log4j.core.appender.rolling.RollingFileManager createManager(java.lang.String,org.apache.logging.log4j.core.appender.rolling.RollingFileManager$FactoryData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.rolling.RollingFileManager$RollingFileManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.appender.FileManager$FileManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:org.apache.logging.log4j.core.appender.AbstractManager getManager(java.lang.String,org.apache.logging.log4j.core.appender.ManagerFactory,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.config.builder.impl.DefaultConfigurationBuilder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder:org.apache.logging.log4j.core.config.properties.PropertiesConfiguration build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder:java.lang.Object build()",
            "org.apache.logging.log4j.core.config.properties.PropertiesConfigurationFactory:org.apache.logging.log4j.core.config.properties.PropertiesConfiguration getConfiguration(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)"
        ]
    },
    "org.apache.logging.log4j.core.selector.BasicContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.selector.BasicContextSelector:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,boolean,java.net.URI)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.net.URI,java.lang.String)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,java.util.List,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.selector.BasicContextSelector:org.apache.logging.log4j.core.LoggerContext locateContext(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.selector.BasicContextSelector:java.util.List getLoggerContexts()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.jmx.Server:void reregisterMBeansAfterReconfigure(javax.management.MBeanServer)"
        ]
    },
    "org.apache.logging.log4j.core.selector.JndiContextSelector:void removeContext(org.apache.logging.log4j.core.LoggerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:void removeContext(org.apache.logging.log4j.spi.LoggerContext)"
        ]
    },
    "org.apache.logging.log4j.core.selector.JndiContextSelector:org.apache.logging.log4j.core.LoggerContext removeContext(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.selector.JndiContextSelector:java.util.List getLoggerContexts()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.jmx.Server:void reregisterMBeansAfterReconfigure(javax.management.MBeanServer)"
        ]
    },
    "org.apache.logging.log4j.core.async.EventRoute$2:void logMessage(org.apache.logging.log4j.core.async.AsyncLoggerConfig,org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void handleQueueFull(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapperHandler:void onEvent(org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapper,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapperHandler:void onEvent(java.lang.Object,long,boolean)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void handleQueueFull(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void logToAsyncDelegate(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.LogEventListener:void log(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.net.SslSocketManager$SslSocketManagerFactory:org.apache.logging.log4j.core.net.SslSocketManager createManager(java.lang.String,java.io.OutputStream,java.net.Socket,java.net.InetAddress,org.apache.logging.log4j.core.net.SslSocketManager$SslFactoryData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.SslSocketManager$SslSocketManagerFactory:org.apache.logging.log4j.core.net.TcpSocketManager createManager(java.lang.String,java.io.OutputStream,java.net.Socket,java.net.InetAddress,org.apache.logging.log4j.core.net.TcpSocketManager$FactoryData)"
        ]
    },
    "org.apache.logging.log4j.core.Logger:void setLevel(org.apache.logging.log4j.Level)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.core.Logger getRootLogger()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.spi.ExtendedLogger getLogger(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,org.apache.logging.log4j.message.Message,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger:boolean isEnabled(org.apache.logging.log4j.Level,org.apache.logging.log4j.Marker,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void logToAsyncDelegate(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.async.AsyncLoggerConfig:void log(org.apache.logging.log4j.core.LogEvent,org.apache.logging.log4j.core.config.LoggerConfig$LoggerConfigPredicate)"
        ]
    },
    "org.apache.logging.log4j.core.config.AppenderControl:boolean isFilteredByAppender(org.apache.logging.log4j.core.LogEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.AppenderControl:void callAppender0(org.apache.logging.log4j.core.LogEvent)"
        ]
    },
    "org.apache.logging.log4j.core.config.properties.PropertiesConfiguration:void <init>(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource,org.apache.logging.log4j.core.config.builder.api.Component)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.LoggerContext:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.Configurator:void setAllLevels(java.lang.String,org.apache.logging.log4j.Level)",
            "org.apache.logging.log4j.core.config.Configurator:void setLevel(java.util.Map)",
            "org.apache.logging.log4j.core.config.Configurator:void setLevel(java.lang.String,org.apache.logging.log4j.Level)",
            "org.apache.logging.log4j.core.config.Configurator:void setRootLevel(org.apache.logging.log4j.Level)",
            "org.apache.logging.log4j.core.osgi.BundleContextSelector:org.apache.logging.log4j.core.LoggerContext locateContext(org.osgi.framework.Bundle,java.net.URI)",
            "org.apache.logging.log4j.core.selector.BasicContextSelector:void <clinit>()",
            "org.apache.logging.log4j.core.selector.ClassLoaderContextSelector:org.apache.logging.log4j.core.LoggerContext createContext(java.lang.String,java.net.URI)",
            "org.apache.logging.log4j.core.selector.JndiContextSelector:org.apache.logging.log4j.core.LoggerContext locateContext(java.lang.String,java.lang.Object,java.net.URI)",
            "org.apache.logging.log4j.core.selector.JndiContextSelector:void <clinit>()",
            "org.apache.logging.log4j.core.LogEventListener:void <init>()",
            "org.apache.logging.log4j.core.Logger$LoggerProxy:java.lang.Object readResolve()",
            "org.apache.logging.log4j.core.DefaultLoggerContextAccessor:org.apache.logging.log4j.core.LoggerContext getLoggerContext()",
            "org.apache.logging.log4j.core.LoggerContext:void start()",
            "org.apache.logging.log4j.core.LoggerContext:void start(org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.LoggerContext:void setUpShutdownHook()",
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)",
            "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.core.config.Configuration setConfiguration(org.apache.logging.log4j.core.config.Configuration)",
            "org.apache.logging.log4j.core.LoggerContext:void reconfigure(java.net.URI)",
            "org.apache.logging.log4j.core.LoggerContext:void onChange(org.apache.logging.log4j.core.config.Reconfigurable)",
            "org.apache.logging.log4j.core.LoggerContext:void <clinit>()"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingRandomAccessFileManager$RollingRandomAccessFileManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:org.apache.logging.log4j.core.appender.AbstractManager getManager(java.lang.String,org.apache.logging.log4j.core.appender.ManagerFactory,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.layout.TextEncoderHelper:void encodeText(java.nio.charset.CharsetEncoder,java.nio.CharBuffer,java.nio.ByteBuffer,java.lang.StringBuilder,org.apache.logging.log4j.core.layout.ByteBufferDestination)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.layout.LockingStringBuilderEncoder:void encode(java.lang.StringBuilder,org.apache.logging.log4j.core.layout.ByteBufferDestination)",
            "org.apache.logging.log4j.core.layout.StringBuilderEncoder:void encode(java.lang.StringBuilder,org.apache.logging.log4j.core.layout.ByteBufferDestination)"
        ]
    },
    "org.apache.logging.log4j.core.appender.ConsoleAppender$ConsoleManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:org.apache.logging.log4j.core.appender.AbstractManager getManager(java.lang.String,org.apache.logging.log4j.core.appender.ManagerFactory,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.appender.OutputStreamAppender$OutputStreamManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:org.apache.logging.log4j.core.appender.AbstractManager getManager(java.lang.String,org.apache.logging.log4j.core.appender.ManagerFactory,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.appender.rolling.RollingFileManager$RollingFileManagerFactory:java.lang.Object createManager(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.appender.AbstractManager:org.apache.logging.log4j.core.appender.AbstractManager getManager(java.lang.String,org.apache.logging.log4j.core.appender.ManagerFactory,java.lang.Object)"
        ]
    },
    "org.apache.logging.log4j.core.config.properties.PropertiesConfigurationBuilder:java.lang.Object build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.plugins.util.PluginBuilder:java.lang.Object build()"
        ]
    },
    "org.apache.logging.log4j.core.config.properties.PropertiesConfigurationFactory:org.apache.logging.log4j.core.config.properties.PropertiesConfiguration getConfiguration(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.properties.PropertiesConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.config.properties.PropertiesConfiguration:org.apache.logging.log4j.core.config.Configuration reconfigure()"
        ]
    },
    "org.apache.logging.log4j.core.jmx.Server:void reregisterMBeansAfterReconfigure(javax.management.MBeanServer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.jmx.Server:void reregisterMBeansAfterReconfigure()"
        ]
    },
    "org.apache.logging.log4j.core.impl.Log4jContextFactory:void removeContext(org.apache.logging.log4j.spi.LoggerContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LoggerContext:boolean stop(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.logging.log4j.core.async.AsyncLoggerConfigDisruptor$Log4jEventWrapperHandler:void onEvent(java.lang.Object,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.net.SslSocketManager$SslSocketManagerFactory:org.apache.logging.log4j.core.net.TcpSocketManager createManager(java.lang.String,java.io.OutputStream,java.net.Socket,java.net.InetAddress,org.apache.logging.log4j.core.net.TcpSocketManager$FactoryData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.net.TcpSocketManager$TcpSocketManagerFactory:org.apache.logging.log4j.core.net.TcpSocketManager createManager(java.lang.String,org.apache.logging.log4j.core.net.TcpSocketManager$FactoryData)"
        ]
    },
    "org.apache.logging.log4j.core.config.Configurator:void setRootLevel(org.apache.logging.log4j.Level)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.Configurator:void setLevel(java.lang.String,org.apache.logging.log4j.Level)"
        ]
    },
    "org.apache.logging.log4j.core.LogEventListener:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.Logger$LoggerProxy:java.lang.Object readResolve()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.DefaultLoggerContextAccessor:org.apache.logging.log4j.core.LoggerContext getLoggerContext()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.logging.log4j.core.LoggerContext:void setUpShutdownHook()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LoggerContext:void start()",
            "org.apache.logging.log4j.core.LoggerContext:void start(org.apache.logging.log4j.core.config.Configuration)"
        ]
    },
    "org.apache.logging.log4j.core.config.properties.PropertiesConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,boolean,java.lang.String)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory$Factory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI)",
            "org.apache.logging.log4j.core.config.ConfigurationFactory:org.apache.logging.log4j.core.config.Configuration getConfiguration(org.apache.logging.log4j.core.LoggerContext,java.lang.String,java.net.URI,java.lang.ClassLoader)",
            "org.apache.logging.log4j.core.impl.Log4jContextFactory:org.apache.logging.log4j.core.LoggerContext getContext(java.lang.String,java.lang.ClassLoader,java.lang.Object,boolean,org.apache.logging.log4j.core.config.ConfigurationSource)",
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:void setConfigLocationUri(java.lang.String)",
            "org.apache.logging.log4j.core.jmx.LoggerContextAdmin:void setConfigText(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.logging.log4j.core.config.properties.PropertiesConfiguration:org.apache.logging.log4j.core.config.Configuration reconfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LoggerContext:void onChange(org.apache.logging.log4j.core.config.Reconfigurable)"
        ]
    },
    "org.apache.logging.log4j.core.jmx.Server:void reregisterMBeansAfterReconfigure()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.logging.log4j.core.LoggerContext:org.apache.logging.log4j.core.config.Configuration setConfiguration(org.apache.logging.log4j.core.config.Configuration)"
        ]
    }
}