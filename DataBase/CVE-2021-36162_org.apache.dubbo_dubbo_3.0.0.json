{
    "org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleManager:void subscribeAppRule(java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleAddressListenerInterceptor:java.util.List notify(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.cluster.Directory)"
        ]
    },
    "org.apache.dubbo.registry.kubernetes.KubernetesServiceDiscovery:void doInitialize(org.apache.dubbo.common.URL)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkProperty(java.lang.String,java.lang.String,int,java.util.regex.Pattern)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkLength(java.lang.String,java.lang.String)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkPathLength(java.lang.String,java.lang.String)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkName(java.lang.String,java.lang.String)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkNameHasSymbol(java.lang.String,java.lang.String)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkKey(java.lang.String,java.lang.String)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkMultiName(java.lang.String,java.lang.String)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkPathName(java.lang.String,java.lang.String)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkMethodName(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.mesh.route.MeshAppRuleListener:void receiveConfigInfo(java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.mesh.route.MeshAppRuleListener:void process(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent)",
            "org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleManager:void subscribeAppRule(java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleAddressListenerInterceptor:java.util.List notify(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.cluster.Directory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void notify(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void initialize(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$createServiceDiscovery$0(org.apache.dubbo.registry.client.ServiceDiscovery,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkLength(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateRegistryConfig(org.apache.dubbo.config.RegistryConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateMethodConfig(org.apache.dubbo.config.MethodConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkPathLength(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateRegistryConfig(org.apache.dubbo.config.RegistryConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkName(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateAbstractInterfaceConfig(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateServiceConfig(org.apache.dubbo.config.ServiceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateReferenceConfig(org.apache.dubbo.config.ReferenceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateApplicationConfig(org.apache.dubbo.config.ApplicationConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateModuleConfig(org.apache.dubbo.config.ModuleConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateProtocolConfig(org.apache.dubbo.config.ProtocolConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateRegistryConfig(org.apache.dubbo.config.RegistryConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateMethodConfig(org.apache.dubbo.config.MethodConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkExtension(java.lang.Class,java.lang.String,java.lang.String)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkHost(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkNameHasSymbol(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateAbstractInterfaceConfig(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateMethodConfig(org.apache.dubbo.config.MethodConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkParameterName(java.util.Map)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkKey(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateServiceConfig(org.apache.dubbo.config.ServiceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateReferenceConfig(org.apache.dubbo.config.ReferenceConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkMultiName(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateAbstractInterfaceConfig(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateApplicationConfig(org.apache.dubbo.config.ApplicationConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkMultiExtension(java.lang.Class,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkPathName(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateServiceConfig(org.apache.dubbo.config.ServiceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateProtocolConfig(org.apache.dubbo.config.ProtocolConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateProviderConfig(org.apache.dubbo.config.ProviderConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkMethodName(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateMethodConfig(org.apache.dubbo.config.MethodConfig)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.mesh.route.MeshAppRuleListener:void process(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$fireConfigChangeEvent$7(java.lang.String,java.io.File,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigChangeType,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.zookeeper.CacheListener:void lambda$dataChanged$1(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration$ApolloListener:void lambda$onChange$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration$NacosConfigListener:void lambda$innerReceive$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport$NacosConfigListener:void lambda$innerReceive$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void addListenerAndNotify(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void lambda$notifyAddressChanged$4(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void addListenerAndNotify(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void lambda$notifyAddressChanged$4(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$createServiceDiscovery$0(org.apache.dubbo.registry.client.ServiceDiscovery,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry$lambda_createServiceDiscovery_0__250:void execute()"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleServiceDiscovery:void initialize(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$createServiceDiscovery$0(org.apache.dubbo.registry.client.ServiceDiscovery,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateRegistryConfig(org.apache.dubbo.config.RegistryConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void validateConfig(org.apache.dubbo.config.AbstractConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateServiceConfig(org.apache.dubbo.config.ServiceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateReferenceConfig(org.apache.dubbo.config.ReferenceConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateMethodConfig(org.apache.dubbo.config.MethodConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils$validateMethodConfig__75:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateAbstractInterfaceConfig(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateServiceConfig(org.apache.dubbo.config.ServiceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateReferenceConfig(org.apache.dubbo.config.ReferenceConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateServiceConfig(org.apache.dubbo.config.ServiceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateReferenceConfig(org.apache.dubbo.config.ReferenceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateApplicationConfig(org.apache.dubbo.config.ApplicationConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void validateConfig(org.apache.dubbo.config.AbstractConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateModuleConfig(org.apache.dubbo.config.ModuleConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void validateConfig(org.apache.dubbo.config.AbstractConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateProtocolConfig(org.apache.dubbo.config.ProtocolConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void validateConfig(org.apache.dubbo.config.AbstractConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateServiceConfig(org.apache.dubbo.config.ServiceConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkExtension(java.lang.Class,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateAbstractInterfaceConfig(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateProtocolConfig(org.apache.dubbo.config.ProtocolConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateProviderConfig(org.apache.dubbo.config.ProviderConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateMethodConfig(org.apache.dubbo.config.MethodConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkHost(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateProtocolConfig(org.apache.dubbo.config.ProtocolConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkParameterName(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateConfigCenterConfig(org.apache.dubbo.config.ConfigCenterConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateApplicationConfig(org.apache.dubbo.config.ApplicationConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateMonitorConfig(org.apache.dubbo.config.MonitorConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateRegistryConfig(org.apache.dubbo.config.RegistryConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateMethodConfig(org.apache.dubbo.config.MethodConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkMultiExtension(java.lang.Class,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateAbstractInterfaceConfig(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateServiceConfig(org.apache.dubbo.config.ServiceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateReferenceConfig(org.apache.dubbo.config.ReferenceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateProtocolConfig(org.apache.dubbo.config.ProtocolConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateProviderConfig(org.apache.dubbo.config.ProviderConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateProviderConfig(org.apache.dubbo.config.ProviderConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void validateConfig(org.apache.dubbo.config.AbstractConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateServiceConfig(org.apache.dubbo.config.ServiceConfig)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$fireConfigChangeEvent$7(java.lang.String,java.io.File,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigChangeType,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_fireConfigChangeEvent_7__343:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.configcenter.support.zookeeper.CacheListener:void lambda$dataChanged$1(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.zookeeper.CacheListener$lambda_dataChanged_1__631:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration$ApolloListener:void lambda$onChange$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration$ApolloListener$lambda_onChange_0__632:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration$NacosConfigListener:void lambda$innerReceive$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration$NacosConfigListener$lambda_innerReceive_0__635:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport$NacosConfigListener:void lambda$innerReceive$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport$NacosConfigListener$lambda_innerReceive_0__662:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void addListenerAndNotify(java.lang.String,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void subscribeURLs(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Set)"
        ]
    },
    "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void lambda$notifyAddressChanged$4(java.lang.String,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener$lambda_notifyAddressChanged_4__243:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(java.util.List)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void doNotify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "com.alibaba.dubbo.registry.support.AbstractRegistry$CompatibleAbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void addListenerAndNotify(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void lambda$notifyAddressChanged$4(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notifySourceListener()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.dubbo.registry.NotifyListener$ReverseCompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry$lambda_createServiceDiscovery_0__250:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.function.ThrowableAction:void execute(org.apache.dubbo.common.function.ThrowableAction)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void validateConfig(org.apache.dubbo.config.AbstractConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkDefaultAndValidateConfigs(java.lang.Class)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils$validateMethodConfig__75:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void postProcessRefresh()"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:void checkAndUpdateSubConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void postProcessRefresh()"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateConfigCenterConfig(org.apache.dubbo.config.ConfigCenterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startConfigCenter()"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateMonitorConfig(org.apache.dubbo.config.MonitorConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void validateConfig(org.apache.dubbo.config.AbstractConfig)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_fireConfigChangeEvent_7__343:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.configcenter.support.zookeeper.CacheListener$lambda_dataChanged_1__631:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration$ApolloListener$lambda_onChange_0__632:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration$NacosConfigListener$lambda_innerReceive_0__635:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport$NacosConfigListener$lambda_innerReceive_0__662:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void subscribeURLs(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry$DefaultMappingListener:void onEvent(org.apache.dubbo.metadata.MappingChangedEvent)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener$lambda_notifyAddressChanged_4__243:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$doInListener$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void doNotify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void doNotify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry$CompatibleAbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.support.AbstractRegistry:void notify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notifySourceListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleRegistry$SingleNotifyListener:void notify(java.util.List)"
        ]
    },
    "com.alibaba.dubbo.registry.NotifyListener$ReverseCompatibleNotifyListener:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void addListenerAndNotify(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void lambda$notifyAddressChanged$4(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.common.function.ThrowableAction:void execute(org.apache.dubbo.common.function.ThrowableAction)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$destroyServiceDiscoveries$15(org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:org.apache.dubbo.registry.client.ServiceDiscovery createServiceDiscovery(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void destroy()",
            "org.apache.dubbo.common.lang.ShutdownHookCallbacks:void lambda$callback$0(org.apache.dubbo.common.lang.ShutdownHookCallback)",
            "org.apache.dubbo.metadata.rest.ClassPathServiceRestMetadataReader:java.util.List read()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkDefaultAndValidateConfigs(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.xds.util.PilotExchanger$lambda_doObserveEndpoints_4__462:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.xds.util.PilotExchanger:long createRouteObserve()",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void doObserveEndpoints(java.lang.String)",
            "org.apache.dubbo.registry.xds.util.protocol.impl.LdsProtocol:void observeListeners(java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol$lambda_observeResource_0__485:void run()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void addListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void removeListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.RegistryConfig:void setAddress(java.lang.String)"
        ]
    },
    "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:void processAllRestMethodMetadata(org.apache.dubbo.metadata.rest.ServiceRestMetadata,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void postProcessRefresh()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractConfig:void refresh()"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:void postProcessRefresh()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractConfig:void refresh()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startConfigCenter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initialize()"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry$DefaultMappingListener:void onEvent(org.apache.dubbo.metadata.MappingChangedEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReport$MappingDataListener:void lambda$dataChanged$0(org.apache.dubbo.metadata.MappingChangedEvent,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport$MappingDataListener:void lambda$process$0(org.apache.dubbo.metadata.MappingChangedEvent,org.apache.dubbo.metadata.MappingListener)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult$lambda_whenCompleteWithContext_0__249:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$doInListener$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_doInListener_0__359:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL,boolean,boolean)",
            "com.alibaba.dubbo.registry.support.AbstractRegistry$CompatibleAbstractRegistry:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(java.util.List)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void registered(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void unregistered(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void subscribed(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void access$200(org.apache.dubbo.registry.zookeeper.ZookeeperRegistry,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void notifySubscriber(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Collection)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void doNotify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void doNotify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry:void notify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry$SingleNotifyListener:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void addListenerAndNotify(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void lambda$notifyAddressChanged$4(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$destroyServiceDiscoveries$15(org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_destroyServiceDiscoveries_15__39:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:org.apache.dubbo.registry.client.ServiceDiscovery createServiceDiscovery(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.common.lang.ShutdownHookCallbacks:void lambda$callback$0(org.apache.dubbo.common.lang.ShutdownHookCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.lang.ShutdownHookCallbacks$lambda_callback_0__200:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.metadata.rest.ClassPathServiceRestMetadataReader:java.util.List read()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initialize()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.xds.util.PilotExchanger$lambda_doObserveEndpoints_4__462:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.xds.util.PilotExchanger:long createRouteObserve()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$new$0(org.apache.dubbo.registry.xds.util.protocol.message.ListenerResult)"
        ]
    },
    "org.apache.dubbo.registry.xds.util.PilotExchanger:void doObserveEndpoints(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void observeEndpoints(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$createRouteObserve$1(org.apache.dubbo.registry.xds.util.protocol.message.RouteResult,java.lang.String,java.util.Set)"
        ]
    },
    "org.apache.dubbo.registry.xds.util.protocol.impl.LdsProtocol:void observeListeners(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol$lambda_observeResource_0__485:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void addListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void <init>()",
            "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:void addListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleManager:void subscribeAppRule(java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:void addListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void lambda$addListener$0(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void removeListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:void removeListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:void removeListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void lambda$removeListener$1(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)"
        ]
    },
    "org.apache.dubbo.config.RegistryConfig:void setAddress(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.RegistryBuilder:org.apache.dubbo.config.RegistryConfig build()",
            "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:org.springframework.beans.factory.support.RootBeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,java.lang.Class,boolean)",
            "org.apache.dubbo.config.RegistryConfig:void <init>(java.lang.String)",
            "org.apache.dubbo.config.RegistryConfig:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:void processAllRestMethodMetadata(org.apache.dubbo.metadata.rest.ServiceRestMetadata,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:org.apache.dubbo.metadata.rest.ServiceRestMetadata resolve(java.lang.Class)"
        ]
    },
    "org.apache.dubbo.config.AbstractConfig:void refresh()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()",
            "org.apache.dubbo.config.ServiceConfig:void export()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkDefaultAndValidateConfigs(java.lang.Class)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startConfigCenter()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void loadConfigs(java.lang.Class)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void exportServices()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$referServices$8(org.apache.dubbo.config.ReferenceConfigBase)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$loadConfigs$1(java.lang.Class,java.lang.String)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void processExtraRefresh(java.lang.String,org.apache.dubbo.common.config.InmemoryConfiguration)",
            "org.apache.dubbo.config.ApplicationConfig:void refresh()",
            "org.apache.dubbo.config.context.ConfigManager:boolean isEquals(org.apache.dubbo.config.AbstractConfig,org.apache.dubbo.config.AbstractConfig)",
            "org.apache.dubbo.config.context.ConfigManager$refresh__123:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$refresh__124:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$refresh__125:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$refresh__126:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$refresh__127:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$refresh__128:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$refresh__129:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$refresh__130:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$refresh__131:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$refresh__132:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()",
            "org.apache.dubbo.config.ServiceConfig:void export()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()"
        ]
    },
    "org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReport$MappingDataListener:void lambda$dataChanged$0(org.apache.dubbo.metadata.MappingChangedEvent,org.apache.dubbo.metadata.MappingListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReport$MappingDataListener$lambda_dataChanged_0__657:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport$MappingDataListener:void lambda$process$0(org.apache.dubbo.metadata.MappingChangedEvent,org.apache.dubbo.metadata.MappingListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport$MappingDataListener$lambda_process_0__659:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.rpc.AsyncRpcResult$lambda_whenCompleteWithContext_0__249:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$doInListener$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_doInListener_0__359:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcServiceContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.CacheableFailbackRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)",
            "org.apache.dubbo.registry.kubernetes.KubernetesRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.dns.DNSRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.xds.XdsRegistry:void <init>(org.apache.dubbo.common.URL)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void <init>(org.apache.dubbo.common.URL,com.alibaba.dubbo.registry.support.FailbackRegistry)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry$CompatibleAbstractRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.dubbo.registry.support.AbstractRegistry:void <init>(com.alibaba.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.support.AbstractRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void lambda$doSubscribe$2(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.lang.String,java.util.List)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void subscribe(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void registered(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void receive(java.lang.String,java.net.InetSocketAddress)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void register(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void unregistered(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void receive(java.lang.String,java.net.InetSocketAddress)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void unregister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void subscribed(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void access$200(org.apache.dubbo.registry.zookeeper.ZookeeperRegistry,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$RegistryChildListenerImpl$1:void doNotify(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void notifySubscriber(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$doSubscribe$3(org.apache.dubbo.common.URL,java.util.Set,org.apache.dubbo.registry.NotifyListener,org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void access$100(org.apache.dubbo.registry.nacos.NacosRegistry,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Collection)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(java.util.List)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void notify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void doNotify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_destroyServiceDiscoveries_15__39:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:org.apache.dubbo.registry.client.ServiceDiscoveryRegistry create(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyRegistries()"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.common.lang.ShutdownHookCallbacks$lambda_callback_0__200:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.xds.util.PilotExchanger:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.xds.util.PilotExchanger:org.apache.dubbo.registry.xds.util.PilotExchanger initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$new$0(org.apache.dubbo.registry.xds.util.protocol.message.ListenerResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.xds.util.PilotExchanger$lambda_new_0__458:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.xds.util.PilotExchanger:void observeEndpoints(java.lang.String,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.xds.XdsServiceDiscovery:void lambda$addServiceInstancesChangedListener$1(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$createRouteObserve$1(org.apache.dubbo.registry.xds.util.protocol.message.RouteResult,java.lang.String,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.xds.util.PilotExchanger$lambda_createRouteObserve_1__463:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap await()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void release()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager$lambda_write_13__114:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void lambda$exported$0(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:java.util.Set findMappedServices(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)"
        ]
    },
    "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.tri.TransportObserver:void tryOnData(byte[],boolean)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.tri.TransportObserver:void tryOnComplete()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream$UnaryTransportObserver:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream$UnaryTransportObserver:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration$lambda_execute_2__363:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$doInListener$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:org.apache.dubbo.rpc.Result get()",
            "org.apache.dubbo.rpc.AsyncRpcResult:org.apache.dubbo.rpc.Result get(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:java.util.List shutdownNow()",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void doReceived(org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2:void doReceived(org.apache.dubbo.remoting.exchange.Response)"
        ]
    },
    "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)"
        ]
    },
    "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void doSaveProperties(long)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void saveProperties(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.utils.ExecutorUtil:void newThreadToCloseExecutor(java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void doSaveProperties(long)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveProperties(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.lang.String,boolean,boolean)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl:void publishProvider(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:boolean doHandleMetadataCollection(java.util.Map)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl:void lambda$publishConsumer$1(org.apache.dubbo.common.URL,java.lang.String,org.apache.dubbo.metadata.report.MetadataReport)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:boolean doHandleMetadataCollection(java.util.Map)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:void addListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository:void addListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:void addListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void lambda$addListener$0(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_addListener_0__211:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:void removeListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository:void removeListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:void removeListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void lambda$removeListener$1(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_removeListener_1__212:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.RegistryBuilder:org.apache.dubbo.config.RegistryConfig build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.builders.RegistryBuilder:org.apache.dubbo.config.AbstractConfig build()"
        ]
    },
    "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:org.springframework.beans.factory.support.RootBeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:void parseNested(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,java.lang.Class,boolean,java.lang.String,java.lang.String,java.lang.String,org.springframework.beans.factory.config.BeanDefinition)",
            "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:void parseMethods(java.lang.String,org.w3c.dom.NodeList,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.xml.ParserContext)",
            "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:void parseArguments(java.lang.String,org.w3c.dom.NodeList,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.xml.ParserContext)",
            "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)"
        ]
    },
    "org.apache.dubbo.config.RegistryConfig:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter export()",
            "com.alibaba.dubbo.config.RegistryConfig:void <init>(java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.RegistryConfig:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.dubbo.config.RegistryConfig:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:org.apache.dubbo.metadata.rest.ServiceRestMetadata resolve(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.ReferenceConfig:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void export()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void exportServices()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$exportServices$4(org.apache.dubbo.config.ServiceConfigBase)",
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter export()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void loadConfigs(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startConfigCenter()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void useRegistryAsConfigCenterIfNecessary()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void loadConfigsFromProps()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void exportServices()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$referServices$8(org.apache.dubbo.config.ReferenceConfigBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_referServices_8__32:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$loadConfigs$1(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_loadConfigs_1__26:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void processExtraRefresh(java.lang.String,org.apache.dubbo.common.config.InmemoryConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractConfig:void refresh()"
        ]
    },
    "org.apache.dubbo.config.ApplicationConfig:void refresh()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkDefaultAndValidateConfigs(java.lang.Class)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void loadConfigs(java.lang.Class)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$loadConfigs$1(java.lang.Class,java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:boolean isEquals(org.apache.dubbo.config.AbstractConfig,org.apache.dubbo.config.AbstractConfig)",
            "org.apache.dubbo.config.context.ConfigManager$refresh__122:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:boolean isEquals(org.apache.dubbo.config.AbstractConfig,org.apache.dubbo.config.AbstractConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:void checkDuplicate(org.apache.dubbo.config.AbstractConfig,org.apache.dubbo.config.AbstractConfig)",
            "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.AbstractConfig addIfAbsent(org.apache.dubbo.config.AbstractConfig,java.util.Map,boolean)",
            "org.apache.dubbo.config.context.ConfigManager:boolean lambda$addIfAbsent$15(org.apache.dubbo.config.AbstractConfig,org.apache.dubbo.config.AbstractConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__123:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__124:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__125:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__126:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__127:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__128:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__129:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__130:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__131:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__132:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener:void onContextRefreshedEvent(org.springframework.context.event.ContextRefreshedEvent)"
        ]
    },
    "org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReport$MappingDataListener$lambda_dataChanged_0__657:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport$MappingDataListener$lambda_process_0__659:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.ListenerRegistryWrapper:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.integration.DynamicDirectory:void subscribe(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.support.AbstractRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.AbstractConfig addConfig(org.apache.dubbo.config.AbstractConfig,boolean)",
            "org.apache.dubbo.config.context.ConfigManager:void write(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.util.Map getConfigsMap(java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getConfigs(java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getConfigs(java.lang.Class)",
            "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.AbstractConfig getConfigById(java.lang.String,java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.AbstractConfig getConfigByName(java.lang.Class,java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.AbstractConfig getSingleConfig(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean addURL(java.util.Map,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean removeURL(java.util.Map,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.RpcServiceContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.RpcContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.String getConfig(java.lang.String,java.lang.String,long)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:boolean removeConfig(java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:void execute(java.lang.Runnable,long)",
            "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration:boolean publishConfig(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object delay(java.lang.String,org.apache.dubbo.common.function.ThrowableFunction)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$processWatchEvents$5(java.nio.file.WatchService)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$doInListener$1(java.lang.String,java.util.function.BiConsumer,java.nio.file.WatchService)"
        ]
    },
    "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.support.CacheableFailbackRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.kubernetes.KubernetesRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.kubernetes.KubernetesRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.dns.DNSRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dns.DNSRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.xds.XdsRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.xds.XdsRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void <init>(org.apache.dubbo.common.URL,com.alibaba.dubbo.registry.support.FailbackRegistry)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void <init>(com.alibaba.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry:void <init>(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:java.util.List lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "com.alibaba.dubbo.registry.support.AbstractRegistry:java.util.List getCacheUrls(com.alibaba.dubbo.common.URL)",
            "com.alibaba.dubbo.registry.support.AbstractRegistry:java.util.List lookup(com.alibaba.dubbo.common.URL)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:java.util.List lookup(com.alibaba.dubbo.common.URL)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:java.util.List lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void recover()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.support.AbstractRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void lambda$doSubscribe$2(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$lambda_doSubscribe_2__385:void childChanged(java.lang.String,java.util.List)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void subscribe(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void receive(java.lang.String,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void access$100(org.apache.dubbo.registry.multicast.MulticastRegistry,java.lang.String,java.net.InetSocketAddress)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void register(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void register(org.apache.dubbo.registry.Registry,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.BaseOnline:void doExport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void unregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.BaseOffline:void doUnexport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)"
        ]
    },
    "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$RegistryChildListenerImpl$1:void doNotify(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.RegistryNotifier$NotificationTask:void run()",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$RegistryChildListenerImpl$1:void notify(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$doSubscribe$3(org.apache.dubbo.common.URL,java.util.Set,org.apache.dubbo.registry.NotifyListener,org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_doSubscribe_3__407:void callback(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void access$100(org.apache.dubbo.registry.nacos.NacosRegistry,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry$RegistryChildListenerImpl$1:void doNotify(java.lang.Object)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void notify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:org.apache.dubbo.registry.client.ServiceDiscoveryRegistry create(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyRegistries()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.xds.util.PilotExchanger:org.apache.dubbo.registry.xds.util.PilotExchanger initialize(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.xds.XdsServiceDiscovery:void doInitialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.xds.util.PilotExchanger$lambda_new_0__458:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.xds.XdsServiceDiscovery:void lambda$addServiceInstancesChangedListener$1(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.xds.XdsServiceDiscovery$lambda_addServiceInstancesChangedListener_1__454:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.xds.util.PilotExchanger$lambda_createRouteObserve_1__463:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$doInListener$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap await()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void release()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$lambda_write_13__114:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcServiceContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void lambda$exported$0(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig$lambda_exported_0__4:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:java.util.Set findMappedServices(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:java.util.Set getServices(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ZoneAwareFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.interceptor.ClusterInterceptor:org.apache.dubbo.rpc.Result intercept(org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invokeWithContext(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$ClusterFilterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InvocationInterceptorInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.AppResponse lambda$doInvoke$0(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.tri.ServerStream$StreamTransportObserver:void onMetadata(org.apache.dubbo.rpc.protocol.tri.Metadata,boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void invoke()",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ConsumerSignFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ProviderAuthFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.rpc.protocol.tri.TripleProtocol:void destroy()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.TransportObserver:void tryOnData(byte[],boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.tri.TransportObserver:void tryOnComplete()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.tri.AbstractStream$UnaryTransportObserver:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.tri.TransportObserver:void tryOnComplete()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration$lambda_execute_2__363:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcServiceContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void doSaveProperties(long)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void saveProperties(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void doSaveProperties(long)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveProperties(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.lang.String,boolean,boolean)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)"
        ]
    },
    "org.apache.dubbo.rpc.AsyncRpcResult:org.apache.dubbo.rpc.Result get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)"
        ]
    },
    "org.apache.dubbo.rpc.AsyncRpcResult:org.apache.dubbo.rpc.Result get(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:void waitForResultIfSync(org.apache.dubbo.rpc.AsyncRpcResult,org.apache.dubbo.rpc.RpcInvocation)"
        ]
    },
    "org.apache.dubbo.common.threadpool.ThreadlessExecutor:java.util.List shutdownNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void shutdown()",
            "org.apache.dubbo.common.utils.ExecutorUtil$1:void run()",
            "org.apache.dubbo.common.utils.ExecutorUtil:void gracefulShutdown(java.util.concurrent.Executor,int)",
            "org.apache.dubbo.common.utils.ExecutorUtil:void shutdownNow(java.util.concurrent.Executor,int)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void closeChannel(org.apache.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void doReceived(org.apache.dubbo.remoting.exchange.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void received(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response,boolean)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:boolean cancel(boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture2:void doReceived(org.apache.dubbo.remoting.exchange.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2:void received(org.apache.dubbo.remoting.api.Connection,org.apache.dubbo.remoting.exchange.Response,boolean)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2:boolean cancel(boolean)"
        ]
    },
    "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void doSaveProperties(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry$SaveProperties:void run()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void saveProperties(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void saveProperties(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "org.apache.dubbo.common.utils.ExecutorUtil:void newThreadToCloseExecutor(java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.utils.ExecutorUtil:void gracefulShutdown(java.util.concurrent.Executor,int)",
            "org.apache.dubbo.common.utils.ExecutorUtil:void shutdownNow(java.util.concurrent.Executor,int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void doSaveProperties(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void access$100(org.apache.dubbo.metadata.report.support.AbstractMetadataReport,long)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveProperties(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadataTask(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadataTask(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout:void expire()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelBucket:void expireTimeouts(long)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl:void publishProvider(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl:void publishServiceDefinition(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:boolean doHandleMetadataCollection(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:boolean retry()",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void publishAll()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl:void lambda$publishConsumer$1(org.apache.dubbo.common.URL,java.lang.String,org.apache.dubbo.metadata.report.MetadataReport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl$lambda_publishConsumer_1__160:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository:void addListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_addListener_0__211:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository:void removeListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_removeListener_1__212:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.RegistryBuilder:org.apache.dubbo.config.AbstractConfig build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:void parseNested(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,java.lang.Class,boolean,java.lang.String,java.lang.String,java.lang.String,org.springframework.beans.factory.config.BeanDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:org.springframework.beans.factory.support.RootBeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,java.lang.Class,boolean)"
        ]
    },
    "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:void parseMethods(java.lang.String,org.w3c.dom.NodeList,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.xml.ParserContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:org.springframework.beans.factory.support.RootBeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,java.lang.Class,boolean)"
        ]
    },
    "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:void parseArguments(java.lang.String,org.w3c.dom.NodeList,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.xml.ParserContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:org.springframework.beans.factory.support.RootBeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,java.lang.Class,boolean)"
        ]
    },
    "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter export()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.metadata.MetadataServiceExporter export()"
        ]
    },
    "com.alibaba.dubbo.config.RegistryConfig:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.config.RegistryConfig:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.ReferenceConfig:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ReferenceConfigCache:java.lang.Object lambda$get$3(org.apache.dubbo.config.ReferenceConfigBase,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$exportServices$4(org.apache.dubbo.config.ServiceConfigBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_exportServices_4__29:void run()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void useRegistryAsConfigCenterIfNecessary()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startConfigCenter()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void loadConfigsFromProps()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initialize()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_referServices_8__32:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_loadConfigs_1__26:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__122:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void checkDuplicate(org.apache.dubbo.config.AbstractConfig,org.apache.dubbo.config.AbstractConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:void lambda$addIfAbsent$14(org.apache.dubbo.config.AbstractConfig,org.apache.dubbo.config.AbstractConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.AbstractConfig addIfAbsent(org.apache.dubbo.config.AbstractConfig,java.util.Map,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.AbstractConfig lambda$addConfig$5(org.apache.dubbo.config.AbstractConfig,boolean)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:boolean lambda$addIfAbsent$15(org.apache.dubbo.config.AbstractConfig,org.apache.dubbo.config.AbstractConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager$lambda_addIfAbsent_15__115:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener:void onContextRefreshedEvent(org.springframework.context.event.ContextRefreshedEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener:void onApplicationContextEvent(org.springframework.context.event.ApplicationContextEvent)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void reRefer(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrls()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void doOverrideIfNecessary()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$lambda_doLocalExport_2__268:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.AbstractConfig addConfig(org.apache.dubbo.config.AbstractConfig,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:void setApplication(org.apache.dubbo.config.ApplicationConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void setMonitor(org.apache.dubbo.config.MonitorConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void setModule(org.apache.dubbo.config.ModuleConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void setMetrics(org.apache.dubbo.config.MetricsConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void setSsl(org.apache.dubbo.config.SslConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void addConfig(org.apache.dubbo.config.AbstractConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void write(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:void refreshAll()",
            "org.apache.dubbo.config.context.ConfigManager:void clear()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Map getConfigsMap(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getDefaultConfigCenter()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getDefaultMetadataConfigs()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getDefaultProvider()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getDefaultConsumer()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.List getDefaultConfigs(java.lang.Class)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.List getDefaultRegistries()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Map getConfigsMap(java.lang.Class)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection lambda$getConfigs$8(java.lang.Class)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection lambda$getConfigs$7(java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getConfigs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getConfigCenters()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getMetadataConfigs()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getProviders()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getConsumers()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getProtocols()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getRegistries()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getServices()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getReferences()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getConfigs(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkDefaultAndValidateConfigs(java.lang.Class)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void loadConfigs(java.lang.Class)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.AbstractConfig getConfigById(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getConfig(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.AbstractConfig getConfigByName(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getConfig(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.AbstractConfig getSingleConfig(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getApplication()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getMonitor()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getModule()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getMetrics()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getSsl()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean addURL(java.util.Map,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean exportURL(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean subscribeURL(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean removeURL(java.util.Map,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean unexportURL(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean unsubscribeURL(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.RpcContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.String getConfig(java.lang.String,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:java.lang.String getRule(java.lang.String,java.lang.String,long)",
            "org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleManager:void subscribeAppRule(java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:java.lang.String getConfig(java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:java.lang.String getProperties(java.lang.String,java.lang.String,long)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getConfig$2(java.lang.String,java.lang.String,long,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:boolean removeConfig(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void doUnregister(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:void execute(java.lang.Runnable,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration:boolean publishConfig(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void doRegister(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:boolean publishConfig(java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:boolean publishConfig(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object delay(java.lang.String,org.apache.dubbo.common.function.ThrowableFunction)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:boolean doPublishConfig(java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:boolean doRemoveConfig(java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$processWatchEvents$5(java.nio.file.WatchService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_processWatchEvents_5__341:void run()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$doInListener$1(java.lang.String,java.util.function.BiConsumer,java.nio.file.WatchService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_doInListener_1__339:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.kubernetes.KubernetesRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.dns.DNSRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.xds.XdsRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void <init>(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.ListenerRegistryWrapper:java.util.List lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:java.util.List lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:java.util.List lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:java.util.List lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry:java.util.List getCacheUrls(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry:java.util.List lookup(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:java.util.List lookup(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:java.util.List lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$lambda_doSubscribe_2__385:void childChanged(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl:void process(org.apache.zookeeper.WatchedEvent)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void access$100(org.apache.dubbo.registry.multicast.MulticastRegistry,java.lang.String,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistry$1:void run()"
        ]
    },
    "org.apache.dubbo.registry.ListenerRegistryWrapper:void register(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void register(org.apache.dubbo.registry.Registry,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.BaseOnline:void doExport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)"
        ]
    },
    "org.apache.dubbo.registry.Registry:void reExportRegister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void register(org.apache.dubbo.registry.Registry,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void register(org.apache.dubbo.registry.Registry,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.BaseOnline:void doExport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.BaseOnline:void doExport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.BaseOnline:boolean online(java.lang.String)",
            "org.apache.dubbo.qos.command.impl.Online:void doExport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)",
            "org.apache.dubbo.qos.command.impl.OnlineApp:void doExport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)",
            "org.apache.dubbo.qos.command.impl.OnlineInterface:void doExport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)"
        ]
    },
    "org.apache.dubbo.registry.ListenerRegistryWrapper:void unregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.BaseOffline:void doUnexport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)"
        ]
    },
    "org.apache.dubbo.registry.Registry:void reExportUnregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.rpc.protocol.tri.TripleProtocol:void destroy()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.support.FailbackRegistry:void destroy()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.BaseOffline:void doUnexport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.BaseOffline:void doUnexport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.BaseOffline:boolean offline(java.lang.String)",
            "org.apache.dubbo.qos.command.impl.Offline:void doUnexport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)",
            "org.apache.dubbo.qos.command.impl.OfflineApp:void doUnexport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)",
            "org.apache.dubbo.qos.command.impl.OfflineInterface:void doUnexport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)"
        ]
    },
    "org.apache.dubbo.registry.RegistryNotifier$NotificationTask:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$RegistryChildListenerImpl$1:void notify(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$RegistryChildListenerImpl:void childChanged(java.lang.String,java.util.List)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryChangeWatcher:void process(org.apache.zookeeper.WatchedEvent)",
            "org.apache.dubbo.registry.nacos.NacosRegistry$RegistryChildListenerImpl:void onEvent(com.alibaba.nacos.api.naming.listener.Event)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_doSubscribe_3__407:void callback(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:void execute(org.apache.dubbo.registry.nacos.NacosRegistry$NamingServiceCallback)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry$RegistryChildListenerImpl$1:void doNotify(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.RegistryNotifier$NotificationTask:void run()"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.RegistryFactoryWrapper:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void initServiceRegistry(org.apache.dubbo.common.URL,java.util.Map)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void initReferenceRegistry(org.apache.dubbo.common.URL,java.util.Map)",
            "org.apache.dubbo.qos.command.impl.BaseOffline:void doUnexport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)",
            "org.apache.dubbo.qos.command.impl.BaseOnline:void doExport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void reset(boolean)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap stop()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$destroy__11:void callback()"
        ]
    },
    "org.apache.dubbo.registry.xds.XdsServiceDiscovery:void doInitialize(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.SelfHostMetaServiceDiscovery:void initialize(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.xds.XdsServiceDiscoveryFactory:org.apache.dubbo.registry.client.ServiceDiscovery createDiscovery(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.xds.XdsServiceDiscovery$lambda_addServiceInstancesChangedListener_1__454:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig$lambda_exported_0__4:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:java.util.Set getServices(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ZoneAwareFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invokeWithContext(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.AppResponse lambda$doInvoke$0(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.tri.ServerStream$StreamTransportObserver:void onMetadata(org.apache.dubbo.rpc.protocol.tri.Metadata,boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void invoke()",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ConsumerSignFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ProviderAuthFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ZoneAwareFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invokeWithContext(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$ClusterFilterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InvocationInterceptorInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.AppResponse lambda$doInvoke$0(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.tri.ServerStream$StreamTransportObserver:void onMetadata(org.apache.dubbo.rpc.protocol.tri.Metadata,boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void invoke()",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ConsumerSignFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ProviderAuthFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ZoneAwareFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invokeWithContext(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$ClusterFilterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InvocationInterceptorInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.AppResponse lambda$doInvoke$0(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.tri.ServerStream$StreamTransportObserver:void onMetadata(org.apache.dubbo.rpc.protocol.tri.Metadata,boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void invoke()",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ConsumerSignFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ProviderAuthFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.filter.support.ZoneAwareFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.interceptor.ClusterInterceptor:org.apache.dubbo.rpc.Result intercept(org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invokeWithContext(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$ClusterFilterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ZoneAwareFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.interceptor.ClusterInterceptor:org.apache.dubbo.rpc.Result intercept(org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invokeWithContext(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$ClusterFilterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InvocationInterceptorInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.AppResponse lambda$doInvoke$0(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.tri.ServerStream$StreamTransportObserver:void onMetadata(org.apache.dubbo.rpc.protocol.tri.Metadata,boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void invoke()",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ConsumerSignFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ProviderAuthFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InvocationInterceptorInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ZoneAwareFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.interceptor.ClusterInterceptor:org.apache.dubbo.rpc.Result intercept(org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invokeWithContext(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$ClusterFilterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InvocationInterceptorInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.AppResponse lambda$doInvoke$0(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.tri.ServerStream$StreamTransportObserver:void onMetadata(org.apache.dubbo.rpc.protocol.tri.Metadata,boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void invoke()",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ConsumerSignFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ProviderAuthFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ZoneAwareFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invokeWithContext(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$ClusterFilterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InvocationInterceptorInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.AppResponse lambda$doInvoke$0(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.tri.ServerStream$StreamTransportObserver:void onMetadata(org.apache.dubbo.rpc.protocol.tri.Metadata,boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void invoke()",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ConsumerSignFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ProviderAuthFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ZoneAwareFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invokeWithContext(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.AppResponse lambda$doInvoke$0(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.tri.ServerStream$StreamTransportObserver:void onMetadata(org.apache.dubbo.rpc.protocol.tri.Metadata,boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void invoke()",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ConsumerSignFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ProviderAuthFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ZoneAwareFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invokeWithContext(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.AppResponse lambda$doInvoke$0(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.tri.ServerStream$StreamTransportObserver:void onMetadata(org.apache.dubbo.rpc.protocol.tri.Metadata,boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void invoke()",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ConsumerSignFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ProviderAuthFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.AsyncRpcResult doInvokeAndReturn(org.apache.dubbo.rpc.RpcInvocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ZoneAwareFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invokeWithContext(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.AppResponse lambda$doInvoke$0(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.tri.ServerStream$StreamTransportObserver:void onMetadata(org.apache.dubbo.rpc.protocol.tri.Metadata,boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void invoke()",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ConsumerSignFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ProviderAuthFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.AsyncRpcResult doInvokeAndReturn(org.apache.dubbo.rpc.RpcInvocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.AppResponse lambda$doInvoke$0(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker$lambda_doInvoke_0__173:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.AsyncRpcResult doInvokeAndReturn(org.apache.dubbo.rpc.RpcInvocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.ServerStream$StreamTransportObserver:void onMetadata(org.apache.dubbo.rpc.protocol.tri.Metadata,boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.tri.TransportObserver:void tryOnMetadata(org.apache.dubbo.rpc.protocol.tri.Metadata,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void invoke()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver$invoke__571:void run()"
        ]
    },
    "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.auth.filter.ConsumerSignFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.auth.filter.ProviderAuthFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.ServiceConfig:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unexportServices$5(org.apache.dubbo.config.ServiceConfigBase)",
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter unexport()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.rpc.protocol.tri.TripleProtocol:void destroy()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper$lambda_unexport_0__290:void run()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyProtocols()",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.rpc.protocol.tri.TripleProtocol:void destroy()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyProtocols()",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.rest.RestProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object encodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.TripleProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyProtocols()",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.rpc.protocol.tri.TripleProtocol:void destroy()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractInvoker:void waitForResultIfSync(org.apache.dubbo.rpc.AsyncRpcResult,org.apache.dubbo.rpc.RpcInvocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void shutdown()",
            "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:void destroyAll()",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.utils.ExecutorUtil:void gracefulShutdown(java.util.concurrent.Executor,int)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void destroy()"
        ]
    },
    "org.apache.dubbo.common.utils.ExecutorUtil$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.utils.ExecutorUtil:void newThreadToCloseExecutor(java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.common.utils.ExecutorUtil:void gracefulShutdown(java.util.concurrent.Executor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void destroy()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void close(int)"
        ]
    },
    "org.apache.dubbo.common.utils.ExecutorUtil:void shutdownNow(java.util.concurrent.Executor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:void lambda$destroyAll$3(java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void close()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void closeChannel(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void disconnected(org.apache.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void received(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void notifyTimeout(org.apache.dubbo.remoting.exchange.support.DefaultFuture)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void received(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture:boolean cancel(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unreferServices$9(java.util.concurrent.CompletableFuture)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unexportServices$6(java.util.concurrent.CompletableFuture)",
            "org.apache.dubbo.rpc.protocol.dubbo.FutureAdapter:boolean cancel(boolean)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void cancel()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture2:void received(org.apache.dubbo.remoting.api.Connection,org.apache.dubbo.remoting.exchange.Response,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void notifyTimeout(org.apache.dubbo.remoting.exchange.support.DefaultFuture2)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2:void received(org.apache.dubbo.remoting.api.Connection,org.apache.dubbo.remoting.exchange.Response)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture2:boolean cancel(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unreferServices$9(java.util.concurrent.CompletableFuture)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unexportServices$6(java.util.concurrent.CompletableFuture)",
            "org.apache.dubbo.rpc.protocol.dubbo.FutureAdapter:boolean cancel(boolean)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2:void cancel()"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry$SaveProperties:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void doSaveProperties(long)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void saveProperties(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void access$100(org.apache.dubbo.metadata.report.support.AbstractMetadataReport,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$SaveProperties:void run()"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadataTask(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void lambda$storeProviderMetadata$0(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadataTask(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void lambda$storeConsumerMetadata$1(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelBucket:void expireTimeouts(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$Worker:void run()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl:void publishServiceDefinition(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void publishServiceDefinition(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:boolean retry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$MetadataReportRetry$1:void run()"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void publishAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$publishAll__640:void run()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl$lambda_publishConsumer_1__160:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$doInListener$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.metadata.MetadataServiceExporter export()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void exportMetadataService()"
        ]
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache:java.lang.Object lambda$get$3(org.apache.dubbo.config.ReferenceConfigBase,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ReferenceConfigCache$lambda_get_3__191:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_exportServices_4__29:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void lambda$addIfAbsent$14(org.apache.dubbo.config.AbstractConfig,org.apache.dubbo.config.AbstractConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager$lambda_addIfAbsent_14__116:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.AbstractConfig lambda$addConfig$5(org.apache.dubbo.config.AbstractConfig,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager$lambda_addConfig_5__107:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$lambda_addIfAbsent_15__115:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener:void onApplicationContextEvent(org.springframework.context.event.ApplicationContextEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void reRefer(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reRefer(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker(java.util.concurrent.CountDownLatch)"
        ]
    },
    "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker(java.util.concurrent.CountDownLatch)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker(java.util.concurrent.CountDownLatch)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker(java.util.concurrent.CountDownLatch)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void doExportUrls()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExport()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void doOverrideIfNecessary()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void notify(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener:void lambda$notifyOverrides$0(org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ServiceConfigurationListener:void notifyOverrides()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$lambda_doLocalExport_2__268:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)"
        ]
    },
    "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ZoneAwareFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invokeWithContext(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$ClusterFilterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InvocationInterceptorInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.AppResponse lambda$doInvoke$0(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.tri.ServerStream$StreamTransportObserver:void onMetadata(org.apache.dubbo.rpc.protocol.tri.Metadata,boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void invoke()",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ConsumerSignFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ProviderAuthFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void setApplication(org.apache.dubbo.config.ApplicationConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(org.apache.dubbo.config.ApplicationConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setApplication(org.apache.dubbo.config.ApplicationConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void setMonitor(org.apache.dubbo.config.MonitorConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap monitor(org.apache.dubbo.config.MonitorConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setMonitor(org.apache.dubbo.config.MonitorConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void setModule(org.apache.dubbo.config.ModuleConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap module(org.apache.dubbo.config.ModuleConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setModule(org.apache.dubbo.config.ModuleConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void setMetrics(org.apache.dubbo.config.MetricsConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap metrics(org.apache.dubbo.config.MetricsConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setMetrics(org.apache.dubbo.config.MetricsConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void setSsl(org.apache.dubbo.config.SslConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap ssl(org.apache.dubbo.config.SslConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addConfig(org.apache.dubbo.config.AbstractConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkDefaultAndValidateConfigs(java.lang.Class)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void loadConfigs(java.lang.Class)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$loadConfigs$1(java.lang.Class,java.lang.String)",
            "org.apache.dubbo.config.AbstractConfig:void addIntoConfigManager()",
            "org.apache.dubbo.config.context.ConfigManager:void addConfigCenter(org.apache.dubbo.config.ConfigCenterConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void addMetadataReport(org.apache.dubbo.config.MetadataReportConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void addProvider(org.apache.dubbo.config.ProviderConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void addConsumer(org.apache.dubbo.config.ConsumerConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void addProtocol(org.apache.dubbo.config.ProtocolConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void addRegistry(org.apache.dubbo.config.RegistryConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void addService(org.apache.dubbo.config.ServiceConfigBase)",
            "org.apache.dubbo.config.context.ConfigManager:void addReference(org.apache.dubbo.config.ReferenceConfigBase)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void refreshAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startConfigCenter()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:void destroy()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getDefaultConfigCenter()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getDefaultMetadataConfigs()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getDefaultProvider()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfigBase:void preProcessRefresh()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getDefaultConsumer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfigBase:void preProcessRefresh()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.List getDefaultConfigs(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean shouldAddDefaultConfig(java.lang.Class)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.List getDefaultProtocols()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.List getDefaultRegistries()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void useRegistryAsConfigCenterIfNecessary()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void useRegistryAsMetadataCenterIfNecessary()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void convertRegistryIdsToRegistries()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Map getConfigsMap(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection lambda$getConfigs$8(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager$lambda_getConfigs_8__110:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection lambda$getConfigs$7(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager$lambda_getConfigs_7__109:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getConfigCenters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startConfigCenter()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void useRegistryAsConfigCenterIfNecessary()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ConfigCenterConfig getConfigCenter()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setConfigCenter(org.apache.dubbo.config.ConfigCenterConfig)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getDefaultConfigCenter()",
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$1()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getMetadataConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startMetadataCenter()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void useRegistryAsMetadataCenterIfNecessary()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MetadataReportConfig getMetadataReportConfig()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setMetadataReportConfig(org.apache.dubbo.config.MetadataReportConfig)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getDefaultMetadataConfigs()",
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$1()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getProviders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$1()",
            "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:java.lang.Integer getExportReferThreadNum()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getConsumers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$1()",
            "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:java.lang.Integer getExportReferThreadNum()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getProtocols()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()",
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$1()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getRegistries()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$1()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getServices()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean hasExportedServices()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void exportServices()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getReferences()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void referServices()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getConfig(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$loadConfigs$1(java.lang.Class,java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getConfigCenter(java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getProvider(java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getConsumer(java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getProtocol(java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getRegistry(java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.ServiceConfigBase getService(java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.ReferenceConfigBase getReference(java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getApplication()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkConfigState()",
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.ApplicationConfig getApplicationConfig()",
            "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.ApplicationConfig getApplicationOrElseThrow()",
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$1()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getMonitor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MonitorConfig getMonitor()",
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$1()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getModule()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ModuleConfig getModule()",
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$1()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getMetrics()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MetricsConfig getMetrics()",
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$1()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getSsl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.SslConfig getSslConfig()",
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$1()",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.netty.handler.ssl.SslContext buildServerSslContext(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.netty.handler.ssl.SslContext buildClientSslContext(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.api.PortUnificationServer:io.netty.handler.ssl.SslContext buildServerSslContext(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.netty4.SslContexts:org.apache.dubbo.config.SslConfig getSslConfig()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean exportURL(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doRegister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean subscribeURL(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean unexportURL(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doUnregister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean unsubscribeURL(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:java.lang.String getRule(java.lang.String,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository:java.lang.String getRule(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:java.lang.String getConfig(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:java.lang.String getProperties(java.lang.String,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getConfig$2(java.lang.String,java.lang.String,long,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_getConfig_2__213:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void doUnregister(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void unregister(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void doRegister(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void register(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:boolean publishConfig(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:boolean publishConfig(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:boolean publishConfig(java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:boolean publishConfig(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:boolean doPublishConfig(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration:java.lang.Boolean lambda$publishConfig$0(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:boolean doRemoveConfig(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration:boolean doRemoveConfig(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_processWatchEvents_5__341:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_doInListener_1__339:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl:void process(org.apache.zookeeper.WatchedEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.BaseOnline:boolean online(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.BaseOnline:boolean doExecute(java.lang.String)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Online:void doExport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.BaseOnline:boolean online(java.lang.String)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.OnlineApp:void doExport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.BaseOnline:boolean online(java.lang.String)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.OnlineInterface:void doExport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.BaseOnline:boolean online(java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void destroyMetadataServiceProxy(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroy()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyServiceDiscoveryInvoker()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyInterfaceInvoker()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InterceptorInvokerNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void destroyMetadataServiceProxy(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroy()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyServiceDiscoveryInvoker()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyInterfaceInvoker()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InterceptorInvokerNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void destroy()",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void destroy()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.retry.FailedUnsubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void unsubscribe(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.BaseOffline:boolean offline(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.BaseOffline:boolean doExecute(java.lang.String)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Offline:void doUnexport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.BaseOffline:boolean offline(java.lang.String)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.OfflineApp:void doUnexport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.BaseOffline:boolean offline(java.lang.String)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.OfflineInterface:void doUnexport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.BaseOffline:boolean offline(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$RegistryChildListenerImpl:void childChanged(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl:void process(org.apache.zookeeper.WatchedEvent)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryChangeWatcher:void process(org.apache.zookeeper.WatchedEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry$RegistryChildListenerImpl:void onEvent(com.alibaba.nacos.api.naming.listener.Event)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void execute(org.apache.dubbo.registry.nacos.NacosRegistry$NamingServiceCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void doRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void doUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Set)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set filterServiceNames(org.apache.dubbo.registry.nacos.NacosServiceName)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getAllServiceNames()"
        ]
    },
    "org.apache.dubbo.registry.RegistryFactoryWrapper:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.RegistryFactoryWrapper:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void initServiceRegistry(org.apache.dubbo.common.URL,java.util.Map)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void initReferenceRegistry(org.apache.dubbo.common.URL,java.util.Map)",
            "org.apache.dubbo.qos.command.impl.BaseOffline:void doUnexport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)",
            "org.apache.dubbo.qos.command.impl.BaseOnline:void doExport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void doReExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService referProxy(java.lang.String,org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void initServiceRegistry(org.apache.dubbo.common.URL,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL,boolean,boolean)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void initReferenceRegistry(org.apache.dubbo.common.URL,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL,boolean,boolean)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void reset(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void reset()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$destroy__11:void callback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.lang.ShutdownHookCallbacks$callback__201:void execute()"
        ]
    },
    "org.apache.dubbo.registry.client.SelfHostMetaServiceDiscovery:void initialize(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$createServiceDiscovery$0(org.apache.dubbo.registry.client.ServiceDiscovery,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.xds.XdsServiceDiscoveryFactory:org.apache.dubbo.registry.client.ServiceDiscovery createDiscovery(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscoveryFactory:org.apache.dubbo.registry.client.ServiceDiscovery lambda$getServiceDiscovery$0(org.apache.dubbo.common.URL,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$lambda_doInvoke_0__537:void run()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.AsyncRpcResult doInvokeAndReturn(org.apache.dubbo.rpc.RpcInvocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void invoke(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker$lambda_doInvoke_0__173:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.TransportObserver:void tryOnMetadata(org.apache.dubbo.rpc.protocol.tri.Metadata,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver$invoke__571:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unexportServices$5(org.apache.dubbo.config.ServiceConfigBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_unexportServices_5__30:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.metadata.MetadataServiceExporter unexport()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper$lambda_unexport_0__290:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyProtocols()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyProtocols()",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyProtocols()",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyProtocols()",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyProtocols()",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.rest.RestProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyProtocols()",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyProtocols()",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object encodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.filter.support.ZoneAwareFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invokeWithContext(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.AppResponse lambda$doInvoke$0(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.tri.ServerStream$StreamTransportObserver:void onMetadata(org.apache.dubbo.rpc.protocol.tri.Metadata,boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void invoke()",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ConsumerSignFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.auth.filter.ProviderAuthFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()"
        ]
    },
    "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:void destroyAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyExecutorRepository()"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReportFactory:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractServer:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:void lambda$destroyAll$3(java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository$lambda_destroyAll_3__607:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractServer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$ProxyProtocolServer:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void close(int)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void close(int)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void notifyTimeout(org.apache.dubbo.remoting.exchange.support.DefaultFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void lambda$run$0(org.apache.dubbo.remoting.exchange.support.DefaultFuture)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void received(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void closeChannel(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unreferServices$9(java.util.concurrent.CompletableFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_unreferServices_9__33:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unexportServices$6(java.util.concurrent.CompletableFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_unexportServices_6__31:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.FutureAdapter:boolean cancel(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unreferServices$9(java.util.concurrent.CompletableFuture)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unexportServices$6(java.util.concurrent.CompletableFuture)",
            "org.apache.dubbo.rpc.protocol.dubbo.FutureAdapter:boolean cancel(boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void cancel()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void notifyTimeout(org.apache.dubbo.remoting.exchange.support.DefaultFuture2)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void lambda$run$0(org.apache.dubbo.remoting.exchange.support.DefaultFuture2)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture2:void received(org.apache.dubbo.remoting.api.Connection,org.apache.dubbo.remoting.exchange.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.tri.TripleClientHandler:void writeRequest(io.netty.channel.ChannelHandlerContext,org.apache.dubbo.remoting.exchange.Request,io.netty.channel.ChannelPromise)",
            "org.apache.dubbo.rpc.protocol.tri.TripleInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.tri.TripleInvoker:void lambda$doInvoke$1(org.apache.dubbo.remoting.exchange.Request,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void onError(org.apache.dubbo.rpc.protocol.tri.GrpcStatus)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void lambda$doOnComplete$0()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture2:void cancel()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractServer:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$SaveProperties:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void doSaveProperties(long)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveProperties(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.lang.String,boolean,boolean)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void lambda$storeProviderMetadata$0(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$lambda_storeProviderMetadata_0__641:void run()"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void lambda$storeConsumerMetadata$1(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$lambda_storeConsumerMetadata_1__642:void run()"
        ]
    },
    "org.apache.dubbo.common.timer.HashedWheelTimer$Worker:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataUtils:void publishServiceDefinition(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$MetadataReportRetry$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$publishAll__640:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void exportMetadataService()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()"
        ]
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache$lambda_get_3__191:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$lambda_addIfAbsent_14__116:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$lambda_addConfig_5__107:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcServiceContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.util.NacosNamingServiceUtils:void setProperties(org.apache.dubbo.common.URL,java.util.Properties)",
            "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration:void setProperties(org.apache.dubbo.common.URL,java.util.Properties)",
            "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport:void setProperties(org.apache.dubbo.common.URL,java.util.Properties)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void reRefer(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker(java.util.concurrent.CountDownLatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:boolean migrateToForceInterfaceInvoker(org.apache.dubbo.registry.client.migration.model.MigrationRule)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void migrateToApplicationFirstInvoker(org.apache.dubbo.registry.client.migration.model.MigrationRule)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker(java.util.concurrent.CountDownLatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:boolean migrateToForceApplicationInvoker(org.apache.dubbo.registry.client.migration.model.MigrationRule)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void migrateToApplicationFirstInvoker(org.apache.dubbo.registry.client.migration.model.MigrationRule)",
            "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:boolean migrateToForceInterfaceInvoker(org.apache.dubbo.registry.client.migration.model.MigrationRule)",
            "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:void migrateToApplicationFirstInvoker(org.apache.dubbo.registry.client.migration.model.MigrationRule)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void doExport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void export()",
            "org.apache.dubbo.config.ServiceConfig$doExport__3:void run()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void addListenerAndNotify(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void lambda$notifyAddressChanged$4(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener:void lambda$notifyOverrides$0(org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener$lambda_notifyOverrides_0__289:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ServiceConfigurationListener:void notifyOverrides()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:void process(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery:void doInitialize(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkUtils:org.apache.curator.framework.CuratorFramework buildCuratorFramework(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkUtils:org.apache.curator.RetryPolicy buildRetryPolicy(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.String getConfig(java.lang.String,java.lang.String,long)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.String getProperties(java.lang.String,java.lang.String,long)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object getInternalProperty(java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.util.SortedSet getConfigKeys(java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService referProxy(java.lang.String,org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(org.apache.dubbo.config.ApplicationConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void setApplication(org.apache.dubbo.config.ApplicationConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter export()",
            "org.apache.dubbo.config.spring.reference.ReferenceCreator:void configureApplicationConfig(org.apache.dubbo.config.ReferenceConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void completeCompoundConfigs(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap monitor(org.apache.dubbo.config.MonitorConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void setMonitor(org.apache.dubbo.config.MonitorConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.spring.reference.ReferenceCreator:void configureMonitorConfig(org.apache.dubbo.config.ReferenceConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void completeCompoundConfigs(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setMonitor(java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap module(org.apache.dubbo.config.ModuleConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void setModule(org.apache.dubbo.config.ModuleConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.spring.reference.ReferenceCreator:void configureModuleConfig(org.apache.dubbo.config.ReferenceConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void completeCompoundConfigs(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap metrics(org.apache.dubbo.config.MetricsConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void setMetrics(org.apache.dubbo.config.MetricsConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap ssl(org.apache.dubbo.config.SslConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.AbstractConfig:void addIntoConfigManager()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.context.ConfigManager:void addConfigCenter(org.apache.dubbo.config.ConfigCenterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startConfigCenter()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setConfigCenter(org.apache.dubbo.config.ConfigCenterConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$addConfigCenter__20:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$addConfigCenter__96:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addMetadataReport(org.apache.dubbo.config.MetadataReportConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap metadataReport(org.apache.dubbo.config.MetadataReportConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setMetadataReportConfig(org.apache.dubbo.config.MetadataReportConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$addMetadataReport__24:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$addMetadataReport__97:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addProvider(org.apache.dubbo.config.ProviderConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfigBase:void setProvider(org.apache.dubbo.config.ProviderConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$addProvider__16:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$addProvider__98:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addConsumer(org.apache.dubbo.config.ConsumerConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$addConsumer__17:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$addConsumer__99:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addProtocol(org.apache.dubbo.config.ProtocolConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager$addProtocol__100:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addRegistry(org.apache.dubbo.config.RegistryConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(org.apache.dubbo.config.RegistryConfig)",
            "org.apache.dubbo.config.context.ConfigManager$addRegistry__101:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addService(org.apache.dubbo.config.ServiceConfigBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(org.apache.dubbo.config.ServiceConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$addService__14:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$addService__102:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addReference(org.apache.dubbo.config.ReferenceConfigBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(org.apache.dubbo.config.ReferenceConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$addReference__15:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$addReference__103:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void clearConfigs()",
            "org.apache.dubbo.rpc.model.ApplicationModel:void reset()",
            "org.apache.dubbo.common.extension.ExtensionLoader:void lambda$destroyAll$1(java.lang.Class,java.lang.Object)",
            "org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener$destroy__326:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfigBase:void preProcessRefresh()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractConfig:void refresh()"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfigBase:void preProcessRefresh()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractConfig:void refresh()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean shouldAddDefaultConfig(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkDefaultAndValidateConfigs(java.lang.Class)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.List getDefaultProtocols()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.ProtocolConfig generateMetadataProtocol()",
            "org.apache.dubbo.config.ServiceConfigBase:void convertProtocolIdsToProtocols()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void useRegistryAsMetadataCenterIfNecessary()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startMetadataCenter()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void convertRegistryIdsToRegistries()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractInterfaceConfig:void checkRegistry()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$lambda_getConfigs_8__110:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcServiceContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$lambda_getConfigs_7__109:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcServiceContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ConfigCenterConfig getConfigCenter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfigBase:void completeCompoundConfigs()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void setConfigCenter(org.apache.dubbo.config.ConfigCenterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.ServiceConfigBase:void completeCompoundConfigs()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$1()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager$lambda_refreshAll_1__104:void run()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startMetadataCenter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initialize()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MetadataReportConfig getMetadataReportConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void setMetadataReportConfig(org.apache.dubbo.config.MetadataReportConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:java.lang.Integer getExportReferThreadNum()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:java.util.concurrent.ScheduledExecutorService getExportReferExecutor()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean hasExportedServices()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void referServices()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getConfigCenter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getProvider(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfigBase:void convertProviderIdToProvider()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getConsumer(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getProtocol(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfigBase:void convertProtocolIdsToProtocols()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getRegistry(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractInterfaceConfig:void lambda$convertRegistryIdsToRegistries$1(java.util.List,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.ServiceConfigBase getService(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.ReferenceConfigBase getReference(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkConfigState()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()"
        ]
    },
    "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.ApplicationConfig getApplicationConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter export()",
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.ProtocolConfig generateMetadataProtocol()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.ApplicationConfig getApplicationOrElseThrow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ApplicationConfig getApplication()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ApplicationConfig getApplication()",
            "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.config.ApplicationConfig getApplicationConfig()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MonitorConfig getMonitor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:org.apache.dubbo.common.URL loadMonitor(org.apache.dubbo.config.AbstractInterfaceConfig,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void completeCompoundConfigs(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ModuleConfig getModule()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void completeCompoundConfigs(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MetricsConfig getMetrics()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.SslConfig getSslConfig()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.netty.handler.ssl.SslContext buildServerSslContext(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.ServerBuilder buildServerBuilder(org.apache.dubbo.common.URL,io.grpc.netty.NettyServerBuilder)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.netty.handler.ssl.SslContext buildClientSslContext(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.ManagedChannel buildManagedChannel(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.api.PortUnificationServer:io.netty.handler.ssl.SslContext buildServerSslContext(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.api.PortUnificationServer$1:void initChannel(io.netty.channel.socket.SocketChannel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.SslContexts:org.apache.dubbo.config.SslConfig getSslConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.SslContexts:io.netty.handler.ssl.SslContext buildServerSslContext(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.netty4.SslContexts:io.netty.handler.ssl.SslContext buildClientSslContext(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doRegister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void register(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doUnregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void unregister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository:java.lang.String getRule(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_getConfig_2__213:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)"
        ]
    },
    "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void unregister(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unregisterServiceInstance$12(org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.nacos.NacosServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.multiple.MultipleServiceDiscovery:void lambda$unregister$2(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)"
        ]
    },
    "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void register(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$doRegisterServiceInstance$11(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void update(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.nacos.NacosServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.multiple.MultipleServiceDiscovery:void lambda$register$0(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.kubernetes.KubernetesServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration:java.lang.Boolean lambda$publishConfig$0(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration$lambda_publishConfig_0__360:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration:boolean doRemoveConfig(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Boolean lambda$removeConfig$1(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.BaseOnline:boolean doExecute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.BaseOnline:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ReferenceConfigCache:void destroy(java.lang.String,java.lang.Class)",
            "org.apache.dubbo.config.utils.ReferenceConfigCache:void lambda$destroyAll$6(java.lang.String,org.apache.dubbo.config.ReferenceConfigBase)",
            "org.apache.dubbo.config.utils.ReferenceConfigCache:void lambda$destroy$5(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()"
        ]
    },
    "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void destroyMetadataServiceProxy(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void discordAddresses()"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void refreshInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataUtils:void destroyMetadataServiceProxy(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.SelfHostMetaServiceDiscovery:void lambda$notifyListener$3(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void destroyMetadataServiceProxy(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroy()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyServiceDiscoveryInvoker()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyInterfaceInvoker()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyServiceDiscoveryInvoker()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:boolean migrateToForceInterfaceInvoker(org.apache.dubbo.registry.client.migration.model.MigrationRule)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:boolean migrateToForceApplicationInvoker(org.apache.dubbo.registry.client.migration.model.MigrationRule)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyInterfaceInvoker()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:boolean migrateToForceInterfaceInvoker(org.apache.dubbo.registry.client.migration.model.MigrationRule)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:boolean migrateToForceApplicationInvoker(org.apache.dubbo.registry.client.migration.model.MigrationRule)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void discordAddresses()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void destroyMetadataServiceProxy(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroy()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyServiceDiscoveryInvoker()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyInterfaceInvoker()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void destroyMetadataServiceProxy(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroy()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyServiceDiscoveryInvoker()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyInterfaceInvoker()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InterceptorInvokerNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InterceptorInvokerNode:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void destroyMetadataServiceProxy(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroy()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyServiceDiscoveryInvoker()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyInterfaceInvoker()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InterceptorInvokerNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void destroyMetadataServiceProxy(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroy()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyServiceDiscoveryInvoker()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyInterfaceInvoker()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void destroyMetadataServiceProxy(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void destroyMetadataServiceProxy(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void destroyMetadataServiceProxy(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object decodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,java.lang.Class[],int,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void destroyMetadataServiceProxy(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.ListenerRegistryWrapper:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.integration.DynamicDirectory:void unSubscribe(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void unSubscribe(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.retry.FailedUnsubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.retry.FailedUnsubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void unsubscribe(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.qos.command.impl.BaseOffline:boolean doExecute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.BaseOffline:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.List lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:java.util.List lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void doRegister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedRegisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void reExportRegister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void doUnregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedUnregisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void reExportUnregister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$scheduleServiceNamesLookup$6(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set filterServiceNames(org.apache.dubbo.registry.nacos.NacosServiceName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNames0(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getAllServiceNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNamesForOps(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$scheduleServiceNamesLookup$6(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void doReExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void lambda$reExport$3(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void refreshInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService referProxy(java.lang.String,org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService lambda$getMetadataServiceProxy$1(org.apache.dubbo.registry.client.ServiceInstance,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService referProxy(java.lang.String,org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService referProxy(java.lang.String,org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.support.AbstractMonitorFactory:org.apache.dubbo.monitor.Monitor lambda$getMonitor$0(org.apache.dubbo.common.URL,java.lang.String)"
        ]
    },
    "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService referProxy(java.lang.String,org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void reset()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.lang.ShutdownHookCallbacks$callback__201:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.function.ThrowableAction:void execute(org.apache.dubbo.common.function.ThrowableAction)"
        ]
    },
    "org.apache.dubbo.registry.client.AbstractServiceDiscoveryFactory:org.apache.dubbo.registry.client.ServiceDiscovery lambda$getServiceDiscovery$0(org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscoveryFactory$lambda_getServiceDiscovery_0__329:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$lambda_doInvoke_0__537:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void invoke(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void disconnected(org.apache.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsConfigCenter(org.apache.dubbo.config.RegistryConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsMetadataCenter(org.apache.dubbo.config.RegistryConfig)"
        ]
    },
    "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture$lambda_submit_1__600:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture$lambda_schedule_0__599:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_unexportServices_5__30:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.metadata.MetadataServiceExporter unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void unexportMetadataService()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequest(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Request)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyExecutorRepository()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReportFactory:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyMetadataReports()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ServerDelegate:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository$lambda_destroyAll_3__607:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$ProxyProtocolServer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.rest.RestProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol$close__559:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.rest.RestProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol$close__559:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$ProxyProtocolServer:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer:void close()",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close()"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ServerDelegate:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$ProxyProtocolServer:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()"
        ]
    },
    "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)"
        ]
    },
    "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractClient:void reconnect()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void close()"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractServer:void close()"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractServer:void close()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void lambda$run$0(org.apache.dubbo.remoting.exchange.support.DefaultFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask$lambda_run_0__547:void run()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_unreferServices_9__33:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_unexportServices_6__31:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void lambda$run$0(org.apache.dubbo.remoting.exchange.support.DefaultFuture2)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask$lambda_run_0__573:void run()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.TripleClientHandler:void writeRequest(io.netty.channel.ChannelHandlerContext,org.apache.dubbo.remoting.exchange.Request,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.tri.TripleClientHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.TripleInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.AsyncRpcResult doInvokeAndReturn(org.apache.dubbo.rpc.RpcInvocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.TripleInvoker:void lambda$doInvoke$1(org.apache.dubbo.remoting.exchange.Request,io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void onError(org.apache.dubbo.rpc.protocol.tri.GrpcStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream$UnaryTransportObserver:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void lambda$doOnComplete$0()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void lambda$doOnComplete$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver$lambda_doOnComplete_0__568:void run()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$lambda_storeProviderMetadata_0__641:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$lambda_storeConsumerMetadata_1__642:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.nacos.util.NacosNamingServiceUtils:void setProperties(org.apache.dubbo.common.URL,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.util.NacosNamingServiceUtils:java.util.Properties buildNacosProperties(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration:void setProperties(org.apache.dubbo.common.URL,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration:java.util.Properties buildNacosProperties(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport:void setProperties(org.apache.dubbo.common.URL,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport:java.util.Properties buildNacosProperties(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:boolean migrateToForceInterfaceInvoker(org.apache.dubbo.registry.client.migration.model.MigrationRule)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:boolean refreshInvoker(org.apache.dubbo.registry.client.migration.model.MigrationStep,java.lang.Float,org.apache.dubbo.registry.client.migration.model.MigrationRule)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void migrateToApplicationFirstInvoker(org.apache.dubbo.registry.client.migration.model.MigrationRule)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:boolean refreshInvoker(org.apache.dubbo.registry.client.migration.model.MigrationStep,java.lang.Float,org.apache.dubbo.registry.client.migration.model.MigrationRule)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:boolean migrateToForceApplicationInvoker(org.apache.dubbo.registry.client.migration.model.MigrationRule)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:boolean refreshInvoker(org.apache.dubbo.registry.client.migration.model.MigrationStep,java.lang.Float,org.apache.dubbo.registry.client.migration.model.MigrationRule)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:boolean migrateToForceInterfaceInvoker(org.apache.dubbo.registry.client.migration.model.MigrationRule)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:boolean refreshInvoker(org.apache.dubbo.registry.client.migration.model.MigrationStep,java.lang.Float,org.apache.dubbo.registry.client.migration.model.MigrationRule)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:void migrateToApplicationFirstInvoker(org.apache.dubbo.registry.client.migration.model.MigrationRule)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:boolean refreshInvoker(org.apache.dubbo.registry.client.migration.model.MigrationStep,java.lang.Float,org.apache.dubbo.registry.client.migration.model.MigrationRule)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig$doExport__3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener$lambda_notifyOverrides_0__289:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:void process(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$fireConfigChangeEvent$7(java.lang.String,java.io.File,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigChangeType,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.zookeeper.CacheListener:void lambda$dataChanged$1(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration$ApolloListener:void lambda$onChange$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration$NacosConfigListener:void lambda$innerReceive$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport$NacosConfigListener:void lambda$innerReceive$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery:void doInitialize(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkUtils:org.apache.curator.framework.CuratorFramework buildCuratorFramework(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery:void doInitialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkUtils:org.apache.curator.RetryPolicy buildRetryPolicy(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkUtils:org.apache.curator.framework.CuratorFramework buildCuratorFramework(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.String getConfig(java.lang.String,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:java.lang.String getRule(java.lang.String,java.lang.String,long)",
            "org.apache.dubbo.rpc.cluster.router.mesh.route.MeshRuleManager:void subscribeAppRule(java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:java.lang.String getConfig(java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:java.lang.String getProperties(java.lang.String,java.lang.String,long)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getConfig$2(java.lang.String,java.lang.String,long,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.String getProperties(java.lang.String,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:java.lang.String getProperties(java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getProperties$3(java.lang.String,java.lang.String,long,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object getInternalProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.Configuration:java.lang.Object getProperty(java.lang.String,java.lang.Object)",
            "org.apache.dubbo.common.config.PrefixedConfiguration:java.lang.Object getInternalProperty(java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getInternalProperty$4(java.lang.String,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.util.SortedSet getConfigKeys(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getConfigKeys$5(java.lang.String,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder:void build(org.apache.dubbo.config.AbstractReferenceConfig)",
            "org.apache.dubbo.config.bootstrap.builders.AbstractServiceBuilder:void build(org.apache.dubbo.config.AbstractServiceConfig)"
        ]
    },
    "org.apache.dubbo.config.spring.reference.ReferenceCreator:void configureApplicationConfig(org.apache.dubbo.config.ReferenceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.reference.ReferenceCreator:void configureBean(org.apache.dubbo.config.ReferenceConfig)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void completeCompoundConfigs(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void completeCompoundConfigs()",
            "org.apache.dubbo.config.ServiceConfigBase:void completeCompoundConfigs()"
        ]
    },
    "org.apache.dubbo.config.spring.reference.ReferenceCreator:void configureMonitorConfig(org.apache.dubbo.config.ReferenceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.reference.ReferenceCreator:void configureBean(org.apache.dubbo.config.ReferenceConfig)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void setMonitor(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.reference.ReferenceCreator:void configureModuleConfig(org.apache.dubbo.config.ReferenceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.reference.ReferenceCreator:void configureBean(org.apache.dubbo.config.ReferenceConfig)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$addConfigCenter__20:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$addConfigCenter__96:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap metadataReport(org.apache.dubbo.config.MetadataReportConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$addMetadataReport__24:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$addMetadataReport__97:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfigBase:void setProvider(org.apache.dubbo.config.ProviderConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.ServiceBuilder:org.apache.dubbo.config.ServiceConfig build()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$addProvider__16:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$addProvider__98:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$addConsumer__17:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$addConsumer__99:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$addProtocol__100:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(org.apache.dubbo.config.RegistryConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$registry__13:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$addRegistry__101:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(org.apache.dubbo.config.ServiceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void export()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.spring.ServiceBean:void afterPropertiesSet()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$addService__14:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$addService__102:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(org.apache.dubbo.config.ReferenceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.spring.reference.ReferenceBeanManager:void initReferenceBean(org.apache.dubbo.config.spring.ReferenceBean)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$addReference__15:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$addReference__103:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void clearConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void clear()"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:void reset()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void reset(boolean)"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:void lambda$destroyAll$1(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.extension.ExtensionLoader$lambda_destroyAll_1__64:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener$destroy__326:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.ProtocolConfig generateMetadataProtocol()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter export()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfigBase:void convertProtocolIdsToProtocols()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfigBase:void checkProtocol()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void checkRegistry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfigBase:void completeCompoundConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$lambda_refreshAll_1__104:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:java.util.concurrent.ScheduledExecutorService getExportReferExecutor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void exportServices()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$referServices$8(org.apache.dubbo.config.ReferenceConfigBase)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfigBase:void convertProviderIdToProvider()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfigBase:void preProcessRefresh()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void lambda$convertRegistryIdsToRegistries$1(java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractInterfaceConfig$lambda_convertRegistryIdsToRegistries_1__59:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ApplicationConfig getApplication()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isOnlyRegisterProvider()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:java.lang.String getMetadataType()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startMetadataCenter()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.common.config.configcenter.DynamicConfiguration prepareEnvironment(org.apache.dubbo.config.ConfigCenterConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void registerServiceInstance()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ApplicationConfig getApplication()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:java.util.List loadRegistries(org.apache.dubbo.config.AbstractInterfaceConfig,boolean)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:org.apache.dubbo.common.URL loadMonitor(org.apache.dubbo.config.AbstractInterfaceConfig,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void completeCompoundConfigs(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.config.ApplicationConfig getApplicationConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.metadata.ServiceInstanceHostPortCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.metadata.StandardMetadataServiceURLBuilder:org.apache.dubbo.common.URL generateUrlWithoutMetadata(java.lang.String,java.lang.String,java.lang.Integer)",
            "org.apache.dubbo.rpc.model.ApplicationModel:java.lang.String getName()",
            "org.apache.dubbo.qos.command.impl.Live:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])",
            "org.apache.dubbo.qos.command.impl.Ready:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])",
            "org.apache.dubbo.qos.command.impl.Startup:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])",
            "org.apache.dubbo.metadata.report.MetadataReportInstance:void init(org.apache.dubbo.config.MetadataReportConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:org.apache.dubbo.common.URL loadMonitor(org.apache.dubbo.config.AbstractInterfaceConfig,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.ServerBuilder buildServerBuilder(org.apache.dubbo.common.URL,io.grpc.netty.NettyServerBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:org.apache.dubbo.rpc.ProtocolServer lambda$doExport$0(org.apache.dubbo.common.URL,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.ManagedChannel buildManagedChannel(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:io.grpc.ManagedChannel initChannel(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.api.PortUnificationServer$1:void initChannel(io.netty.channel.socket.SocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.api.PortUnificationServer$1:void initChannel(io.netty.channel.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.SslContexts:io.netty.handler.ssl.SslContext buildServerSslContext(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.SslHandlerInitializer$SslServerTlsHandler:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.transport.netty4.NettyServerHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.SslContexts:io.netty.handler.ssl.SslContext buildClientSslContext(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.SslHandlerInitializer$SslClientTlsHandler:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.transport.netty4.NettyClientHandler)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void register(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void register(org.apache.dubbo.registry.Registry,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.BaseOnline:void doExport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void unregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.BaseOffline:void doUnexport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unregisterServiceInstance$12(org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_unregisterServiceInstance_12__36:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void update(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void update(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleServiceDiscovery:void lambda$unregister$2(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleServiceDiscovery$lambda_unregister_2__435:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$doRegisterServiceInstance$11(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_doRegisterServiceInstance_11__35:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void update(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void lambda$refreshMetadataAndInstance$1(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.multiple.MultipleServiceDiscovery:void lambda$update$1(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)"
        ]
    },
    "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void update(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleServiceDiscovery:void lambda$register$0(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleServiceDiscovery$lambda_register_0__433:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.kubernetes.KubernetesServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void update(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration$lambda_publishConfig_0__360:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcServiceContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Boolean lambda$removeConfig$1(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration$lambda_removeConfig_1__362:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.qos.command.impl.BaseOnline:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)"
        ]
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache:void destroy(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ReferenceConfigCache:void destroy(org.apache.dubbo.config.ReferenceConfigBase)"
        ]
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache:void lambda$destroyAll$6(java.lang.String,org.apache.dubbo.config.ReferenceConfigBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ReferenceConfigCache$lambda_destroyAll_6__194:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache:void lambda$destroy$5(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ReferenceConfigCache$lambda_destroy_5__193:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void refreshInvoker(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.DynamicDirectory:void discordAddresses()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.client.SelfHostMetaServiceDiscovery:void lambda$notifyListener$3(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.SelfHostMetaServiceDiscovery$lambda_notifyListener_3__367:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshOverrideAndInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object decodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,java.lang.Class[],int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.BaseOffline:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)"
        ]
    },
    "org.apache.dubbo.registry.retry.FailedRegisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void register(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void register(org.apache.dubbo.registry.Registry,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.BaseOnline:void doExport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void register(com.alibaba.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void reExportRegister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void doReExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.retry.FailedUnregisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void unregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.BaseOffline:void doUnexport(org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void unregister(com.alibaba.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void reExportUnregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void doReExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$scheduleServiceNamesLookup$6(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_scheduleServiceNamesLookup_6__409:void run()"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNames0(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNames(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNamesForOps(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNames(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void lambda$reExport$3(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$lambda_reExport_3__269:void run()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService lambda$getMetadataServiceProxy$1(org.apache.dubbo.registry.client.ServiceInstance,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.MetadataUtils$lambda_getMetadataServiceProxy_1__52:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.monitor.support.AbstractMonitorFactory:org.apache.dubbo.monitor.Monitor lambda$getMonitor$0(org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.support.AbstractMonitorFactory$lambda_getMonitor_0__624:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.registry.client.AbstractServiceDiscoveryFactory$lambda_getServiceDiscovery_0__329:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsConfigCenter(org.apache.dubbo.config.RegistryConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$isUsedRegistryAsConfigCenter__18:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsMetadataCenter(org.apache.dubbo.config.RegistryConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$isUsedRegistryAsMetadataCenter__22:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture$lambda_submit_1__600:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcServiceContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture$lambda_schedule_0__599:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcServiceContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void unexportMetadataService()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequest(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyMetadataReports()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol$close__559:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$ProxyProtocolServer:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer:void close()",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close()"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void run(org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close(int)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void closeReferenceCountExchangeClient(org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close(int)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)"
        ]
    },
    "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void close(int)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void close(int)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask$lambda_run_0__547:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask$lambda_run_0__573:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.tri.TripleClientHandler:void write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver$lambda_doOnComplete_0__568:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.nacos.util.NacosNamingServiceUtils:java.util.Properties buildNacosProperties(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.util.NacosNamingServiceUtils:org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper createNamingService(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration:java.util.Properties buildNacosProperties(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport:java.util.Properties buildNacosProperties(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport:org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper buildConfigService(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:boolean refreshInvoker(org.apache.dubbo.registry.client.migration.model.MigrationStep,java.lang.Float,org.apache.dubbo.registry.client.migration.model.MigrationRule)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:void doMigrate(org.apache.dubbo.registry.client.migration.model.MigrationRule)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:java.lang.String getProperties(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getProperties$3(java.lang.String,java.lang.String,long,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_getProperties_3__214:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.config.Configuration:java.lang.Object getProperty(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.PrefixedConfiguration:java.lang.Object getInternalProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.Configuration:java.lang.Object getProperty(java.lang.String,java.lang.Object)",
            "org.apache.dubbo.common.config.PrefixedConfiguration:java.lang.Object getInternalProperty(java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getInternalProperty$4(java.lang.String,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_getInternalProperty_4__215:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getConfigKeys$5(java.lang.String,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_getConfigKeys_5__216:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder:void build(org.apache.dubbo.config.AbstractReferenceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder:void build(org.apache.dubbo.config.AbstractMethodConfig)",
            "org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder:void build(org.apache.dubbo.config.AbstractConfig)",
            "org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder:org.apache.dubbo.config.ConsumerConfig build()",
            "org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder:org.apache.dubbo.config.ReferenceConfig build()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractServiceBuilder:void build(org.apache.dubbo.config.AbstractServiceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractServiceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.bootstrap.builders.AbstractServiceBuilder:void build(org.apache.dubbo.config.AbstractMethodConfig)",
            "org.apache.dubbo.config.bootstrap.builders.AbstractServiceBuilder:void build(org.apache.dubbo.config.AbstractConfig)",
            "org.apache.dubbo.config.bootstrap.builders.ProviderBuilder:org.apache.dubbo.config.ProviderConfig build()",
            "org.apache.dubbo.config.bootstrap.builders.ServiceBuilder:org.apache.dubbo.config.ServiceConfig build()"
        ]
    },
    "org.apache.dubbo.config.spring.reference.ReferenceCreator:void configureBean(org.apache.dubbo.config.ReferenceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.reference.ReferenceCreator:org.apache.dubbo.config.ReferenceConfig build()"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:void completeCompoundConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.ServiceBuilder:org.apache.dubbo.config.ServiceConfig build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.builders.ServiceBuilder:org.apache.dubbo.config.AbstractConfig build()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$registry__13:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.spring.ServiceBean:void afterPropertiesSet()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.reference.ReferenceBeanManager:void initReferenceBean(org.apache.dubbo.config.spring.ReferenceBean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.reference.ReferenceBeanManager:void addReference(org.apache.dubbo.config.spring.ReferenceBean)",
            "org.apache.dubbo.config.spring.reference.ReferenceBeanManager:void prepareReferenceBeans()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader$lambda_destroyAll_1__64:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$doInListener$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfigBase:void checkProtocol()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig$lambda_convertRegistryIdsToRegistries_1__59:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isOnlyRegisterProvider()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:java.lang.String getMetadataType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.registry.client.ServiceInstance createServiceInstance(java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.common.config.configcenter.DynamicConfiguration prepareEnvironment(org.apache.dubbo.config.ConfigCenterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startConfigCenter()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void registerServiceInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:java.util.List loadRegistries(org.apache.dubbo.config.AbstractInterfaceConfig,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrls()"
        ]
    },
    "org.apache.dubbo.config.metadata.ServiceInstanceHostPortCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void lambda$customizeInstance$2(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceInstanceCustomizer)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.StandardMetadataServiceURLBuilder:org.apache.dubbo.common.URL generateUrlWithoutMetadata(java.lang.String,java.lang.String,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.StandardMetadataServiceURLBuilder:java.util.List build(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:java.lang.String getName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.SelfHostMetaServiceDiscovery:void fillServiceInstance(org.apache.dubbo.registry.client.DefaultServiceInstance)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void lambda$map$0(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void refreshMetadataAndInstance(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:org.apache.dubbo.metadata.MetadataInfo lambda$exportURL$0(java.lang.String)",
            "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void <init>()",
            "org.apache.dubbo.rpc.model.ApplicationModel:java.lang.String getApplication()",
            "org.apache.dubbo.common.status.reporter.FrameworkStatusReporter:java.lang.String createRegistrationReport(java.lang.String)",
            "org.apache.dubbo.common.status.reporter.FrameworkStatusReporter:java.lang.String createConsumptionReport(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.status.reporter.FrameworkStatusReporter:java.lang.String createMigrationStepReport(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Live:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Ready:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Startup:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)"
        ]
    },
    "org.apache.dubbo.metadata.report.MetadataReportInstance:void init(org.apache.dubbo.config.MetadataReportConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startMetadataCenter()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:org.apache.dubbo.rpc.ProtocolServer lambda$doExport$0(org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol$lambda_doExport_0__557:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:io.grpc.ManagedChannel initChannel(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel getSharedChannel(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.api.PortUnificationServer$1:void initChannel(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.SslHandlerInitializer$SslServerTlsHandler:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.transport.netty4.NettyServerHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.SslHandlerInitializer:io.netty.channel.ChannelInboundHandler sslServerHandler(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.transport.netty4.NettyServerHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.SslHandlerInitializer$SslClientTlsHandler:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.transport.netty4.NettyClientHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.SslHandlerInitializer:io.netty.channel.ChannelInboundHandler sslClientHandler(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.transport.netty4.NettyClientHandler)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_unregisterServiceInstance_12__36:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleServiceDiscovery$lambda_unregister_2__435:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_doRegisterServiceInstance_11__35:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void lambda$refreshMetadataAndInstance$1(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils$lambda_refreshMetadataAndInstance_1__169:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleServiceDiscovery:void lambda$update$1(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleServiceDiscovery$lambda_update_1__434:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleServiceDiscovery$lambda_register_0__433:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration$lambda_removeConfig_1__362:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcServiceContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.server.handler.HttpProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)",
            "org.apache.dubbo.qos.server.handler.TelnetProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache:void destroy(org.apache.dubbo.config.ReferenceConfigBase)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache$lambda_destroyAll_6__194:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$doInListener$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache$lambda_destroy_5__193:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$doInListener$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.registry.client.SelfHostMetaServiceDiscovery$lambda_notifyListener_3__367:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshOverrideAndInvoker(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void notify(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void access$000(org.apache.dubbo.registry.integration.RegistryDirectory,java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:void decode()",
            "org.apache.dubbo.remoting.transport.codec.CodecAdapter:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void register(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void unregister(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_scheduleServiceNamesLookup_6__409:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNames(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$lookup$0(org.apache.dubbo.common.URL,java.util.List,org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$lambda_reExport_3__269:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataUtils$lambda_getMetadataServiceProxy_1__52:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)"
        ]
    },
    "org.apache.dubbo.monitor.support.AbstractMonitorFactory$lambda_getMonitor_0__624:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcServiceContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$isUsedRegistryAsConfigCenter__18:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$isUsedRegistryAsMetadataCenter__22:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.codec.TransportCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void destroyMetadataServiceProxy(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.filter.FilterChainBuilder$FilterChainNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close(int)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void closeReferenceCountExchangeClient(org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)",
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reconnect()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.AsyncRpcResult doInvokeAndReturn(org.apache.dubbo.rpc.RpcInvocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.registry.nacos.util.NacosNamingServiceUtils:org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper createNamingService(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.nacos.NacosServiceDiscovery:void doInitialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfigurationFactory:org.apache.dubbo.common.config.configcenter.DynamicConfiguration createDynamicConfiguration(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport:org.apache.dubbo.metadata.store.nacos.NacosConfigServiceWrapper buildConfigService(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:void doMigrate(org.apache.dubbo.registry.client.migration.model.MigrationRule)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void onRefer(org.apache.dubbo.registry.integration.RegistryProtocol,org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void lambda$process$1(org.apache.dubbo.registry.client.migration.MigrationInvoker,org.apache.dubbo.registry.client.migration.MigrationRuleHandler)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_getProperties_3__214:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_getInternalProperty_4__215:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_getConfigKeys_5__216:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractMethodConfig)",
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractConfig)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder:void build(org.apache.dubbo.config.AbstractMethodConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractMethodBuilder:void build(org.apache.dubbo.config.AbstractConfig)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder:void build(org.apache.dubbo.config.AbstractConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder:org.apache.dubbo.config.ConsumerConfig build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder:org.apache.dubbo.config.AbstractConfig build()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder:org.apache.dubbo.config.ReferenceConfig build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder:org.apache.dubbo.config.AbstractConfig build()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractServiceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractMethodConfig)",
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractConfig)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractServiceBuilder:void build(org.apache.dubbo.config.AbstractMethodConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractMethodBuilder:void build(org.apache.dubbo.config.AbstractConfig)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractServiceBuilder:void build(org.apache.dubbo.config.AbstractConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.builders.ProviderBuilder:org.apache.dubbo.config.ProviderConfig build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.builders.ProviderBuilder:org.apache.dubbo.config.AbstractConfig build()"
        ]
    },
    "org.apache.dubbo.config.spring.reference.ReferenceCreator:org.apache.dubbo.config.ReferenceConfig build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.reference.ReferenceBeanManager:void initReferenceBean(org.apache.dubbo.config.spring.ReferenceBean)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.ServiceBuilder:org.apache.dubbo.config.AbstractConfig build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.reference.ReferenceBeanManager:void addReference(org.apache.dubbo.config.spring.ReferenceBean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.ReferenceBean:void afterPropertiesSet()"
        ]
    },
    "org.apache.dubbo.config.spring.reference.ReferenceBeanManager:void prepareReferenceBeans()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.context.DubboConfigInitializationPostProcessor:void prepareReferenceBeans(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.registry.client.ServiceInstance createServiceInstance(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void registerServiceInstance()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void lambda$customizeInstance$2(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceInstanceCustomizer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils$lambda_customizeInstance_2__170:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.StandardMetadataServiceURLBuilder:java.util.List build(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService referProxy(java.lang.String,org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.registry.client.SelfHostMetaServiceDiscovery:void fillServiceInstance(org.apache.dubbo.registry.client.DefaultServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dns.DNSServiceDiscovery:java.util.List toServiceInstance(java.lang.String,org.apache.dubbo.registry.dns.util.ResolveResult)",
            "org.apache.dubbo.registry.xds.XdsServiceDiscovery:void lambda$changedToInstances$2(java.lang.String,java.util.List,java.util.Collection,org.apache.dubbo.registry.xds.util.protocol.message.Endpoint)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void lambda$map$0(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping$lambda_map_0__368:void run()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void lambda$customizeInstance$2(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceInstanceCustomizer)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void refreshMetadataAndInstance(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$registerServiceInstance$10(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.qos.command.impl.PublishMetadata:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])",
            "org.apache.dubbo.qos.command.impl.PublishMetadata:void lambda$execute$0()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:org.apache.dubbo.metadata.MetadataInfo lambda$exportURL$0(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService$lambda_exportURL_0__202:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:java.lang.String getApplication()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener:void <init>()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener:void <init>(org.apache.dubbo.registry.integration.RegistryProtocol)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.metadata.WritableMetadataService:java.lang.String serviceName()"
        ]
    },
    "org.apache.dubbo.common.status.reporter.FrameworkStatusReporter:java.lang.String createRegistrationReport(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void lambda$genCompatibleRegistries$0(boolean,java.util.List,java.util.List,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.status.reporter.FrameworkStatusReporter:java.lang.String createConsumptionReport(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void lambda$refreshInterfaceInvoker$3(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void lambda$refreshServiceDiscoveryInvoker$2(java.util.concurrent.CountDownLatch)"
        ]
    },
    "org.apache.dubbo.common.status.reporter.FrameworkStatusReporter:java.lang.String createMigrationStepReport(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:void report(org.apache.dubbo.registry.client.migration.model.MigrationStep,org.apache.dubbo.registry.client.migration.model.MigrationStep,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol$lambda_doExport_0__557:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel getSharedChannel(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.SslHandlerInitializer:io.netty.channel.ChannelInboundHandler sslServerHandler(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.transport.netty4.NettyServerHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyServer$1:void initChannel(io.netty.channel.socket.SocketChannel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.SslHandlerInitializer:io.netty.channel.ChannelInboundHandler sslClientHandler(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.transport.netty4.NettyClientHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyClient$1:void initChannel(io.netty.channel.socket.SocketChannel)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils$lambda_refreshMetadataAndInstance_1__169:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleServiceDiscovery$lambda_update_1__434:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.qos.server.handler.HttpProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.server.handler.HttpProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.qos.server.handler.TelnetProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.server.handler.TelnetProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void access$000(org.apache.dubbo.registry.integration.RegistryDirectory,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener:void lambda$notifyOverrides$0(org.apache.dubbo.registry.integration.RegistryDirectory)",
            "org.apache.dubbo.registry.integration.RegistryDirectory$ReferenceConfigurationListener:void notifyOverrides()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:void decode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void decode(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.codec.CodecAdapter:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$lookup$0(org.apache.dubbo.common.URL,java.util.List,org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_lookup_0__404:void callback(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)"
        ]
    },
    "org.apache.dubbo.remoting.transport.codec.TransportCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reconnect()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reconnect()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosServiceDiscovery:void doInitialize(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfigurationFactory:org.apache.dubbo.common.config.configcenter.DynamicConfiguration createDynamicConfiguration(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory:org.apache.dubbo.common.config.configcenter.DynamicConfiguration lambda$getDynamicConfiguration$0(org.apache.dubbo.common.URL,java.lang.String)"
        ]
    },
    "org.apache.dubbo.metadata.store.nacos.NacosMetadataReport:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory:org.apache.dubbo.metadata.report.MetadataReport createMetadataReport(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void onRefer(org.apache.dubbo.registry.integration.RegistryProtocol,org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker interceptInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void lambda$process$1(org.apache.dubbo.registry.client.migration.MigrationInvoker,org.apache.dubbo.registry.client.migration.MigrationRuleHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleListener$lambda_process_1__294:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractMethodConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractMethodBuilder:void build(org.apache.dubbo.config.AbstractConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder:org.apache.dubbo.config.AbstractConfig build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder:org.apache.dubbo.config.AbstractConfig build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.builders.ProviderBuilder:org.apache.dubbo.config.AbstractConfig build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.ReferenceBean:void afterPropertiesSet()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.context.DubboConfigInitializationPostProcessor:void prepareReferenceBeans(org.springframework.beans.factory.config.ConfigurableListableBeanFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.context.DubboConfigInitializationPostProcessor:java.lang.Object postProcessBeforeInitialization(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils$lambda_customizeInstance_2__170:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.dns.DNSServiceDiscovery:java.util.List toServiceInstance(java.lang.String,org.apache.dubbo.registry.dns.util.ResolveResult)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dns.DNSServiceDiscovery:java.util.List getInstances(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.xds.XdsServiceDiscovery:void lambda$changedToInstances$2(java.lang.String,java.util.List,java.util.Collection,org.apache.dubbo.registry.xds.util.protocol.message.Endpoint)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.xds.XdsServiceDiscovery$lambda_changedToInstances_2__455:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping$lambda_map_0__368:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$registerServiceInstance$10(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_registerServiceInstance_10__34:void run()"
        ]
    },
    "org.apache.dubbo.qos.command.impl.PublishMetadata:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.PublishMetadata:void lambda$execute$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.PublishMetadata$lambda_execute_0__629:void run()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService$lambda_exportURL_0__202:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void <clinit>()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener:void <init>(org.apache.dubbo.registry.integration.RegistryProtocol)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void <init>()"
        ]
    },
    "org.apache.dubbo.metadata.WritableMetadataService:java.lang.String serviceName()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void lambda$genCompatibleRegistries$0(boolean,java.util.List,java.util.List,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils$lambda_genCompatibleRegistries_0__73:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void lambda$refreshInterfaceInvoker$3(java.util.concurrent.CountDownLatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker$lambda_refreshInterfaceInvoker_3__282:void onChange()"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void lambda$refreshServiceDiscoveryInvoker$2(java.util.concurrent.CountDownLatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker$lambda_refreshServiceDiscoveryInvoker_2__281:void onChange()"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:void report(org.apache.dubbo.registry.client.migration.model.MigrationStep,org.apache.dubbo.registry.client.migration.model.MigrationStep,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:boolean refreshInvoker(org.apache.dubbo.registry.client.migration.model.MigrationStep,java.lang.Float,org.apache.dubbo.registry.client.migration.model.MigrationRule)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServer$1:void initChannel(io.netty.channel.socket.SocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyServer$1:void initChannel(io.netty.channel.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClient$1:void initChannel(io.netty.channel.socket.SocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyClient$1:void initChannel(io.netty.channel.Channel)"
        ]
    },
    "org.apache.dubbo.qos.server.handler.HttpProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.qos.server.handler.TelnetProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener:void lambda$notifyOverrides$0(org.apache.dubbo.registry.integration.RegistryDirectory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener$lambda_notifyOverrides_0__292:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory$ReferenceConfigurationListener:void notifyOverrides()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:void process(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.DecodeHandler:void decode(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_lookup_0__404:void callback(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:void execute(org.apache.dubbo.registry.nacos.NacosRegistry$NamingServiceCallback)"
        ]
    },
    "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.AsyncRpcResult doInvokeAndReturn(org.apache.dubbo.rpc.RpcInvocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory:org.apache.dubbo.common.config.configcenter.DynamicConfiguration lambda$getDynamicConfiguration$0(org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory$lambda_getDynamicConfiguration_0__593:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.metadata.store.nacos.NacosMetadataReportFactory:org.apache.dubbo.metadata.report.MetadataReport createMetadataReport(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReportFactory:org.apache.dubbo.metadata.report.MetadataReport getMetadataReport(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker interceptInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker doRefer(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL,java.util.Map)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationRuleListener$lambda_process_1__294:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$doInListener$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.config.spring.context.DubboConfigInitializationPostProcessor:java.lang.Object postProcessBeforeInitialization(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.dns.DNSServiceDiscovery:java.util.List getInstances(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscovery:void dispatchServiceInstancesChangedEvent(java.lang.String)",
            "org.apache.dubbo.registry.client.ServiceDiscovery:void dispatchServiceInstancesChangedEvent(java.lang.String,java.lang.String[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$subscribeURLs$2(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener,java.lang.String)",
            "org.apache.dubbo.registry.dns.DNSServiceDiscovery:void lambda$addServiceInstancesChangedListener$1(java.lang.String,org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)"
        ]
    },
    "org.apache.dubbo.registry.xds.XdsServiceDiscovery$lambda_changedToInstances_2__455:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_registerServiceInstance_10__34:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.PublishMetadata$lambda_execute_0__629:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener:void lambda$notifyOverrides$0(org.apache.dubbo.registry.integration.RegistryDirectory)",
            "org.apache.dubbo.registry.integration.RegistryDirectory$ReferenceConfigurationListener:void notifyOverrides()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List toMergeInvokerList(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Optional toRouters(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:org.apache.dubbo.common.URL overrideWithConfigurator(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List doList(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:boolean isValidCategory(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void overrideDirectoryUrl()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void <clinit>()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory$lambda_toMergeInvokerList_0__277:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:void <init>()"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils$lambda_genCompatibleRegistries_0__73:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker$lambda_refreshInterfaceInvoker_3__282:void onChange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.DynamicDirectory:void setInvokersChangedListener(org.apache.dubbo.registry.client.migration.InvokersChangedListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void invokersChanged()"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker$lambda_refreshServiceDiscoveryInvoker_2__281:void onChange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.DynamicDirectory:void setInvokersChangedListener(org.apache.dubbo.registry.client.migration.InvokersChangedListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void invokersChanged()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService referProxy(java.lang.String,org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServer$1:void initChannel(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClient$1:void initChannel(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener$lambda_notifyOverrides_0__292:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(java.lang.String,org.apache.dubbo.remoting.ChannelHandler[])",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchanger:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory$lambda_getDynamicConfiguration_0__593:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReportFactory:org.apache.dubbo.metadata.report.MetadataReport getMetadataReport(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.MetadataReportInstance:void init(org.apache.dubbo.config.MetadataReportConfig)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker doRefer(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscovery:void dispatchServiceInstancesChangedEvent(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.client.ServiceDiscovery:void dispatchServiceInstancesChangedEvent(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$subscribeURLs$2(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry$lambda_subscribeURLs_2__259:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.dns.DNSServiceDiscovery:void lambda$addServiceInstancesChangedListener$1(java.lang.String,org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dns.DNSServiceDiscovery$lambda_addServiceInstancesChangedListener_1__450:void run()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List toMergeInvokerList(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Optional toRouters(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:org.apache.dubbo.common.URL overrideWithConfigurator(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:org.apache.dubbo.common.URL mergeUrl(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List doList(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory:java.util.List list(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:boolean isValidCategory(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory$isValidCategory__273:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void overrideDirectoryUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshOverrideAndInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory$lambda_toMergeInvokerList_0__277:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)"
        ]
    },
    "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.DynamicDirectory:void setInvokersChangedListener(org.apache.dubbo.registry.client.migration.InvokersChangedListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void clearListener(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void setListener(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.registry.client.migration.InvokersChangedListener)"
        ]
    },
    "org.apache.dubbo.registry.integration.DynamicDirectory:void invokersChanged()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(java.lang.String,org.apache.dubbo.remoting.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchanger:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry$lambda_subscribeURLs_2__259:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.PilotExchanger:void lambda$doObserveEndpoints$4(org.apache.dubbo.registry.xds.util.protocol.message.EndpointResult,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:long observeResource(java.util.Set,java.util.function.Consumer)",
            "org.apache.dubbo.registry.xds.util.protocol.AbstractProtocol:void lambda$observeResource$0(long,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.dns.DNSServiceDiscovery$lambda_addServiceInstancesChangedListener_1__450:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:org.apache.dubbo.common.URL mergeUrl(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory:java.util.List list(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:java.util.List list(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:java.util.List selectMockInvoker(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory$isValidCategory__273:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void clearListener(org.apache.dubbo.rpc.cluster.ClusterInvoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker(java.util.concurrent.CountDownLatch)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void setListener(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.registry.client.migration.InvokersChangedListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker(java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker(java.util.concurrent.CountDownLatch)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient initClient(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void initClient()",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:java.util.List list(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:java.util.List selectMockInvoker(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient initClient(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient[] getClients(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient buildReferenceCountExchangeClient(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void initClient()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.exchange.support.Replier)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.support.Replier)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient[] getClients(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient buildReferenceCountExchangeClient(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:java.util.List getSharedClient(org.apache.dubbo.common.URL,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:java.util.List buildReferenceCountExchangeClientList(org.apache.dubbo.common.URL,int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void lambda$handleRequest$0(org.apache.dubbo.remoting.exchange.Response,org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:java.util.List getSharedClient(org.apache.dubbo.common.URL,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient[] getClients(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:java.util.List buildReferenceCountExchangeClientList(org.apache.dubbo.common.URL,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:java.util.List getSharedClient(org.apache.dubbo.common.URL,int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void lambda$handleRequest$0(org.apache.dubbo.remoting.exchange.Response,org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void lambda$handleRequest$0(org.apache.dubbo.remoting.exchange.Response,org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void lambda$handleRequest$0(org.apache.dubbo.remoting.exchange.Response,org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler$lambda_handleRequest_0__616:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$13(java.lang.Runnable)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcServiceContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.tri.AbstractClientStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractServerStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.AbstractStream:void execute(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onData(byte[],boolean,org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.ClientStream$2:void onComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryClientStream$UnaryClientTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.rpc.protocol.tri.UnaryServerStream$UnaryServerTransportObserver:void doOnComplete(org.apache.dubbo.rpc.protocol.tri.Stream$OperationHandler)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture2$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService referProxy(java.lang.String,org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.filter.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler$lambda_handleRequest_0__616:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$doInListener$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void lambda$handleRequest$0(org.apache.dubbo.remoting.exchange.Response,org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)"
        ]
    }
}