{
    "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize0(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.util.Map)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize(java.lang.Object,java.lang.Class)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize(java.lang.Object,java.lang.Class,java.lang.reflect.Type)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize0(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.util.Map)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object access$000(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.util.Map)"
        ]
    },
    "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.CompatibleFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object[] realize(java.lang.Object[],java.lang.Class[])"
        ]
    },
    "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize(java.lang.Object,java.lang.Class,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.support.MockInvoker:java.lang.Object parseMockValue(java.lang.String,java.lang.reflect.Type[])",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object[] realize(java.lang.Object[],java.lang.Class[],java.lang.reflect.Type[])",
            "org.apache.dubbo.common.serialize.gson.GsonJsonObjectInput:java.lang.Object readObject(java.lang.Class,java.lang.reflect.Type)"
        ]
    },
    "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object access$000(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.utils.PojoUtils$PojoInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "org.apache.dubbo.rpc.filter.CompatibleFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:void lambda$invoke$0(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object[] realize(java.lang.Object[],java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.support.MockInvoker:java.lang.Object parseMockValue(java.lang.String,java.lang.reflect.Type[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.support.MockInvoker:java.lang.Object parseMockValue(java.lang.String)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.GenericImplFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:void lambda$invoke$0(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object[] realize(java.lang.Object[],java.lang.Class[],java.lang.reflect.Type[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.legacy.InvokeTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.serialize.gson.GsonJsonObjectInput:java.lang.Object readObject(java.lang.Class,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult:void handleValue(org.apache.dubbo.common.serialize.ObjectInput)"
        ]
    },
    "org.apache.dubbo.common.utils.PojoUtils$PojoInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.FilterNode:void lambda$invoke$0(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode$lambda_invoke_0__385:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.support.MockInvoker:java.lang.Object parseMockValue(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkMock(java.lang.Class,org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.qos.legacy.InvokeTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.SelectTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult:void handleValue(org.apache.dubbo.common.serialize.ObjectInput)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.FilterNode$lambda_invoke_0__385:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$null$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkMock(java.lang.Class,org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()",
            "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$lambda_doInvoke_0__376:void run()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.qos.legacy.SelectTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult:void decode()",
            "org.apache.dubbo.remoting.transport.codec.CodecAdapter:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)"
        ]
    },
    "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult$lambda_whenCompleteWithContext_0__261:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$null$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_null_0__448:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:void init()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void export()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.interceptor.ClusterInterceptor:org.apache.dubbo.rpc.Result intercept(org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout:void expire()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelBucket:void expireTimeouts(long)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker$lambda_doInvoke_0__376:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void invoke(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult:void decode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void decode(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.codec.CodecAdapter:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalDecoder:void decode(org.apache.mina.common.IoSession,org.apache.mina.common.ByteBuffer,org.apache.mina.filter.codec.ProtocolDecoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.rpc.AsyncRpcResult$lambda_whenCompleteWithContext_0__261:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$null$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_null_0__448:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "org.apache.dubbo.remoting.etcd.jetcd.RetryLoops:java.lang.Object invokeWithRetry(java.util.concurrent.Callable,org.apache.dubbo.remoting.etcd.RetryPolicy)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ReferenceConfigCache:java.lang.Object lambda$get$3(org.apache.dubbo.config.ReferenceConfigBase,java.lang.String,java.lang.String)",
            "org.apache.dubbo.config.spring.ReferenceBean:java.lang.Object getObject()",
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:java.lang.Object doGetInjectedBean(org.springframework.core.'annotation'.AnnotationAttributes,java.lang.Object,java.lang.String,java.lang.Class,org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void export()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$exportServices$14(org.apache.dubbo.config.ServiceConfigBase)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$null$13(org.apache.dubbo.config.ServiceConfigBase)",
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter export()",
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:void exportServiceBeanIfNecessary(java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.interceptor.ClusterInterceptor:org.apache.dubbo.rpc.Result intercept(org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelBucket:void expireTimeouts(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$Worker:void run()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap await()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void release()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager$lambda_write_10__125:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration$lambda_execute_2__425:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$null$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:org.apache.dubbo.rpc.Result get()",
            "org.apache.dubbo.rpc.AsyncRpcResult:org.apache.dubbo.rpc.Result get(long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:java.util.List shutdownNow()",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void doReceived(org.apache.dubbo.remoting.exchange.Response)"
        ]
    },
    "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)"
        ]
    },
    "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.utils.ExecutorUtil:void newThreadToCloseExecutor(java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void doSaveProperties(long)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void saveProperties(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.consul.ConsulServiceDiscovery:void addServiceInstancesChangedListener(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void doSaveProperties(long)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveProperties(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.lang.String,boolean,boolean)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)"
        ]
    },
    "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.config.ReferenceConfig:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.config.ServiceConfig:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dispatchThreadPoolExhaustedEvent(java.lang.String)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void dispatchEvent(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.registry.client.ServiceDiscovery:void dispatchServiceInstancesChangedEvent(org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent)",
            "org.apache.dubbo.registry.eureka.EurekaServiceDiscovery:void lambda$dispatchServiceInstancesChangedEvent$1(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void lambda$exported$0(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:java.util.Set findMappedServices(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)"
        ]
    },
    "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl:void publishProvider(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:boolean doHandleMetadataCollection(java.util.Map)",
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:void lambda$storeProviderMetadata$1(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition,org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$MetadataReportHolder)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl:void lambda$publishConsumer$1(org.apache.dubbo.common.URL,java.lang.String,org.apache.dubbo.metadata.report.MetadataReport)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:boolean doHandleMetadataCollection(java.util.Map)",
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:void lambda$storeConsumerMetadata$2(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map,org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$MetadataReportHolder)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:void lambda$saveServiceMetadata$5(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL,org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$MetadataReportHolder)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:void lambda$removeServiceMetadata$7(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$MetadataReportHolder)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:void lambda$saveSubscribedData$6(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set,org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$MetadataReportHolder)"
        ]
    },
    "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void invoke(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void disconnected(org.apache.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.DecodeHandler:void decode(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalDecoder:void decode(org.apache.mina.common.IoSession,org.apache.mina.common.ByteBuffer,org.apache.mina.filter.codec.ProtocolDecoderOutput)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:void write(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.util.Map getConfigsMap(java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getConfigs(java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.AbstractConfig getConfig(java.lang.String,java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.AbstractConfig getConfig(java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.RpcContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.String getConfig(java.lang.String,java.lang.String,long)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:boolean removeConfig(java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:void execute(java.lang.Runnable,long)",
            "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration:boolean publishConfig(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object delay(java.lang.String,org.apache.dubbo.common.function.ThrowableFunction)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$processWatchEvents$5(java.nio.file.WatchService)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$doInListener$1(java.lang.String,java.util.function.BiConsumer,java.nio.file.WatchService)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.RetryLoops:java.lang.Object invokeWithRetry(java.util.concurrent.Callable,org.apache.dubbo.remoting.etcd.RetryPolicy)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:java.util.List getChildren(java.lang.String)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:long createLease(long)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void revokeLease(long)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:boolean checkExists(java.lang.String)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:java.lang.Long find(java.lang.String)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void createPersistent(java.lang.String)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:long createEphemeral(java.lang.String)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void delete(java.lang.String)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:boolean putEphemeral(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean addURL(java.util.Map,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean removeURL(java.util.Map,org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache:java.lang.Object lambda$get$3(org.apache.dubbo.config.ReferenceConfigBase,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ReferenceConfigCache$lambda_get_3__199:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.spring.ReferenceBean:java.lang.Object getObject()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.ReferenceBean:void afterPropertiesSet()"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:java.lang.Object doGetInjectedBean(org.springframework.core.'annotation'.AnnotationAttributes,java.lang.Object,java.lang.String,java.lang.Class,org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$exportServices$14(org.apache.dubbo.config.ServiceConfigBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_exportServices_14__32:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$null$13(org.apache.dubbo.config.ServiceConfigBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_null_13__51:void run()"
        ]
    },
    "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter export()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.metadata.MetadataServiceExporter export()"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:void exportServiceBeanIfNecessary(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:void prepareReferenceBean(java.lang.String,org.apache.dubbo.config.spring.ReferenceBean,boolean)"
        ]
    },
    "org.apache.dubbo.common.timer.HashedWheelTimer$Worker:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap await()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void release()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$lambda_write_10__125:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "org.apache.dubbo.remoting.etcd.jetcd.RetryLoops:java.lang.Object invokeWithRetry(java.util.concurrent.Callable,org.apache.dubbo.remoting.etcd.RetryPolicy)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration$lambda_execute_2__425:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "org.apache.dubbo.remoting.etcd.jetcd.RetryLoops:java.lang.Object invokeWithRetry(java.util.concurrent.Callable,org.apache.dubbo.remoting.etcd.RetryPolicy)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void doSaveProperties(long)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void saveProperties(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.consul.ConsulServiceDiscovery:void addServiceInstancesChangedListener(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void doSaveProperties(long)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveProperties(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.lang.String,boolean,boolean)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)"
        ]
    },
    "org.apache.dubbo.rpc.AsyncRpcResult:org.apache.dubbo.rpc.Result get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)"
        ]
    },
    "org.apache.dubbo.rpc.AsyncRpcResult:org.apache.dubbo.rpc.Result get(long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.common.threadpool.ThreadlessExecutor:java.util.List shutdownNow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void shutdown()",
            "org.apache.dubbo.common.utils.ExecutorUtil$1:void run()",
            "org.apache.dubbo.common.utils.ExecutorUtil:void gracefulShutdown(java.util.concurrent.Executor,int)",
            "org.apache.dubbo.common.utils.ExecutorUtil:void shutdownNow(java.util.concurrent.Executor,int)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void closeChannel(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.registry.consul.ConsulServiceDiscovery:void destroy()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void doReceived(org.apache.dubbo.remoting.exchange.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void received(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response,boolean)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:boolean cancel(boolean)"
        ]
    },
    "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.utils.ExecutorUtil:void newThreadToCloseExecutor(java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.utils.ExecutorUtil:void gracefulShutdown(java.util.concurrent.Executor,int)",
            "org.apache.dubbo.common.utils.ExecutorUtil:void shutdownNow(java.util.concurrent.Executor,int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)",
            "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)",
            "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void doSaveProperties(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry$SaveProperties:void run()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void saveProperties(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void saveProperties(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulServiceDiscovery:void addServiceInstancesChangedListener(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void addServiceInstancesChangedListener(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void registerServiceInstancesChangedListener(org.apache.dubbo.common.URL,org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void addServiceInstancesChangedListener(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void doSaveProperties(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void access$100(org.apache.dubbo.metadata.report.support.AbstractMetadataReport,long)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveProperties(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadataTask(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadataTask(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.config.DubboShutdownHook:void dispatch(org.apache.dubbo.event.Event)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void register()",
            "org.apache.dubbo.config.DubboShutdownHook:void unregister()",
            "org.apache.dubbo.config.DubboShutdownHook:void doDestroy()"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:void dispatch(org.apache.dubbo.event.Event)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:void init()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void dispatch(org.apache.dubbo.event.Event)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.config.ServiceConfig:void exported()"
        ]
    },
    "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dispatchThreadPoolExhaustedEvent(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void rejectedExecution(java.lang.Runnable,java.util.concurrent.ThreadPoolExecutor)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void dispatchEvent(org.apache.dubbo.event.Event)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void executeWithEvents(java.util.Optional,org.apache.dubbo.common.function.ThrowableAction,java.util.Optional)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$dispatchEvent__306:void accept(java.lang.Object)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$dispatchEvent__307:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscovery:void dispatchServiceInstancesChangedEvent(org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.eureka.EurekaServiceDiscovery:void lambda$dispatchServiceInstancesChangedEvent$1(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.eureka.EurekaServiceDiscovery$lambda_dispatchServiceInstancesChangedEvent_1__613:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void unwatch()",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:java.util.List forPath(java.lang.String)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void recreateWatchRequest()",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void closeWatchRequest()",
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void watch()",
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void cancelWatch()"
        ]
    },
    "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void lambda$exported$0(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig$lambda_exported_0__4:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:java.util.Set findMappedServices(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:java.util.Set getServices(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl:void publishProvider(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl:void publishServiceDefinition(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:boolean doHandleMetadataCollection(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:boolean retry()",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void publishAll()"
        ]
    },
    "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:void lambda$storeProviderMetadata$1(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition,org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$MetadataReportHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$lambda_storeProviderMetadata_1__689:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl:void lambda$publishConsumer$1(org.apache.dubbo.common.URL,java.lang.String,org.apache.dubbo.metadata.report.MetadataReport)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl$lambda_publishConsumer_1__160:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:void lambda$storeConsumerMetadata$2(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map,org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$MetadataReportHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$lambda_storeConsumerMetadata_2__690:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:void lambda$saveServiceMetadata$5(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL,org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$MetadataReportHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$lambda_saveServiceMetadata_5__693:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:void lambda$removeServiceMetadata$7(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$MetadataReportHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$lambda_removeServiceMetadata_7__695:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:void lambda$saveSubscribedData$6(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set,org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$MetadataReportHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$lambda_saveSubscribedData_6__694:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.MultiMessageHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void lambda$write$0(org.apache.dubbo.remoting.transport.netty4.NettyChannel,java.lang.Object,boolean,io.netty.util.concurrent.Future)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void messageReceived(org.apache.mina.common.IoSession,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void received(com.alibaba.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void write(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:void refreshAll()",
            "org.apache.dubbo.config.context.ConfigManager:void clear()",
            "org.apache.dubbo.config.context.ConfigManager:void addConfig(org.apache.dubbo.config.AbstractConfig,boolean)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Map getConfigsMap(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getDefaultConfigCenter()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getDefaultMetadataConfigs()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getDefaultProvider()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getDefaultConsumer()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.List getDefaultProtocols()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.List getDefaultRegistries()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection lambda$getConfigs$7(java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getConfigs(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getConfigCenters()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getMetadataConfigs()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getProviders()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getConsumers()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getProtocols()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getRegistries()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getServices()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getReferences()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.AbstractConfig getConfig(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.ConfigCenterConfig getConfigCenter(java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getProvider(java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getConsumer(java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getProtocol(java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getRegistry(java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.ServiceConfigBase getService(java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.ReferenceConfigBase getReference(java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.AbstractConfig getConfig(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getApplication()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getMonitor()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getModule()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getMetrics()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getSsl()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.String getConfig(java.lang.String,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:java.lang.String getRule(java.lang.String,java.lang.String,long)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:java.lang.String getConfig(java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:java.lang.String getProperties(java.lang.String,java.lang.String,long)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getConfig$2(java.lang.String,java.lang.String,long,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:boolean removeConfig(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void unregister(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:void execute(java.lang.Runnable,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration:boolean publishConfig(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:boolean publishConfig(java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:boolean publishConfig(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void doRegister(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void lambda$map$0(org.apache.dubbo.common.config.configcenter.DynamicConfiguration,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object delay(java.lang.String,org.apache.dubbo.common.function.ThrowableFunction)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:boolean doPublishConfig(java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:boolean doRemoveConfig(java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$processWatchEvents$5(java.nio.file.WatchService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_processWatchEvents_5__430:void run()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$doInListener$1(java.lang.String,java.util.function.BiConsumer,java.nio.file.WatchService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_doInListener_1__428:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:java.util.List getChildren(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:java.util.List forPath(java.lang.String)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:java.util.List getChildren(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:long createLease(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:long createLease(long)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:long createLease(long,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void revokeLease(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:void revokeLease(long)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void doClose()"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:boolean checkExists(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:boolean checkExists(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:java.lang.Long find(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void createPersistent(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:void doCreatePersistent(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:long createEphemeral(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:long doCreateEphemeral(java.lang.String)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void recovery()",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void retry()"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void delete(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:void delete(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:boolean putEphemeral(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:boolean putEphemeral(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean addURL(java.util.Map,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean exportURL(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean subscribeURL(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean removeURL(java.util.Map,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean unexportURL(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean unsubscribeURL(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache$lambda_get_3__199:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.spring.ReferenceBean:void afterPropertiesSet()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceBeanBuilder:void postConfigureBean(org.springframework.core.'annotation'.AnnotationAttributes,org.apache.dubbo.config.spring.ReferenceBean)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_exportServices_14__32:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_null_13__51:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.metadata.MetadataServiceExporter export()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void exportMetadataService()"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:void prepareReferenceBean(java.lang.String,org.apache.dubbo.config.spring.ReferenceBean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:java.lang.Object doGetInjectedBean(org.springframework.core.'annotation'.AnnotationAttributes,java.lang.Object,java.lang.String,java.lang.Class,org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap stop()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$destroy__10:void callback()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unexportServices$15(org.apache.dubbo.config.ServiceConfigBase)",
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter unexport()"
        ]
    },
    "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.http.HttpProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.hessian.HessianProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.rest.RestProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:void destroy()",
            "org.apache.dubbo.xml.rpc.protocol.xmlrpc.XmlRpcProtocol:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object encodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,int)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper$lambda_unexport_0__310:void run()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void shutdown()",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.utils.ExecutorUtil:void gracefulShutdown(java.util.concurrent.Executor,int)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.common.utils.ExecutorUtil$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.utils.ExecutorUtil:void newThreadToCloseExecutor(java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.common.utils.ExecutorUtil:void gracefulShutdown(java.util.concurrent.Executor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractServer:void close(int)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void destroy()",
            "org.apache.dubbo.registry.redis.RedisRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.common.utils.ExecutorUtil:void shutdownNow(java.util.concurrent.Executor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:void lambda$null$2(java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void close()",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:void doClose()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void closeChannel(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void disconnected(org.apache.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulServiceDiscovery:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$destroy$1()",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void destroy()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$destroy__49:void execute()",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$destroy__305:void execute()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void received(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void notifyTimeout(org.apache.dubbo.remoting.exchange.support.DefaultFuture)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void received(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture:boolean cancel(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unreferServices$19(java.util.concurrent.CompletableFuture)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unexportServices$16(java.util.concurrent.Future)",
            "org.apache.dubbo.rpc.protocol.dubbo.FutureAdapter:boolean cancel(boolean)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void cancel()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)",
            "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)",
            "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)",
            "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)",
            "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.support.AbstractRegistry$SaveProperties:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void doSaveProperties(long)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void saveProperties(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(java.util.List)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void doNotify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "com.alibaba.dubbo.registry.support.AbstractRegistry$CompatibleAbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void addServiceInstancesChangedListener(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void addServiceInstancesChangedListener(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void registerServiceInstancesChangedListener(org.apache.dubbo.common.URL,org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void addServiceInstancesChangedListener(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void registerServiceInstancesChangedListener(org.apache.dubbo.common.URL,org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void subscribeURLs(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Set)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void addServiceInstancesChangedListener(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void addServiceInstancesChangedListener(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void registerServiceInstancesChangedListener(org.apache.dubbo.common.URL,org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void addServiceInstancesChangedListener(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void access$100(org.apache.dubbo.metadata.report.support.AbstractMetadataReport,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$SaveProperties:void run()"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadataTask(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void lambda$storeProviderMetadata$0(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadataTask(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void lambda$storeConsumerMetadata$1(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)"
        ]
    },
    "org.apache.dubbo.config.DubboShutdownHook:void register()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void <init>()"
        ]
    },
    "org.apache.dubbo.config.DubboShutdownHook:void unregister()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void unRegisterShutdownHook()",
            "org.apache.dubbo.qos.legacy.ShutdownTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.DubboShutdownHook:void doDestroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void run()",
            "org.apache.dubbo.qos.legacy.ShutdownTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ReferenceConfigCache:void destroy(java.lang.String,java.lang.Class)",
            "org.apache.dubbo.config.utils.ReferenceConfigCache:void lambda$destroyAll$6(java.lang.String,org.apache.dubbo.config.ReferenceConfigBase)",
            "org.apache.dubbo.config.utils.ReferenceConfigCache:void lambda$destroy$5(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void exported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void export()",
            "org.apache.dubbo.config.spring.ServiceBean:void exported()"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void executeWithEvents(java.util.Optional,org.apache.dubbo.common.function.ThrowableAction,java.util.Optional)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void register(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void update(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void unregister(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void initialize(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$dispatchEvent__306:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$dispatchEvent__307:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.eureka.EurekaServiceDiscovery$lambda_dispatchServiceInstancesChangedEvent_1__613:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void unwatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:java.util.List forPath(java.lang.String)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:void removeChildWatcherListener(java.lang.String,org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:java.util.List forPath(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:java.util.List addChildWatcherListener(java.lang.String,org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void recreateWatchRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void reconnect()"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void closeWatchRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void reconnect()"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void watch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void access$000(org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher)"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void cancelWatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void access$100(org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig$lambda_exported_0__4:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:java.util.Set getServices(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl:void publishServiceDefinition(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void publishServiceDefinition(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:boolean retry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$MetadataReportRetry$1:void run()"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void publishAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$publishAll__671:void run()"
        ]
    },
    "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$lambda_storeProviderMetadata_1__689:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl$lambda_publishConsumer_1__160:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$null$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$lambda_storeConsumerMetadata_2__690:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$lambda_saveServiceMetadata_5__693:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$lambda_removeServiceMetadata_7__695:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport$lambda_saveSubscribedData_6__694:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)",
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalDecoder:void decode(org.apache.mina.common.IoSession,org.apache.mina.common.ByteBuffer,org.apache.mina.filter.codec.ProtocolDecoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalDecoder:void decode(org.apache.mina.common.IoSession,org.apache.mina.common.ByteBuffer,org.apache.mina.filter.codec.ProtocolDecoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void refreshAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startConfigCenter()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:void destroy()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addConfig(org.apache.dubbo.config.AbstractConfig,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:void setApplication(org.apache.dubbo.config.ApplicationConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void setMonitor(org.apache.dubbo.config.MonitorConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void setModule(org.apache.dubbo.config.ModuleConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void setMetrics(org.apache.dubbo.config.MetricsConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void setSsl(org.apache.dubbo.config.SslConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void addConfig(org.apache.dubbo.config.AbstractConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getDefaultConfigCenter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.Environment:void initialize()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getDefaultMetadataConfigs()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getDefaultProvider()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()",
            "org.apache.dubbo.config.ServiceConfigBase:void checkDefault()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getDefaultConsumer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()",
            "org.apache.dubbo.config.ReferenceConfigBase:void checkDefault()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.List getDefaultProtocols()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfigBase:void convertProtocolIdsToProtocols()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.List getDefaultRegistries()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void useRegistryAsConfigCenterIfNecessary()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void useRegistryAsMetadataCenterIfNecessary()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void convertRegistryIdsToRegistries()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection lambda$getConfigs$7(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager$lambda_getConfigs_7__122:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getConfigCenters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startConfigCenter()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void useRegistryAsConfigCenterIfNecessary()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ConfigCenterConfig getConfigCenter()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setConfigCenter(org.apache.dubbo.config.ConfigCenterConfig)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getDefaultConfigCenter()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getMetadataConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startMetadataCenter()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void useRegistryAsMetadataCenterIfNecessary()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MetadataReportConfig getMetadataReportConfig()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setMetadataReportConfig(org.apache.dubbo.config.MetadataReportConfig)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getDefaultMetadataConfigs()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getProviders()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()",
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$3()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getConsumers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()",
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$3()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getProtocols()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.metadata.ServiceInstancePortCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$3()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getRegistries()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:java.util.List getRegistries()",
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$3()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getServices()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void exportServices()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Collection getReferences()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void referServices()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.ConfigCenterConfig getConfigCenter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getProvider(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getConsumer(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getProtocol(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$loadRemoteConfigs$8(java.util.List,java.lang.String)",
            "org.apache.dubbo.config.ServiceConfigBase:void lambda$convertProtocolIdsToProtocols$1(java.util.List,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getRegistry(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$loadRemoteConfigs$5(java.util.List,java.lang.String)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void lambda$convertRegistryIdsToRegistries$2(java.util.List,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.ServiceConfigBase getService(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.ReferenceConfigBase getReference(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getApplication()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ApplicationConfig getApplication()",
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.ApplicationConfig getApplicationConfig()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setApplication(org.apache.dubbo.config.ApplicationConfig)",
            "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.ApplicationConfig getApplicationOrElseThrow()",
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$3()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getMonitor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.MonitorConfig getMonitor()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MonitorConfig getMonitor()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setMonitor(org.apache.dubbo.config.MonitorConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$3()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getModule()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ModuleConfig getModule()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ModuleConfig getModule()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setModule(org.apache.dubbo.config.ModuleConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$3()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getMetrics()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.MetricsConfig getMetrics()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MetricsConfig getMetrics()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setMetrics(org.apache.dubbo.config.MetricsConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Optional getSsl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.SslConfig getSsl()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.SslConfig getSslConfig()",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.netty.handler.ssl.SslContext buildServerSslContext(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.netty.handler.ssl.SslContext buildClientSslContext(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.netty4.SslContexts:io.netty.handler.ssl.SslContext buildServerSslContext(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.netty4.SslContexts:io.netty.handler.ssl.SslContext buildClientSslContext(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:java.lang.String getRule(java.lang.String,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository:java.lang.String getRule(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:java.lang.String getConfig(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:java.lang.String getProperties(java.lang.String,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getConfig$2(java.lang.String,java.lang.String,long,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_getConfig_2__225:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void unregister(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unregisterServiceInstance$22(org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$unregister$2(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void lambda$unregister$2(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:boolean publishConfig(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:boolean publishConfig(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:boolean publishConfig(java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:boolean publishConfig(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void lambda$map$0(org.apache.dubbo.common.config.configcenter.DynamicConfiguration,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void doRegister(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void register(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void lambda$map$0(org.apache.dubbo.common.config.configcenter.DynamicConfiguration,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping$lambda_map_0__232:void run()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:boolean doPublishConfig(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration:java.lang.Boolean lambda$publishConfig$0(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:boolean doRemoveConfig(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration:boolean doRemoveConfig(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_processWatchEvents_5__430:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_doInListener_1__428:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:java.util.List getChildren(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:java.util.List getInstances(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:long createLease(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:long createLease(long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:long createLease(long,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:void revokeLease(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:void doClose()"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:boolean checkExists(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:void createParentIfAbsent(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:void doCreatePersistent(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:void create(java.lang.String)",
            "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:void createParentIfAbsent(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:long doCreateEphemeral(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:long createEphemeral(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void recovery()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void lambda$keepAlive$14(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void retry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void lambda$new$1()"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:void delete(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void doUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void unregister(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.metadata.store.etcd.EtcdMetadataReport:void doRemoveMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:boolean putEphemeral(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void doRegister(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean exportURL(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doRegister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean subscribeURL(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean unexportURL(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doUnregister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean unsubscribeURL(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.String getConfig(java.lang.String,java.lang.String,long)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.String getProperties(java.lang.String,java.lang.String,long)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object getInternalProperty(java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.util.SortedSet getConfigKeys(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery:void initialize(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkUtils:org.apache.curator.framework.CuratorFramework buildCuratorFramework(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkUtils:org.apache.curator.RetryPolicy buildRetryPolicy(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceBeanBuilder:void postConfigureBean(org.springframework.core.'annotation'.AnnotationAttributes,org.apache.dubbo.config.spring.ReferenceBean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceBeanBuilder:void postConfigureBean(org.springframework.core.'annotation'.AnnotationAttributes,org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void addListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void removeListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.RegistryConfig:void setAddress(java.lang.String)"
        ]
    },
    "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.event.AbstractEventDispatcher:void addEventListener(org.apache.dubbo.event.EventListener)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void removeEventListener(org.apache.dubbo.event.EventListener)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void lambda$keepAlive$13(java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void lambda$keepAlive$12(java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:void processAllRestMethodMetadata(org.apache.dubbo.metadata.rest.ServiceRestMetadata,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void exportMetadataService()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener:void onContextClosedEvent(org.springframework.context.event.ContextClosedEvent)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$destroy__10:void callback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.lang.ShutdownHookCallbacks$callback__211:void execute()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unexportServices$15(org.apache.dubbo.config.ServiceConfigBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_unexportServices_15__33:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.metadata.MetadataServiceExporter unexport()"
        ]
    },
    "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void destroyAll()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.http.HttpProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.hessian.HessianProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.rest.RestProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.xml.rpc.protocol.xmlrpc.XmlRpcProtocol:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:void destroy()",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object encodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper$lambda_unexport_0__310:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void shutdown()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractServer:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:void destroy()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:void lambda$null$2(java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository$lambda_null_2__457:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractServer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$ProxyProtocolServer:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void close(int)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void close(int)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void leave(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void leave(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:void close()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$destroy$1()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry$lambda_destroy_1__263:void execute()"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$destroy$1()",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void destroy()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$destroy__49:void execute()",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$destroy__305:void execute()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$destroy__49:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.function.ThrowableAction:void execute(org.apache.dubbo.common.function.ThrowableAction)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void executeWithEvents(java.util.Optional,org.apache.dubbo.common.function.ThrowableAction,java.util.Optional)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$destroy__305:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.function.ThrowableAction:void execute(org.apache.dubbo.common.function.ThrowableAction)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void executeWithEvents(java.util.Optional,org.apache.dubbo.common.function.ThrowableAction,java.util.Optional)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void notifyTimeout(org.apache.dubbo.remoting.exchange.support.DefaultFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void lambda$run$0(org.apache.dubbo.remoting.exchange.support.DefaultFuture)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void received(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void closeChannel(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unreferServices$19(java.util.concurrent.CompletableFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_unreferServices_19__36:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unexportServices$16(java.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_unexportServices_16__34:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.FutureAdapter:boolean cancel(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unreferServices$19(java.util.concurrent.CompletableFuture)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unexportServices$16(java.util.concurrent.Future)",
            "org.apache.dubbo.rpc.protocol.dubbo.FutureAdapter:boolean cancel(boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void cancel()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyServer:void connected(org.apache.dubbo.remoting.Channel)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractServer:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyServer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)",
            "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void doNotify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void access$300(org.apache.dubbo.registry.consul.ConsulRegistry,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void access$600(org.apache.dubbo.registry.consul.ConsulRegistry,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void doNotify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry$CompatibleAbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.support.AbstractRegistry:void notify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void subscribeURLs(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry$DefaultMappingListener:void onEvent(org.apache.dubbo.metadata.MappingChangedEvent)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$SaveProperties:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void doSaveProperties(long)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveProperties(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.lang.String,boolean,boolean)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void lambda$storeProviderMetadata$0(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$lambda_storeProviderMetadata_0__672:void run()"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void lambda$storeConsumerMetadata$1(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$lambda_storeConsumerMetadata_1__673:void run()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap getInstance()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void unRegisterShutdownHook()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.qos.legacy.ShutdownTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.DubboShutdownHook:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.nativethrift.ThriftProtocol:java.lang.Runnable exportThreadedSelectorServer(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.timer.HashedWheelTimer:void start()",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.cache.support.expiring.ExpiringMap$ExpireThread:void startExpiring()",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache:void destroy(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ReferenceConfigCache:void destroy(org.apache.dubbo.config.ReferenceConfigBase)"
        ]
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache:void lambda$destroyAll$6(java.lang.String,org.apache.dubbo.config.ReferenceConfigBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ReferenceConfigCache$lambda_destroyAll_6__202:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache:void lambda$destroy$5(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ReferenceConfigCache$lambda_destroy_5__201:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.spring.ServiceBean:void exported()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void export()"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void register(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$doRegisterServiceInstance$21(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$register$0(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void lambda$doRegister$0(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void update(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$update$1(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void lambda$refreshMetadataAndInstance$6(org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void lambda$doUpdate$1(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void unregister(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unregisterServiceInstance$22(org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$unregister$2(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void lambda$unregister$2(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void initialize(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$initialize$3(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$createServiceDiscovery$0(org.apache.dubbo.registry.client.ServiceDiscovery,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$destroy$1()",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void destroy()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$destroy__49:void execute()",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$destroy__305:void execute()"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:void removeChildWatcherListener(java.lang.String,org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:void removeChildWatcherListener(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:java.util.List addChildWatcherListener(java.lang.String,org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:java.util.List addChildWatcherListener(java.lang.String,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher$reconnect__525:void run()",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher$reconnect__526:void run()"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void access$000(org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration:void addListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration:void recover()"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void access$100(org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration:void removeListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataUtils:void publishServiceDefinition(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$MetadataReportRetry$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$publishAll__671:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalDecoder:void decode(org.apache.mina.common.IoSession,org.apache.mina.common.ByteBuffer,org.apache.mina.filter.codec.ProtocolDecoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startConfigCenter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initialize()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void clearConfigs()",
            "org.apache.dubbo.rpc.model.ApplicationModel:void reset()",
            "org.apache.dubbo.common.extension.ExtensionLoader:void lambda$destroyAll$1(java.lang.Class,java.lang.Object)",
            "org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener$destroy__335:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void setApplication(org.apache.dubbo.config.ApplicationConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(org.apache.dubbo.config.ApplicationConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ApplicationConfig lambda$getApplication$27()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ApplicationConfig lambda$setApplication$3(org.apache.dubbo.config.context.ConfigManager,org.apache.dubbo.config.ApplicationConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void setMonitor(org.apache.dubbo.config.MonitorConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap monitor(org.apache.dubbo.config.MonitorConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.MonitorConfig lambda$getMonitor$28()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MonitorConfig lambda$setMonitor$5(org.apache.dubbo.config.context.ConfigManager,org.apache.dubbo.config.MonitorConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void setModule(org.apache.dubbo.config.ModuleConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap module(org.apache.dubbo.config.ModuleConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ModuleConfig lambda$getModule$30()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ModuleConfig lambda$setModule$4(org.apache.dubbo.config.context.ConfigManager,org.apache.dubbo.config.ModuleConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void setMetrics(org.apache.dubbo.config.MetricsConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap metrics(org.apache.dubbo.config.MetricsConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.MetricsConfig lambda$getMetrics$29()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MetricsConfig lambda$setMetrics$8(org.apache.dubbo.config.context.ConfigManager,org.apache.dubbo.config.MetricsConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void setSsl(org.apache.dubbo.config.SslConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap ssl(org.apache.dubbo.config.SslConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.SslConfig lambda$getSsl$31()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addConfig(org.apache.dubbo.config.AbstractConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractConfig:void addIntoConfigManager()",
            "org.apache.dubbo.config.context.ConfigManager:void addConfigCenter(org.apache.dubbo.config.ConfigCenterConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void addMetadataReport(org.apache.dubbo.config.MetadataReportConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void addProvider(org.apache.dubbo.config.ProviderConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void addConsumer(org.apache.dubbo.config.ConsumerConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void addProtocol(org.apache.dubbo.config.ProtocolConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void addRegistry(org.apache.dubbo.config.RegistryConfig)",
            "org.apache.dubbo.config.context.ConfigManager:void addService(org.apache.dubbo.config.ServiceConfigBase)",
            "org.apache.dubbo.config.context.ConfigManager:void addReference(org.apache.dubbo.config.ReferenceConfigBase)"
        ]
    },
    "org.apache.dubbo.common.config.Environment:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.model.ApplicationModel:void initFrameworkExts()",
            "org.apache.dubbo.common.extension.ExtensionLoader:void initExtension(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initialize()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfigBase:void checkDefault()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfigBase:void checkDefault()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfigBase:void convertProtocolIdsToProtocols()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfigBase:void checkProtocol()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void useRegistryAsConfigCenterIfNecessary()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startConfigCenter()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void useRegistryAsMetadataCenterIfNecessary()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startMetadataCenter()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void convertRegistryIdsToRegistries()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractInterfaceConfig:void checkRegistry()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$lambda_getConfigs_7__122:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "org.apache.dubbo.remoting.etcd.jetcd.RetryLoops:java.lang.Object invokeWithRetry(java.util.concurrent.Callable,org.apache.dubbo.remoting.etcd.RetryPolicy)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ConfigCenterConfig getConfigCenter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfigBase:void completeCompoundConfigs()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void setConfigCenter(org.apache.dubbo.config.ConfigCenterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.ServiceConfigBase:void completeCompoundConfigs()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startMetadataCenter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initialize()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MetadataReportConfig getMetadataReportConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void setMetadataReportConfig(org.apache.dubbo.config.MetadataReportConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void lambda$refreshAll$3()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager$lambda_refreshAll_3__118:void run()"
        ]
    },
    "org.apache.dubbo.config.metadata.ServiceInstancePortCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$createServiceInstance$23(org.apache.dubbo.registry.client.ServiceInstanceCustomizer)"
        ]
    },
    "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:java.util.List getRegistries()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter export()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void exportServices()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void referServices()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$loadRemoteConfigs$8(java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_loadRemoteConfigs_8__28:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfigBase:void lambda$convertProtocolIdsToProtocols$1(java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfigBase$lambda_convertProtocolIdsToProtocols_1__101:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$loadRemoteConfigs$5(java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_loadRemoteConfigs_5__27:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void lambda$convertRegistryIdsToRegistries$2(java.util.List,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractInterfaceConfig$lambda_convertRegistryIdsToRegistries_2__71:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ApplicationConfig getApplication()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isOnlyRegisterProvider()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:java.lang.String getMetadataType()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startMetadataCenter()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.common.config.configcenter.DynamicConfiguration prepareEnvironment(org.apache.dubbo.config.ConfigCenterConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void registerServiceInstance()"
        ]
    },
    "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.ApplicationConfig getApplicationConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter export()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void setApplication(org.apache.dubbo.config.ApplicationConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter export()",
            "org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationConfigBeanBuilder:void configureApplicationConfig(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:void configureApplicationConfig(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void completeCompoundConfigs(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:org.apache.dubbo.config.ApplicationConfig getApplicationOrElseThrow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ApplicationConfig getApplication()",
            "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.config.ApplicationConfig getApplicationConfig()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.MonitorConfig getMonitor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MonitorConfig getMonitor()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:org.apache.dubbo.common.URL loadMonitor(org.apache.dubbo.config.AbstractInterfaceConfig,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void completeCompoundConfigs(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void setMonitor(org.apache.dubbo.config.MonitorConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationConfigBeanBuilder:void configureMonitorConfig(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:void configureMonitorConfig(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void completeCompoundConfigs(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setMonitor(java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ModuleConfig getModule()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ModuleConfig getModule()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void completeCompoundConfigs(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void setModule(org.apache.dubbo.config.ModuleConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationConfigBeanBuilder:void configureModuleConfig(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:void configureModuleConfig(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void completeCompoundConfigs(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.MetricsConfig getMetrics()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MetricsConfig getMetrics()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void setMetrics(org.apache.dubbo.config.MetricsConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.SslConfig getSsl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.SslConfig getSslConfig()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.netty.handler.ssl.SslContext buildServerSslContext(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.ServerBuilder buildServerBuilder(org.apache.dubbo.common.URL,io.grpc.netty.NettyServerBuilder)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.netty.handler.ssl.SslContext buildClientSslContext(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.ManagedChannel buildManagedChannel(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.SslContexts:io.netty.handler.ssl.SslContext buildServerSslContext(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.SslHandlerInitializer$SslServerTlsHandler:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.transport.netty4.NettyServerHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.SslContexts:io.netty.handler.ssl.SslContext buildClientSslContext(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.SslHandlerInitializer$SslClientTlsHandler:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.transport.netty4.NettyClientHandler)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository:java.lang.String getRule(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_getConfig_2__225:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unregisterServiceInstance$22(org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_unregisterServiceInstance_22__39:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$unregister$2(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$lambda_unregister_2__303:void execute()"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void lambda$unregister$2(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery$lambda_unregister_2__643:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void register(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$doRegisterServiceInstance$21(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$register$0(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void recover()",
            "org.apache.dubbo.registry.nacos.NacosServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.sofa.SofaRegistryServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void lambda$doRegister$0(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)"
        ]
    },
    "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping$lambda_map_0__232:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration:java.lang.Boolean lambda$publishConfig$0(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration$lambda_publishConfig_0__427:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration:boolean doRemoveConfig(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Boolean lambda$removeConfig$1(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:java.util.List getInstances(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:java.util.List getInstances(java.lang.String)",
            "org.apache.dubbo.registry.client.ServiceDiscovery:void dispatchServiceInstancesChangedEvent(java.lang.String)",
            "org.apache.dubbo.registry.client.ServiceDiscovery:void dispatchServiceInstancesChangedEvent(java.lang.String,java.lang.String[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$subscribeURLs$3(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener,org.apache.dubbo.common.URL,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:long createLease(long,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:void createParentIfAbsent(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:void create(java.lang.String)",
            "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:long createEphemeral(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:void create(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void doRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void registerServiceWatcher(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:long createEphemeral(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void doRegister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void lambda$keepAlive$14(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper$lambda_keepAlive_14__513:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void lambda$new$1()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper$lambda_new_1__503:void run()"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry:void doUnregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedUnregisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void reExportUnregister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void unregister(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$unregisterServiceInstance$22(org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$unregister$2(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void lambda$unregister$2(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)"
        ]
    },
    "org.apache.dubbo.metadata.store.etcd.EtcdMetadataReport:void doRemoveMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void lambda$removeServiceMetadata$3(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void doRegister(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void register(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void update(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doRegister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void register(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doUnregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void unregister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.String getConfig(java.lang.String,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:java.lang.String getRule(java.lang.String,java.lang.String,long)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:java.lang.String getConfig(java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:java.lang.String getProperties(java.lang.String,java.lang.String,long)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getConfig$2(java.lang.String,java.lang.String,long,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.String getProperties(java.lang.String,java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:java.lang.String getProperties(java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getProperties$3(java.lang.String,java.lang.String,long,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object getInternalProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:org.apache.dubbo.rpc.cluster.support.migration.MigrationRule parse(java.lang.String)",
            "org.apache.dubbo.common.config.Configuration:java.lang.Object getProperty(java.lang.String,java.lang.Object)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getInternalProperty$4(java.lang.String,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.util.SortedSet getConfigKeys(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getConfigKeys$5(java.lang.String,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void lambda$getAndListen$1(org.apache.dubbo.common.config.configcenter.DynamicConfiguration,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Set)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery:void initialize(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$initialize$3(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$createServiceDiscovery$0(org.apache.dubbo.registry.client.ServiceDiscovery,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkUtils:org.apache.curator.framework.CuratorFramework buildCuratorFramework(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkUtils:org.apache.curator.RetryPolicy buildRetryPolicy(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkUtils:org.apache.curator.framework.CuratorFramework buildCuratorFramework(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceBeanBuilder:void postConfigureBean(org.springframework.core.'annotation'.AnnotationAttributes,org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:void configureBean(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void addListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:void addListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:void addListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void lambda$addListener$0(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)",
            "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void <init>()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void removeListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:void removeListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:void removeListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void lambda$removeListener$1(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)"
        ]
    },
    "org.apache.dubbo.config.RegistryConfig:void setAddress(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.RegistryBuilder:org.apache.dubbo.config.RegistryConfig build()",
            "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:org.springframework.beans.factory.support.RootBeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,java.lang.Class,boolean)",
            "org.apache.dubbo.config.RegistryConfig:void <init>(java.lang.String)",
            "org.apache.dubbo.config.RegistryConfig:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.event.AbstractEventDispatcher:void addEventListener(org.apache.dubbo.event.EventListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap addEventListener(org.apache.dubbo.event.EventListener)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void addServiceInstancesChangedListener(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener)",
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void initialize(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.event.Listenable$addEventListener__177:void accept(java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher$addEventListener__487:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.event.AbstractEventDispatcher:void removeEventListener(org.apache.dubbo.event.EventListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.event.Listenable$removeEventListener__178:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void lambda$keepAlive$13(java.util.function.Consumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper$lambda_keepAlive_13__512:void run()"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void lambda$keepAlive$12(java.util.function.Consumer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper$lambda_keepAlive_12__511:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:void processAllRestMethodMetadata(org.apache.dubbo.metadata.rest.ServiceRestMetadata,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:org.apache.dubbo.metadata.rest.ServiceRestMetadata resolve(java.lang.Class)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener:void onContextRefreshedEvent(org.springframework.context.event.ContextRefreshedEvent)"
        ]
    },
    "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener:void onContextClosedEvent(org.springframework.context.event.ContextClosedEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener:void onApplicationContextEvent(org.springframework.context.event.ApplicationContextEvent)"
        ]
    },
    "org.apache.dubbo.common.lang.ShutdownHookCallbacks$callback__211:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.function.ThrowableAction:void execute(org.apache.dubbo.common.function.ThrowableAction)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void executeWithEvents(java.util.Optional,org.apache.dubbo.common.function.ThrowableAction,java.util.Optional)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_unexportServices_15__33:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.metadata.MetadataServiceExporter unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void unexportMetadataService()"
        ]
    },
    "org.apache.dubbo.config.DubboShutdownHook:void destroyAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequest(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Request)"
        ]
    },
    "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void destroyAll()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyRegistries()"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:void destroy()",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ServerDelegate:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:void destroy()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository$lambda_null_2__457:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$ProxyProtocolServer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.http.HttpProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.hessian.HessianProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.webservice.WebServiceProtocol$1:void run()",
            "org.apache.dubbo.rpc.protocol.rest.RestProtocol:void destroy()",
            "org.apache.dubbo.xml.rpc.protocol.xmlrpc.XmlRpcProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol$close__409:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.http.HttpProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.hessian.HessianProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.webservice.WebServiceProtocol$1:void run()",
            "org.apache.dubbo.rpc.protocol.rest.RestProtocol:void destroy()",
            "org.apache.dubbo.xml.rpc.protocol.xmlrpc.XmlRpcProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol$close__409:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$ProxyProtocolServer:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer:void close()",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$ThriftProtocolServer:void close()",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void leave(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void leave(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ServerDelegate:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$ProxyProtocolServer:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void leave(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void leave(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void leave(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void leave(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void leave(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void leave(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.FileGroup:void leave(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void leave(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void destroy()",
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void disconnect(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void disconnect(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:void destroy()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void disconnect(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void disconnect(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)"
        ]
    },
    "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractClient:void reconnect()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void close()"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractServer:void close()"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractServer:void close()"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry$lambda_destroy_1__263:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.function.ThrowableAction:void execute(org.apache.dubbo.common.function.ThrowableAction)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void executeWithEvents(java.util.Optional,org.apache.dubbo.common.function.ThrowableAction,java.util.Optional)"
        ]
    },
    "org.apache.dubbo.common.function.ThrowableAction:void execute(org.apache.dubbo.common.function.ThrowableAction)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$destroyServiceDiscoveries$25(org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.common.lang.ShutdownHookCallbacks:void lambda$callback$0(org.apache.dubbo.common.lang.ShutdownHookCallback)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:org.apache.dubbo.registry.client.ServiceDiscovery createServiceDiscovery(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void destroy()",
            "org.apache.dubbo.metadata.rest.ClassPathServiceRestMetadataReader:java.util.List read()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void lambda$run$0(org.apache.dubbo.remoting.exchange.support.DefaultFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask$lambda_run_0__390:void run()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_unreferServices_19__36:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_unexportServices_16__34:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyServer:void connected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelConnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelActive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionOpened(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleConnect(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void connected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyServer:void disconnected(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void channelInactive(io.netty.channel.ChannelHandlerContext)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void sessionClosed(org.apache.mina.common.IoSession)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:org.glassfish.grizzly.filterchain.NextAction handleClose(org.glassfish.grizzly.filterchain.FilterChainContext)",
            "com.alibaba.dubbo.remoting.Transporter$1:void disconnected(com.alibaba.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractChannelHandlerDelegate:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.ChannelHandlerDispatcher:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelEventRunnable:void run()",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty.NettyHandler:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServerHandler:void exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.mina.MinaHandler:void exceptionCaught(org.apache.mina.common.IoSession,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyHandler:void exceptionOccurred(org.glassfish.grizzly.filterchain.FilterChainContext,java.lang.Throwable)",
            "com.alibaba.dubbo.remoting.Transporter$1:void caught(com.alibaba.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL,boolean,boolean)",
            "com.alibaba.dubbo.registry.support.AbstractRegistry$CompatibleAbstractRegistry:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(java.util.List)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void registered(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void unregistered(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void subscribed(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void access$200(org.apache.dubbo.registry.zookeeper.ZookeeperRegistry,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.redis.RedisRegistry:void doNotify(java.util.Collection,org.apache.dubbo.common.URL,java.util.Collection)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void lambda$null$5(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.lang.String,java.util.List)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void notifySubscriber(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Collection)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void access$300(org.apache.dubbo.registry.consul.ConsulRegistry,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.consul.ConsulRegistry$ConsulNotifier:void processService()"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void access$600(org.apache.dubbo.registry.consul.ConsulRegistry,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.consul.ConsulRegistry$ConsulNotifier:void processServices()"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void doNotify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void doNotify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry:void notify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry$DefaultMappingListener:void onEvent(org.apache.dubbo.metadata.MappingChangedEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReport$1:void childChanged(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$lambda_storeProviderMetadata_0__672:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$lambda_storeConsumerMetadata_1__673:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap getInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()",
            "org.apache.dubbo.config.ServiceConfig:void export()",
            "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener:void <init>()",
            "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener:void <init>(org.springframework.context.ApplicationContext)",
            "org.apache.dubbo.qos.command.impl.Ready:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.rpc.protocol.nativethrift.ThriftProtocol:java.lang.Runnable exportThreadedSelectorServer(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.nativethrift.ThriftProtocol:java.lang.Runnable doExport(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.timer.HashedWheelTimer:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer:org.apache.dubbo.common.timer.Timeout newTimeout(org.apache.dubbo.common.timer.TimerTask,long,java.util.concurrent.TimeUnit)"
        ]
    },
    "org.apache.dubbo.cache.support.expiring.ExpiringMap$ExpireThread:void startExpiring()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.cache.support.expiring.ExpiringMap$ExpireThread:void startExpiryIfNotStarted()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeNetworker:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.MulticastNetworker:org.apache.dubbo.remoting.p2p.Group lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache:void destroy(org.apache.dubbo.config.ReferenceConfigBase)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache$lambda_destroyAll_6__202:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$null$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.config.utils.ReferenceConfigCache$lambda_destroy_5__201:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$null$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$doRegisterServiceInstance$21(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_doRegisterServiceInstance_21__38:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$register$0(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$lambda_register_0__301:void execute()"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void lambda$doRegister$0(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery$lambda_doRegister_0__641:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$update$1(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$lambda_update_1__302:void execute()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void lambda$refreshMetadataAndInstance$6(org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils$lambda_refreshMetadataAndInstance_6__174:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void lambda$doUpdate$1(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery$lambda_doUpdate_1__642:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$initialize$3(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$lambda_initialize_3__304:void execute()"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$createServiceDiscovery$0(org.apache.dubbo.registry.client.ServiceDiscovery,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry$lambda_createServiceDiscovery_0__262:void execute()"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void initialize(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$initialize$3(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$createServiceDiscovery$0(org.apache.dubbo.registry.client.ServiceDiscovery,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:void removeChildWatcherListener(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:void removeChildListener(java.lang.String,org.apache.dubbo.remoting.etcd.ChildListener)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:java.util.List addChildWatcherListener(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:java.util.List addChildListener(java.lang.String,org.apache.dubbo.remoting.etcd.ChildListener)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher$reconnect__525:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher$reconnect__526:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration:void addListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:void addListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:void addListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void lambda$addListener$0(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)",
            "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void <init>()"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration:void recover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration:void lambda$new$0(int)"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration:void removeListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:void removeListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:void removeListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void lambda$removeListener$1(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrls()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()",
            "org.apache.dubbo.config.ServiceConfig:void export()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void init()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void clearConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void clear()"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:void reset()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:void lambda$destroyAll$1(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.extension.ExtensionLoader$lambda_destroyAll_1__81:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.spring.context.DubboLifecycleComponentApplicationListener$destroy__335:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(org.apache.dubbo.config.ApplicationConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ApplicationConfig lambda$getApplication$27()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_getApplication_27__44:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ApplicationConfig lambda$setApplication$3(org.apache.dubbo.config.context.ConfigManager,org.apache.dubbo.config.ApplicationConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractInterfaceConfig$lambda_setApplication_3__72:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap monitor(org.apache.dubbo.config.MonitorConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.MonitorConfig lambda$getMonitor$28()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_getMonitor_28__45:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MonitorConfig lambda$setMonitor$5(org.apache.dubbo.config.context.ConfigManager,org.apache.dubbo.config.MonitorConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractInterfaceConfig$lambda_setMonitor_5__74:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap module(org.apache.dubbo.config.ModuleConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ModuleConfig lambda$getModule$30()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_getModule_30__47:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ModuleConfig lambda$setModule$4(org.apache.dubbo.config.context.ConfigManager,org.apache.dubbo.config.ModuleConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractInterfaceConfig$lambda_setModule_4__73:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap metrics(org.apache.dubbo.config.MetricsConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.MetricsConfig lambda$getMetrics$29()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_getMetrics_29__46:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MetricsConfig lambda$setMetrics$8(org.apache.dubbo.config.context.ConfigManager,org.apache.dubbo.config.MetricsConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.AbstractInterfaceConfig$lambda_setMetrics_8__77:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap ssl(org.apache.dubbo.config.SslConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.SslConfig lambda$getSsl$31()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_getSsl_31__48:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.config.AbstractConfig:void addIntoConfigManager()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.config.DubboConfigEarlyInitializationPostProcessor:void processBeforeInitialization(org.apache.dubbo.config.AbstractConfig,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addConfigCenter(org.apache.dubbo.config.ConfigCenterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startConfigCenter()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setConfigCenter(org.apache.dubbo.config.ConfigCenterConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$addConfigCenter__21:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$addConfigCenter__108:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addMetadataReport(org.apache.dubbo.config.MetadataReportConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap metadataReport(org.apache.dubbo.config.MetadataReportConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setMetadataReportConfig(org.apache.dubbo.config.MetadataReportConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$addMetadataReport__25:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$addMetadataReport__109:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addProvider(org.apache.dubbo.config.ProviderConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ProviderConfig lambda$checkGlobalConfigs$1()",
            "org.apache.dubbo.config.ServiceConfigBase:void setProvider(org.apache.dubbo.config.ProviderConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$addProvider__15:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$addProvider__110:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addConsumer(org.apache.dubbo.config.ConsumerConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ConsumerConfig lambda$checkGlobalConfigs$2()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$addConsumer__16:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$addConsumer__111:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addProtocol(org.apache.dubbo.config.ProtocolConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfigBase:void convertProtocolIdsToProtocols()",
            "org.apache.dubbo.config.context.ConfigManager$addProtocol__112:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addRegistry(org.apache.dubbo.config.RegistryConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(org.apache.dubbo.config.RegistryConfig)",
            "org.apache.dubbo.config.context.ConfigManager$addRegistry__113:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addService(org.apache.dubbo.config.ServiceConfigBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(org.apache.dubbo.config.ServiceConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$addService__13:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$addService__114:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:void addReference(org.apache.dubbo.config.ReferenceConfigBase)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(org.apache.dubbo.config.ReferenceConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$addReference__14:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$addReference__115:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:void initFrameworkExts()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initialize()"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:void initExtension(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object createExtension(java.lang.String,boolean)"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:void checkAndUpdateSubConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfigBase:void checkProtocol()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void checkRegistry()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfigBase:void completeCompoundConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder:void build(org.apache.dubbo.config.AbstractReferenceConfig)",
            "org.apache.dubbo.config.bootstrap.builders.AbstractServiceBuilder:void build(org.apache.dubbo.config.AbstractServiceConfig)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$lambda_refreshAll_3__118:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$createServiceInstance$23(org.apache.dubbo.registry.client.ServiceInstanceCustomizer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_createServiceInstance_23__40:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_loadRemoteConfigs_8__28:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfigBase$lambda_convertProtocolIdsToProtocols_1__101:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_loadRemoteConfigs_5__27:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig$lambda_convertRegistryIdsToRegistries_2__71:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isOnlyRegisterProvider()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:java.lang.String getMetadataType()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.registry.client.ServiceInstance createServiceInstance(java.lang.String,java.lang.String,int)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.common.config.configcenter.DynamicConfiguration prepareEnvironment(org.apache.dubbo.config.ConfigCenterConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startConfigCenter()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void registerServiceInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationConfigBeanBuilder:void configureApplicationConfig(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationConfigBeanBuilder:void configureBean(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:void configureApplicationConfig(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:void configureBean(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void completeCompoundConfigs(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void checkAndUpdateSubConfigs()",
            "org.apache.dubbo.config.ServiceConfigBase:void completeCompoundConfigs()"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ApplicationConfig getApplication()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void lambda$exported$0(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:java.util.List loadRegistries(org.apache.dubbo.config.AbstractInterfaceConfig,boolean)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:org.apache.dubbo.common.URL loadMonitor(org.apache.dubbo.config.AbstractInterfaceConfig,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void completeCompoundConfigs(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.config.ApplicationConfig getApplicationConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.model.ApplicationModel:java.lang.String getName()",
            "org.apache.dubbo.metadata.report.MetadataReportInstance:void init(org.apache.dubbo.config.MetadataReportConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:org.apache.dubbo.common.URL loadMonitor(org.apache.dubbo.config.AbstractInterfaceConfig,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationConfigBeanBuilder:void configureMonitorConfig(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationConfigBeanBuilder:void configureBean(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:void configureMonitorConfig(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:void configureBean(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void setMonitor(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationConfigBeanBuilder:void configureModuleConfig(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationConfigBeanBuilder:void configureBean(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:void configureModuleConfig(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:void configureBean(org.apache.dubbo.config.AbstractInterfaceConfig)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.ServerBuilder buildServerBuilder(org.apache.dubbo.common.URL,io.grpc.netty.NettyServerBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:org.apache.dubbo.rpc.ProtocolServer lambda$doExport$0(org.apache.dubbo.common.URL,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.ManagedChannel buildManagedChannel(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:io.grpc.ManagedChannel initChannel(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.SslHandlerInitializer$SslServerTlsHandler:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.transport.netty4.NettyServerHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.SslHandlerInitializer:io.netty.channel.ChannelInboundHandler sslServerHandler(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.transport.netty4.NettyServerHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.SslHandlerInitializer$SslClientTlsHandler:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.transport.netty4.NettyClientHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.SslHandlerInitializer:io.netty.channel.ChannelInboundHandler sslClientHandler(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.transport.netty4.NettyClientHandler)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_unregisterServiceInstance_22__39:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$lambda_unregister_2__303:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.function.ThrowableAction:void execute(org.apache.dubbo.common.function.ThrowableAction)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void executeWithEvents(java.util.Optional,org.apache.dubbo.common.function.ThrowableAction,java.util.Optional)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery$lambda_unregister_2__643:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void update(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void recover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void lambda$initialize$0(int)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void update(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.registry.sofa.SofaRegistryServiceDiscovery:void doUpdate(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void update(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration$lambda_publishConfig_0__427:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "org.apache.dubbo.remoting.etcd.jetcd.RetryLoops:java.lang.Object invokeWithRetry(java.util.concurrent.Callable,org.apache.dubbo.remoting.etcd.RetryPolicy)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Boolean lambda$removeConfig$1(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration$lambda_removeConfig_1__424:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:java.util.List getInstances(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:java.util.List getInstances(java.lang.String)",
            "org.apache.dubbo.registry.client.ServiceDiscovery:void dispatchServiceInstancesChangedEvent(java.lang.String)",
            "org.apache.dubbo.registry.client.ServiceDiscovery:void dispatchServiceInstancesChangedEvent(java.lang.String,java.lang.String[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$subscribeURLs$3(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener,org.apache.dubbo.common.URL,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscovery:void dispatchServiceInstancesChangedEvent(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.client.ServiceDiscovery:void dispatchServiceInstancesChangedEvent(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$subscribeURLs$3(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener,org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry$lambda_subscribeURLs_3__265:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry:void doRegister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedRegisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void reExportRegister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void registerServiceWatcher(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void onEvent(org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent)",
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void lambda$addServiceInstancesChangedListener$1(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper$lambda_keepAlive_14__513:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper$lambda_new_1__503:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.retry.FailedUnregisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void unregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Offline:boolean offline(java.lang.String)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void unregister(com.alibaba.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void reExportUnregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void doReExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void lambda$removeServiceMetadata$3(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$lambda_removeServiceMetadata_3__675:void run()"
        ]
    },
    "org.apache.dubbo.registry.client.AbstractServiceDiscovery:void update(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$update$1(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void lambda$refreshMetadataAndInstance$6(org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void lambda$doUpdate$1(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void register(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Online:boolean online(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void unregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Offline:boolean offline(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:java.lang.String getProperties(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getProperties$3(java.lang.String,java.lang.String,long,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_getProperties_3__226:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:org.apache.dubbo.rpc.cluster.support.migration.MigrationRule parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:org.apache.dubbo.rpc.cluster.support.migration.MigrationRule queryRule()",
            "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:void doMigrate(java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.Configuration:java.lang.Object getProperty(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getInternalProperty$4(java.lang.String,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_getInternalProperty_4__227:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object lambda$getConfigKeys$5(java.lang.String,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_getConfigKeys_5__228:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void lambda$getAndListen$1(org.apache.dubbo.common.config.configcenter.DynamicConfiguration,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping$lambda_getAndListen_1__233:void run()"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:void configureBean(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:org.apache.dubbo.config.AbstractInterfaceConfig build()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:void addListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository:void addListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:void addListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void lambda$addListener$0(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_addListener_0__223:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:void removeListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository:void removeListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:void removeListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void lambda$removeListener$1(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_removeListener_1__224:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.RegistryBuilder:org.apache.dubbo.config.RegistryConfig build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.builders.RegistryBuilder:org.apache.dubbo.config.AbstractConfig build()"
        ]
    },
    "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:org.springframework.beans.factory.support.RootBeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,java.lang.Class,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:void parseNested(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,java.lang.Class,boolean,java.lang.String,java.lang.String,java.lang.String,org.springframework.beans.factory.config.BeanDefinition)",
            "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:void parseMethods(java.lang.String,org.w3c.dom.NodeList,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.xml.ParserContext)",
            "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:void parseArguments(java.lang.String,org.w3c.dom.NodeList,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.xml.ParserContext)",
            "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)"
        ]
    },
    "org.apache.dubbo.config.RegistryConfig:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.dubbo.config.RegistryConfig:void <init>(java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.RegistryConfig:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.dubbo.config.RegistryConfig:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap addEventListener(org.apache.dubbo.event.EventListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initEventListener()"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void initialize(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$initialize$3(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$createServiceDiscovery$0(org.apache.dubbo.registry.client.ServiceDiscovery,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.event.Listenable$addEventListener__177:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.event.AbstractEventDispatcher$addEventListener__487:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.event.Listenable$removeEventListener__178:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper$lambda_keepAlive_13__512:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper$lambda_keepAlive_12__511:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:org.apache.dubbo.metadata.rest.ServiceRestMetadata resolve(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener:void onContextRefreshedEvent(org.springframework.context.event.ContextRefreshedEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener:void onApplicationContextEvent(org.springframework.context.event.ApplicationContextEvent)"
        ]
    },
    "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener:void onApplicationContextEvent(org.springframework.context.event.ApplicationContextEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void unexportMetadataService()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequest(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyRegistries()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:void destroy()",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.webservice.WebServiceProtocol$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol$close__409:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$ThriftProtocolServer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.http.HttpProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.hessian.HessianProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.webservice.WebServiceProtocol$1:void run()",
            "org.apache.dubbo.rpc.protocol.rest.RestProtocol:void destroy()",
            "org.apache.dubbo.xml.rpc.protocol.xmlrpc.XmlRpcProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol$close__409:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$ProxyProtocolServer:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer:void close()",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$ThriftProtocolServer:void close()",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void leave(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void leave(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void leave(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void close()",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void leave()",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void leave()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void leave(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void close()",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void leave()",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void leave()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.FileGroup:void leave(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void close()",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void leave()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void leave(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void close()",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void leave()"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$destroy$1()",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void destroy()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$destroy__49:void execute()",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$destroy__305:void execute()"
        ]
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void disconnect(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void disconnect(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void disconnect(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void close()",
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void receive(java.lang.String,java.net.InetSocketAddress)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void disconnect(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void close()",
            "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void receive(java.lang.String,java.net.InetSocketAddress)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void run(org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.timer.HashedWheelTimer$HashedWheelTimeout:void expire()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close(int)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:void destroy()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void disconnect(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void disconnect(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void closeReferenceCountExchangeClient(org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close(int)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.FilterNode:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void close(int)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void close(int)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void disconnect(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void disconnect(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$destroyServiceDiscoveries$25(org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_destroyServiceDiscoveries_25__42:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.lang.ShutdownHookCallbacks:void lambda$callback$0(org.apache.dubbo.common.lang.ShutdownHookCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.lang.ShutdownHookCallbacks$lambda_callback_0__210:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:org.apache.dubbo.registry.client.ServiceDiscovery createServiceDiscovery(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.metadata.rest.ClassPathServiceRestMetadataReader:java.util.List read()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask$lambda_run_0__390:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.RegistryService)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)",
            "org.apache.dubbo.registry.redis.RedisRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.etcd.EtcdTransporter)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)",
            "org.apache.dubbo.registry.sofa.SofaRegistry:void <init>(org.apache.dubbo.common.URL)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void <init>(org.apache.dubbo.common.URL,com.alibaba.dubbo.registry.support.FailbackRegistry)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry$CompatibleAbstractRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.dubbo.registry.support.AbstractRegistry:void <init>(com.alibaba.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.support.AbstractRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void lambda$null$2(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.lang.String,java.util.List)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void lambda$null$2(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.lang.String,java.util.List)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void subscribe(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void registered(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void receive(java.lang.String,java.net.InetSocketAddress)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void register(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void unregistered(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void receive(java.lang.String,java.net.InetSocketAddress)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void unregister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void subscribed(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void access$200(org.apache.dubbo.registry.zookeeper.ZookeeperRegistry,org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$RegistryChildListenerImpl:void childChanged(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistry:void doNotify(java.util.Collection,org.apache.dubbo.common.URL,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.redis.RedisRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.redis.RedisRegistry:void doNotify(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry:void lambda$null$5(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdRegistry$lambda_null_5__604:void childChanged(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void notifySubscriber(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$subscribeEventListener$10(org.apache.dubbo.common.URL,java.lang.String,org.apache.dubbo.registry.NotifyListener,com.alibaba.nacos.api.naming.listener.Event)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$doSubscribe$3(org.apache.dubbo.common.URL,java.util.Set,org.apache.dubbo.registry.NotifyListener,org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(java.util.List)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void notify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry$ConsulNotifier:void processService()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.consul.ConsulRegistry$ConsulNotifier:void run()"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry$ConsulNotifier:void processServices()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.consul.ConsulRegistry$ConsulNotifier:void run()"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void doNotify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.metadata.store.zookeeper.ZookeeperMetadataReport$1:void childChanged(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl:void process(org.apache.zookeeper.WatchedEvent)"
        ]
    },
    "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.context.DubboBootstrapApplicationListener:void <init>(org.springframework.context.ApplicationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.context.DubboApplicationListenerRegistrar:org.springframework.context.ApplicationListener createDubboBootstrapApplicationListener(org.springframework.context.ConfigurableApplicationContext)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Ready:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.nativethrift.ThriftProtocol:java.lang.Runnable doExport(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.common.timer.HashedWheelTimer:org.apache.dubbo.common.timer.Timeout newTimeout(org.apache.dubbo.common.timer.TimerTask,long,java.util.concurrent.TimeUnit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void rePut(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:void addFailed(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void timeoutCheck(org.apache.dubbo.remoting.exchange.support.DefaultFuture)",
            "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void reput(org.apache.dubbo.common.timer.Timeout,java.lang.Long)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void startHeartBeatTask(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void startReconnectTask(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void startIdleCheckTask(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void reput(org.apache.dubbo.common.timer.Timeout,long)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedRegistered(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedUnregistered(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedSubscribed(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedUnsubscribed(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.cache.support.expiring.ExpiringMap$ExpireThread:void startExpiryIfNotStarted()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.cache.support.expiring.ExpiringCache:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeNetworker:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.MulticastNetworker:org.apache.dubbo.remoting.p2p.Group lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Group lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_doRegisterServiceInstance_21__38:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$lambda_register_0__301:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.function.ThrowableAction:void execute(org.apache.dubbo.common.function.ThrowableAction)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void executeWithEvents(java.util.Optional,org.apache.dubbo.common.function.ThrowableAction,java.util.Optional)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery$lambda_doRegister_0__641:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$lambda_update_1__302:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.function.ThrowableAction:void execute(org.apache.dubbo.common.function.ThrowableAction)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void executeWithEvents(java.util.Optional,org.apache.dubbo.common.function.ThrowableAction,java.util.Optional)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils$lambda_refreshMetadataAndInstance_6__174:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery$lambda_doUpdate_1__642:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery$lambda_initialize_3__304:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.function.ThrowableAction:void execute(org.apache.dubbo.common.function.ThrowableAction)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void executeWithEvents(java.util.Optional,org.apache.dubbo.common.function.ThrowableAction,java.util.Optional)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry$lambda_createServiceDiscovery_0__262:void execute()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.function.ThrowableAction:void execute(org.apache.dubbo.common.function.ThrowableAction)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void executeWithEvents(java.util.Optional,org.apache.dubbo.common.function.ThrowableAction,java.util.Optional)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:void removeChildListener(java.lang.String,org.apache.dubbo.remoting.etcd.ChildListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:java.util.List addChildListener(java.lang.String,org.apache.dubbo.remoting.etcd.ChildListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void registerServiceWatcher(java.lang.String)"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration:void lambda$new$0(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$lambda_new_0__662:void stateChanged(int)"
        ]
    },
    "org.apache.dubbo.registry.ListenerRegistryWrapper:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.integration.DynamicDirectory:void subscribe(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)",
            "org.apache.dubbo.registry.dubbo.DubboRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.support.AbstractRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void doExportUrls()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExport()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void init()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void clear()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader$lambda_destroyAll_1__81:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$null$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_getApplication_27__44:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig$lambda_setApplication_3__72:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_getMonitor_28__45:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig$lambda_setMonitor_5__74:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_getModule_30__47:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig$lambda_setModule_4__73:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_getMetrics_29__46:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig$lambda_setMetrics_8__77:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_getSsl_31__48:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.config.DubboConfigEarlyInitializationPostProcessor:void processBeforeInitialization(org.apache.dubbo.config.AbstractConfig,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$addConfigCenter__21:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$addConfigCenter__108:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap metadataReport(org.apache.dubbo.config.MetadataReportConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$addMetadataReport__25:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$addMetadataReport__109:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ProviderConfig lambda$checkGlobalConfigs$1()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_checkGlobalConfigs_1__18:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfigBase:void setProvider(org.apache.dubbo.config.ProviderConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.ServiceBuilder:org.apache.dubbo.config.ServiceConfig build()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$addProvider__15:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$addProvider__110:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ConsumerConfig lambda$checkGlobalConfigs$2()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_checkGlobalConfigs_2__17:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$addConsumer__16:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$addConsumer__111:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$addProtocol__112:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(org.apache.dubbo.config.RegistryConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$registry__12:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$addRegistry__113:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(org.apache.dubbo.config.ServiceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$addService__13:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$addService__114:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(org.apache.dubbo.config.ReferenceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$addReference__14:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$addReference__115:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object createExtension(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object getExtension(java.lang.String,boolean)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder:void build(org.apache.dubbo.config.AbstractReferenceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder:void build(org.apache.dubbo.config.AbstractMethodConfig)",
            "org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder:void build(org.apache.dubbo.config.AbstractConfig)",
            "org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder:org.apache.dubbo.config.ConsumerConfig build()",
            "org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder:org.apache.dubbo.config.ReferenceConfig build()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractServiceBuilder:void build(org.apache.dubbo.config.AbstractServiceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractServiceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.bootstrap.builders.AbstractServiceBuilder:void build(org.apache.dubbo.config.AbstractMethodConfig)",
            "org.apache.dubbo.config.bootstrap.builders.AbstractServiceBuilder:void build(org.apache.dubbo.config.AbstractConfig)",
            "org.apache.dubbo.config.bootstrap.builders.ProviderBuilder:org.apache.dubbo.config.ProviderConfig build()",
            "org.apache.dubbo.config.bootstrap.builders.ServiceBuilder:org.apache.dubbo.config.ServiceConfig build()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_createServiceInstance_23__40:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.registry.client.ServiceInstance createServiceInstance(java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void registerServiceInstance()"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.AbstractAnnotationConfigBeanBuilder:void configureBean(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:java.util.List loadRegistries(org.apache.dubbo.config.AbstractInterfaceConfig,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrls()",
            "org.apache.dubbo.qos.command.impl.Ready:java.util.Map isServiceReady(java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:java.lang.String getName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:void <clinit>()",
            "org.apache.dubbo.rpc.model.ApplicationModel:java.lang.String getApplication()",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void refreshMetadataAndInstance()",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:org.apache.dubbo.metadata.MetadataInfo lambda$exportURL$0(java.lang.String)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.report.MetadataReportInstance:void init(org.apache.dubbo.config.MetadataReportConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startMetadataCenter()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:org.apache.dubbo.rpc.ProtocolServer lambda$doExport$0(org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol$lambda_doExport_0__407:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:io.grpc.ManagedChannel initChannel(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel getSharedChannel(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.SslHandlerInitializer:io.netty.channel.ChannelInboundHandler sslServerHandler(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.transport.netty4.NettyServerHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyServer$1:void initChannel(io.netty.channel.socket.SocketChannel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.SslHandlerInitializer:io.netty.channel.ChannelInboundHandler sslClientHandler(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.transport.netty4.NettyClientHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyClient$1:void initChannel(io.netty.channel.socket.SocketChannel)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void lambda$initialize$0(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery$lambda_initialize_0__606:void stateChanged(int)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration$lambda_removeConfig_1__424:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "org.apache.dubbo.remoting.etcd.jetcd.RetryLoops:java.lang.Object invokeWithRetry(java.util.concurrent.Callable,org.apache.dubbo.remoting.etcd.RetryPolicy)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry$lambda_subscribeURLs_3__265:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.retry.FailedRegisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void register(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Online:boolean online(java.lang.String)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void register(com.alibaba.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void reExportRegister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void doReExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void onEvent(org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void onEvent(org.apache.dubbo.event.Event)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void lambda$addServiceInstancesChangedListener$1(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery$lambda_addServiceInstancesChangedListener_1__607:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.ListenerRegistryWrapper:void unregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Offline:boolean offline(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.Registry:void reExportUnregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void reRefer(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.rpc.listener.ListenerExporterWrapper:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$DestroyableExporter:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "com.alibaba.dubbo.rpc.Exporter$CompatibleExporter:void unexport()"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.support.FailbackRegistry:void destroy()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedUnregisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void reExportUnregister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void unregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Offline:boolean offline(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void unregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Offline:boolean offline(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Offline:boolean offline(java.lang.String)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Offline:boolean offline(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.Offline:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void unregister(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void doReExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void lambda$reExport$3(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReport$lambda_removeServiceMetadata_3__675:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.ListenerRegistryWrapper:void register(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Online:boolean online(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.Registry:void reExportRegister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:void doRegister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedRegisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void reExportRegister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Online:boolean online(java.lang.String)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Online:boolean online(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.Online:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.registry.ListenerRegistryWrapper:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.integration.DynamicDirectory:void unSubscribe(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void unSubscribe(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_getProperties_3__226:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:org.apache.dubbo.rpc.cluster.support.migration.MigrationRule queryRule()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:java.util.List list(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:void doMigrate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void onRefer(org.apache.dubbo.registry.integration.RegistryProtocol,org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void lambda$process$0(org.apache.dubbo.registry.client.migration.MigrationRuleHandler)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_getInternalProperty_4__227:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_getConfigKeys_5__228:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping$lambda_getAndListen_1__233:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:org.apache.dubbo.config.AbstractInterfaceConfig build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:org.apache.dubbo.config.spring.ReferenceBean buildReferenceBeanIfAbsent(java.lang.String,org.springframework.core.'annotation'.AnnotationAttributes,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository:void addListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_addListener_0__223:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.governance.GovernanceRuleRepository:void removeListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration$lambda_removeListener_1__224:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.RegistryBuilder:org.apache.dubbo.config.AbstractConfig build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:void parseNested(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,java.lang.Class,boolean,java.lang.String,java.lang.String,java.lang.String,org.springframework.beans.factory.config.BeanDefinition)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:org.springframework.beans.factory.support.RootBeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,java.lang.Class,boolean)"
        ]
    },
    "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:void parseMethods(java.lang.String,org.w3c.dom.NodeList,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.xml.ParserContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:org.springframework.beans.factory.support.RootBeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,java.lang.Class,boolean)"
        ]
    },
    "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:void parseArguments(java.lang.String,org.w3c.dom.NodeList,org.springframework.beans.factory.support.RootBeanDefinition,org.springframework.beans.factory.xml.ParserContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:org.springframework.beans.factory.support.RootBeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext,java.lang.Class,boolean)"
        ]
    },
    "org.apache.dubbo.config.spring.schema.DubboBeanDefinitionParser:org.springframework.beans.factory.config.BeanDefinition parse(org.w3c.dom.Element,org.springframework.beans.factory.xml.ParserContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.config.RegistryConfig:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.config.RegistryConfig:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initEventListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initialize()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.codec.TransportCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalEncoder:void encode(org.apache.mina.common.IoSession,java.lang.Object,org.apache.mina.filter.codec.ProtocolEncoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleWrite(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void close()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void leave()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void close()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.ServerPeer:void leave()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void close()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.FileGroup:void close()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void receive(java.lang.String,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void access$100(org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup,java.lang.String,java.net.InetSocketAddress)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void receive(java.lang.String,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void access$100(org.apache.dubbo.remoting.p2p.support.MulticastGroup,java.lang.String,java.net.InetSocketAddress)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.FilterNode:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close(int)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close(int)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void closeReferenceCountExchangeClient(org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void close(int)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:void destroy()",
            "org.apache.dubbo.remoting.exchange.support.header.CloseTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void close()",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.telnet.support.command.ExitTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()",
            "org.apache.dubbo.remoting.transport.AbstractServer:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close()",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close()",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doClose()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void disconnect(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void disconnect(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void init()"
        ]
    },
    "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.FilterNode:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.FilterNode:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroy()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyInterfaceInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.FilterNode:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.FilterNode:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.FilterNode:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.FilterNode:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.FilterNode:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object decodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,java.lang.Class[],int,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void discordAddresses()"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void refreshInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void discordAddresses()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.FilterNode:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reconnect()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.mina.MinaClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void close(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void close(int)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void close(int)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_destroyServiceDiscoveries_25__42:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.common.lang.ShutdownHookCallbacks$lambda_callback_0__210:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:org.apache.dubbo.registry.client.ServiceDiscoveryRegistry create(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.RegistryService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dubbo.DubboRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.zookeeper.ZookeeperTransporter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.redis.RedisRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.consul.ConsulRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.etcd.EtcdTransporter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.sofa.SofaRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.sofa.SofaRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void <init>(org.apache.dubbo.common.URL,com.alibaba.dubbo.registry.support.FailbackRegistry)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void <init>(com.alibaba.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry:void <init>(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:java.util.List lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "com.alibaba.dubbo.registry.support.AbstractRegistry:java.util.List getCacheUrls(com.alibaba.dubbo.common.URL)",
            "com.alibaba.dubbo.registry.support.AbstractRegistry:java.util.List lookup(com.alibaba.dubbo.common.URL)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:java.util.List lookup(com.alibaba.dubbo.common.URL)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:java.util.List lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistry:void recover()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.support.AbstractRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void lambda$null$2(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$lambda_null_2__557:void childChanged(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.support.AbstractRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry:void lambda$null$2(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdRegistry$lambda_null_2__605:void childChanged(java.lang.String,java.util.List)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void subscribe(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void receive(java.lang.String,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void access$100(org.apache.dubbo.registry.multicast.MulticastRegistry,java.lang.String,java.net.InetSocketAddress)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void register(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Online:boolean online(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$RegistryChildListenerImpl:void childChanged(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl:void process(org.apache.zookeeper.WatchedEvent)"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistry:void doNotify(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.redis.RedisRegistry:void access$200(org.apache.dubbo.registry.redis.RedisRegistry,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry$lambda_null_5__604:void childChanged(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void lambda$onNext$0()"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$subscribeEventListener$10(org.apache.dubbo.common.URL,java.lang.String,org.apache.dubbo.registry.NotifyListener,com.alibaba.nacos.api.naming.listener.Event)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$doSubscribe$3(org.apache.dubbo.common.URL,java.util.Set,org.apache.dubbo.registry.NotifyListener,org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_doSubscribe_3__617:void callback(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void notify(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry$ConsulNotifier:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl:void process(org.apache.zookeeper.WatchedEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.context.DubboApplicationListenerRegistrar:org.springframework.context.ApplicationListener createDubboBootstrapApplicationListener(org.springframework.context.ConfigurableApplicationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.context.DubboApplicationListenerRegistrar:void addApplicationListeners(org.springframework.context.ConfigurableApplicationContext)"
        ]
    },
    "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.server.handler.HttpProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)",
            "org.apache.dubbo.qos.server.handler.TelnetProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void rePut(org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:void addFailed(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture:void timeoutCheck(org.apache.dubbo.remoting.exchange.support.DefaultFuture)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture:org.apache.dubbo.remoting.exchange.support.DefaultFuture newFuture(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,int,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void reput(org.apache.dubbo.common.timer.Timeout,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void startHeartBeatTask(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void <init>(org.apache.dubbo.remoting.Client,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void startReconnectTask(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void <init>(org.apache.dubbo.remoting.Client,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void startIdleCheckTask(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void <init>(org.apache.dubbo.remoting.RemotingServer)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void reset(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void doOverrideIfNecessary()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.retry.AbstractRetryTask:void reput(org.apache.dubbo.common.timer.Timeout,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedRegistered(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void recover()"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedUnregistered(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void unregister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedSubscribed(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void recover()",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void fetchLatestAddresses()"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void addFailedUnsubscribed(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.cache.support.expiring.ExpiringCache:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.cache.support.expiring.ExpiringCacheFactory:org.apache.dubbo.cache.Cache createCache(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)",
            "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Group lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Group lookup(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.RegistryFactoryWrapper:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void initServiceRegistry(org.apache.dubbo.common.URL,java.util.Map)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void initReferenceRegistry(org.apache.dubbo.common.URL,java.util.Map)",
            "org.apache.dubbo.qos.command.impl.Offline:boolean offline(java.lang.String)",
            "org.apache.dubbo.qos.command.impl.Online:boolean online(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$lambda_new_0__662:void stateChanged(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:void stateChanged(int)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$lambda_doLocalExport_2__280:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void doExport()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void export()",
            "org.apache.dubbo.config.ServiceConfig$doExport__3:void run()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsConfigCenter(org.apache.dubbo.config.RegistryConfig)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsMetadataCenter(org.apache.dubbo.config.RegistryConfig)"
        ]
    },
    "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture$lambda_submit_1__213:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture$lambda_schedule_0__212:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_checkGlobalConfigs_1__18:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.ServiceBuilder:org.apache.dubbo.config.ServiceConfig build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.builders.ServiceBuilder:org.apache.dubbo.config.AbstractConfig build()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_checkGlobalConfigs_2__17:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$registry__12:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object getExtension(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.Cluster:org.apache.dubbo.rpc.cluster.Cluster getCluster(java.lang.String,boolean)",
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object getExtension(java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractMethodConfig)",
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractConfig)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder:void build(org.apache.dubbo.config.AbstractMethodConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractMethodBuilder:void build(org.apache.dubbo.config.AbstractConfig)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractReferenceBuilder:void build(org.apache.dubbo.config.AbstractConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder:org.apache.dubbo.config.ConsumerConfig build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder:org.apache.dubbo.config.AbstractConfig build()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder:org.apache.dubbo.config.ReferenceConfig build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder:org.apache.dubbo.config.AbstractConfig build()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractServiceBuilder:void build(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractMethodConfig)",
            "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractConfig)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractServiceBuilder:void build(org.apache.dubbo.config.AbstractMethodConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.AbstractMethodBuilder:void build(org.apache.dubbo.config.AbstractConfig)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractServiceBuilder:void build(org.apache.dubbo.config.AbstractConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.builders.ProviderBuilder:org.apache.dubbo.config.ProviderConfig build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.builders.ProviderBuilder:org.apache.dubbo.config.AbstractConfig build()"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Ready:java.util.Map isServiceReady(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.Ready:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:org.apache.dubbo.rpc.cluster.support.migration.MigrationRule parse(java.lang.String)",
            "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:org.apache.dubbo.rpc.cluster.support.migration.MigrationRule queryRule()",
            "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:org.apache.dubbo.rpc.cluster.support.migration.MigrationRule getMigrationRule(java.lang.String)",
            "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:void lambda$static$0(org.apache.dubbo.common.config.configcenter.DynamicConfiguration)",
            "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:void <clinit>()",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:java.util.List list(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:void doMigrate(java.lang.String)",
            "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void <init>()",
            "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void onDestroy()",
            "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule$lambda_static_0__313:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:java.lang.String getApplication()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener:void <init>()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener:void <init>(org.apache.dubbo.registry.integration.RegistryProtocol)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.metadata.WritableMetadataService:java.lang.String serviceName()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void lambda$exported$0(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$createServiceInstance$23(org.apache.dubbo.registry.client.ServiceInstanceCustomizer)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void refreshMetadataAndInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$registerServiceInstance$20()",
            "org.apache.dubbo.qos.command.impl.PublishMetadata:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])",
            "org.apache.dubbo.qos.command.impl.PublishMetadata$refreshMetadataAndInstance__649:void run()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:org.apache.dubbo.metadata.MetadataInfo lambda$exportURL$0(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService$lambda_exportURL_0__214:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol$lambda_doExport_0__407:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:org.apache.dubbo.rpc.protocol.grpc.ReferenceCountManagedChannel getSharedChannel(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServer$1:void initChannel(io.netty.channel.socket.SocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyServer$1:void initChannel(io.netty.channel.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClient$1:void initChannel(io.netty.channel.socket.SocketChannel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyClient$1:void initChannel(io.netty.channel.Channel)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery$lambda_initialize_0__606:void stateChanged(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:void stateChanged(int)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void register(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.Registry:void reExportRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void recover()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Online:boolean online(java.lang.String)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void register(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void onEvent(org.apache.dubbo.event.Event)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.event.AbstractEventDispatcher:void lambda$null$5(org.apache.dubbo.event.Event,org.apache.dubbo.event.EventListener)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery$lambda_addServiceInstancesChangedListener_1__607:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void reRefer(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reRefer(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InterceptorInvokerNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.FilterNode:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroy()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyInterfaceInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InterceptorInvokerNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.FilterNode:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroy()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyInterfaceInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void destroy()",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void destroy()",
            "org.apache.dubbo.registry.redis.RedisRegistry:void destroy()",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void destroy()",
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void destroy()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.FailbackRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Offline:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void lambda$reExport$3(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$lambda_reExport_3__281:void run()"
        ]
    },
    "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker()"
        ]
    },
    "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker()"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Online:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)"
        ]
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.retry.FailedUnsubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.consul.ConsulRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void unsubscribe(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:java.util.List list(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void onRefer(org.apache.dubbo.registry.integration.RegistryProtocol,org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker interceptInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void lambda$process$0(org.apache.dubbo.registry.client.migration.MigrationRuleHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleListener$lambda_process_0__549:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:org.apache.dubbo.config.spring.ReferenceBean buildReferenceBeanIfAbsent(java.lang.String,org.springframework.core.'annotation'.AnnotationAttributes,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceAnnotationBeanPostProcessor:java.lang.Object doGetInjectedBean(org.springframework.core.'annotation'.AnnotationAttributes,java.lang.Object,java.lang.String,java.lang.Class,org.springframework.beans.factory.'annotation'.InjectionMetadata$InjectedElement)"
        ]
    },
    "org.apache.dubbo.remoting.transport.codec.TransportCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalEncoder:void encode(org.apache.mina.common.IoSession,java.lang.Object,org.apache.mina.filter.codec.ProtocolEncoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleWrite(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCountCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalEncoder:void encode(org.apache.mina.common.IoSession,java.lang.Object,org.apache.mina.filter.codec.ProtocolEncoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleWrite(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalEncoder:void encode(org.apache.mina.common.IoSession,java.lang.Object,org.apache.mina.filter.codec.ProtocolEncoderOutput)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleWrite(org.glassfish.grizzly.filterchain.FilterChainContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$ProxyProtocolServer:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer:void close()",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$ThriftProtocolServer:void close()",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void leave(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void leave(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.ServerPeer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$ProxyProtocolServer:void close()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer:void close()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close()",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void close()",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void leave(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:void leave(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.FileGroup:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void access$100(org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup,java.lang.String,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup$1:void run()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void access$100(org.apache.dubbo.remoting.p2p.support.MulticastGroup,java.lang.String,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.MulticastGroup$1:void run()"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.FilterNode:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroy()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyInterfaceInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:void lambda$clusterDestroy$3(boolean,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void lambda$fallbackToInterfaceInvoker$3()"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyInterfaceInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:void lambda$clusterDestroy$3(boolean,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void lambda$migrateToServiceDiscoveryInvoker$2()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object decodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,java.lang.Class[],int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void refreshInvoker(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.DynamicDirectory:void discordAddresses()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void discardServiceDiscoveryInvokerAddress(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void discardInterfaceInvokerAddress(org.apache.dubbo.rpc.cluster.ClusterInvoker)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshOverrideAndInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reconnect()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reconnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reconnect()",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reconnect()",
            "org.apache.dubbo.remoting.exchange.support.header.ReconnectTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reconnect()"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.mina.MinaClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.mina.MinaTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:org.apache.dubbo.registry.client.ServiceDiscoveryRegistry create(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.sofa.SofaRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void <init>(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.ListenerRegistryWrapper:java.util.List lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:java.util.List lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:java.util.List lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:java.util.List lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:java.util.List lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:java.util.List lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry:java.util.List getCacheUrls(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.registry.support.AbstractRegistry:java.util.List lookup(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:java.util.List lookup(com.alibaba.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:java.util.List lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$lambda_null_2__557:void childChanged(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorWatcherImpl:void process(org.apache.zookeeper.WatchedEvent)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry$lambda_null_2__605:void childChanged(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void lambda$onNext$0()"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void access$100(org.apache.dubbo.registry.multicast.MulticastRegistry,java.lang.String,java.net.InetSocketAddress)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multicast.MulticastRegistry$1:void run()"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistry:void access$200(org.apache.dubbo.registry.redis.RedisRegistry,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.redis.RedisRegistry$Notifier:void run()",
            "org.apache.dubbo.registry.redis.RedisRegistry$NotifySub:void onMessage(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void lambda$onNext$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher$lambda_onNext_0__522:void run()"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_doSubscribe_3__617:void callback(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:void execute(org.apache.dubbo.registry.nacos.NacosRegistry$NamingServiceCallback)"
        ]
    },
    "org.apache.dubbo.config.spring.context.DubboApplicationListenerRegistrar:void addApplicationListeners(org.springframework.context.ConfigurableApplicationContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.context.DubboApplicationListenerRegistrar:void setApplicationContext(org.springframework.context.ApplicationContext)"
        ]
    },
    "org.apache.dubbo.qos.server.handler.HttpProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.server.handler.HttpProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.qos.server.handler.TelnetProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.server.handler.TelnetProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.DefaultFuture:org.apache.dubbo.remoting.exchange.support.DefaultFuture newFuture(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,int,java.util.concurrent.ExecutorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void <init>(org.apache.dubbo.remoting.Client,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:void <init>(java.lang.Class,org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchanger:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void <init>(org.apache.dubbo.remoting.RemotingServer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchanger:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void reset(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$ThriftProtocolServer:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void reset(org.apache.dubbo.common.Parameters)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void reset(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void doOverrideIfNecessary()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void notify(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener:void lambda$notifyOverrides$0(org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ServiceConfigurationListener:void notifyOverrides()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Exporter,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.support.FailbackRegistry:void recover()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void connect()",
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void lambda$new$0(int)",
            "org.apache.dubbo.registry.etcd.EtcdRegistry:void lambda$new$0(int)",
            "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void recover()"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void fetchLatestAddresses()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void lambda$new$0(int)"
        ]
    },
    "org.apache.dubbo.cache.support.expiring.ExpiringCacheFactory:org.apache.dubbo.cache.Cache createCache(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.cache.support.AbstractCacheFactory:org.apache.dubbo.cache.Cache getCache(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(java.lang.String,java.lang.String,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Peer join(java.lang.String,java.lang.String,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Group lookup(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.RegistryFactoryWrapper:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.RegistryFactoryWrapper:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void initServiceRegistry(org.apache.dubbo.common.URL,java.util.Map)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void initReferenceRegistry(org.apache.dubbo.common.URL,java.util.Map)",
            "org.apache.dubbo.qos.command.impl.Offline:boolean offline(java.lang.String)",
            "org.apache.dubbo.qos.command.impl.Online:boolean online(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void doReExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService lambda$getMetadataServiceProxy$0(org.apache.dubbo.registry.client.ServiceInstance,java.lang.String)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void initServiceRegistry(org.apache.dubbo.common.URL,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL,boolean,boolean)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry:void initReferenceRegistry(org.apache.dubbo.common.URL,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL,boolean,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:void stateChanged(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:void lambda$new$0(io.etcd.jetcd.Client,int)"
        ]
    },
    "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$lambda_doLocalExport_2__280:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig$doExport__3:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsConfigCenter(org.apache.dubbo.config.RegistryConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$isUsedRegistryAsConfigCenter__19:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsMetadataCenter(org.apache.dubbo.config.RegistryConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$isUsedRegistryAsMetadataCenter__23:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture$lambda_submit_1__213:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "org.apache.dubbo.remoting.etcd.jetcd.RetryLoops:java.lang.Object invokeWithRetry(java.util.concurrent.Callable,org.apache.dubbo.remoting.etcd.RetryPolicy)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture$lambda_schedule_0__212:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "org.apache.dubbo.remoting.etcd.jetcd.RetryLoops:java.lang.Object invokeWithRetry(java.util.concurrent.Callable,org.apache.dubbo.remoting.etcd.RetryPolicy)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.ServiceBuilder:org.apache.dubbo.config.AbstractConfig build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.cluster.Cluster:org.apache.dubbo.rpc.cluster.Cluster getCluster(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.rpc.cluster.Cluster:org.apache.dubbo.rpc.cluster.Cluster getCluster(java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object getExtension(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:java.lang.Integer findConfigedPorts(org.apache.dubbo.config.ProtocolConfig,java.lang.String,java.util.Map)",
            "org.apache.dubbo.rpc.cluster.interceptor.ZoneAwareClusterInterceptor:void before(org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.merger.MergerFactory:void loadMergers()",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.cluster.LoadBalance initLoadBalance(java.util.List,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:void <init>(org.apache.dubbo.rpc.cluster.Directory)",
            "org.apache.dubbo.rpc.model.ApplicationModel:void init()",
            "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.common.config.Environment getEnvironment()",
            "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.config.context.ConfigManager getConfigManager()",
            "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.rpc.model.ServiceRepository getServiceRepository()",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport:org.apache.dubbo.common.serialize.Serialization getRequestSerialization(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport:org.apache.dubbo.common.serialize.Serialization getResponseSerialization(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.AppResponse)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol getDubboProtocol()",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol getInjvmProtocol()",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec:java.lang.Object decode(org.apache.thrift.protocol.TProtocol)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec:void encodeRequest(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.rpc.protocol.redis.RedisProtocol:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.Parameters:java.lang.Object getExtension(java.lang.Class,java.lang.String)",
            "org.apache.dubbo.common.Parameters:java.lang.Object getExtension(java.lang.Class,java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.Parameters:java.lang.Object getMethodExtension(java.lang.Class,java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.Parameters:java.lang.Object getMethodExtension(java.lang.Class,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.compiler.support.AdaptiveCompiler:java.lang.Class compile(java.lang.String,java.lang.ClassLoader)",
            "org.apache.dubbo.common.config.PropertiesConfiguration:void <init>()",
            "org.apache.dubbo.common.extension.ExtensionLoader:java.util.List getActivateExtension(org.apache.dubbo.common.URL,java.lang.String[],java.lang.String)",
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object getOrDefaultExtension(java.lang.String)",
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object getDefaultExtension()",
            "org.apache.dubbo.common.extension.ExtensionLoader:java.util.Set getSupportedExtensionInstances()",
            "org.apache.dubbo.common.extension.factory.AdaptiveExtensionFactory:void <init>()",
            "org.apache.dubbo.common.logger.LoggerFactory:void setLoggerAdapter(java.lang.String)",
            "org.apache.dubbo.common.serialize.hessian2.dubbo.Hessian2FactoryInitializer:org.apache.dubbo.common.serialize.hessian2.dubbo.Hessian2FactoryInitializer getInstance()",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.Exchanger getExchanger(java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.command.HelpTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.command.StatusTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.transport.AbstractEndpoint:org.apache.dubbo.remoting.Codec2 getChannelCodec(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.CodecSupport:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.CodecSupport:void <clinit>()",
            "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Group lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory:org.apache.dubbo.registry.client.ServiceDiscovery createDiscovery(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.RegistryClusterIdentifier:org.apache.dubbo.registry.client.RegistryClusterIdentifier getExtension(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService lambda$getMetadataServiceProxy$0(org.apache.dubbo.registry.client.ServiceInstance,java.lang.String)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol getRegistryProtocol()",
            "org.apache.dubbo.container.Main:void main(java.lang.String[])",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)",
            "org.apache.dubbo.qos.command.util.CommandHelper:boolean hasCommand(java.lang.String)",
            "org.apache.dubbo.qos.command.util.CommandHelper:java.util.List getAllCommandClass()",
            "org.apache.dubbo.qos.command.util.CommandHelper:java.lang.Class getCommandClass(java.lang.String)",
            "org.apache.dubbo.metadata.ServiceNameMapping:org.apache.dubbo.metadata.ServiceNameMapping getExtension(java.lang.String)",
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:java.util.List buildProxyReports()",
            "org.apache.dubbo.metadata.store.failover.StrategyMetadataReport:void createFailoverStrategy(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractMethodConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractInterfaceBuilder:void build(org.apache.dubbo.config.AbstractConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.builders.AbstractMethodBuilder:void build(org.apache.dubbo.config.AbstractConfig)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.builders.ConsumerBuilder:org.apache.dubbo.config.AbstractConfig build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder:org.apache.dubbo.config.AbstractConfig build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.builders.ProviderBuilder:org.apache.dubbo.config.AbstractConfig build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:org.apache.dubbo.rpc.cluster.support.migration.MigrationRule getMigrationRule(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:org.apache.dubbo.rpc.cluster.support.migration.MigrationRule parse(java.lang.String)",
            "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:org.apache.dubbo.rpc.cluster.support.migration.MigrationRule queryRule()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:void lambda$static$0(org.apache.dubbo.common.config.configcenter.DynamicConfiguration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule$lambda_static_0__313:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void onDestroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule$lambda_static_0__313:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void <clinit>()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener:void <init>(org.apache.dubbo.registry.integration.RegistryProtocol)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void <init>()"
        ]
    },
    "org.apache.dubbo.metadata.WritableMetadataService:java.lang.String serviceName()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$registerServiceInstance$20()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_registerServiceInstance_20__37:void run()"
        ]
    },
    "org.apache.dubbo.qos.command.impl.PublishMetadata:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.PublishMetadata$refreshMetadataAndInstance__649:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService$lambda_exportURL_0__214:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServer$1:void initChannel(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClient$1:void initChannel(io.netty.channel.Channel)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.event.AbstractEventDispatcher:void lambda$null$5(org.apache.dubbo.event.Event,org.apache.dubbo.event.EventListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.event.AbstractEventDispatcher$lambda_null_5__489:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void reRefer(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InterceptorInvokerNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.FilterNode:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroy()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyInterfaceInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InterceptorInvokerNode:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:void destroy()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InterceptorInvokerNode:void destroy()",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:void destroy()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void unexport()",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.FilterNode:void destroy()",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroy()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void destroyInterfaceInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void destroy()",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void destroy()",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:void destroy()"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void destroy()",
            "org.apache.dubbo.registry.support.AbstractRegistryFactory:void destroyAll()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void destroy()"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void destroy()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$lambda_reExport_3__281:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:void lambda$clusterRefresh$4(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void migrateToServiceDiscoveryInvoker(boolean)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void fallbackToInterfaceInvoker()",
            "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:void doMigrate(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:void lambda$clusterRefresh$4(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void migrateToServiceDiscoveryInvoker(boolean)",
            "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:void doMigrate(java.lang.String)",
            "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:void migrateToServiceDiscoveryInvoker(boolean)"
        ]
    },
    "org.apache.dubbo.registry.retry.FailedUnsubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.AbstractRetryTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.retry.FailedUnsubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.retry.FailedUnsubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void destroy()",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void doUnsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void unsubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void unsubscribe(com.alibaba.dubbo.common.URL,com.alibaba.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker interceptInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker doRefer(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL,java.util.Map)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationRuleListener$lambda_process_0__549:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalEncoder:void encode(org.apache.mina.common.IoSession,java.lang.Object,org.apache.mina.filter.codec.ProtocolEncoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleWrite(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.MulticastGroup$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:void lambda$clusterDestroy$3(boolean,org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker$lambda_clusterDestroy_3__380:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void lambda$fallbackToInterfaceInvoker$3()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker$lambda_fallbackToInterfaceInvoker_3__293:void onChange()"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void lambda$migrateToServiceDiscoveryInvoker$2()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker$lambda_migrateToServiceDiscoveryInvoker_2__290:void onChange()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:void decode()",
            "org.apache.dubbo.remoting.transport.codec.CodecAdapter:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void subscribeURLs(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Set)",
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void lambda$null$3(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.sofa.SofaRegistry:void handleRegistryData(com.alipay.sofa.registry.client.api.model.UserData,org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void discardServiceDiscoveryInvokerAddress(org.apache.dubbo.rpc.cluster.ClusterInvoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:void lambda$clusterDestroy$3(boolean,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void compareAddresses(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.rpc.cluster.ClusterInvoker)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void discardInterfaceInvokerAddress(org.apache.dubbo.rpc.cluster.ClusterInvoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:void lambda$clusterDestroy$3(boolean,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void compareAddresses(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.rpc.cluster.ClusterInvoker)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshOverrideAndInvoker(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void notify(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void access$000(org.apache.dubbo.registry.integration.RegistryDirectory,java.util.List)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.mina.MinaTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.multicast.MulticastRegistry$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistry$Notifier:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.nativethrift.ThriftProtocol:java.lang.Runnable exportThreadedSelectorServer(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.timer.HashedWheelTimer:void start()",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.cache.support.expiring.ExpiringMap$ExpireThread:void startExpiring()",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.redis.RedisRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistry$NotifySub:void onMessage(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.redis.RedisRegistry$NotifySub:void onPMessage(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher$lambda_onNext_0__522:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void execute(org.apache.dubbo.registry.nacos.NacosRegistry$NamingServiceCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void doRegister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void doUnregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Set)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set filterServiceNames(org.apache.dubbo.registry.nacos.NacosServiceName)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getAllServiceNames()"
        ]
    },
    "org.apache.dubbo.config.spring.context.DubboApplicationListenerRegistrar:void setApplicationContext(org.springframework.context.ApplicationContext)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.qos.server.handler.HttpProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.qos.server.handler.TelnetProcessHandler:void channelRead0(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:void <init>(java.lang.Class,org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchanger:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchanger:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer:void reset(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void openServer(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$ThriftProtocolServer:void reset(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void openServer(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void reset(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$ThriftProtocolServer:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void reset(org.apache.dubbo.common.Parameters)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void reset(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void reset(org.apache.dubbo.common.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.ServerDelegate:void reset(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocolServer:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void reset(org.apache.dubbo.common.Parameters)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void subscribeURLs(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Set)",
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void lambda$null$3(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.sofa.SofaRegistry:void handleRegistryData(com.alipay.sofa.registry.client.api.model.UserData,org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener:void lambda$notifyOverrides$0(org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener$lambda_notifyOverrides_0__309:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ServiceConfigurationListener:void notifyOverrides()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:void process(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:void connect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void lambda$new$0()"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry:void lambda$new$0(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$lambda_new_0__552:void stateChanged(int)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry:void lambda$new$0(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.etcd.EtcdRegistry$lambda_new_0__599:void stateChanged(int)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry$CompatibleFailbackRegistry:void recover()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.dubbo.registry.support.FailbackRegistry:void recover()"
        ]
    },
    "org.apache.dubbo.cache.support.AbstractCacheFactory:org.apache.dubbo.cache.Cache getCache(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(java.lang.String,java.lang.String,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Peer join(java.lang.String,java.lang.String,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService lambda$getMetadataServiceProxy$0(org.apache.dubbo.registry.client.ServiceInstance,java.lang.String)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService lambda$getMetadataServiceProxy$0(org.apache.dubbo.registry.client.ServiceInstance,java.lang.String)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void refreshInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService lambda$getMetadataServiceProxy$0(org.apache.dubbo.registry.client.ServiceInstance,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.MetadataUtils$lambda_getMetadataServiceProxy_0__64:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.support.AbstractMonitorFactory:org.apache.dubbo.monitor.Monitor lambda$getMonitor$0(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService lambda$getMetadataServiceProxy$0(org.apache.dubbo.registry.client.ServiceInstance,java.lang.String)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient:void lambda$new$0(io.etcd.jetcd.Client,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$lambda_new_0__496:void stateChanged(io.etcd.jetcd.Client,int)"
        ]
    },
    "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService lambda$getMetadataServiceProxy$0(org.apache.dubbo.registry.client.ServiceInstance,java.lang.String)",
            "org.apache.dubbo.registry.dubbo.DubboRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$isUsedRegistryAsConfigCenter__19:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$isUsedRegistryAsMetadataCenter__23:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.Cluster:org.apache.dubbo.rpc.cluster.Cluster getCluster(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:java.lang.Integer findConfigedPorts(org.apache.dubbo.config.ProtocolConfig,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.interceptor.ZoneAwareClusterInterceptor:void before(org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InterceptorInvokerNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.merger.MergerFactory:void loadMergers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.merger.MergerFactory:org.apache.dubbo.rpc.cluster.Merger getMerger(java.lang.Class)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.cluster.LoadBalance initLoadBalance(java.util.List,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:void <init>(org.apache.dubbo.rpc.cluster.Directory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster:org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker doJoin(org.apache.dubbo.rpc.cluster.Directory)"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:void init()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.common.config.Environment getEnvironment()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void <init>()",
            "org.apache.dubbo.config.AbstractConfig:void refresh()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Set getProtocolIds()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Set getRegistryIds()",
            "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:void <clinit>()",
            "org.apache.dubbo.rpc.model.ApplicationModel:void reset()",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.common.config.ConfigurationUtils:org.apache.dubbo.common.config.Configuration getSystemConfiguration()",
            "org.apache.dubbo.common.config.ConfigurationUtils:org.apache.dubbo.common.config.Configuration getEnvConfiguration()",
            "org.apache.dubbo.common.config.ConfigurationUtils:org.apache.dubbo.common.config.Configuration getGlobalConfiguration()",
            "org.apache.dubbo.common.config.ConfigurationUtils:org.apache.dubbo.common.config.Configuration getDynamicGlobalConfiguration()",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:org.apache.dubbo.common.config.configcenter.DynamicConfiguration getDynamicConfiguration()",
            "org.apache.dubbo.remoting.transport.netty4.NettyEventLoopFactory:boolean shouldEpoll()",
            "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void <init>()"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.config.context.ConfigManager getConfigManager()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void <init>()",
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.ApplicationConfig getApplicationConfig()",
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:java.util.List getRegistries()",
            "org.apache.dubbo.config.metadata.ServiceInstancePortCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.config.utils.ReferenceConfigCache:void destroy(java.lang.String,java.lang.Class)",
            "org.apache.dubbo.config.utils.ReferenceConfigCache:void lambda$destroyAll$6(java.lang.String,org.apache.dubbo.config.ReferenceConfigBase)",
            "org.apache.dubbo.config.AbstractConfig:void addIntoConfigManager()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void convertRegistryIdsToRegistries()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ApplicationConfig getApplication()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setApplication(org.apache.dubbo.config.ApplicationConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ModuleConfig getModule()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setModule(org.apache.dubbo.config.ModuleConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MonitorConfig getMonitor()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setMonitor(org.apache.dubbo.config.MonitorConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ConfigCenterConfig getConfigCenter()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setConfigCenter(org.apache.dubbo.config.ConfigCenterConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MetadataReportConfig getMetadataReportConfig()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setMetadataReportConfig(org.apache.dubbo.config.MetadataReportConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MetricsConfig getMetrics()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setMetrics(org.apache.dubbo.config.MetricsConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.SslConfig getSslConfig()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void lambda$convertRegistryIdsToRegistries$2(java.util.List,java.lang.String)",
            "org.apache.dubbo.config.ReferenceConfigBase:void checkDefault()",
            "org.apache.dubbo.config.ServiceConfigBase:void checkDefault()",
            "org.apache.dubbo.config.ServiceConfigBase:void convertProtocolIdsToProtocols()",
            "org.apache.dubbo.config.ServiceConfigBase:void setProvider(org.apache.dubbo.config.ProviderConfig)",
            "org.apache.dubbo.config.ServiceConfigBase:void lambda$convertProtocolIdsToProtocols$1(java.util.List,java.lang.String)",
            "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.config.ApplicationConfig getApplicationConfig()",
            "org.apache.dubbo.rpc.model.ApplicationModel:void reset()",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.netty.handler.ssl.SslContext buildServerSslContext(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.netty.handler.ssl.SslContext buildClientSslContext(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.Environment:void initialize()",
            "org.apache.dubbo.remoting.transport.netty4.SslContexts:io.netty.handler.ssl.SslContext buildServerSslContext(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.netty4.SslContexts:io.netty.handler.ssl.SslContext buildClientSslContext(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.rpc.model.ServiceRepository getServiceRepository()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void <init>()",
            "org.apache.dubbo.config.ReferenceConfig:void <init>(org.apache.dubbo.config.'annotation'.Reference)",
            "org.apache.dubbo.config.ReferenceConfig:void checkAndUpdateSubConfigs()",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrls()",
            "org.apache.dubbo.rpc.model.ApplicationModel:java.util.Collection allConsumerModels()",
            "org.apache.dubbo.rpc.model.ApplicationModel:java.util.Collection allProviderModels()",
            "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.rpc.model.ProviderModel getProviderModel(java.lang.String)",
            "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.rpc.model.ConsumerModel getConsumerModel(java.lang.String)",
            "org.apache.dubbo.rpc.model.ApplicationModel:void reset()",
            "org.apache.dubbo.rpc.RpcInvocation:void initParameterDesc()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:java.lang.Runnable doExport(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.CodecSupport:void checkSerialization(java.lang.String,java.lang.String,java.lang.Byte)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL getStatedUrl(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.command.impl.Offline:void <clinit>()",
            "org.apache.dubbo.qos.command.impl.Online:void <clinit>()",
            "org.apache.dubbo.qos.legacy.ListTelnetHandler:void <init>()"
        ]
    },
    "org.apache.dubbo.rpc.filter.GenericFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:void lambda$invoke$0(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport:org.apache.dubbo.common.serialize.Serialization getRequestSerialization(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport:org.apache.dubbo.common.serialize.Serialization getResponseSerialization(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.AppResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol getDubboProtocol()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object decodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,java.lang.Class[],int,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:void <clinit>()",
            "org.apache.dubbo.rpc.protocol.dubbo.status.ServerStatusChecker:org.apache.dubbo.common.status.Status check()",
            "org.apache.dubbo.qos.legacy.ChangeTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.PortTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.TraceTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol getInjvmProtocol()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:boolean shouldJvmRefer(java.util.Map)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec:java.lang.Object decode(org.apache.thrift.protocol.TProtocol)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec:void encodeRequest(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.redis.RedisProtocol:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.redis.RedisProtocol:org.apache.dubbo.common.serialize.Serialization access$000(org.apache.dubbo.rpc.protocol.redis.RedisProtocol,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.Parameters:java.lang.Object getExtension(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.Parameters:java.lang.Object getExtension(java.lang.Class,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.Parameters:java.lang.Object getMethodExtension(java.lang.Class,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.Parameters:java.lang.Object getMethodExtension(java.lang.Class,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.compiler.support.AdaptiveCompiler:java.lang.Class compile(java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.compiler.support.AdaptiveCompiler:java.lang.Class compile(java.lang.String,java.lang.ClassLoader)",
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Class createAdaptiveExtensionClass()"
        ]
    },
    "org.apache.dubbo.common.config.PropertiesConfiguration:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.Environment:void <init>()"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:java.util.List getActivateExtension(org.apache.dubbo.common.URL,java.lang.String[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.extension.ExtensionLoader:java.util.List getActivateExtension(org.apache.dubbo.common.URL,java.lang.String[])",
            "org.apache.dubbo.common.extension.ExtensionLoader:java.util.List getActivateExtension(org.apache.dubbo.common.URL,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object getOrDefaultExtension(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.DynamicConfigurationFactory:org.apache.dubbo.common.config.configcenter.DynamicConfigurationFactory getDynamicConfigurationFactory(java.lang.String)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryFactory:org.apache.dubbo.registry.client.ServiceDiscoveryFactory getExtension(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.MetadataServiceExporter:org.apache.dubbo.metadata.MetadataServiceExporter getExtension(java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object getDefaultExtension()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void <init>()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyExecutorRepository()",
            "org.apache.dubbo.rpc.cluster.router.AbstractRouter:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:java.util.concurrent.ExecutorService getCallbackExecutor(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.status.ThreadPoolStatusChecker:org.apache.dubbo.common.status.Status check()",
            "org.apache.dubbo.common.compiler.support.AdaptiveCompiler:java.lang.Class compile(java.lang.String,java.lang.ClassLoader)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:org.apache.dubbo.common.config.configcenter.DynamicConfiguration lambda$getDynamicConfiguration$0()",
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object getExtension(java.lang.String,boolean)",
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object getOrDefaultExtension(java.lang.String)",
            "org.apache.dubbo.common.serialize.hessian2.dubbo.Hessian2FactoryInitializer:org.apache.dubbo.common.serialize.hessian2.dubbo.Hessian2FactoryInitializer getInstance()",
            "org.apache.dubbo.event.EventDispatcher:org.apache.dubbo.event.EventDispatcher getDefaultExtension()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:java.util.concurrent.ExecutorService getSharedExecutorService()",
            "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:void <init>()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:java.util.List getThreadPoolMessage()",
            "org.apache.dubbo.qos.command.impl.PublishMetadata:void <init>()",
            "org.apache.dubbo.metadata.ServiceNameMapping:org.apache.dubbo.metadata.ServiceNameMapping getDefaultExtension()",
            "org.apache.dubbo.metadata.WritableMetadataService:org.apache.dubbo.metadata.WritableMetadataService getDefaultExtension()"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:java.util.Set getSupportedExtensionInstances()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.registry.client.ServiceInstance createServiceInstance(java.lang.String,java.lang.String,int)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$start$10()",
            "org.apache.dubbo.config.ApplicationConfig:void appendEnvironmentProperties()",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:boolean shouldMigrate(boolean,java.util.List,java.util.List)",
            "org.apache.dubbo.rpc.model.ApplicationModel:void initFrameworkExts()",
            "org.apache.dubbo.rpc.model.ServiceRepository:void <init>()",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:java.util.Optional getConfigurator()",
            "org.apache.dubbo.common.convert.Converter:org.apache.dubbo.common.convert.Converter getConverter(java.lang.Class,java.lang.Class)",
            "org.apache.dubbo.common.convert.multiple.MultiValueConverter:org.apache.dubbo.common.convert.multiple.MultiValueConverter find(java.lang.Class,java.lang.Class)",
            "org.apache.dubbo.common.lang.ShutdownHookCallbacks:void loadCallbacks()",
            "org.apache.dubbo.event.AbstractEventDispatcher:void loadEventListenerInstances()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:java.util.List initSubscribedURLsSynthesizers()",
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void compareAddresses(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:void <clinit>()",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:java.util.Map loadAnnotatedMethodParameterProcessors()"
        ]
    },
    "org.apache.dubbo.common.extension.factory.AdaptiveExtensionFactory:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.logger.LoggerFactory:void setLoggerAdapter(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ApplicationConfig:void setLogger(java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.serialize.hessian2.dubbo.Hessian2FactoryInitializer:org.apache.dubbo.common.serialize.hessian2.dubbo.Hessian2FactoryInitializer getInstance()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput:com.alibaba.com.caucho.hessian.io.Hessian2Input lambda$static$0()",
            "org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput:com.alibaba.com.caucho.hessian.io.Hessian2Output lambda$static$0()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.Exchanger getExchanger(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.Exchanger getExchanger(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.telnet.support.command.HelpTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.telnet.support.command.StatusTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractEndpoint:org.apache.dubbo.remoting.Codec2 getChannelCodec(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractEndpoint:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.AbstractEndpoint:void reset(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.CodecSupport:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractCodec:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.transport.AbstractCodec:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.transport.AbstractCodec:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.remoting.Channel)"
        ]
    },
    "org.apache.dubbo.remoting.transport.CodecSupport:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)",
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport:org.apache.dubbo.common.serialize.Serialization getRequestSerialization(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport:org.apache.dubbo.common.serialize.Serialization getResponseSerialization(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.AppResponse)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequest(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.transport.AbstractCodec:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.transport.AbstractCodec:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.transport.AbstractCodec:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.CodecSupport:org.apache.dubbo.common.serialize.Serialization getSerializationById(java.lang.Byte)",
            "org.apache.dubbo.remoting.transport.CodecSupport:java.lang.Byte getIDByName(java.lang.String)",
            "org.apache.dubbo.remoting.transport.CodecSupport:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.common.URL,java.lang.Byte)",
            "org.apache.dubbo.remoting.transport.CodecSupport:org.apache.dubbo.common.serialize.ObjectInput deserialize(org.apache.dubbo.common.URL,java.io.InputStream,byte)",
            "org.apache.dubbo.remoting.transport.CodecSupport:byte[] getNullBytesOf(org.apache.dubbo.common.serialize.Serialization)",
            "org.apache.dubbo.remoting.transport.CodecSupport:byte[] getPayload(java.io.InputStream)",
            "org.apache.dubbo.remoting.transport.CodecSupport:byte[] getBuffer(int)",
            "org.apache.dubbo.remoting.transport.CodecSupport:boolean isHeartBeat(byte[],byte)",
            "org.apache.dubbo.remoting.transport.CodecSupport:void checkSerialization(java.lang.String,java.lang.String,java.lang.Byte)",
            "org.apache.dubbo.remoting.transport.CodecSupport:byte[] lambda$getNullBytesOf$1(org.apache.dubbo.common.serialize.Serialization,java.lang.Byte)",
            "org.apache.dubbo.remoting.transport.CodecSupport:void <clinit>()",
            "org.apache.dubbo.remoting.transport.CodecSupport$lambda_getNullBytesOf_1__298:java.lang.Object apply(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.CodecSupport$lambda_static_0__299:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory:org.apache.dubbo.registry.client.ServiceDiscovery createDiscovery(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscoveryFactory:org.apache.dubbo.registry.client.ServiceDiscovery lambda$getServiceDiscovery$0(org.apache.dubbo.common.URL,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.client.RegistryClusterIdentifier:org.apache.dubbo.registry.client.RegistryClusterIdentifier getExtension(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:org.apache.dubbo.metadata.MetadataInfo getMetadataInfo(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.lang.String getRegistryCluster(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean exportURL(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean unexportURL(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol getRegistryProtocol()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.container.Main:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.qos.command.util.CommandHelper:boolean hasCommand(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.Help:java.lang.String commandHelp(java.lang.String)",
            "org.apache.dubbo.qos.command.util.CommandHelper:java.lang.Class getCommandClass(java.lang.String)"
        ]
    },
    "org.apache.dubbo.qos.command.util.CommandHelper:java.util.List getAllCommandClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.Help:java.lang.String mainHelp()"
        ]
    },
    "org.apache.dubbo.qos.command.util.CommandHelper:java.lang.Class getCommandClass(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.Help:java.lang.String commandHelp(java.lang.String)"
        ]
    },
    "org.apache.dubbo.metadata.ServiceNameMapping:org.apache.dubbo.metadata.ServiceNameMapping getExtension(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void lambda$exported$0(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:java.util.List buildProxyReports()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.store.failover.StrategyMetadataReport:void createFailoverStrategy(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.failover.StrategyMetadataReport:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener:void lambda$notifyOverrides$0(org.apache.dubbo.registry.integration.RegistryDirectory)",
            "org.apache.dubbo.registry.integration.RegistryDirectory$ReferenceConfigurationListener:void notifyOverrides()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List toMergeInvokerList(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Optional toRouters(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:org.apache.dubbo.common.URL overrideWithConfigurator(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List doList(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:boolean isValidCategory(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void overrideDirectoryUrl()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void <clinit>()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.dubbo.DubboRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory$lambda_toMergeInvokerList_0__289:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:void <init>()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_registerServiceInstance_20__37:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService lambda$getMetadataServiceProxy$0(org.apache.dubbo.registry.client.ServiceInstance,java.lang.String)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.event.AbstractEventDispatcher$lambda_null_5__489:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:void lambda$clusterRefresh$4(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker$lambda_clusterRefresh_4__381:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void migrateToServiceDiscoveryInvoker(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:void doMigrate(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void fallbackToInterfaceInvoker()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:void doMigrate(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:void migrateToServiceDiscoveryInvoker(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:void doMigrate(java.lang.String)",
            "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:void fallbackToInterfaceInvoker()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker doRefer(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker$lambda_clusterDestroy_3__380:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker$lambda_fallbackToInterfaceInvoker_3__293:void onChange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.DynamicDirectory:void setInvokersChangedListener(org.apache.dubbo.registry.client.migration.InvokersChangedListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void invokersChanged()"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker$lambda_migrateToServiceDiscoveryInvoker_2__290:void onChange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.DynamicDirectory:void setInvokersChangedListener(org.apache.dubbo.registry.client.migration.InvokersChangedListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void invokersChanged()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:void decode()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])",
            "org.apache.dubbo.remoting.transport.DecodeHandler:void decode(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void lambda$null$3(java.lang.String,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener$lambda_null_3__256:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.sofa.SofaRegistry:void handleRegistryData(com.alipay.sofa.registry.client.api.model.UserData,org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.sofa.SofaRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.sofa.SofaRegistry:void lambda$doSubscribe$0(org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch,java.lang.String,com.alipay.sofa.registry.client.api.model.UserData)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void subscribeURLs(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Set)",
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void lambda$null$3(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.sofa.SofaRegistry:void handleRegistryData(com.alipay.sofa.registry.client.api.model.UserData,org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notifySourceListener()",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.dubbo.registry.NotifyListener$ReverseCompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void compareAddresses(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.rpc.cluster.ClusterInvoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void lambda$migrateToServiceDiscoveryInvoker$1()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void lambda$migrateToServiceDiscoveryInvoker$0()"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void subscribeURLs(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Set)",
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void lambda$null$3(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.dubbo.DubboRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.sofa.SofaRegistry:void handleRegistryData(com.alipay.sofa.registry.client.api.model.UserData,org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void access$000(org.apache.dubbo.registry.integration.RegistryDirectory,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener:void lambda$notifyOverrides$0(org.apache.dubbo.registry.integration.RegistryDirectory)",
            "org.apache.dubbo.registry.integration.RegistryDirectory$ReferenceConfigurationListener:void notifyOverrides()"
        ]
    },
    "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(java.lang.String,org.apache.dubbo.remoting.ChannelHandler[])",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchanger:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.redis.RedisRegistry$NotifySub:void onPMessage(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.List lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.ListenerRegistryWrapper:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:java.util.List lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:java.util.List lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void doRegister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedRegisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void register(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void reExportRegister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void doUnregister(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedUnregisteredTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void unregister(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void reExportUnregister(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$scheduleServiceNamesLookup$6(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set filterServiceNames(org.apache.dubbo.registry.nacos.NacosServiceName)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNames0(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getAllServiceNames()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNamesForOps(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$scheduleServiceNamesLookup$6(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient initClient(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void initClient()",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.exchange.ExchangeHandler)",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.ProtocolServer createServer(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.ProtocolServer getServer(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(java.lang.String,org.apache.dubbo.remoting.exchange.ExchangeHandler)",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void openServer(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void reset(org.apache.dubbo.common.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.ServerDelegate:void reset(org.apache.dubbo.common.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener$lambda_notifyOverrides_0__309:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:void process(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$fireConfigChangeEvent$7(java.lang.String,java.io.File,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigChangeType,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.zookeeper.CacheListener:void lambda$dataChanged$1(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration$ApolloListener:void lambda$onChange$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration$NacosConfigListener:void lambda$innerReceive$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.configcenter.consul.ConsulDynamicConfiguration$ConsulListener:void lambda$null$1(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry:void lambda$new$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.dubbo.DubboRegistry$lambda_new_0__550:void run()"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperRegistry$lambda_new_0__552:void stateChanged(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperClient:void stateChanged(int)"
        ]
    },
    "org.apache.dubbo.registry.etcd.EtcdRegistry$lambda_new_0__599:void stateChanged(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.support.AbstractEtcdClient:void stateChanged(int)"
        ]
    },
    "com.alibaba.dubbo.registry.support.FailbackRegistry:void recover()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.client.metadata.MetadataUtils$lambda_getMetadataServiceProxy_0__64:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.monitor.support.AbstractMonitorFactory:org.apache.dubbo.monitor.Monitor lambda$getMonitor$0(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.support.AbstractMonitorFactory$lambda_getMonitor_0__644:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$lambda_new_0__496:void stateChanged(io.etcd.jetcd.Client,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void lambda$start$18()"
        ]
    },
    "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.util.NacosNamingServiceUtils:void setProperties(org.apache.dubbo.common.URL,java.util.Properties)",
            "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration:void setProperties(org.apache.dubbo.common.URL,java.util.Properties)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster$InterceptorInvokerNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.interceptor.ClusterInterceptor:org.apache.dubbo.rpc.Result intercept(org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.merger.MergerFactory:org.apache.dubbo.rpc.cluster.Merger getMerger(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareCluster:org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker doJoin(org.apache.dubbo.rpc.cluster.Directory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster:org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory)"
        ]
    },
    "org.apache.dubbo.config.AbstractConfig:void refresh()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void checkAndUpdateSubConfigs()",
            "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void startConfigCenter()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.MonitorConfig getMonitor()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.MetricsConfig getMetrics()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ModuleConfig getModule()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.SslConfig getSsl()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ConsumerConfig lambda$checkGlobalConfigs$2()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ProviderConfig lambda$checkGlobalConfigs$1()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void checkInterfaceAndMethods(java.lang.Class,java.util.List)",
            "org.apache.dubbo.config.ApplicationConfig:void refresh()",
            "org.apache.dubbo.config.ProtocolConfig:void refresh()",
            "org.apache.dubbo.config.RegistryConfig:void refresh()",
            "org.apache.dubbo.config.context.ConfigManager$refresh__130:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$refresh__131:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$refresh__134:void accept(java.lang.Object)",
            "org.apache.dubbo.config.context.ConfigManager$refresh__135:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Set getProtocolIds()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void loadRemoteConfigs()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager:java.util.Set getRegistryIds()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void loadRemoteConfigs()"
        ]
    },
    "org.apache.dubbo.common.config.ConfigurationUtils:org.apache.dubbo.common.config.Configuration getSystemConfiguration()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)",
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult:void decode()",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decodeEventData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectInput,byte[])"
        ]
    },
    "org.apache.dubbo.common.config.ConfigurationUtils:org.apache.dubbo.common.config.Configuration getEnvConfiguration()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.ConfigurationUtils:org.apache.dubbo.common.config.Configuration getGlobalConfiguration()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.ConfigurationUtils:int getServerShutdownTimeout()",
            "org.apache.dubbo.common.config.ConfigurationUtils:java.lang.String getProperty(java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.config.ConfigurationUtils:int get(java.lang.String,int)"
        ]
    },
    "org.apache.dubbo.common.config.ConfigurationUtils:org.apache.dubbo.common.config.Configuration getDynamicGlobalConfiguration()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void lambda$genCompatibleRegistries$0(java.util.List,boolean,java.util.List,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.ConfigurationUtils:java.lang.String getDynamicProperty(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:org.apache.dubbo.common.config.configcenter.DynamicConfiguration getDynamicConfiguration()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:void <init>()",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyEventLoopFactory:boolean shouldEpoll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyEventLoopFactory:io.netty.channel.EventLoopGroup eventLoopGroup(int,java.lang.String)",
            "org.apache.dubbo.remoting.transport.netty4.NettyEventLoopFactory:java.lang.Class socketChannelClass()",
            "org.apache.dubbo.remoting.transport.netty4.NettyEventLoopFactory:java.lang.Class serverSocketChannelClass()"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder:org.apache.dubbo.config.ReferenceConfig build()",
            "org.apache.dubbo.config.spring.ReferenceBean:void <init>()",
            "com.alibaba.dubbo.config.ReferenceConfig:void <init>()"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:void <init>(org.apache.dubbo.config.'annotation'.Reference)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.ReferenceBean:void <init>(org.apache.dubbo.config.'annotation'.Reference)",
            "com.alibaba.dubbo.config.ReferenceConfig:void <init>(org.apache.dubbo.config.'annotation'.Reference)"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:java.util.Collection allConsumerModels()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.Ls:java.lang.String listConsumer()",
            "org.apache.dubbo.qos.legacy.ListTelnetHandler:void printSpecifiedReferredService(java.lang.String,java.lang.StringBuilder,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:java.util.Collection allProviderModels()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.Ls:java.lang.String listProvider()",
            "org.apache.dubbo.qos.command.impl.Ready:java.util.Map isServiceReady(java.lang.String)",
            "org.apache.dubbo.qos.legacy.InvokeTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.ListTelnetHandler:void printSpecifiedProvidedService(java.lang.String,java.lang.StringBuilder,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.rpc.model.ProviderModel getProviderModel(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.rest.RestProtocol:java.lang.Runnable doExport(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void registerStatedUrl(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.rpc.model.ConsumerModel getConsumerModel(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.model.AsyncMethodInfo getAsyncMethodInfo(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:void <init>(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.RpcInvocation:void initParameterDesc()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.RpcInvocation:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Class[],java.lang.Object[],java.util.Map,org.apache.dubbo.rpc.Invoker,java.util.Map)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:java.lang.Runnable doExport(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.remoting.transport.CodecSupport:void checkSerialization(java.lang.String,java.lang.String,java.lang.Byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL getStatedUrl(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:void doReExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Offline:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.Offline:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])",
            "org.apache.dubbo.qos.command.impl.Offline:boolean offline(java.lang.String)",
            "org.apache.dubbo.qos.command.impl.Offline:void <clinit>()"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Online:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.Online:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])",
            "org.apache.dubbo.qos.command.impl.Online:boolean online(java.lang.String)",
            "org.apache.dubbo.qos.command.impl.Online:void <clinit>()"
        ]
    },
    "org.apache.dubbo.qos.legacy.ListTelnetHandler:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequest(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Request)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String getServerSideCallbackInvokerCacheKey(org.apache.dubbo.remoting.Channel,java.lang.String,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:boolean isInstancesOverLimit(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.String,int,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:void increaseInstanceCount(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:void decreaseInstanceCount(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object encodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object decodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,java.lang.Class[],int,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:void <clinit>()",
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.status.ServerStatusChecker:org.apache.dubbo.common.status.Status check()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.telnet.support.command.StatusTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.qos.legacy.ChangeTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.qos.legacy.PortTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.qos.legacy.TraceTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:boolean shouldJvmRefer(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalDecoder:void decode(org.apache.mina.common.IoSession,org.apache.mina.common.ByteBuffer,org.apache.mina.filter.codec.ProtocolDecoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalEncoder:java.lang.Object encode(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalEncoder:void encode(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.buffer.ByteBuf)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalEncoder:void encode(org.apache.mina.common.IoSession,java.lang.Object,org.apache.mina.filter.codec.ProtocolEncoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleWrite(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.redis.RedisProtocol:org.apache.dubbo.common.serialize.Serialization access$000(org.apache.dubbo.rpc.protocol.redis.RedisProtocol,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.redis.RedisProtocol$1:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Class createAdaptiveExtensionClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Class getAdaptiveExtensionClass()"
        ]
    },
    "org.apache.dubbo.common.config.Environment:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:java.util.List getActivateExtension(org.apache.dubbo.common.URL,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void checkAndUpdateSubConfigs()",
            "org.apache.dubbo.config.ReferenceConfig:void postProcessConfig()",
            "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()",
            "org.apache.dubbo.config.ServiceConfig:void postProcessConfig()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void notify(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:java.util.List getActivateExtension(org.apache.dubbo.common.URL,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker buildInvokerChain(org.apache.dubbo.rpc.Invoker,java.lang.String,java.lang.String)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.ServerBuilder buildServerBuilder(org.apache.dubbo.common.URL,io.grpc.netty.NettyServerBuilder)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.ManagedChannel buildManagedChannel(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.extension.ExtensionLoader:java.util.List getActivateExtension(org.apache.dubbo.common.URL,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfigurationFactory:org.apache.dubbo.common.config.configcenter.DynamicConfigurationFactory getDynamicConfigurationFactory(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:org.apache.dubbo.common.config.configcenter.DynamicConfiguration getDynamicConfiguration(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryFactory:org.apache.dubbo.registry.client.ServiceDiscoveryFactory getExtension(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:org.apache.dubbo.registry.client.ServiceDiscovery getServiceDiscovery(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.MetadataServiceExporter:org.apache.dubbo.metadata.MetadataServiceExporter getExtension(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.MetadataServiceExporter:org.apache.dubbo.metadata.MetadataServiceExporter getDefaultExtension()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyExecutorRepository()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.AbstractRouter:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.condition.config.ListenableRouter:void <init>(org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractInvoker:java.util.concurrent.ExecutorService getCallbackExecutor(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.status.ThreadPoolStatusChecker:org.apache.dubbo.common.status.Status check()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.telnet.support.command.StatusTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:org.apache.dubbo.common.config.configcenter.DynamicConfiguration lambda$getDynamicConfiguration$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration$lambda_getDynamicConfiguration_0__206:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.event.EventDispatcher:org.apache.dubbo.event.EventDispatcher getDefaultExtension()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void <init>(java.lang.String)",
            "org.apache.dubbo.config.ReferenceConfig:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.config.ServiceConfig:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void <init>()",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dispatchThreadPoolExhaustedEvent(java.lang.String)",
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void <init>(org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.ServiceDiscovery:void dispatchServiceInstancesChangedEvent(org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent)",
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void initialize(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.eureka.EurekaServiceDiscovery:void <init>()"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.mina.MinaServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:java.util.concurrent.ExecutorService getSharedExecutorService()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:java.util.concurrent.ExecutorService getPreferredExecutorService(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:java.util.concurrent.ExecutorService getExecutorService()"
        ]
    },
    "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener:void <init>()",
            "org.apache.dubbo.registry.integration.RegistryDirectory$ReferenceConfigurationListener:void <init>(org.apache.dubbo.registry.integration.RegistryDirectory,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener:void <init>(org.apache.dubbo.registry.integration.RegistryProtocol)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ServiceConfigurationListener:void <init>(org.apache.dubbo.registry.integration.RegistryProtocol,org.apache.dubbo.common.URL,org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener)"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.MetricsFilter:java.util.List getThreadPoolMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:java.util.List access$000(org.apache.dubbo.monitor.dubbo.MetricsFilter)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.PublishMetadata:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.metadata.ServiceNameMapping:org.apache.dubbo.metadata.ServiceNameMapping getDefaultExtension()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.metadata.WritableMetadataService:org.apache.dubbo.metadata.WritableMetadataService getDefaultExtension()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initMetadataService()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$registerServiceInstance$20()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceURLParamsMetadataCustomizer:java.lang.String resolveMetadataPropertyValue(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl getRemoteMetadataService()",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void publishServiceDefinition(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void calInstanceRevision(org.apache.dubbo.registry.client.ServiceDiscovery,org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$start$10()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_start_10__30:void run()"
        ]
    },
    "org.apache.dubbo.config.ApplicationConfig:void appendEnvironmentProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ApplicationConfig:void refresh()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:boolean shouldMigrate(boolean,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:java.util.List list(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.model.ServiceRepository:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:java.util.Optional getConfigurator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.ServerBuilder buildServerBuilder(org.apache.dubbo.common.URL,io.grpc.netty.NettyServerBuilder)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.ManagedChannel buildManagedChannel(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.CallOptions buildCallOptions(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.convert.Converter:org.apache.dubbo.common.convert.Converter getConverter(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.convert.Converter:java.lang.Object convertIfPossible(java.lang.Object,java.lang.Class)",
            "org.apache.dubbo.common.convert.multiple.StringToArrayConverter:java.lang.Object convert(java.lang.String[],int,java.lang.Class,java.lang.Class)",
            "org.apache.dubbo.common.convert.multiple.StringToIterableConverter:java.util.Optional getStringConverter(java.lang.Class)"
        ]
    },
    "org.apache.dubbo.common.convert.multiple.MultiValueConverter:org.apache.dubbo.common.convert.multiple.MultiValueConverter find(java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.convert.multiple.MultiValueConverter:java.lang.Object convertIfPossible(java.lang.Object,java.lang.Class,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.common.lang.ShutdownHookCallbacks:void loadCallbacks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.lang.ShutdownHookCallbacks:void <init>()"
        ]
    },
    "org.apache.dubbo.event.AbstractEventDispatcher:void loadEventListenerInstances()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.event.AbstractEventDispatcher:void <init>(java.util.concurrent.Executor)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:java.util.List initSubscribedURLsSynthesizers()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.definition.MethodDefinitionBuilder:void <init>()",
            "org.apache.dubbo.metadata.definition.ServiceDefinitionBuilder:void build(org.apache.dubbo.metadata.definition.model.ServiceDefinition,java.lang.Class)",
            "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)",
            "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:org.apache.dubbo.metadata.definition.builder.TypeBuilder getGenericTypeBuilder(java.lang.reflect.Type,java.lang.Class)",
            "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class)",
            "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:void <clinit>()",
            "org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)",
            "org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)",
            "org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.Class,java.util.Map)",
            "org.apache.dubbo.metadata.definition.builder.MapTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)"
        ]
    },
    "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:java.util.Map loadAnnotatedMethodParameterProcessors()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:void <init>()"
        ]
    },
    "org.apache.dubbo.config.ApplicationConfig:void setLogger(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.ApplicationBuilder:org.apache.dubbo.config.ApplicationConfig build()"
        ]
    },
    "org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput:com.alibaba.com.caucho.hessian.io.Hessian2Input lambda$static$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput$lambda_static_0__470:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput:com.alibaba.com.caucho.hessian.io.Hessian2Output lambda$static$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput$lambda_static_0__471:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.Exchanger getExchanger(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractEndpoint:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractEndpoint:void reset(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.AbstractEndpoint:void reset(org.apache.dubbo.common.Parameters)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reset(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractCodec:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequest(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Request)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractCodec:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractCodec:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.codec.TransportCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.codec.TransportCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.CodecSupport:org.apache.dubbo.common.serialize.Serialization getSerializationById(java.lang.Byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport:org.apache.dubbo.common.serialize.Serialization getRequestSerialization(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport:org.apache.dubbo.common.serialize.Serialization getResponseSerialization(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.AppResponse)",
            "org.apache.dubbo.remoting.transport.CodecSupport:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.common.URL,java.lang.Byte)",
            "org.apache.dubbo.remoting.transport.CodecSupport:boolean isHeartBeat(byte[],byte)"
        ]
    },
    "org.apache.dubbo.remoting.transport.CodecSupport:java.lang.Byte getIDByName(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.remoting.transport.CodecSupport:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.common.URL,java.lang.Byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)",
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)",
            "org.apache.dubbo.remoting.transport.CodecSupport:org.apache.dubbo.common.serialize.ObjectInput deserialize(org.apache.dubbo.common.URL,java.io.InputStream,byte)"
        ]
    },
    "org.apache.dubbo.remoting.transport.CodecSupport:org.apache.dubbo.common.serialize.ObjectInput deserialize(org.apache.dubbo.common.URL,java.io.InputStream,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.CodecSupport:byte[] getNullBytesOf(org.apache.dubbo.common.serialize.Serialization)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequest(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.transport.CodecSupport:boolean isHeartBeat(byte[],byte)"
        ]
    },
    "org.apache.dubbo.remoting.transport.CodecSupport:byte[] getPayload(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.CodecSupport:byte[] getBuffer(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.CodecSupport:byte[] getPayload(java.io.InputStream)"
        ]
    },
    "org.apache.dubbo.remoting.transport.CodecSupport:boolean isHeartBeat(byte[],byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.CodecSupport:byte[] lambda$getNullBytesOf$1(org.apache.dubbo.common.serialize.Serialization,java.lang.Byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.CodecSupport$lambda_getNullBytesOf_1__298:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.CodecSupport$lambda_getNullBytesOf_1__298:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.CodecSupport$lambda_static_0__299:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.AbstractServiceDiscoveryFactory:org.apache.dubbo.registry.client.ServiceDiscovery lambda$getServiceDiscovery$0(org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.AbstractServiceDiscoveryFactory$lambda_getServiceDiscovery_0__531:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:org.apache.dubbo.metadata.MetadataInfo getMetadataInfo(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void onEvent(org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.lang.String getRegistryCluster(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Help:java.lang.String commandHelp(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.Help:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Help:java.lang.String mainHelp()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.Help:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReportFactory:org.apache.dubbo.metadata.report.MetadataReport createMetadataReport(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.store.failover.StrategyMetadataReport:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener:void lambda$notifyOverrides$0(org.apache.dubbo.registry.integration.RegistryDirectory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener$lambda_notifyOverrides_0__312:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory$ReferenceConfigurationListener:void notifyOverrides()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:void process(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List toMergeInvokerList(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Optional toRouters(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:org.apache.dubbo.common.URL overrideWithConfigurator(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:org.apache.dubbo.common.URL mergeUrl(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List doList(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory:java.util.List list(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:boolean isValidCategory(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory$isValidCategory__285:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void overrideDirectoryUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshOverrideAndInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory$lambda_toMergeInvokerList_0__289:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker$lambda_clusterRefresh_4__381:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.ServiceDiscoveryMigrationInvoker:void fallbackToInterfaceInvoker()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationRuleHandler:void doMigrate(java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.integration.DynamicDirectory:void setInvokersChangedListener(org.apache.dubbo.registry.client.migration.InvokersChangedListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void clearListener(org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void setListener(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.registry.client.migration.InvokersChangedListener)"
        ]
    },
    "org.apache.dubbo.registry.integration.DynamicDirectory:void invokersChanged()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener$lambda_null_3__256:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.sofa.SofaRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.sofa.SofaRegistry:void lambda$doSubscribe$0(org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch,java.lang.String,com.alipay.sofa.registry.client.api.model.UserData)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notifySourceListener()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleRegistry$SingleNotifyListener:void notify(java.util.List)"
        ]
    },
    "com.alibaba.dubbo.registry.NotifyListener$ReverseCompatibleNotifyListener:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void subscribeURLs(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Set)",
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void lambda$null$3(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.sofa.SofaRegistry:void handleRegistryData(com.alipay.sofa.registry.client.api.model.UserData,org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void lambda$migrateToServiceDiscoveryInvoker$1()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker$lambda_migrateToServiceDiscoveryInvoker_1__292:void onChange()"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void lambda$migrateToServiceDiscoveryInvoker$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker$lambda_migrateToServiceDiscoveryInvoker_0__291:void onChange()"
        ]
    },
    "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(java.lang.String,org.apache.dubbo.remoting.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.support.AbstractGroup:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.FileGroup:void changed()",
            "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void receive(java.lang.String,java.net.InetSocketAddress)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.retry.FailedSubscribedTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.support.FailbackRegistry:void subscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$scheduleServiceNamesLookup$6(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_scheduleServiceNamesLookup_6__619:void run()"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNames0(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNames(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNamesForOps(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNames(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient initClient(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient[] getClients(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient buildReferenceCountExchangeClient(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void initClient()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.exchange.support.Replier)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.support.Replier)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void changed()",
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void receive(java.lang.String,java.net.InetSocketAddress)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.ProtocolServer createServer(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void openServer(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.ProtocolServer getServer(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.support.Replier)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(java.lang.String,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(java.lang.String,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer joinExchange(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)",
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$fireConfigChangeEvent$7(java.lang.String,java.io.File,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigChangeType,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_fireConfigChangeEvent_7__432:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.configcenter.support.zookeeper.CacheListener:void lambda$dataChanged$1(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.zookeeper.CacheListener$lambda_dataChanged_1__653:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration$ApolloListener:void lambda$onChange$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration$ApolloListener$lambda_onChange_0__654:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration$NacosConfigListener:void lambda$innerReceive$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration$NacosConfigListener$lambda_innerReceive_0__657:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void onNext(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.configcenter.consul.ConsulDynamicConfiguration$ConsulListener:void lambda$null$1(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.consul.ConsulDynamicConfiguration$ConsulListener$lambda_null_1__666:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.dubbo.DubboRegistry$lambda_new_0__550:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.remoting.zookeeper.support.AbstractZookeeperClient:void stateChanged(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient:void access$300(org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient,int)",
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient:void access$400(org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient,int)",
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient:void access$500(org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient,int)",
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient:void access$600(org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient,int)",
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient:void access$700(org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient,int)"
        ]
    },
    "org.apache.dubbo.monitor.support.AbstractMonitorFactory$lambda_getMonitor_0__644:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void lambda$start$18()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper$lambda_start_18__516:void run()"
        ]
    },
    "org.apache.dubbo.registry.nacos.util.NacosNamingServiceUtils:void setProperties(org.apache.dubbo.common.URL,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.util.NacosNamingServiceUtils:java.util.Properties buildNacosProperties(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration:void setProperties(org.apache.dubbo.common.URL,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration:java.util.Properties buildNacosProperties(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster:org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterWrapper:org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List toMergeInvokerList(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)",
            "org.apache.dubbo.registry.dubbo.DubboRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.AbstractInterfaceConfig:void checkInterfaceAndMethods(java.lang.Class,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void checkAndUpdateSubConfigs()",
            "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.config.ApplicationConfig:void refresh()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ApplicationConfig getApplication()",
            "org.apache.dubbo.config.context.ConfigManager$refresh__129:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.ProtocolConfig:void refresh()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ProtocolConfig lambda$null$7(java.lang.String)",
            "org.apache.dubbo.config.ServiceConfigBase:void convertProtocolIdsToProtocols()",
            "org.apache.dubbo.config.ServiceConfigBase:void lambda$convertProtocolIdsToProtocols$1(java.util.List,java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager$refresh__132:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.RegistryConfig:void refresh()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.RegistryConfig lambda$null$4(java.lang.String)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void convertRegistryIdsToRegistries()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void lambda$convertRegistryIdsToRegistries$2(java.util.List,java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager$refresh__133:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__130:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__131:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__134:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__135:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void loadRemoteConfigs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initialize()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decodeEventData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectInput,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:java.lang.Object decodeBody(org.apache.dubbo.remoting.Channel,java.io.InputStream,byte[])"
        ]
    },
    "org.apache.dubbo.common.config.ConfigurationUtils:int getServerShutdownTimeout()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void closeReferenceCountExchangeClient(org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void lambda$unexport$0()"
        ]
    },
    "org.apache.dubbo.common.config.ConfigurationUtils:java.lang.String getProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.ConfigurationUtils:java.lang.String getProperty(java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.ConfigurationUtils:int get(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void registerServiceInstance()",
            "org.apache.dubbo.registry.client.metadata.StandardMetadataServiceURLBuilder:java.util.List build(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void lambda$genCompatibleRegistries$0(java.util.List,boolean,java.util.List,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils$lambda_genCompatibleRegistries_0__88:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.config.ConfigurationUtils:java.lang.String getDynamicProperty(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.ConfigurationUtils:java.lang.String getDynamicProperty(java.lang.String)",
            "org.apache.dubbo.registry.client.migration.DefaultMigrationAddressComparator:boolean shouldMigrate(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.rpc.cluster.ClusterInvoker)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyEventLoopFactory:io.netty.channel.EventLoopGroup eventLoopGroup(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyClient:void <clinit>()",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doOpen()"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyEventLoopFactory:java.lang.Class socketChannelClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyClient:void doOpen()"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyEventLoopFactory:java.lang.Class serverSocketChannelClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doOpen()"
        ]
    },
    "org.apache.dubbo.config.spring.ReferenceBean:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceBeanBuilder:org.apache.dubbo.config.spring.ReferenceBean doBuild()"
        ]
    },
    "com.alibaba.dubbo.config.ReferenceConfig:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.spring.ReferenceBean:void <init>(org.apache.dubbo.config.'annotation'.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.config.ReferenceConfig:void <init>(org.apache.dubbo.config.'annotation'.Reference)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.qos.command.impl.Ls:java.lang.String listConsumer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.Ls:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.qos.legacy.ListTelnetHandler:void printSpecifiedReferredService(java.lang.String,java.lang.StringBuilder,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.legacy.ListTelnetHandler:void printSpecifiedService(java.lang.String,java.lang.StringBuilder,boolean)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Ls:java.lang.String listProvider()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.Ls:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.qos.legacy.ListTelnetHandler:void printSpecifiedProvidedService(java.lang.String,java.lang.StringBuilder,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.legacy.ListTelnetHandler:void printSpecifiedService(java.lang.String,java.lang.StringBuilder,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.rest.RestProtocol:java.lang.Runnable doExport(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void registerStatedUrl(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.model.AsyncMethodInfo getAsyncMethodInfo(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireInvokeCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireReturnCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireThrowCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:void <init>(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,java.lang.Class[])",
            "org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,java.lang.Class[])"
        ]
    },
    "org.apache.dubbo.rpc.RpcInvocation:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Class[],java.lang.Object[],java.util.Map,org.apache.dubbo.rpc.Invoker,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.RpcInvocation:void <init>(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.RpcInvocation:void <init>(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.RpcInvocation:void <init>(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.Object[],java.util.Map,java.util.Map)",
            "org.apache.dubbo.rpc.RpcInvocation:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Class[],java.lang.Object[])",
            "org.apache.dubbo.rpc.RpcInvocation:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Class[],java.lang.Object[],java.util.Map)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String getServerSideCallbackInvokerCacheKey(org.apache.dubbo.remoting.Channel,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:boolean isInstancesOverLimit(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.String,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:void increaseInstanceCount(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:void decreaseInstanceCount(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.redis.RedisProtocol$1:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Class getAdaptiveExtensionClass()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object createAdaptiveExtension()"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:void postProcessConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void postProcessConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker buildInvokerChain(org.apache.dubbo.rpc.Invoker,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:java.util.List getActivateExtension(org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.RouterChain:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.cluster.support.ClusterUtils:org.apache.dubbo.common.URL mergeProviderUrl(org.apache.dubbo.common.URL,java.util.Map)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster:org.apache.dubbo.rpc.Invoker buildClusterInterceptors(org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker,java.lang.String)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.telnet.support.command.HelpTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.command.StatusTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.registry.RegistryFactoryWrapper:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void notifyExport(org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:java.util.List findRegistryProtocolListeners(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.MetadataInfo$ServiceInfo:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:org.apache.dubbo.common.config.configcenter.DynamicConfiguration getDynamicConfiguration(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.common.config.configcenter.DynamicConfiguration prepareEnvironment(org.apache.dubbo.config.ConfigCenterConfig)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:org.apache.dubbo.registry.client.ServiceDiscovery getServiceDiscovery(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:org.apache.dubbo.registry.client.ServiceDiscovery createServiceDiscovery(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.MetadataServiceExporter:org.apache.dubbo.metadata.MetadataServiceExporter getDefaultExtension()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.cluster.router.condition.config.ListenableRouter:void <init>(org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.condition.config.AppRouter:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.cluster.router.condition.config.ServiceRouter:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouterFactory:org.apache.dubbo.rpc.cluster.Router createRouter(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.DynamicConfiguration$lambda_getDynamicConfiguration_0__206:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.DubboShutdownHook:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void <clinit>()"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void <init>(org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:org.apache.dubbo.registry.client.ServiceDiscovery enhanceEventPublishing(org.apache.dubbo.registry.client.ServiceDiscovery)"
        ]
    },
    "org.apache.dubbo.registry.eureka.EurekaServiceDiscovery:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty.NettyServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyTransporter:org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyTransporter:org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.mina.MinaServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.mina.MinaTransporter:org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyTransporter:org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:java.util.concurrent.ExecutorService getPreferredExecutorService(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.direct.DirectChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:java.util.concurrent.ExecutorService getExecutorService()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void connected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void disconnected(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory$ReferenceConfigurationListener:void <init>(org.apache.dubbo.registry.integration.RegistryDirectory,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol$ServiceConfigurationListener:void <init>(org.apache.dubbo.registry.integration.RegistryProtocol,org.apache.dubbo.common.URL,org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL overrideUrlWithConfig(org.apache.dubbo.common.URL,org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener)"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.MetricsFilter:java.util.List access$000(org.apache.dubbo.monitor.dubbo.MetricsFilter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.dubbo.MetricsFilter$3:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initMetadataService()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initialize()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataServiceURLParamsMetadataCustomizer:java.lang.String resolveMetadataPropertyValue(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.MetadataServiceURLParamsMetadataCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl getRemoteMetadataService()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void publishMetadataToRemote(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:org.apache.dubbo.metadata.MetadataInfo getMetadataInfo(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void publishServiceDefinition(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void refreshMetadataAndInstance()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.ProtocolPortsMetadataCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$createServiceInstance$23(org.apache.dubbo.registry.client.ServiceInstanceCustomizer)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void calInstanceRevision(org.apache.dubbo.registry.client.ServiceDiscovery,org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$doRegisterServiceInstance$21(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void lambda$refreshMetadataAndInstance$6(org.apache.dubbo.registry.client.ServiceDiscovery)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_start_10__30:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.CallOptions buildCallOptions(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.convert.Converter:java.lang.Object convertIfPossible(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.lang.Object getParameter(java.lang.String,java.lang.Class,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.convert.multiple.StringToArrayConverter:java.lang.Object convert(java.lang.String[],int,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.convert.multiple.StringToMultiValueConverter:java.lang.Object convert(java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.common.convert.multiple.StringToIterableConverter:java.util.Optional getStringConverter(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.convert.multiple.StringToIterableConverter:java.lang.Object convert(java.lang.String[],int,java.lang.Class,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.common.convert.multiple.MultiValueConverter:java.lang.Object convertIfPossible(java.lang.Object,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.lang.ShutdownHookCallbacks:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.lang.ShutdownHookCallbacks:void <clinit>()"
        ]
    },
    "org.apache.dubbo.event.AbstractEventDispatcher:void <init>(java.util.concurrent.Executor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.event.DirectEventDispatcher:void <init>()",
            "org.apache.dubbo.event.ParallelEventDispatcher:void <init>()"
        ]
    },
    "org.apache.dubbo.metadata.definition.MethodDefinitionBuilder:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:org.apache.dubbo.metadata.definition.model.MethodDefinition resolveMethodDefinition(java.lang.reflect.Method,java.lang.Class,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.metadata.definition.ServiceDefinitionBuilder:void build(org.apache.dubbo.metadata.definition.model.ServiceDefinition,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.definition.ServiceDefinitionBuilder:org.apache.dubbo.metadata.definition.model.ServiceDefinition build(java.lang.Class)",
            "org.apache.dubbo.metadata.definition.ServiceDefinitionBuilder:org.apache.dubbo.metadata.definition.model.FullServiceDefinition buildFullDefinition(java.lang.Class)",
            "org.apache.dubbo.metadata.definition.ServiceDefinitionBuilder:org.apache.dubbo.metadata.definition.model.FullServiceDefinition buildFullDefinition(java.lang.Class,java.util.Map)"
        ]
    },
    "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class)",
            "org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)",
            "org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)",
            "org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.Class,java.util.Map)",
            "org.apache.dubbo.metadata.definition.builder.MapTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)"
        ]
    },
    "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:org.apache.dubbo.metadata.definition.builder.TypeBuilder getGenericTypeBuilder(java.lang.reflect.Type,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)"
        ]
    },
    "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.definition.MethodDefinitionBuilder:org.apache.dubbo.metadata.definition.model.MethodDefinition build(java.lang.reflect.Method)",
            "org.apache.dubbo.metadata.definition.ServiceDefinitionBuilder:void build(org.apache.dubbo.metadata.definition.model.ServiceDefinition,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.metadata.definition.builder.ArrayTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)"
        ]
    },
    "org.apache.dubbo.metadata.definition.builder.CollectionTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)"
        ]
    },
    "org.apache.dubbo.metadata.definition.builder.DefaultTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)"
        ]
    },
    "org.apache.dubbo.metadata.definition.builder.MapTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)"
        ]
    },
    "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver:void <init>()",
            "org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver:void <init>()",
            "org.apache.dubbo.metadata.rest.springmvc.SpringMvcServiceRestMetadataResolver:void <init>()"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.ApplicationBuilder:org.apache.dubbo.config.ApplicationConfig build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.builders.ApplicationBuilder:org.apache.dubbo.config.AbstractConfig build()"
        ]
    },
    "org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput$lambda_static_0__470:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput$lambda_static_0__471:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reset(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reset(org.apache.dubbo.common.Parameters)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reset(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractEndpoint:void reset(org.apache.dubbo.common.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void reset(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reset(org.apache.dubbo.common.Parameters)"
        ]
    },
    "org.apache.dubbo.remoting.transport.codec.TransportCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyCodecAdapter$InternalDecoder:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.dubbo.remoting.transport.netty4.NettyCodecAdapter$InternalDecoder:void decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)",
            "org.apache.dubbo.remoting.transport.mina.MinaCodecAdapter$InternalDecoder:void decode(org.apache.mina.common.IoSession,org.apache.mina.common.ByteBuffer,org.apache.mina.filter.codec.ProtocolDecoderOutput)",
            "org.apache.dubbo.remoting.transport.grizzly.GrizzlyCodecAdapter:org.glassfish.grizzly.filterchain.NextAction handleRead(org.glassfish.grizzly.filterchain.FilterChainContext)"
        ]
    },
    "org.apache.dubbo.registry.client.AbstractServiceDiscoveryFactory$lambda_getServiceDiscovery_0__531:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void onEvent(org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$subscribeURLs$3(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void onEvent(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryChangeWatcher:void process(org.apache.zookeeper.WatchedEvent)",
            "org.apache.dubbo.registry.sofa.SofaRegistryServiceDiscovery:java.util.List handleRegistryData(java.lang.String,com.alipay.sofa.registry.client.api.model.UserData,org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener,java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery$MultiServiceInstancesChangedListener:void onEvent(org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:java.util.Set findMappedServices(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Help:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)"
        ]
    },
    "org.apache.dubbo.metadata.store.failover.FailoverMetadataReportFactory:org.apache.dubbo.metadata.report.MetadataReport createMetadataReport(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReportFactory:org.apache.dubbo.metadata.report.MetadataReport getMetadataReport(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener$lambda_notifyOverrides_0__312:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:org.apache.dubbo.common.URL mergeUrl(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory:java.util.List list(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:java.util.List list(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:java.util.List selectMockInvoker(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory$isValidCategory__285:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void clearListener(org.apache.dubbo.rpc.cluster.ClusterInvoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker()"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:void setListener(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.registry.client.migration.InvokersChangedListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void migrateToServiceDiscoveryInvoker(boolean)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void fallbackToInterfaceInvoker()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshServiceDiscoveryInvoker()",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void refreshInterfaceInvoker()"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistry$SingleNotifyListener:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void subscribeURLs(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.Set)",
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void lambda$null$3(java.lang.String,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.support.AbstractRegistry:void notify(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener,java.util.List)",
            "org.apache.dubbo.registry.sofa.SofaRegistry:void handleRegistryData(com.alipay.sofa.registry.client.api.model.UserData,org.apache.dubbo.registry.NotifyListener,java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry$MultipleNotifyListenerWrapper:void notify(java.util.List)",
            "com.alibaba.dubbo.registry.NotifyListener$CompatibleNotifyListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker$lambda_migrateToServiceDiscoveryInvoker_1__292:void onChange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.DynamicDirectory:void setInvokersChangedListener(org.apache.dubbo.registry.client.migration.InvokersChangedListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void invokersChanged()"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker$lambda_migrateToServiceDiscoveryInvoker_0__291:void onChange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.DynamicDirectory:void setInvokersChangedListener(org.apache.dubbo.registry.client.migration.InvokersChangedListener)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void invokersChanged()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.FileGroup:void changed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.FileGroup:void check()"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_scheduleServiceNamesLookup_6__619:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:java.util.Set getServiceNames(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:void doSubscribe(org.apache.dubbo.common.URL,org.apache.dubbo.registry.NotifyListener)",
            "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$lookup$0(org.apache.dubbo.common.URL,java.util.List,org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient[] getClients(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient buildReferenceCountExchangeClient(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:java.util.List getSharedClient(org.apache.dubbo.common.URL,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:java.util.List buildReferenceCountExchangeClientList(org.apache.dubbo.common.URL,int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void lambda$handleRequest$0(org.apache.dubbo.remoting.exchange.Response,org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient initClient(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void changed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void check()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(java.lang.String,org.apache.dubbo.remoting.exchange.support.Replier)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(java.lang.String,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer joinExchange(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangePeer join(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)",
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_fireConfigChangeEvent_7__432:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.configcenter.support.zookeeper.CacheListener$lambda_dataChanged_1__653:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration$ApolloListener$lambda_onChange_0__654:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration$NacosConfigListener$lambda_innerReceive_0__657:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void onNext(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void unwatch()",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:java.util.List forPath(java.lang.String)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void recreateWatchRequest()",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void closeWatchRequest()",
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void watch()",
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void cancelWatch()"
        ]
    },
    "org.apache.dubbo.configcenter.consul.ConsulDynamicConfiguration$ConsulListener$lambda_null_1__666:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient:void access$300(org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener:void stateChanged(org.apache.curator.framework.CuratorFramework,org.apache.curator.framework.state.ConnectionState)"
        ]
    },
    "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient:void access$400(org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener:void stateChanged(org.apache.curator.framework.CuratorFramework,org.apache.curator.framework.state.ConnectionState)"
        ]
    },
    "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient:void access$500(org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener:void stateChanged(org.apache.curator.framework.CuratorFramework,org.apache.curator.framework.state.ConnectionState)"
        ]
    },
    "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient:void access$600(org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener:void stateChanged(org.apache.curator.framework.CuratorFramework,org.apache.curator.framework.state.ConnectionState)"
        ]
    },
    "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient:void access$700(org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener:void stateChanged(org.apache.curator.framework.CuratorFramework,org.apache.curator.framework.state.ConnectionState)"
        ]
    },
    "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper$lambda_start_18__516:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.registry.nacos.util.NacosNamingServiceUtils:java.util.Properties buildNacosProperties(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.util.NacosNamingServiceUtils:org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper createNamingService(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration:java.util.Properties buildNacosProperties(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterWrapper:org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterWrapper:org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List toMergeInvokerList(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)",
            "org.apache.dubbo.registry.dubbo.DubboRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__129:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.ProtocolConfig lambda$null$7(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_null_7__54:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__132:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.RegistryConfig lambda$null$4(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_null_4__56:java.lang.Object get()"
        ]
    },
    "org.apache.dubbo.config.context.ConfigManager$refresh__133:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.common.config.ConfigurationUtils:java.lang.String getProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.infra.support.EnvironmentAdapter:java.util.Map getExtraAttributes(java.util.Map)",
            "org.apache.dubbo.common.infra.support.EnvironmentAdapter:java.lang.String getAttribute(java.lang.String)",
            "org.apache.dubbo.common.utils.NetUtils:java.lang.String getIpByConfig()",
            "org.apache.dubbo.common.serialize.hessian2.dubbo.Hessian2FactoryInitializer:org.apache.dubbo.common.serialize.hessian2.dubbo.Hessian2FactoryInitializer getInstance()",
            "org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer:com.alibaba.com.caucho.hessian.io.SerializerFactory createSerializerFactory()",
            "org.apache.dubbo.container.log4j.Log4jContainer:void start()"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.StandardMetadataServiceURLBuilder:java.util.List build(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService lambda$getMetadataServiceProxy$0(org.apache.dubbo.registry.client.ServiceInstance,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils$lambda_genCompatibleRegistries_0__88:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.common.config.ConfigurationUtils:java.lang.String getDynamicProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.client.migration.DefaultMigrationAddressComparator:boolean shouldMigrate(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.rpc.cluster.ClusterInvoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:boolean lambda$compareAddresses$4(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.registry.client.migration.MigrationAddressComparator)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClient:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.NettyClient$1:void initChannel(io.netty.channel.socket.SocketChannel)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClient:void doOpen()",
            "org.apache.dubbo.remoting.transport.netty4.NettyClient:void doConnect()",
            "org.apache.dubbo.remoting.transport.netty4.NettyClient:void doDisConnect()",
            "org.apache.dubbo.remoting.transport.netty4.NettyClient:void <clinit>()",
            "org.apache.dubbo.remoting.transport.netty4.NettyTransporter:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyServer:void doOpen()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClient:void doOpen()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceBeanBuilder:org.apache.dubbo.config.spring.ReferenceBean doBuild()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceBeanBuilder:org.apache.dubbo.config.AbstractInterfaceConfig doBuild()"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Ls:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)"
        ]
    },
    "org.apache.dubbo.qos.legacy.ListTelnetHandler:void printSpecifiedService(java.lang.String,java.lang.StringBuilder,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.legacy.ListTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireInvokeCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireReturnCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireThrowCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireInvokeCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireReturnCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.AbstractProxyFactory:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.proxy.jdk.JdkProxyFactory:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.AbstractProxyFactory:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.RpcInvocation:void <init>(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)"
        ]
    },
    "org.apache.dubbo.rpc.RpcInvocation:void <init>(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.RpcInvocation:void <init>(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.Object[],java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.RpcInvocation:void <init>(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.Object[])",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.RpcInvocation:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Class[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:org.apache.dubbo.rpc.Invocation createInvocation(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.RpcInvocation:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Class[],java.lang.Object[],java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object createAdaptiveExtension()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object getAdaptiveExtension()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.RouterChain:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.RouterChain:org.apache.dubbo.rpc.cluster.RouterChain buildChain(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.ClusterUtils:org.apache.dubbo.common.URL mergeProviderUrl(org.apache.dubbo.common.URL,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster:org.apache.dubbo.rpc.Invoker buildClusterInterceptors(org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster:org.apache.dubbo.rpc.Invoker join(org.apache.dubbo.rpc.cluster.Directory)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:void notifyExport(org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:java.util.List findRegistryProtocolListeners(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Invoker interceptInvoker(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.MetadataInfo$ServiceInfo:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean exportURL(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.condition.config.AppRouter:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.condition.config.AppRouterFactory:org.apache.dubbo.rpc.cluster.Router createRouter(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.condition.config.ServiceRouter:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.condition.config.ServiceRouterFactory:org.apache.dubbo.rpc.cluster.Router createRouter(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouterFactory:org.apache.dubbo.rpc.cluster.Router createRouter(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.CacheableRouterFactory:org.apache.dubbo.rpc.cluster.Router lambda$getRouter$0(org.apache.dubbo.common.URL,java.lang.String)"
        ]
    },
    "org.apache.dubbo.config.DubboShutdownHook:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:org.apache.dubbo.config.DubboShutdownHook getDubboShutdownHook()",
            "org.apache.dubbo.config.DubboShutdownHook:void run()",
            "org.apache.dubbo.config.DubboShutdownHook:void register()",
            "org.apache.dubbo.config.DubboShutdownHook:void unregister()",
            "org.apache.dubbo.config.DubboShutdownHook:void destroyAll()",
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.config.DubboShutdownHook:void <clinit>()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void <init>()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void unRegisterShutdownHook()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()",
            "org.apache.dubbo.qos.legacy.ShutdownTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:org.apache.dubbo.registry.client.ServiceDiscovery enhanceEventPublishing(org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:org.apache.dubbo.registry.client.ServiceDiscovery createServiceDiscovery(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty.NettyTransporter:org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyTransporter:org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.mina.MinaTransporter:org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.grizzly.GrizzlyTransporter:org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL overrideUrlWithConfig(org.apache.dubbo.common.URL,org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.MetricsFilter$3:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataServiceURLParamsMetadataCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$createServiceInstance$23(org.apache.dubbo.registry.client.ServiceInstanceCustomizer)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void publishMetadataToRemote(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void doRegisterServiceInstance(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.common.URL:java.lang.Object getParameter(java.lang.String,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.lang.Object getParameter(java.lang.String,java.lang.Class)",
            "org.apache.dubbo.registry.consul.ConsulParameter:java.lang.Object getValue(org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.convert.multiple.StringToMultiValueConverter:java.lang.Object convert(java.lang.String,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.convert.multiple.StringToIterableConverter:java.lang.Object convert(java.lang.String[],int,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.convert.multiple.StringToMultiValueConverter:java.lang.Object convert(java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.common.lang.ShutdownHookCallbacks:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void <init>(java.lang.String)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void <init>()",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void registerDubboShutdownHook()",
            "org.apache.dubbo.common.lang.ShutdownHookCallbacks:void <clinit>()",
            "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void registerDubboShutdownHook()",
            "org.apache.dubbo.common.lang.ShutdownHookCallbacks$lambda_callback_0__210:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.event.DirectEventDispatcher:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.event.ParallelEventDispatcher:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:org.apache.dubbo.metadata.definition.model.MethodDefinition resolveMethodDefinition(java.lang.reflect.Method,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.metadata.definition.ServiceDefinitionBuilder:org.apache.dubbo.metadata.definition.model.ServiceDefinition build(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:void publishServiceDefinition(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.definition.ServiceDefinitionBuilder:java.lang.String schema(java.lang.Class)"
        ]
    },
    "org.apache.dubbo.metadata.definition.ServiceDefinitionBuilder:org.apache.dubbo.metadata.definition.model.FullServiceDefinition buildFullDefinition(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.metadata.definition.ServiceDefinitionBuilder:org.apache.dubbo.metadata.definition.model.FullServiceDefinition buildFullDefinition(java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl:void publishProvider(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.store.AbstractAbstractWritableMetadataService:java.lang.String getServiceDefinition(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.definition.MethodDefinitionBuilder:org.apache.dubbo.metadata.definition.model.MethodDefinition build(java.lang.reflect.Method)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:org.apache.dubbo.metadata.definition.model.MethodDefinition resolveMethodDefinition(java.lang.reflect.Method,java.lang.Class,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.metadata.rest.DefaultServiceRestMetadataResolver:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.metadata.rest.jaxrs.JAXRSServiceRestMetadataResolver:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.metadata.rest.springmvc.SpringMvcServiceRestMetadataResolver:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.config.bootstrap.builders.ApplicationBuilder:org.apache.dubbo.config.AbstractConfig build()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reset(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reset(org.apache.dubbo.common.Parameters)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reset(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reset(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reset(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void reset(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void reset(org.apache.dubbo.common.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reset(org.apache.dubbo.common.Parameters)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void reset(org.apache.dubbo.common.Parameters)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void onEvent(org.apache.dubbo.event.Event)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.event.AbstractEventDispatcher:void lambda$null$5(org.apache.dubbo.event.Event,org.apache.dubbo.event.EventListener)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryChangeWatcher:void process(org.apache.zookeeper.WatchedEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.sofa.SofaRegistryServiceDiscovery:java.util.List handleRegistryData(java.lang.String,com.alipay.sofa.registry.client.api.model.UserData,org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener,java.util.concurrent.CountDownLatch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.sofa.SofaRegistryServiceDiscovery:org.apache.dubbo.common.utils.Page getInstances(java.lang.String,int,int,boolean)",
            "org.apache.dubbo.registry.sofa.SofaRegistryServiceDiscovery:void lambda$registerServiceWatcher$1(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener,java.util.concurrent.CountDownLatch,java.lang.String,com.alipay.sofa.registry.client.api.model.UserData)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery$MultiServiceInstancesChangedListener:void onEvent(org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery$MultiServiceInstancesChangedListener:void onEvent(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery$SingleServiceInstancesChangedListener:void onEvent(org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent)"
        ]
    },
    "org.apache.dubbo.metadata.report.support.AbstractMetadataReportFactory:org.apache.dubbo.metadata.report.MetadataReport getMetadataReport(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.report.MetadataReportInstance:void init(org.apache.dubbo.config.MetadataReportConfig)",
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:java.util.List buildProxyReports()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:java.util.List list(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:java.util.List list(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:java.util.List selectMockInvoker(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.FileGroup:void check()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.FileGroup:void access$000(org.apache.dubbo.remoting.p2p.support.FileGroup)"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry:void lambda$lookup$0(org.apache.dubbo.common.URL,java.util.List,org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_lookup_0__614:void callback(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:java.util.List getSharedClient(org.apache.dubbo.common.URL,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient[] getClients(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:java.util.List buildReferenceCountExchangeClientList(org.apache.dubbo.common.URL,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:java.util.List getSharedClient(org.apache.dubbo.common.URL,int)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void lambda$handleRequest$0(org.apache.dubbo.remoting.exchange.Response,org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void lambda$handleRequest$0(org.apache.dubbo.remoting.exchange.Response,org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void lambda$handleRequest$0(org.apache.dubbo.remoting.exchange.Response,org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler$lambda_handleRequest_0__491:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.AbstractTimerTask:void run(org.apache.dubbo.common.timer.Timeout)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.dispatcher.all.AllChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.connection.ConnectionOrderedChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.execution.ExecutionChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.message.MessageOnlyChannelHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void close(int)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractPeer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void sendChannelReadOnlyEvent()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient initClient(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient[] getClients(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void check()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void access$000(org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(java.lang.String,org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.zookeeper.curator.CuratorZookeeperClient$CuratorConnectionStateListener:void stateChanged(org.apache.curator.framework.CuratorFramework,org.apache.curator.framework.state.ConnectionState)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.nacos.util.NacosNamingServiceUtils:org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper createNamingService(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.nacos.NacosServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfigurationFactory:org.apache.dubbo.common.config.configcenter.DynamicConfiguration createDynamicConfiguration(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_null_7__54:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap$lambda_null_4__56:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$submit$1(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.threadpool.concurrent.ScheduledCompletableFuture:java.lang.Boolean lambda$schedule$0(java.util.concurrent.CompletableFuture,java.util.function.Supplier)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.infra.support.EnvironmentAdapter:java.util.Map getExtraAttributes(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ApplicationConfig:void appendEnvironmentProperties()",
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.common.infra.support.EnvironmentAdapter:java.lang.String getAttribute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.utils.NetUtils:java.lang.String getIpByConfig()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.dubbo.MetricsFilter$3:org.apache.dubbo.common.URL getUrl()"
        ]
    },
    "org.apache.dubbo.common.serialize.hessian2.dubbo.WhitelistHessian2FactoryInitializer:com.alibaba.com.caucho.hessian.io.SerializerFactory createSerializerFactory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.serialize.hessian2.dubbo.AbstractHessian2FactoryInitializer:com.alibaba.com.caucho.hessian.io.SerializerFactory getSerializerFactory()"
        ]
    },
    "org.apache.dubbo.container.log4j.Log4jContainer:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.container.Main:void main(java.lang.String[])"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker:boolean lambda$compareAddresses$4(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.registry.client.migration.MigrationAddressComparator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker$lambda_compareAddresses_4__294:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClient:void doConnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractClient:void connect()"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClient:void doDisConnect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractClient:void disconnect()"
        ]
    },
    "org.apache.dubbo.config.spring.beans.factory.annotation.ReferenceBeanBuilder:org.apache.dubbo.config.AbstractInterfaceConfig doBuild()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.spring.beans.factory.annotation.AnnotatedInterfaceConfigBeanBuilder:org.apache.dubbo.config.AbstractInterfaceConfig build()"
        ]
    },
    "org.apache.dubbo.qos.legacy.ListTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:void lambda$invoke$0(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.FilterNode:void lambda$invoke$0(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.rpc.proxy.AbstractProxyFactory:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.AbstractProxyFactory:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.RpcInvocation:void <init>(java.lang.reflect.Method,java.lang.String,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:org.apache.dubbo.rpc.Invocation createInvocation(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void invoke(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object getAdaptiveExtension()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void <clinit>()",
            "org.apache.dubbo.config.ServiceConfig:void <clinit>()",
            "org.apache.dubbo.rpc.cluster.Configurator:java.util.Optional toConfigurators(java.util.List)",
            "org.apache.dubbo.rpc.support.MockInvoker:java.lang.Object getMockObject(java.lang.String,java.lang.Class)",
            "org.apache.dubbo.rpc.support.MockInvoker:void <clinit>()",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:void <clinit>()",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.ServerBuilder buildServerBuilder(org.apache.dubbo.common.URL,io.grpc.netty.NettyServerBuilder)",
            "org.apache.dubbo.common.extension.ExtensionLoader:void <init>(java.lang.Class)",
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Class createAdaptiveExtensionClass()",
            "org.apache.dubbo.common.extension.factory.SpiExtensionFactory:java.lang.Object getExtension(java.lang.Class,java.lang.String)",
            "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:java.util.concurrent.ExecutorService createExecutor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Transporter getTransporter()",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelHandlers:org.apache.dubbo.remoting.ChannelHandler wrapInternal(org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void <clinit>()",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void <clinit>()",
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void initialize(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL,boolean,boolean)",
            "org.apache.dubbo.qos.command.impl.Offline:void <clinit>()",
            "org.apache.dubbo.qos.command.impl.Online:void <clinit>()",
            "org.apache.dubbo.metadata.report.MetadataReportInstance:void init(org.apache.dubbo.config.MetadataReportConfig)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.RouterChain:org.apache.dubbo.rpc.cluster.RouterChain buildChain(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void buildRouterChain()",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void buildRouterChain(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void buildRouterChain(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.dubbo.DubboRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.condition.config.AppRouterFactory:org.apache.dubbo.rpc.cluster.Router createRouter(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.condition.config.AppRouterFactory:org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.condition.config.ServiceRouterFactory:org.apache.dubbo.rpc.cluster.Router createRouter(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.CacheableRouterFactory:org.apache.dubbo.rpc.cluster.Router lambda$getRouter$0(org.apache.dubbo.common.URL,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.CacheableRouterFactory:org.apache.dubbo.rpc.cluster.Router lambda$getRouter$0(org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.CacheableRouterFactory$lambda_getRouter_0__337:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.DubboShutdownHook:org.apache.dubbo.config.DubboShutdownHook getDubboShutdownHook()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void register()",
            "org.apache.dubbo.config.DubboShutdownHook:void unregister()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void <init>()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void unRegisterShutdownHook()",
            "org.apache.dubbo.qos.legacy.ShutdownTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.RemotingServer bind(java.lang.String,org.apache.dubbo.remoting.ChannelHandler[])",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchanger:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.exchange.ExchangeHandler)",
            "org.apache.dubbo.remoting.p2p.support.AbstractGroup:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:void doRegisterServiceInstance(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void registerServiceInstance()"
        ]
    },
    "org.apache.dubbo.common.URL:java.lang.Object getParameter(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.consul.ConsulParameter:java.lang.Object getValue(org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void registerDubboShutdownHook()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <clinit>()"
        ]
    },
    "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void registerDubboShutdownHook()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:void publishServiceDefinition(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void publishServiceDefinition(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.metadata.definition.ServiceDefinitionBuilder:java.lang.String schema(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.metadata.store.AbstractAbstractWritableMetadataService:java.lang.String getServiceDefinition(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.dubbo.LazyConnectExchangeClient:void reset(org.apache.dubbo.common.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reset(org.apache.dubbo.common.Parameters)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reset(org.apache.dubbo.common.Parameters)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ReferenceCountExchangeClient:void reset(org.apache.dubbo.common.Parameters)"
        ]
    },
    "org.apache.dubbo.registry.sofa.SofaRegistryServiceDiscovery:org.apache.dubbo.common.utils.Page getInstances(java.lang.String,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:org.apache.dubbo.common.utils.Page getInstances(java.lang.String,int,int,boolean)",
            "org.apache.dubbo.registry.client.ServiceDiscovery:org.apache.dubbo.common.utils.Page getInstances(java.lang.String,int,int)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:org.apache.dubbo.common.utils.Page getInstances(java.lang.String,int,int,boolean)"
        ]
    },
    "org.apache.dubbo.registry.sofa.SofaRegistryServiceDiscovery:void lambda$registerServiceWatcher$1(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener,java.util.concurrent.CountDownLatch,java.lang.String,com.alipay.sofa.registry.client.api.model.UserData)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery$MultiServiceInstancesChangedListener:void onEvent(org.apache.dubbo.event.Event)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.event.AbstractEventDispatcher:void lambda$null$5(org.apache.dubbo.event.Event,org.apache.dubbo.event.EventListener)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery$SingleServiceInstancesChangedListener:void onEvent(org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$subscribeURLs$3(org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:void onEvent(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscoveryChangeWatcher:void process(org.apache.zookeeper.WatchedEvent)",
            "org.apache.dubbo.registry.sofa.SofaRegistryServiceDiscovery:java.util.List handleRegistryData(java.lang.String,com.alipay.sofa.registry.client.api.model.UserData,org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener,java.util.concurrent.CountDownLatch)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery$MultiServiceInstancesChangedListener:void onEvent(org.apache.dubbo.registry.client.event.ServiceInstancesChangedEvent)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery$SingleServiceInstancesChangedListener:void onEvent(org.apache.dubbo.event.Event)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.FileGroup:void access$000(org.apache.dubbo.remoting.p2p.support.FileGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.FileGroup$1:void run()"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosRegistry$lambda_lookup_0__614:void callback(org.apache.dubbo.registry.nacos.NacosNamingServiceWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.nacos.NacosRegistry:void execute(org.apache.dubbo.registry.nacos.NacosRegistry$NamingServiceCallback)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler$lambda_handleRequest_0__491:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$null$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeClient:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void lambda$handleRequest$0(org.apache.dubbo.remoting.exchange.Response,org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractPeer:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.ChannelWrappedInvoker$ChannelWrapper:void send(java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeChannel:java.util.concurrent.CompletableFuture request(java.lang.Object,int,java.util.concurrent.ExecutorService)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void caught(org.apache.dubbo.remoting.Channel,java.lang.Throwable)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatHandler:void received(org.apache.dubbo.remoting.Channel,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeartbeatTimerTask:void doTask(org.apache.dubbo.remoting.Channel)",
            "org.apache.dubbo.remoting.telnet.codec.TelnetCodec:java.lang.Object decode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,int,byte[])",
            "org.apache.dubbo.remoting.transport.ChannelDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ClientDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:void sendFeedback(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.exchange.Request,java.lang.Throwable)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.ExchangeServerPeer:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.ServerPeer:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient[] getClients(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void access$000(org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup$1:void run()"
        ]
    },
    "org.apache.dubbo.registry.nacos.NacosServiceDiscovery:void initialize(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$initialize$3(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$createServiceDiscovery$0(org.apache.dubbo.registry.client.ServiceDiscovery,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfigurationFactory:org.apache.dubbo.common.config.configcenter.DynamicConfiguration createDynamicConfiguration(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory:org.apache.dubbo.common.config.configcenter.DynamicConfiguration lambda$getDynamicConfiguration$0(org.apache.dubbo.common.URL,java.lang.String)"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.MetricsFilter$3:org.apache.dubbo.common.URL getUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void <init>(org.apache.dubbo.common.URL,java.util.List,org.apache.dubbo.rpc.cluster.RouterChain)",
            "org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance:int getWeight(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance$ConsistentHashSelector:void <init>(java.util.List,java.lang.String,int)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance:java.util.Collection getInvokerAddrList(java.util.List,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ShortestResponseLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.router.condition.ConditionRouter:java.util.List route(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List getMockedInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List getNormalInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:boolean hasMockProviders(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:void notify(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$8(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$7(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$6(java.lang.String,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$5(org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$4(java.util.List,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$3(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$2(org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$1(java.lang.String,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$0(java.util.List,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Invoker select(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.cluster.LoadBalance initLoadBalance(java.util.List,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.support.AccessLogData:void buildAccessLogData(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.support.RpcUtils:java.lang.Class getReturnType(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.support.RpcUtils:java.lang.reflect.Type[] getReturnTypes(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.RpcContext:org.apache.dubbo.rpc.RpcContext setInvokers(java.util.List)",
            "org.apache.dubbo.rpc.RpcContext:org.apache.dubbo.rpc.RpcContext setInvoker(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.RpcInvocation:void <init>(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.DeprecatedInvokerListener:void referred(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void <init>(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker buildInvokerChain(org.apache.dubbo.rpc.Invoker,java.lang.String,java.lang.String)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object encodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object decodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,java.lang.Class[],int,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireInvokeCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireReturnCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireThrowCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Throwable)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.model.AsyncMethodInfo getAsyncMethodInfo(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.Exporter getExporter(java.util.Map,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.memcached.MemcachedProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.redis.RedisProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.AbstractProxyFactory:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:void <init>(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:boolean urlChanged(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.client.InstanceAddressURL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.common.URL getRegistryUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List toMergeInvokerList(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void doOverrideIfNecessary()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void notifyExport(org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL getRegistryUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL getProviderUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.RegistryService)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void collect(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.String,long,boolean)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.common.URL createStatisticsUrl(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.String,long,boolean)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.monitor.MonitorService)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.legacy.ChangeTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String count(org.apache.dubbo.rpc.Invoker,java.lang.String)",
            "org.apache.dubbo.qos.legacy.TraceTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.common.URL getUrl()"
        ]
    },
    "org.apache.dubbo.common.serialize.hessian2.dubbo.AbstractHessian2FactoryInitializer:com.alibaba.com.caucho.hessian.io.SerializerFactory getSerializerFactory()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput:com.alibaba.com.caucho.hessian.io.Hessian2Input lambda$static$0()",
            "org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput:com.alibaba.com.caucho.hessian.io.Hessian2Output lambda$static$0()"
        ]
    },
    "org.apache.dubbo.registry.client.migration.MigrationInvoker$lambda_compareAddresses_4__294:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void connect()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void send(java.lang.Object,boolean)",
            "org.apache.dubbo.remoting.transport.AbstractClient:void reconnect()"
        ]
    },
    "org.apache.dubbo.rpc.proxy.AbstractProxyFactory:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService lambda$getMetadataServiceProxy$0(org.apache.dubbo.registry.client.ServiceInstance,java.lang.String)",
            "org.apache.dubbo.registry.dubbo.DubboRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.config.ReferenceConfig:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void destroy()",
            "org.apache.dubbo.config.ReferenceConfig:void init()",
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void <clinit>()",
            "org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder:org.apache.dubbo.config.ReferenceConfig build()"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void unexport()",
            "org.apache.dubbo.config.ServiceConfig:void export()",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.config.ServiceConfig:java.lang.String findConfigedHosts(org.apache.dubbo.config.ProtocolConfig,java.util.List,java.util.Map)",
            "org.apache.dubbo.config.ServiceConfig:java.lang.Integer getRandomPort(java.lang.String)",
            "org.apache.dubbo.config.ServiceConfig:void putRandomPort(java.lang.String,java.lang.Integer)",
            "org.apache.dubbo.config.ServiceConfig:void <clinit>()",
            "org.apache.dubbo.config.bootstrap.builders.ServiceBuilder:org.apache.dubbo.config.ServiceConfig build()",
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter export()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.Configurator:java.util.Optional toConfigurators(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:boolean genConfiguratorsFromRawRule(java.lang.String)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void notify(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void notify(java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.support.MockInvoker:java.lang.Object getMockObject(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkMock(java.lang.Class,org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Invoker getInvoker(java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.support.MockInvoker:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkMock(java.lang.Class,org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:java.lang.Object parseMockValue(java.lang.String)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.support.MockInvoker:java.lang.Throwable getThrowable(java.lang.String)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Invoker getInvoker(java.lang.String)",
            "org.apache.dubbo.rpc.support.MockInvoker:void <clinit>()",
            "org.apache.dubbo.rpc.support.MockProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:void <init>(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.extension.ExtensionLoader:org.apache.dubbo.common.extension.ExtensionLoader getExtensionLoader(java.lang.Class)"
        ]
    },
    "org.apache.dubbo.common.extension.factory.SpiExtensionFactory:java.lang.Object getExtension(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.support.MockInvoker:java.lang.Object getMockObject(java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object injectExtension(java.lang.Object)",
            "org.apache.dubbo.common.extension.factory.AdaptiveExtensionFactory:java.lang.Object getExtension(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:java.util.concurrent.ExecutorService createExecutor(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:java.util.concurrent.ExecutorService createExecutorIfAbsent(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:java.util.concurrent.ExecutorService lambda$createExecutorIfAbsent$1(org.apache.dubbo.common.URL,java.lang.Integer)"
        ]
    },
    "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Transporter getTransporter()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.RemotingServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])",
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Client connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler[])"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.ChannelHandlers:org.apache.dubbo.remoting.ChannelHandler wrapInternal(org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelHandlers:org.apache.dubbo.remoting.ChannelHandler wrap(org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataUtils:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void publishMetadataToRemote(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:org.apache.dubbo.metadata.MetadataInfo getMetadataInfo(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.registry.client.metadata.store.RemoteMetadataServiceImpl getRemoteMetadataService()",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void publishServiceDefinition(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService getMetadataServiceProxy(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService lambda$getMetadataServiceProxy$0(org.apache.dubbo.registry.client.ServiceInstance,java.lang.String)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void <clinit>()",
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void refreshMetadataAndInstance()",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils$lambda_getMetadataServiceProxy_0__64:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.integration.DynamicDirectory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void <clinit>()",
            "org.apache.dubbo.registry.integration.DynamicDirectory:java.util.List doList(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void destroy()",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void discordAddresses()",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void <clinit>()",
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener:void lambda$notifyOverrides$0(org.apache.dubbo.registry.integration.RegistryDirectory)",
            "org.apache.dubbo.registry.integration.RegistryDirectory$ReferenceConfigurationListener:void notifyOverrides()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void subscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void unSubscribe(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List toMergeInvokerList(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Optional toRouters(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:org.apache.dubbo.common.URL overrideWithConfigurator(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List doList(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:boolean isValidCategory(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void overrideDirectoryUrl()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void <clinit>()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.dubbo.DubboRegistryFactory:org.apache.dubbo.registry.Registry createRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory$lambda_toMergeInvokerList_0__289:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void buildRouterChain()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List toMergeInvokerList(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.DynamicDirectory:void buildRouterChain(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryDirectory:void buildRouterChain(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void doReSubscribe(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker doCreateInvoker(org.apache.dubbo.registry.integration.DynamicDirectory,org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.condition.config.AppRouterFactory:org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.RouterChain:org.apache.dubbo.rpc.cluster.Router lambda$new$0(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.cluster.RouterFactory)",
            "org.apache.dubbo.rpc.cluster.router.file.FileRouterFactory:org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Optional toRouters(java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.CacheableRouterFactory$lambda_getRouter_0__337:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.RemotingServer bind(java.lang.String,org.apache.dubbo.remoting.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.support.AbstractGroup:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.support.FileGroup:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.p2p.support.MulticastGroup:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>()",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>(java.io.File,java.lang.String,java.lang.String,int)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.util.Set initProcessingDirectories()",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void doInListener(java.lang.String,java.util.function.BiConsumer)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:boolean isProcessingWatchEvents()",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void signalConfigDirectory(java.io.File)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object delay(java.lang.String,org.apache.dubbo.common.function.ThrowableFunction)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Integer getDelay()",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:boolean isBasedPoolingWatchService()",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.util.concurrent.ThreadPoolExecutor getWatchEventsLoopThreadPool()",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Integer initDelay(java.nio.file.WatchEvent$Modifier[])",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.nio.file.WatchEvent$Modifier[] initWatchEventModifiers()",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.util.Optional newWatchService()",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.io.File initDirectory(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.String getEncoding(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$delay$13(java.io.File,java.io.File,java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$null$10(java.io.File)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$fireConfigChangeEvent$7(java.lang.String,java.io.File,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigChangeType,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$processWatchEvents$5(java.nio.file.WatchService)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$registerDubboShutdownHook$3()",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$null$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <clinit>()",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfigurationFactory:org.apache.dubbo.common.config.configcenter.DynamicConfiguration createDynamicConfiguration(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration createDynamicConfiguration(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_registerDubboShutdownHook_3__429:void callback()",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_getListeners_6__431:java.lang.Object apply(java.lang.Object)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_fireConfigChangeEvent_7__432:void accept(java.lang.Object)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_doAddListener_11__437:void accept(java.lang.Object,java.lang.Object)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_doRemoveListener_12__438:void accept(java.lang.Object,java.lang.Object)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_null_10__445:void accept(java.lang.Object)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_null_2__447:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void initialize(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:void lambda$initialize$3(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:void lambda$createServiceDiscovery$0(org.apache.dubbo.registry.client.ServiceDiscovery,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:org.apache.dubbo.common.utils.Page getInstances(java.lang.String,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:org.apache.dubbo.common.utils.Page getInstances(java.lang.String,int,int,boolean)",
            "org.apache.dubbo.registry.client.ServiceDiscovery:org.apache.dubbo.common.utils.Page getInstances(java.lang.String,int,int)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:org.apache.dubbo.common.utils.Page getInstances(java.lang.String,int,int,boolean)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscovery:org.apache.dubbo.common.utils.Page getInstances(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:org.apache.dubbo.common.utils.Page getInstances(java.lang.String,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.EventPublishingServiceDiscovery:org.apache.dubbo.common.utils.Page getInstances(java.lang.String,int,int,boolean)",
            "org.apache.dubbo.registry.client.ServiceDiscovery:org.apache.dubbo.common.utils.Page getInstances(java.lang.String,int,int)",
            "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery:org.apache.dubbo.common.utils.Page getInstances(java.lang.String,int,int,boolean)"
        ]
    },
    "org.apache.dubbo.registry.multiple.MultipleRegistryServiceDiscovery$SingleServiceInstancesChangedListener:void onEvent(org.apache.dubbo.event.Event)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.event.AbstractEventDispatcher:void lambda$null$5(org.apache.dubbo.event.Event,org.apache.dubbo.event.EventListener)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.FileGroup$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.NettyClientHandler:void userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeServerDelegate:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeServer:void send(java.lang.Object)",
            "org.apache.dubbo.remoting.transport.ServerDelegate:void send(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory:org.apache.dubbo.common.config.configcenter.DynamicConfiguration lambda$getDynamicConfiguration$0(org.apache.dubbo.common.URL,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory$lambda_getDynamicConfiguration_0__426:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.common.URL getUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void <init>(org.apache.dubbo.common.URL,java.util.List,org.apache.dubbo.rpc.cluster.RouterChain)",
            "org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance:int getWeight(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance$ConsistentHashSelector:void <init>(java.util.List,java.lang.String,int)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance:java.util.Collection getInvokerAddrList(java.util.List,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ShortestResponseLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.router.condition.ConditionRouter:java.util.List route(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List getMockedInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List getNormalInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:boolean hasMockProviders(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:void notify(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$8(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$7(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$6(java.lang.String,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$5(org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$4(java.util.List,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$3(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$2(org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$1(java.lang.String,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$0(java.util.List,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Invoker select(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.cluster.LoadBalance initLoadBalance(java.util.List,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.support.AccessLogData:void buildAccessLogData(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.support.RpcUtils:java.lang.Class getReturnType(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.support.RpcUtils:java.lang.reflect.Type[] getReturnTypes(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.RpcContext:org.apache.dubbo.rpc.RpcContext setInvokers(java.util.List)",
            "org.apache.dubbo.rpc.RpcContext:org.apache.dubbo.rpc.RpcContext setInvoker(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.RpcInvocation:void <init>(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.DeprecatedInvokerListener:void referred(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void <init>(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker buildInvokerChain(org.apache.dubbo.rpc.Invoker,java.lang.String,java.lang.String)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object encodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object decodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,java.lang.Class[],int,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireInvokeCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireReturnCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireThrowCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Throwable)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.model.AsyncMethodInfo getAsyncMethodInfo(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.Exporter getExporter(java.util.Map,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.memcached.MemcachedProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.redis.RedisProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.AbstractProxyFactory:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:void <init>(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:boolean urlChanged(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.client.InstanceAddressURL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.common.URL getRegistryUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List toMergeInvokerList(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void doOverrideIfNecessary()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void notifyExport(org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL getRegistryUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL getProviderUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.RegistryService)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void collect(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.String,long,boolean)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.common.URL createStatisticsUrl(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.String,long,boolean)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.monitor.MonitorService)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.legacy.ChangeTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String count(org.apache.dubbo.rpc.Invoker,java.lang.String)",
            "org.apache.dubbo.qos.legacy.TraceTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.common.URL getUrl()"
        ]
    },
    "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void <init>(org.apache.dubbo.common.URL,java.util.List,org.apache.dubbo.rpc.cluster.RouterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void <init>(java.util.List)",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void <init>(java.util.List,org.apache.dubbo.rpc.cluster.RouterChain)",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void <init>(org.apache.dubbo.common.URL,java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance:int getWeight(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ShortestResponseLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance$ConsistentHashSelector:void <init>(java.util.List,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance:org.apache.dubbo.rpc.Invoker select(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance:org.apache.dubbo.rpc.Invoker select(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance:java.util.Collection getInvokerAddrList(java.util.List,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance:org.apache.dubbo.rpc.Invoker select(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.loadbalance.ShortestResponseLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance:org.apache.dubbo.rpc.Invoker select(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.condition.ConditionRouter:java.util.List route(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.RouterChain:java.util.List route(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.router.condition.config.ListenableRouter:java.util.List route(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List getMockedInvokers(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List route(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List getNormalInvokers(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List route(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:boolean hasMockProviders(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List getMockedInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List getNormalInvokers(java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:void notify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.RouterChain:void lambda$setInvokers$1(org.apache.dubbo.rpc.cluster.Router)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$8(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_filterUsingStaticTag_8__365:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$7(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_filterUsingStaticTag_7__367:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$6(java.lang.String,org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_filterUsingStaticTag_6__366:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$5(org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule,org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_route_5__359:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$4(java.util.List,org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_route_4__360:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$3(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_route_3__363:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$2(org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule,org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_route_2__362:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$1(java.lang.String,org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_route_1__361:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$0(java.util.List,org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_route_0__364:boolean test(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Invoker select(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)"
        ]
    },
    "org.apache.dubbo.rpc.support.AccessLogData:void buildAccessLogData(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.support.RpcUtils:java.lang.Class getReturnType(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.support.RpcUtils:boolean isReturnTypeFuture(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:java.lang.String buildMethodName(org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.support.RpcUtils:java.lang.Class getReturnType(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.support.RpcUtils:java.lang.reflect.Type[] getReturnTypes(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.RpcInvocation:void initParameterDesc()",
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcResult:void handleValue(org.apache.dubbo.common.serialize.ObjectInput)",
            "com.alibaba.dubbo.rpc.support.RpcUtils:java.lang.reflect.Type[] getReturnTypes(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.RpcContext:org.apache.dubbo.rpc.RpcContext setInvokers(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)"
        ]
    },
    "org.apache.dubbo.rpc.RpcContext:org.apache.dubbo.rpc.RpcContext setInvoker(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ActiveLimitFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:void lambda$invoke$0(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ActiveLimitFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.FilterNode:void lambda$invoke$0(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:void lambda$invoke$0(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.FilterNode:void lambda$invoke$0(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.rpc.filter.TimeoutFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:void lambda$invoke$0(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.rpc.listener.DeprecatedInvokerListener:void referred(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void <init>(org.apache.dubbo.rpc.Invoker,java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.common.URL getUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void <init>(org.apache.dubbo.common.URL,java.util.List,org.apache.dubbo.rpc.cluster.RouterChain)",
            "org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance:int getWeight(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance$ConsistentHashSelector:void <init>(java.util.List,java.lang.String,int)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance:java.util.Collection getInvokerAddrList(java.util.List,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ShortestResponseLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.router.condition.ConditionRouter:java.util.List route(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List getMockedInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List getNormalInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:boolean hasMockProviders(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:void notify(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$8(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$7(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$6(java.lang.String,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$5(org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$4(java.util.List,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$3(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$2(org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$1(java.lang.String,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$0(java.util.List,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Invoker select(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.cluster.LoadBalance initLoadBalance(java.util.List,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.support.AccessLogData:void buildAccessLogData(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.support.RpcUtils:java.lang.Class getReturnType(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.support.RpcUtils:java.lang.reflect.Type[] getReturnTypes(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.RpcContext:org.apache.dubbo.rpc.RpcContext setInvokers(java.util.List)",
            "org.apache.dubbo.rpc.RpcContext:org.apache.dubbo.rpc.RpcContext setInvoker(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.RpcInvocation:void <init>(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.DeprecatedInvokerListener:void referred(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:java.lang.String toString()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void <init>(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker buildInvokerChain(org.apache.dubbo.rpc.Invoker,java.lang.String,java.lang.String)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object encodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object decodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,java.lang.Class[],int,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireInvokeCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireReturnCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireThrowCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Throwable)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.model.AsyncMethodInfo getAsyncMethodInfo(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.Exporter getExporter(java.util.Map,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.memcached.MemcachedProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.redis.RedisProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.AbstractProxyFactory:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:void <init>(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:boolean urlChanged(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.client.InstanceAddressURL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.common.URL getRegistryUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List toMergeInvokerList(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void doOverrideIfNecessary()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void notifyExport(org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL getRegistryUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL getProviderUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.RegistryService)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void collect(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.String,long,boolean)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.common.URL createStatisticsUrl(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.String,long,boolean)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.monitor.MonitorService)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.legacy.ChangeTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String count(org.apache.dubbo.rpc.Invoker,java.lang.String)",
            "org.apache.dubbo.qos.legacy.TraceTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.common.URL getUrl()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractExporter:void <init>(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void <init>(org.apache.dubbo.rpc.protocol.AbstractProxyProtocol,org.apache.dubbo.rpc.Invoker,java.lang.String,java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboExporter:void <init>(org.apache.dubbo.rpc.Invoker,java.lang.String,java.util.Map)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmExporter:void <init>(org.apache.dubbo.rpc.Invoker,java.lang.String,java.util.Map)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.common.URL getUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void <init>(org.apache.dubbo.common.URL,java.util.List,org.apache.dubbo.rpc.cluster.RouterChain)",
            "org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance:int getWeight(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance$ConsistentHashSelector:void <init>(java.util.List,java.lang.String,int)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance:java.util.Collection getInvokerAddrList(java.util.List,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ShortestResponseLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.router.condition.ConditionRouter:java.util.List route(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List getMockedInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List getNormalInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:boolean hasMockProviders(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:void notify(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$8(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$7(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$6(java.lang.String,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$5(org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$4(java.util.List,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$3(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$2(org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$1(java.lang.String,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$0(java.util.List,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Invoker select(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.cluster.LoadBalance initLoadBalance(java.util.List,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.support.AccessLogData:void buildAccessLogData(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.support.RpcUtils:java.lang.Class getReturnType(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.support.RpcUtils:java.lang.reflect.Type[] getReturnTypes(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.RpcContext:org.apache.dubbo.rpc.RpcContext setInvokers(java.util.List)",
            "org.apache.dubbo.rpc.RpcContext:org.apache.dubbo.rpc.RpcContext setInvoker(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.RpcInvocation:void <init>(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.DeprecatedInvokerListener:void referred(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void <init>(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker buildInvokerChain(org.apache.dubbo.rpc.Invoker,java.lang.String,java.lang.String)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object encodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object decodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,java.lang.Class[],int,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireInvokeCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireReturnCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireThrowCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Throwable)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.model.AsyncMethodInfo getAsyncMethodInfo(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.Exporter getExporter(java.util.Map,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.memcached.MemcachedProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.redis.RedisProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.AbstractProxyFactory:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:void <init>(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:boolean urlChanged(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.client.InstanceAddressURL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.common.URL getRegistryUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List toMergeInvokerList(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void doOverrideIfNecessary()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void notifyExport(org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL getRegistryUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL getProviderUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.RegistryService)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void collect(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.String,long,boolean)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.common.URL createStatisticsUrl(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.String,long,boolean)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.monitor.MonitorService)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.legacy.ChangeTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String count(org.apache.dubbo.rpc.Invoker,java.lang.String)",
            "org.apache.dubbo.qos.legacy.TraceTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.common.URL getUrl()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.common.URL getUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void <init>(org.apache.dubbo.common.URL,java.util.List,org.apache.dubbo.rpc.cluster.RouterChain)",
            "org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance:int getWeight(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance$ConsistentHashSelector:void <init>(java.util.List,java.lang.String,int)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance:java.util.Collection getInvokerAddrList(java.util.List,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ShortestResponseLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.router.condition.ConditionRouter:java.util.List route(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List getMockedInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List getNormalInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:boolean hasMockProviders(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:void notify(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$8(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$7(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$6(java.lang.String,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$5(org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$4(java.util.List,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$3(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$2(org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$1(java.lang.String,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$0(java.util.List,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Invoker select(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.cluster.LoadBalance initLoadBalance(java.util.List,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.support.AccessLogData:void buildAccessLogData(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.support.RpcUtils:java.lang.Class getReturnType(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.support.RpcUtils:java.lang.reflect.Type[] getReturnTypes(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.RpcContext:org.apache.dubbo.rpc.RpcContext setInvokers(java.util.List)",
            "org.apache.dubbo.rpc.RpcContext:org.apache.dubbo.rpc.RpcContext setInvoker(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.RpcInvocation:void <init>(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.DeprecatedInvokerListener:void referred(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void <init>(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker buildInvokerChain(org.apache.dubbo.rpc.Invoker,java.lang.String,java.lang.String)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object encodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object decodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,java.lang.Class[],int,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireInvokeCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireReturnCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireThrowCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Throwable)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.model.AsyncMethodInfo getAsyncMethodInfo(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.Exporter getExporter(java.util.Map,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.memcached.MemcachedProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.redis.RedisProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.AbstractProxyFactory:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:void <init>(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:boolean urlChanged(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.client.InstanceAddressURL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.common.URL getRegistryUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List toMergeInvokerList(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void doOverrideIfNecessary()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void notifyExport(org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL getRegistryUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL getProviderUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.RegistryService)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void collect(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.String,long,boolean)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.common.URL createStatisticsUrl(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.String,long,boolean)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.monitor.MonitorService)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.legacy.ChangeTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String count(org.apache.dubbo.rpc.Invoker,java.lang.String)",
            "org.apache.dubbo.qos.legacy.TraceTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.common.URL getUrl()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.Exporter getExporter(java.util.Map,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:boolean isInjvmRefer(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.memcached.MemcachedProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.redis.RedisProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:void exportLocal(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:org.apache.dubbo.rpc.Exporter export(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper lambda$doLocalExport$2(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL,java.lang.String)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:boolean urlChanged(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.client.InstanceAddressURL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)"
        ]
    },
    "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.common.URL getRegistryUrl(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL getRegistryUrl(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL getProviderUrl(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void doReExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:java.lang.String getCacheKey(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL access$300(org.apache.dubbo.registry.integration.RegistryProtocol,org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.monitor.support.MonitorFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:void lambda$invoke$0(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.monitor.support.MonitorFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.FilterNode:void lambda$invoke$0(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.monitor.support.MonitorFilter:void collect(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.String,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.support.MonitorFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.common.URL createStatisticsUrl(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.String,long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.support.MonitorFilter:void collect(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.String,long,boolean)"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.DubboMonitor:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.monitor.MonitorService)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.dubbo.DubboMonitorFactory:org.apache.dubbo.monitor.Monitor createMonitor(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.DubboMonitor:org.apache.dubbo.common.URL getUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void send()"
        ]
    },
    "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String count(org.apache.dubbo.rpc.Invoker,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String access$000(org.apache.dubbo.qos.legacy.CountTelnetHandler,org.apache.dubbo.rpc.Invoker,java.lang.String)"
        ]
    },
    "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.common.URL getUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:org.apache.dubbo.common.URL getUrl()",
            "com.alibaba.dubbo.rpc.Invoker:org.apache.dubbo.common.URL getUrl()",
            "com.alibaba.dubbo.rpc.RpcInvocation:void <init>(com.alibaba.dubbo.rpc.Invocation,com.alibaba.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:java.lang.String findConfigedHosts(org.apache.dubbo.config.ProtocolConfig,java.util.List,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:java.lang.Integer getRandomPort(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:java.lang.Integer findConfigedPorts(org.apache.dubbo.config.ProtocolConfig,java.lang.String,java.util.Map)"
        ]
    },
    "org.apache.dubbo.config.ServiceConfig:void putRandomPort(java.lang.String,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:java.lang.Integer findConfigedPorts(org.apache.dubbo.config.ProtocolConfig,java.lang.String,java.util.Map)"
        ]
    },
    "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:boolean genConfiguratorsFromRawRule(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:void initWith(java.lang.String)",
            "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:void process(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent)"
        ]
    },
    "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Invoker getInvoker(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.support.MockInvoker:java.lang.Throwable getThrowable(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkMock(java.lang.Class,org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.support.MockProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:org.apache.dubbo.common.extension.ExtensionLoader getExtensionLoader(java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.DubboShutdownHook:void destroyProtocols()",
            "org.apache.dubbo.config.ReferenceConfig:void checkAndUpdateSubConfigs()",
            "org.apache.dubbo.config.ReferenceConfig:void postProcessConfig()",
            "org.apache.dubbo.config.ReferenceConfig:void <clinit>()",
            "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrlsFor1Protocol(org.apache.dubbo.config.ProtocolConfig,java.util.List)",
            "org.apache.dubbo.config.ServiceConfig:java.lang.Integer findConfigedPorts(org.apache.dubbo.config.ProtocolConfig,java.lang.String,java.util.Map)",
            "org.apache.dubbo.config.ServiceConfig:void postProcessConfig()",
            "org.apache.dubbo.config.ServiceConfig:void <clinit>()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void <init>()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean supportsExtension(java.lang.Class,java.lang.String)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.registry.client.ServiceInstance createServiceInstance(java.lang.String,java.lang.String,int)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroy()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void destroyExecutorRepository()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void lambda$start$10()",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:org.apache.dubbo.common.URL loadMonitor(org.apache.dubbo.config.AbstractInterfaceConfig,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkExtension(java.lang.Class,java.lang.String,java.lang.String)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkMultiExtension(java.lang.Class,java.lang.String,java.lang.String)",
            "org.apache.dubbo.config.ApplicationConfig:void appendEnvironmentProperties()",
            "org.apache.dubbo.rpc.cluster.Cluster:org.apache.dubbo.rpc.cluster.Cluster getCluster(java.lang.String,boolean)",
            "org.apache.dubbo.rpc.cluster.Configurator:java.util.Optional toConfigurators(java.util.List)",
            "org.apache.dubbo.rpc.cluster.RouterChain:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.cluster.interceptor.ZoneAwareClusterInterceptor:void before(org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.merger.MergerFactory:void loadMergers()",
            "org.apache.dubbo.rpc.cluster.router.AbstractRouter:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.cluster.LoadBalance initLoadBalance(java.util.List,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.ClusterUtils:org.apache.dubbo.common.URL mergeProviderUrl(org.apache.dubbo.common.URL,java.util.Map)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:void <init>(org.apache.dubbo.rpc.cluster.Directory)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:boolean shouldMigrate(boolean,java.util.List,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.AbstractCluster:org.apache.dubbo.rpc.Invoker buildClusterInterceptors(org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker,java.lang.String)",
            "org.apache.dubbo.rpc.model.ApplicationModel:void init()",
            "org.apache.dubbo.rpc.model.ApplicationModel:void initFrameworkExts()",
            "org.apache.dubbo.rpc.model.ApplicationModel:void <clinit>()",
            "org.apache.dubbo.rpc.model.ServiceRepository:void <init>()",
            "org.apache.dubbo.rpc.support.MockInvoker:java.lang.Object getMockObject(java.lang.String,java.lang.Class)",
            "org.apache.dubbo.rpc.support.MockInvoker:void <clinit>()",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:java.util.concurrent.ExecutorService getCallbackExecutor(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker buildInvokerChain(org.apache.dubbo.rpc.Invoker,java.lang.String,java.lang.String)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:void <clinit>()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport:org.apache.dubbo.common.serialize.Serialization getRequestSerialization(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodecSupport:org.apache.dubbo.common.serialize.Serialization getResponseSerialization(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.AppResponse)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol getDubboProtocol()",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.ProtocolServer createServer(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.remoting.exchange.ExchangeClient initClient(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.dubbo.status.ThreadPoolStatusChecker:org.apache.dubbo.common.status.Status check()",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol getInjvmProtocol()",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec:java.lang.Object decode(org.apache.thrift.protocol.TProtocol)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec:void encodeRequest(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.ProtocolServer getServer(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.redis.RedisProtocol:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.ServerBuilder buildServerBuilder(org.apache.dubbo.common.URL,io.grpc.netty.NettyServerBuilder)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.grpc.ManagedChannel buildManagedChannel(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:java.util.Optional getConfigurator()",
            "org.apache.dubbo.common.Parameters:java.lang.Object getExtension(java.lang.Class,java.lang.String)",
            "org.apache.dubbo.common.Parameters:java.lang.Object getExtension(java.lang.Class,java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.Parameters:java.lang.Object getMethodExtension(java.lang.Class,java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.Parameters:java.lang.Object getMethodExtension(java.lang.Class,java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.dubbo.common.compiler.support.AdaptiveCompiler:java.lang.Class compile(java.lang.String,java.lang.ClassLoader)",
            "org.apache.dubbo.common.config.PropertiesConfiguration:void <init>()",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:org.apache.dubbo.common.config.configcenter.DynamicConfiguration lambda$getDynamicConfiguration$0()",
            "org.apache.dubbo.common.config.configcenter.DynamicConfigurationFactory:org.apache.dubbo.common.config.configcenter.DynamicConfigurationFactory getDynamicConfigurationFactory(java.lang.String)",
            "org.apache.dubbo.common.convert.Converter:org.apache.dubbo.common.convert.Converter getConverter(java.lang.Class,java.lang.Class)",
            "org.apache.dubbo.common.convert.multiple.MultiValueConverter:org.apache.dubbo.common.convert.multiple.MultiValueConverter find(java.lang.Class,java.lang.Class)",
            "org.apache.dubbo.common.extension.ExtensionLoader:void <init>(java.lang.Class)",
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Class createAdaptiveExtensionClass()",
            "org.apache.dubbo.common.extension.factory.AdaptiveExtensionFactory:void <init>()",
            "org.apache.dubbo.common.extension.factory.SpiExtensionFactory:java.lang.Object getExtension(java.lang.Class,java.lang.String)",
            "org.apache.dubbo.common.extension.support.ActivateComparator:int compare(java.lang.Object,java.lang.Object)",
            "org.apache.dubbo.common.lang.ShutdownHookCallbacks:void loadCallbacks()",
            "org.apache.dubbo.common.logger.LoggerFactory:void setLoggerAdapter(java.lang.String)",
            "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:java.util.concurrent.ExecutorService createExecutor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.utils.ConfigUtils:java.util.List mergeValues(java.lang.Class,java.lang.String,java.util.List)",
            "org.apache.dubbo.common.serialize.hessian2.dubbo.Hessian2FactoryInitializer:void <clinit>()",
            "org.apache.dubbo.event.AbstractEventDispatcher:void loadEventListenerInstances()",
            "org.apache.dubbo.event.EventDispatcher:org.apache.dubbo.event.EventDispatcher getDefaultExtension()",
            "org.apache.dubbo.remoting.Transporters:org.apache.dubbo.remoting.Transporter getTransporter()",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.Exchanger getExchanger(java.lang.String)",
            "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:void <init>()",
            "org.apache.dubbo.remoting.telnet.support.command.HelpTelnetHandler:void <init>()",
            "org.apache.dubbo.remoting.telnet.support.command.StatusTelnetHandler:void <init>()",
            "org.apache.dubbo.remoting.transport.AbstractClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.AbstractEndpoint:org.apache.dubbo.remoting.Codec2 getChannelCodec(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.CodecSupport:org.apache.dubbo.common.serialize.Serialization getSerialization(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.CodecSupport:void <clinit>()",
            "org.apache.dubbo.remoting.transport.dispatcher.ChannelHandlers:org.apache.dubbo.remoting.ChannelHandler wrapInternal(org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:java.util.concurrent.ExecutorService getSharedExecutorService()",
            "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Group lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.RegistryFactoryWrapper:org.apache.dubbo.registry.Registry getRegistry(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.DefaultServiceDiscoveryFactory:org.apache.dubbo.registry.client.ServiceDiscovery createDiscovery(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.RegistryClusterIdentifier:org.apache.dubbo.registry.client.RegistryClusterIdentifier getExtension(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryFactory:org.apache.dubbo.registry.client.ServiceDiscoveryFactory getExtension(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistry:java.util.List initSubscribedURLsSynthesizers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void notify(java.util.List)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService lambda$getMetadataServiceProxy$0(org.apache.dubbo.registry.client.ServiceInstance,java.lang.String)",
            "org.apache.dubbo.registry.client.metadata.MetadataUtils:void <clinit>()",
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.migration.MigrationInvoker:void compareAddresses(org.apache.dubbo.rpc.cluster.ClusterInvoker,org.apache.dubbo.rpc.cluster.ClusterInvoker)",
            "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:void <init>()",
            "org.apache.dubbo.registry.integration.DynamicDirectory:void <clinit>()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void notify(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void notifyExport(org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:java.util.List findRegistryProtocolListeners(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol getRegistryProtocol()",
            "org.apache.dubbo.registry.etcd.EtcdServiceDiscovery:void initialize(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.multiple.MultipleRegistry:void <init>(org.apache.dubbo.common.URL,boolean,boolean)",
            "org.apache.dubbo.container.Main:void <clinit>()",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:java.util.List getThreadPoolMessage()",
            "org.apache.dubbo.qos.command.DefaultCommandExecutor:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext)",
            "org.apache.dubbo.qos.command.impl.Offline:void <clinit>()",
            "org.apache.dubbo.qos.command.impl.Online:void <clinit>()",
            "org.apache.dubbo.qos.command.impl.PublishMetadata:void <init>()",
            "org.apache.dubbo.qos.command.util.CommandHelper:boolean hasCommand(java.lang.String)",
            "org.apache.dubbo.qos.command.util.CommandHelper:java.util.List getAllCommandClass()",
            "org.apache.dubbo.qos.command.util.CommandHelper:java.lang.Class getCommandClass(java.lang.String)",
            "org.apache.dubbo.metadata.MetadataInfo$ServiceInfo:void <clinit>()",
            "org.apache.dubbo.metadata.MetadataServiceExporter:org.apache.dubbo.metadata.MetadataServiceExporter getExtension(java.lang.String)",
            "org.apache.dubbo.metadata.ServiceNameMapping:org.apache.dubbo.metadata.ServiceNameMapping getDefaultExtension()",
            "org.apache.dubbo.metadata.ServiceNameMapping:org.apache.dubbo.metadata.ServiceNameMapping getExtension(java.lang.String)",
            "org.apache.dubbo.metadata.WritableMetadataService:org.apache.dubbo.metadata.WritableMetadataService getDefaultExtension()",
            "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:void <clinit>()",
            "org.apache.dubbo.metadata.report.MetadataReportInstance:void init(org.apache.dubbo.config.MetadataReportConfig)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:java.util.Map loadAnnotatedMethodParameterProcessors()",
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:java.util.List fetchBackupUrls()",
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:java.util.List buildProxyReports()",
            "org.apache.dubbo.metadata.store.failover.StrategyMetadataReport:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object injectExtension(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object createExtension(java.lang.String,boolean)",
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object createAdaptiveExtension()"
        ]
    },
    "org.apache.dubbo.common.extension.factory.AdaptiveExtensionFactory:java.lang.Object getExtension(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.support.MockInvoker:java.lang.Object getMockObject(java.lang.String,java.lang.Class)",
            "org.apache.dubbo.common.extension.ExtensionLoader:java.lang.Object injectExtension(java.lang.Object)",
            "org.apache.dubbo.common.extension.factory.AdaptiveExtensionFactory:java.lang.Object getExtension(java.lang.Class,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:java.util.concurrent.ExecutorService createExecutorIfAbsent(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractClient:void initExecutor(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.AbstractServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.dispatcher.WrappedChannelHandler:java.util.concurrent.ExecutorService getSharedExecutorService()"
        ]
    },
    "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository:java.util.concurrent.ExecutorService lambda$createExecutorIfAbsent$1(org.apache.dubbo.common.URL,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository$lambda_createExecutorIfAbsent_1__455:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.dispatcher.ChannelHandlers:org.apache.dubbo.remoting.ChannelHandler wrap(org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractClient:org.apache.dubbo.remoting.ChannelHandler wrapChannelHandler(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.netty.NettyServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.netty4.NettyServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.mina.MinaServer:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.registry.client.metadata.MetadataUtils:org.apache.dubbo.metadata.MetadataService getMetadataServiceProxy(org.apache.dubbo.registry.client.ServiceInstance,org.apache.dubbo.registry.client.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.event.listener.ServiceInstancesChangedListener:org.apache.dubbo.metadata.MetadataInfo getMetadataInfo(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:java.util.Map toInvokers(java.util.List)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void <clinit>()",
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.cluster.ClusterInvoker getServiceDiscoveryInvoker(org.apache.dubbo.rpc.cluster.Cluster,org.apache.dubbo.registry.Registry,java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.integration.DynamicDirectory:java.util.List doList(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory:java.util.List list(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.RouterChain:org.apache.dubbo.rpc.cluster.Router lambda$new$0(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.cluster.RouterFactory)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.RouterChain$lambda_new_0__187:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.file.FileRouterFactory:org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.RouterChain:org.apache.dubbo.rpc.cluster.Router lambda$new$0(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.cluster.RouterFactory)",
            "org.apache.dubbo.rpc.cluster.router.file.FileRouterFactory:org.apache.dubbo.rpc.cluster.Router getRouter(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.Optional toRouters(java.util.List)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.FileGroup:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.remoting.p2p.support.MulticastGroup:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.Networkers:org.apache.dubbo.remoting.p2p.Peer join(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>(java.io.File,java.lang.String,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>(java.io.File,java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfigurationFactory:org.apache.dubbo.common.config.configcenter.DynamicConfiguration createDynamicConfiguration(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration createDynamicConfiguration(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.util.Set initProcessingDirectories()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>(java.io.File,java.lang.String,java.lang.String,int,long)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void doInListener(java.lang.String,java.util.function.BiConsumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void doAddListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void doRemoveListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:boolean isProcessingWatchEvents()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$null$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void signalConfigDirectory(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$null$4(java.io.File,java.nio.file.Path,org.apache.dubbo.common.config.configcenter.ConfigChangeType)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Integer getDelay()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$delay$13(java.io.File,java.io.File,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:boolean isBasedPoolingWatchService()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.util.Set initProcessingDirectories()",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void signalConfigDirectory(java.io.File)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object delay(java.lang.String,org.apache.dubbo.common.function.ThrowableFunction)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Integer initDelay(java.nio.file.WatchEvent$Modifier[])"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.util.concurrent.ThreadPoolExecutor getWatchEventsLoopThreadPool()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:boolean isProcessingWatchEvents()",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$registerDubboShutdownHook$3()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Integer initDelay(java.nio.file.WatchEvent$Modifier[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <clinit>()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.nio.file.WatchEvent$Modifier[] initWatchEventModifiers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <clinit>()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.util.Optional newWatchService()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <clinit>()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.io.File initDirectory(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.String getEncoding(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$delay$13(java.io.File,java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_delay_13__439:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$null$10(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_null_10__445:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$registerDubboShutdownHook$3()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_registerDubboShutdownHook_3__429:void callback()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfigurationFactory:org.apache.dubbo.common.config.configcenter.DynamicConfiguration createDynamicConfiguration(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory:org.apache.dubbo.common.config.configcenter.DynamicConfiguration lambda$getDynamicConfiguration$0(org.apache.dubbo.common.URL,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration createDynamicConfiguration(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void initialize(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_registerDubboShutdownHook_3__429:void callback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.lang.ShutdownHookCallbacks$callback__211:void execute()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_getListeners_6__431:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_doAddListener_11__437:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$null$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_doRemoveListener_12__438:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$null$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_null_10__445:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.function.ThrowableConsumer:void execute(java.lang.Object)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery:void lambda$doInServiceRegistry$8(org.apache.dubbo.common.function.ThrowableConsumer,org.apache.curator.x.discovery.ServiceDiscovery)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_null_2__447:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfigurationFactory$lambda_getDynamicConfiguration_0__426:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List toMergeInvokerList(java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void <init>(java.util.List,org.apache.dubbo.rpc.cluster.RouterChain)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void <init>(org.apache.dubbo.common.URL,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.loadbalance.RandomLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance:org.apache.dubbo.rpc.Invoker select(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance:org.apache.dubbo.rpc.Invoker select(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Invoker doSelect(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Invoker reselect(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,java.util.List,boolean)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.RouterChain:java.util.List route(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:java.util.List doList(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.integration.DynamicDirectory:java.util.List doList(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List doList(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.condition.config.ListenableRouter:java.util.List route(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.RouterChain:java.util.List route(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.router.condition.config.ListenableRouter:java.util.List route(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List route(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.RouterChain:java.util.List route(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.router.condition.config.ListenableRouter:java.util.List route(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.RouterChain:void lambda$setInvokers$1(org.apache.dubbo.rpc.cluster.Router)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.RouterChain$lambda_setInvokers_1__188:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_filterUsingStaticTag_8__365:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_filterUsingStaticTag_7__367:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_filterUsingStaticTag_6__366:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_route_5__359:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_route_4__360:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_route_3__363:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_route_2__362:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_route_1__361:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter$lambda_route_0__364:boolean test(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.URL:java.util.Map getParameters(java.util.function.Predicate)"
        ]
    },
    "org.apache.dubbo.rpc.support.RpcUtils:boolean isReturnTypeFuture(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.support.RpcUtils:org.apache.dubbo.rpc.InvokeMode getInvokeMode(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.support.RpcUtils:boolean isReturnTypeFuture(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.MetricsFilter:java.lang.String buildMethodName(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:void reportMetrics(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,long,java.lang.String,boolean)"
        ]
    },
    "com.alibaba.dubbo.rpc.support.RpcUtils:java.lang.Class getReturnType(com.alibaba.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.rpc.support.RpcUtils:java.lang.reflect.Type[] getReturnTypes(com.alibaba.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:void <init>(org.apache.dubbo.rpc.Invoker,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Invoker refer(java.lang.Class,org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.support.AccessLogData:java.lang.String getServiceName()",
            "org.apache.dubbo.rpc.support.AccessLogData:java.lang.String getLogMessage()",
            "org.apache.dubbo.rpc.support.RpcUtils:long convertToNumber(java.lang.Object,long)",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:java.lang.String toString()",
            "org.apache.dubbo.rpc.protocol.FilterNode:java.lang.String toString()",
            "org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper:javax.ws.rs.core.Response handleConstraintViolationException(javax.validation.ConstraintViolationException)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String setEnumNameProperty(java.lang.String)",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String getEnumPropertyName()",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String setClassNameProperty(java.lang.String)",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String getClassNameProperty()",
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:void deserializeInternal(java.lang.Object,org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.ClassLoader,java.util.IdentityHashMap)",
            "org.apache.dubbo.common.bytecode.CustomizedLoaderClassPath:java.lang.String toString()",
            "org.apache.dubbo.common.bytecode.Wrapper$1:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[])",
            "org.apache.dubbo.common.json.GenericJSONConverter$27:java.lang.Object decode(java.lang.Object)",
            "org.apache.dubbo.common.json.GenericJSONConverter$28:java.lang.Object decode(java.lang.Object)",
            "org.apache.dubbo.common.json.GenericJSONConverter$7:void encode(java.lang.Object,org.apache.dubbo.common.json.JSONWriter)",
            "org.apache.dubbo.common.json.GenericJSONConverter:void writeValue(java.lang.Object,org.apache.dubbo.common.json.JSONWriter,boolean)",
            "org.apache.dubbo.common.json.J2oVisitor:java.lang.Object toArray(java.lang.Class,org.apache.dubbo.common.utils.Stack,int)",
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,int)",
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,org.apache.dubbo.common.json.JSONVisitor,int)",
            "org.apache.dubbo.common.json.JSONArray:java.lang.String getString(int)",
            "org.apache.dubbo.common.json.JSONObject:java.lang.String getString(java.lang.String)",
            "org.apache.dubbo.common.utils.DubboAppender:org.apache.dubbo.common.utils.Log parseLog(org.apache.log4j.spi.LoggingEvent)",
            "org.apache.dubbo.common.utils.LogUtil:void printList(java.util.List)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize0(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.util.Map)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object convertClassType(java.lang.Object,java.lang.Class)",
            "org.apache.dubbo.common.utils.StringUtils:java.lang.String nullSafeToString(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.Request:java.lang.String safeToString(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter$3:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.textui.TTable:org.apache.dubbo.qos.textui.TTable addRow(java.lang.Object[])",
            "org.apache.dubbo.qos.textui.TTree$1:void callback(int,boolean,java.lang.String,org.apache.dubbo.qos.textui.TTree$Node)",
            "org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)",
            "com.alibaba.com.caucho.hessian.io.StringValueSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "org.apache.dubbo.common.json.GenericJSONConverter$toString__452:java.lang.Object decode(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void <init>(org.apache.dubbo.rpc.protocol.AbstractProxyProtocol,org.apache.dubbo.rpc.Invoker,java.lang.String,java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboExporter:void <init>(org.apache.dubbo.rpc.Invoker,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.injvm.InjvmExporter:void <init>(org.apache.dubbo.rpc.Invoker,java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:boolean isInjvmRefer(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:boolean shouldJvmRefer(java.util.Map)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:java.lang.String getCacheKey(org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper doLocalExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void reExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:java.lang.String access$400(org.apache.dubbo.registry.integration.RegistryProtocol,org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL access$300(org.apache.dubbo.registry.integration.RegistryProtocol,org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void doOverrideIfNecessary()"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.DubboMonitor:void send()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void lambda$new$0()"
        ]
    },
    "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String access$000(org.apache.dubbo.qos.legacy.CountTelnetHandler,org.apache.dubbo.rpc.Invoker,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.legacy.CountTelnetHandler$1:void run()"
        ]
    },
    "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:org.apache.dubbo.common.URL getUrl()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:java.lang.Object createProxy(java.util.Map)",
            "org.apache.dubbo.config.ReferenceConfig:void checkInvokerAvailable()",
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:void <init>(org.apache.dubbo.common.URL,java.util.List,org.apache.dubbo.rpc.cluster.RouterChain)",
            "org.apache.dubbo.rpc.cluster.loadbalance.AbstractLoadBalance:int getWeight(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance$ConsistentHashSelector:void <init>(java.util.List,java.lang.String,int)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ConsistentHashLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.LeastActiveLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance:java.util.Collection getInvokerAddrList(java.util.List,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.RoundRobinLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.loadbalance.ShortestResponseLoadBalance:org.apache.dubbo.rpc.Invoker doSelect(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.router.condition.ConditionRouter:java.util.List route(java.util.List,org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List getMockedInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:java.util.List getNormalInvokers(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.mock.MockInvokersSelector:boolean hasMockProviders(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:void notify(java.util.List)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$8(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$7(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$filterUsingStaticTag$6(java.lang.String,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$5(org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$4(java.util.List,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$3(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$2(org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$1(java.lang.String,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:boolean lambda$route$0(java.util.List,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Invoker select(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.cluster.LoadBalance initLoadBalance(java.util.List,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.support.AccessLogData:void buildAccessLogData(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.support.RpcUtils:java.lang.Class getReturnType(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.support.RpcUtils:java.lang.reflect.Type[] getReturnTypes(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.RpcContext:org.apache.dubbo.rpc.RpcContext setInvokers(java.util.List)",
            "org.apache.dubbo.rpc.RpcContext:org.apache.dubbo.rpc.RpcContext setInvoker(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.RpcInvocation:void <init>(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.DeprecatedInvokerListener:void referred(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:void <init>(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.AbstractProtocol:void destroy()",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.FilterNode:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Invoker buildInvokerChain(org.apache.dubbo.rpc.Invoker,java.lang.String,java.lang.String)",
            "org.apache.dubbo.rpc.protocol.ProtocolFilterWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.ProtocolListenerWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object encodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,int)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object decodeInvocationArgument(org.apache.dubbo.remoting.Channel,org.apache.dubbo.rpc.RpcInvocation,java.lang.Class[],int,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireInvokeCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireReturnCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:void fireThrowCallback(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.lang.Throwable)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.model.AsyncMethodInfo getAsyncMethodInfo(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.Exporter getExporter(java.util.Map,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.memcached.MemcachedProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.protocol.redis.RedisProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.AbstractProxyFactory:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:void <init>(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.rpc.proxy.wrapper.StubProxyFactoryWrapper:java.lang.Object getProxy(org.apache.dubbo.rpc.Invoker,boolean)",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:boolean urlChanged(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.client.InstanceAddressURL)",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.client.ServiceDiscoveryRegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.InterfaceCompatibleRegistryProtocol:org.apache.dubbo.common.URL getRegistryUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:java.util.List toMergeInvokerList(java.util.List)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyAllInvokers()",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void destroyUnusedInvokers(java.util.Map,java.util.Map)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void doOverrideIfNecessary()",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void notifyExport(org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL getRegistryUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.common.URL getProviderUrl(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.registry.dubbo.DubboRegistry:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.registry.RegistryService)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void onError(java.lang.Throwable,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:void collect(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.String,long,boolean)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.common.URL createStatisticsUrl(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.Result,java.lang.String,long,boolean)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:void <init>(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.monitor.MonitorService)",
            "org.apache.dubbo.monitor.dubbo.DubboMonitor:org.apache.dubbo.common.URL getUrl()",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.legacy.ChangeTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String count(org.apache.dubbo.rpc.Invoker,java.lang.String)",
            "org.apache.dubbo.qos.legacy.TraceTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.protocol.QosProtocolWrapper:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.common.URL getUrl()"
        ]
    },
    "com.alibaba.dubbo.rpc.Invoker:org.apache.dubbo.common.URL getUrl()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.dubbo.rpc.RpcInvocation:void <init>(com.alibaba.dubbo.rpc.Invocation,com.alibaba.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:void initWith(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener:void <init>()",
            "org.apache.dubbo.registry.integration.RegistryDirectory$ReferenceConfigurationListener:void <init>(org.apache.dubbo.registry.integration.RegistryDirectory,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener:void <init>(org.apache.dubbo.registry.integration.RegistryProtocol)",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ServiceConfigurationListener:void <init>(org.apache.dubbo.registry.integration.RegistryProtocol,org.apache.dubbo.common.URL,org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean supportsExtension(java.lang.Class,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:boolean isUsedRegistryAsCenter(org.apache.dubbo.config.RegistryConfig,java.util.function.Supplier,java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkExtension(java.lang.Class,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateAbstractInterfaceConfig(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateProtocolConfig(org.apache.dubbo.config.ProtocolConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateProviderConfig(org.apache.dubbo.config.ProviderConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateMethodConfig(org.apache.dubbo.config.MethodConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void checkMultiExtension(java.lang.Class,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateAbstractInterfaceConfig(org.apache.dubbo.config.AbstractInterfaceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateServiceConfig(org.apache.dubbo.config.ServiceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateReferenceConfig(org.apache.dubbo.config.ReferenceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateProtocolConfig(org.apache.dubbo.config.ProtocolConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateProviderConfig(org.apache.dubbo.config.ProviderConfig)"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void <init>()",
            "org.apache.dubbo.config.ReferenceConfig:void <init>(org.apache.dubbo.config.'annotation'.Reference)",
            "org.apache.dubbo.config.ReferenceConfig:void checkAndUpdateSubConfigs()",
            "org.apache.dubbo.config.ServiceConfig:void doExportUrls()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void <init>()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void initialize()",
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:org.apache.dubbo.config.ApplicationConfig getApplicationConfig()",
            "org.apache.dubbo.config.metadata.ConfigurableMetadataServiceExporter:java.util.List getRegistries()",
            "org.apache.dubbo.config.metadata.ServiceInstancePortCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.config.utils.ReferenceConfigCache:void destroy(java.lang.String,java.lang.Class)",
            "org.apache.dubbo.config.utils.ReferenceConfigCache:void lambda$destroyAll$6(java.lang.String,org.apache.dubbo.config.ReferenceConfigBase)",
            "org.apache.dubbo.config.AbstractConfig:void refresh()",
            "org.apache.dubbo.config.AbstractConfig:void addIntoConfigManager()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void convertRegistryIdsToRegistries()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ApplicationConfig getApplication()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setApplication(org.apache.dubbo.config.ApplicationConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ModuleConfig getModule()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setModule(org.apache.dubbo.config.ModuleConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MonitorConfig getMonitor()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setMonitor(org.apache.dubbo.config.MonitorConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.ConfigCenterConfig getConfigCenter()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setConfigCenter(org.apache.dubbo.config.ConfigCenterConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MetadataReportConfig getMetadataReportConfig()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setMetadataReportConfig(org.apache.dubbo.config.MetadataReportConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.MetricsConfig getMetrics()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void setMetrics(org.apache.dubbo.config.MetricsConfig)",
            "org.apache.dubbo.config.AbstractInterfaceConfig:org.apache.dubbo.config.SslConfig getSslConfig()",
            "org.apache.dubbo.config.AbstractInterfaceConfig:void lambda$convertRegistryIdsToRegistries$2(java.util.List,java.lang.String)",
            "org.apache.dubbo.config.ReferenceConfigBase:void checkDefault()",
            "org.apache.dubbo.config.ServiceConfigBase:void checkDefault()",
            "org.apache.dubbo.config.ServiceConfigBase:void convertProtocolIdsToProtocols()",
            "org.apache.dubbo.config.ServiceConfigBase:void setProvider(org.apache.dubbo.config.ProviderConfig)",
            "org.apache.dubbo.config.ServiceConfigBase:void lambda$convertProtocolIdsToProtocols$1(java.util.List,java.lang.String)",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Set getProtocolIds()",
            "org.apache.dubbo.config.context.ConfigManager:java.util.Set getRegistryIds()",
            "org.apache.dubbo.rpc.cluster.support.migration.MigrationRule:void <clinit>()",
            "org.apache.dubbo.rpc.model.ApplicationModel:void init()",
            "org.apache.dubbo.rpc.model.ApplicationModel:java.util.Collection allConsumerModels()",
            "org.apache.dubbo.rpc.model.ApplicationModel:java.util.Collection allProviderModels()",
            "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.rpc.model.ProviderModel getProviderModel(java.lang.String)",
            "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.rpc.model.ConsumerModel getConsumerModel(java.lang.String)",
            "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.common.config.Environment getEnvironment()",
            "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.config.context.ConfigManager getConfigManager()",
            "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.rpc.model.ServiceRepository getServiceRepository()",
            "org.apache.dubbo.rpc.model.ApplicationModel:org.apache.dubbo.config.ApplicationConfig getApplicationConfig()",
            "org.apache.dubbo.rpc.model.ApplicationModel:java.lang.String getName()",
            "org.apache.dubbo.rpc.model.ApplicationModel:java.lang.String getApplication()",
            "org.apache.dubbo.rpc.model.ApplicationModel:void setApplication(java.lang.String)",
            "org.apache.dubbo.rpc.model.ApplicationModel:void reset()",
            "org.apache.dubbo.rpc.model.ApplicationModel:void <clinit>()",
            "org.apache.dubbo.rpc.RpcInvocation:void initParameterDesc()",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.String exportOrUnexportCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,java.lang.Object,java.lang.Boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.CallbackServiceCodec:java.lang.Object referOrDestroyCallbackService(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.URL,java.lang.Class,org.apache.dubbo.rpc.Invocation,int,boolean)",
            "org.apache.dubbo.rpc.protocol.dubbo.DecodeableRpcInvocation:java.lang.Object decode(org.apache.dubbo.remoting.Channel,java.io.InputStream)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.model.AsyncMethodInfo getAsyncMethodInfo(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.rest.RestProtocol:java.lang.Runnable doExport(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.netty.handler.ssl.SslContext buildServerSslContext(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcOptionsUtils:io.netty.handler.ssl.SslContext buildClientSslContext(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:java.lang.Runnable doExport(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcProtocol:org.apache.dubbo.rpc.Invoker protocolBindingRefer(java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:void <init>(org.apache.dubbo.rpc.Invoker)",
            "org.apache.dubbo.common.config.ConfigurationUtils:org.apache.dubbo.common.config.Configuration getSystemConfiguration()",
            "org.apache.dubbo.common.config.ConfigurationUtils:org.apache.dubbo.common.config.Configuration getEnvConfiguration()",
            "org.apache.dubbo.common.config.ConfigurationUtils:org.apache.dubbo.common.config.Configuration getGlobalConfiguration()",
            "org.apache.dubbo.common.config.ConfigurationUtils:org.apache.dubbo.common.config.Configuration getDynamicGlobalConfiguration()",
            "org.apache.dubbo.common.config.Environment:void initialize()",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:org.apache.dubbo.common.config.configcenter.DynamicConfiguration getDynamicConfiguration()",
            "org.apache.dubbo.remoting.transport.CodecSupport:void checkSerialization(java.lang.String,java.lang.String,java.lang.Byte)",
            "org.apache.dubbo.remoting.transport.netty4.NettyEventLoopFactory:boolean shouldEpoll()",
            "org.apache.dubbo.remoting.transport.netty4.SslContexts:io.netty.handler.ssl.SslContext buildServerSslContext(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.transport.netty4.SslContexts:io.netty.handler.ssl.SslContext buildClientSslContext(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.MetadataServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataCustomizer:void customize(org.apache.dubbo.registry.client.ServiceInstance)",
            "org.apache.dubbo.registry.client.metadata.ServiceInstanceMetadataUtils:void refreshMetadataAndInstance()",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:org.apache.dubbo.metadata.MetadataInfo lambda$exportURL$0(java.lang.String)",
            "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void <init>()",
            "org.apache.dubbo.registry.integration.RegistryDirectory$ConsumerConfigurationListener:void <init>()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$ProviderConfigurationListener:void <init>(org.apache.dubbo.registry.integration.RegistryProtocol)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void registerStatedUrl(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL,boolean)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.model.ProviderModel$RegisterStatedURL getStatedUrl(org.apache.dubbo.common.URL,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.integration.RegistryProtocol:void destroy()",
            "org.apache.dubbo.qos.command.impl.Ls:java.lang.String listProvider()",
            "org.apache.dubbo.qos.command.impl.Ls:java.lang.String listConsumer()",
            "org.apache.dubbo.qos.command.impl.Offline:void <clinit>()",
            "org.apache.dubbo.qos.command.impl.Online:void <clinit>()",
            "org.apache.dubbo.qos.command.impl.Ready:java.util.Map isServiceReady(java.lang.String)",
            "org.apache.dubbo.qos.legacy.InvokeTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.qos.legacy.ListTelnetHandler:void <init>()",
            "org.apache.dubbo.qos.legacy.ListTelnetHandler:void printSpecifiedProvidedService(java.lang.String,java.lang.StringBuilder,boolean)",
            "org.apache.dubbo.qos.legacy.ListTelnetHandler:void printSpecifiedReferredService(java.lang.String,java.lang.StringBuilder,boolean)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.WritableMetadataService:java.lang.String serviceName()",
            "org.apache.dubbo.metadata.report.MetadataReportInstance:void init(org.apache.dubbo.config.MetadataReportConfig)"
        ]
    },
    "org.apache.dubbo.common.extension.support.ActivateComparator:int compare(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.utils.ConfigUtils:java.util.List mergeValues(java.lang.Class,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.serialize.hessian2.dubbo.Hessian2FactoryInitializer:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectInput:com.alibaba.com.caucho.hessian.io.Hessian2Input lambda$static$0()",
            "org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput:com.alibaba.com.caucho.hessian.io.Hessian2Output lambda$static$0()",
            "org.apache.dubbo.common.serialize.hessian2.dubbo.Hessian2FactoryInitializer:org.apache.dubbo.common.serialize.hessian2.dubbo.Hessian2FactoryInitializer getInstance()",
            "org.apache.dubbo.common.serialize.hessian2.dubbo.Hessian2FactoryInitializer:void <clinit>()"
        ]
    },
    "org.apache.dubbo.remoting.telnet.support.TelnetHandlerAdapter:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerAdapter:void <init>()",
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void <init>()",
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void <init>(org.apache.dubbo.remoting.exchange.support.Replier)",
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void <init>(org.apache.dubbo.remoting.ChannelHandler[])",
            "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void <init>(org.apache.dubbo.remoting.exchange.support.Replier,org.apache.dubbo.remoting.ChannelHandler[])"
        ]
    },
    "org.apache.dubbo.remoting.telnet.support.command.HelpTelnetHandler:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.telnet.support.command.StatusTelnetHandler:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.container.Main:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.container.Main$1:void run()",
            "org.apache.dubbo.container.Main:void main(java.lang.String[])",
            "org.apache.dubbo.container.Main:org.apache.dubbo.common.logger.Logger access$000()",
            "org.apache.dubbo.container.Main:java.util.concurrent.locks.ReentrantLock access$100()",
            "org.apache.dubbo.container.Main:java.util.concurrent.locks.Condition access$200()",
            "org.apache.dubbo.container.Main:void <clinit>()"
        ]
    },
    "org.apache.dubbo.metadata.MetadataInfo$ServiceInfo:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean exportURL(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.MetadataInfo$ServiceInfo:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.MetadataInfo$ServiceInfo:void <clinit>()"
        ]
    },
    "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:java.util.List fetchBackupUrls()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.store.failover.FailoverMetadataReport:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:void initExecutor(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.AbstractClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.common.threadpool.manager.DefaultExecutorRepository$lambda_createExecutorIfAbsent_1__455:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.transport.AbstractClient:org.apache.dubbo.remoting.ChannelHandler wrapChannelHandler(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty.NettyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.netty4.NettyClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)",
            "org.apache.dubbo.remoting.transport.mina.MinaClient:void <init>(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.RouterChain$lambda_new_0__187:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>(java.io.File,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>(java.io.File,java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>(java.io.File,java.lang.String,java.lang.String,int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>(java.io.File,java.lang.String,java.lang.String,int)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void doAddListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration:void addListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void doRemoveListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration:void removeListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$null$4(java.io.File,java.nio.file.Path,org.apache.dubbo.common.config.configcenter.ConfigChangeType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_null_4__446:java.lang.Object call()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_delay_13__439:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "org.apache.dubbo.remoting.etcd.jetcd.RetryLoops:java.lang.Object invokeWithRetry(java.util.concurrent.Callable,org.apache.dubbo.remoting.etcd.RetryPolicy)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.common.function.ThrowableConsumer:void execute(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery:void lambda$doInServiceRegistry$8(org.apache.dubbo.common.function.ThrowableConsumer,org.apache.curator.x.discovery.ServiceDiscovery)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery$lambda_doInServiceRegistry_8__566:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Invoker doSelect(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Invoker select(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Invoker reselect(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,java.util.List,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.support.AbstractClusterInvoker:org.apache.dubbo.rpc.Invoker doSelect(org.apache.dubbo.rpc.cluster.LoadBalance,org.apache.dubbo.rpc.Invocation,java.util.List,java.util.List)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.directory.StaticDirectory:java.util.List doList(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.directory.AbstractDirectory:java.util.List list(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.RouterChain$lambda_setInvokers_1__188:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.rpc.support.RpcUtils:org.apache.dubbo.rpc.InvokeMode getInvokeMode(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractInvoker:java.util.concurrent.ExecutorService getCallbackExecutor(org.apache.dubbo.common.URL,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "com.alibaba.dubbo.rpc.support.RpcUtils:boolean isReturnTypeFuture(com.alibaba.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.monitor.dubbo.MetricsFilter:void reportMetrics(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,long,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.support.AccessLogData:java.lang.String getServiceName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.AccessLogFilter:void processWithServiceLogger(java.util.Set)"
        ]
    },
    "org.apache.dubbo.rpc.support.AccessLogData:java.lang.String getLogMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.AccessLogFilter:void processWithAccessKeyLogger(java.util.Set,java.io.File)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:void processWithServiceLogger(java.util.Set)"
        ]
    },
    "org.apache.dubbo.rpc.support.RpcUtils:long convertToNumber(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.support.RpcUtils:long getTimeout(org.apache.dubbo.rpc.Invocation,long)",
            "org.apache.dubbo.rpc.support.RpcUtils:long getTimeout(org.apache.dubbo.common.URL,java.lang.String,org.apache.dubbo.rpc.RpcContext,long)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.AbstractExporter:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.support.AccessLogData:java.lang.String getServiceName()",
            "org.apache.dubbo.rpc.support.AccessLogData:java.lang.String getLogMessage()",
            "org.apache.dubbo.rpc.support.RpcUtils:long convertToNumber(java.lang.Object,long)",
            "org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper:javax.ws.rs.core.Response handleConstraintViolationException(javax.validation.ConstraintViolationException)",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String setEnumNameProperty(java.lang.String)",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String getEnumPropertyName()",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String setClassNameProperty(java.lang.String)",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String getClassNameProperty()",
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:void deserializeInternal(java.lang.Object,org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.ClassLoader,java.util.IdentityHashMap)",
            "org.apache.dubbo.common.bytecode.CustomizedLoaderClassPath:java.lang.String toString()",
            "org.apache.dubbo.common.bytecode.Wrapper$1:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[])",
            "org.apache.dubbo.common.json.GenericJSONConverter$27:java.lang.Object decode(java.lang.Object)",
            "org.apache.dubbo.common.json.GenericJSONConverter$28:java.lang.Object decode(java.lang.Object)",
            "org.apache.dubbo.common.json.GenericJSONConverter$7:void encode(java.lang.Object,org.apache.dubbo.common.json.JSONWriter)",
            "org.apache.dubbo.common.json.GenericJSONConverter:void writeValue(java.lang.Object,org.apache.dubbo.common.json.JSONWriter,boolean)",
            "org.apache.dubbo.common.json.J2oVisitor:java.lang.Object toArray(java.lang.Class,org.apache.dubbo.common.utils.Stack,int)",
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,int)",
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,org.apache.dubbo.common.json.JSONVisitor,int)",
            "org.apache.dubbo.common.json.JSONArray:java.lang.String getString(int)",
            "org.apache.dubbo.common.json.JSONObject:java.lang.String getString(java.lang.String)",
            "org.apache.dubbo.common.utils.DubboAppender:org.apache.dubbo.common.utils.Log parseLog(org.apache.log4j.spi.LoggingEvent)",
            "org.apache.dubbo.common.utils.LogUtil:void printList(java.util.List)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize0(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.util.Map)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object convertClassType(java.lang.Object,java.lang.Class)",
            "org.apache.dubbo.common.utils.StringUtils:java.lang.String nullSafeToString(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.Request:java.lang.String safeToString(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter$3:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.textui.TTable:org.apache.dubbo.qos.textui.TTable addRow(java.lang.Object[])",
            "org.apache.dubbo.qos.textui.TTree$1:void callback(int,boolean,java.lang.String,org.apache.dubbo.qos.textui.TTree$Node)",
            "org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)",
            "com.alibaba.com.caucho.hessian.io.StringValueSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "org.apache.dubbo.common.json.GenericJSONConverter$toString__452:java.lang.Object decode(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.FilterNode:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.support.AccessLogData:java.lang.String getServiceName()",
            "org.apache.dubbo.rpc.support.AccessLogData:java.lang.String getLogMessage()",
            "org.apache.dubbo.rpc.support.RpcUtils:long convertToNumber(java.lang.Object,long)",
            "org.apache.dubbo.rpc.protocol.AbstractExporter:java.lang.String toString()",
            "org.apache.dubbo.rpc.protocol.FilterNode:java.lang.String toString()",
            "org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper:javax.ws.rs.core.Response handleConstraintViolationException(javax.validation.ConstraintViolationException)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String setEnumNameProperty(java.lang.String)",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String getEnumPropertyName()",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String setClassNameProperty(java.lang.String)",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String getClassNameProperty()",
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:void deserializeInternal(java.lang.Object,org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.ClassLoader,java.util.IdentityHashMap)",
            "org.apache.dubbo.common.bytecode.CustomizedLoaderClassPath:java.lang.String toString()",
            "org.apache.dubbo.common.bytecode.Wrapper$1:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[])",
            "org.apache.dubbo.common.json.GenericJSONConverter$27:java.lang.Object decode(java.lang.Object)",
            "org.apache.dubbo.common.json.GenericJSONConverter$28:java.lang.Object decode(java.lang.Object)",
            "org.apache.dubbo.common.json.GenericJSONConverter$7:void encode(java.lang.Object,org.apache.dubbo.common.json.JSONWriter)",
            "org.apache.dubbo.common.json.GenericJSONConverter:void writeValue(java.lang.Object,org.apache.dubbo.common.json.JSONWriter,boolean)",
            "org.apache.dubbo.common.json.J2oVisitor:java.lang.Object toArray(java.lang.Class,org.apache.dubbo.common.utils.Stack,int)",
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,int)",
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,org.apache.dubbo.common.json.JSONVisitor,int)",
            "org.apache.dubbo.common.json.JSONArray:java.lang.String getString(int)",
            "org.apache.dubbo.common.json.JSONObject:java.lang.String getString(java.lang.String)",
            "org.apache.dubbo.common.utils.DubboAppender:org.apache.dubbo.common.utils.Log parseLog(org.apache.log4j.spi.LoggingEvent)",
            "org.apache.dubbo.common.utils.LogUtil:void printList(java.util.List)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize0(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.util.Map)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object convertClassType(java.lang.Object,java.lang.Class)",
            "org.apache.dubbo.common.utils.StringUtils:java.lang.String nullSafeToString(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.Request:java.lang.String safeToString(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter$3:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.textui.TTable:org.apache.dubbo.qos.textui.TTable addRow(java.lang.Object[])",
            "org.apache.dubbo.qos.textui.TTree$1:void callback(int,boolean,java.lang.String,org.apache.dubbo.qos.textui.TTree$Node)",
            "org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)",
            "com.alibaba.com.caucho.hessian.io.StringValueSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "org.apache.dubbo.common.json.GenericJSONConverter$toString__452:java.lang.Object decode(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper:javax.ws.rs.core.Response handleConstraintViolationException(javax.validation.ConstraintViolationException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper:javax.ws.rs.core.Response toResponse(org.apache.dubbo.rpc.RpcException)"
        ]
    },
    "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String setEnumNameProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:void serializeInternal(org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.Object,org.apache.dubbo.common.beanutil.JavaBeanAccessor,java.util.IdentityHashMap)"
        ]
    },
    "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String getEnumPropertyName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:java.lang.Object instantiateForDeserialize(org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.ClassLoader,java.util.IdentityHashMap)"
        ]
    },
    "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String setClassNameProperty(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:void serializeInternal(org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.Object,org.apache.dubbo.common.beanutil.JavaBeanAccessor,java.util.IdentityHashMap)"
        ]
    },
    "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String getClassNameProperty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:java.lang.Object instantiateForDeserialize(org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.ClassLoader,java.util.IdentityHashMap)"
        ]
    },
    "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:void deserializeInternal(java.lang.Object,org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.ClassLoader,java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:java.lang.Object deserialize(org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.ClassLoader)",
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:void deserializeInternal(java.lang.Object,org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.ClassLoader,java.util.IdentityHashMap)"
        ]
    },
    "org.apache.dubbo.common.bytecode.CustomizedLoaderClassPath:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.support.AccessLogData:java.lang.String getServiceName()",
            "org.apache.dubbo.rpc.support.AccessLogData:java.lang.String getLogMessage()",
            "org.apache.dubbo.rpc.support.RpcUtils:long convertToNumber(java.lang.Object,long)",
            "org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper:javax.ws.rs.core.Response handleConstraintViolationException(javax.validation.ConstraintViolationException)",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String setEnumNameProperty(java.lang.String)",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String getEnumPropertyName()",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String setClassNameProperty(java.lang.String)",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String getClassNameProperty()",
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:void deserializeInternal(java.lang.Object,org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.ClassLoader,java.util.IdentityHashMap)",
            "org.apache.dubbo.common.bytecode.CustomizedLoaderClassPath:java.lang.String toString()",
            "org.apache.dubbo.common.bytecode.Wrapper$1:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[])",
            "org.apache.dubbo.common.json.GenericJSONConverter$27:java.lang.Object decode(java.lang.Object)",
            "org.apache.dubbo.common.json.GenericJSONConverter$28:java.lang.Object decode(java.lang.Object)",
            "org.apache.dubbo.common.json.GenericJSONConverter$7:void encode(java.lang.Object,org.apache.dubbo.common.json.JSONWriter)",
            "org.apache.dubbo.common.json.GenericJSONConverter:void writeValue(java.lang.Object,org.apache.dubbo.common.json.JSONWriter,boolean)",
            "org.apache.dubbo.common.json.J2oVisitor:java.lang.Object toArray(java.lang.Class,org.apache.dubbo.common.utils.Stack,int)",
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,int)",
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,org.apache.dubbo.common.json.JSONVisitor,int)",
            "org.apache.dubbo.common.json.JSONArray:java.lang.String getString(int)",
            "org.apache.dubbo.common.json.JSONObject:java.lang.String getString(java.lang.String)",
            "org.apache.dubbo.common.utils.DubboAppender:org.apache.dubbo.common.utils.Log parseLog(org.apache.log4j.spi.LoggingEvent)",
            "org.apache.dubbo.common.utils.LogUtil:void printList(java.util.List)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize0(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.util.Map)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object convertClassType(java.lang.Object,java.lang.Class)",
            "org.apache.dubbo.common.utils.StringUtils:java.lang.String nullSafeToString(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.Request:java.lang.String safeToString(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter$3:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.textui.TTable:org.apache.dubbo.qos.textui.TTable addRow(java.lang.Object[])",
            "org.apache.dubbo.qos.textui.TTree$1:void callback(int,boolean,java.lang.String,org.apache.dubbo.qos.textui.TTree$Node)",
            "org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)",
            "com.alibaba.com.caucho.hessian.io.StringValueSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "org.apache.dubbo.common.json.GenericJSONConverter$toString__452:java.lang.Object decode(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.bytecode.Wrapper$1:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1:java.lang.Object doInvoke(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[])"
        ]
    },
    "org.apache.dubbo.common.json.GenericJSONConverter$27:java.lang.Object decode(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.GenericJSONConverter:java.lang.Object readValue(java.lang.Class,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.json.GenericJSONConverter$28:java.lang.Object decode(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.GenericJSONConverter:java.lang.Object readValue(java.lang.Class,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.json.GenericJSONConverter$7:void encode(java.lang.Object,org.apache.dubbo.common.json.JSONWriter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.GenericJSONConverter:void writeValue(java.lang.Object,org.apache.dubbo.common.json.JSONWriter,boolean)"
        ]
    },
    "org.apache.dubbo.common.json.GenericJSONConverter:void writeValue(java.lang.Object,org.apache.dubbo.common.json.JSONWriter,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.GenericJSONConverter:void writeValue(java.lang.Object,org.apache.dubbo.common.json.JSONWriter,boolean)",
            "org.apache.dubbo.common.json.JSON:void json(java.lang.Object,org.apache.dubbo.common.json.JSONWriter,boolean)",
            "org.apache.dubbo.common.json.JSON:void json(java.lang.Object,java.lang.String[],org.apache.dubbo.common.json.JSONWriter,boolean)",
            "org.apache.dubbo.common.json.JSONArray:void writeJSON(org.apache.dubbo.common.json.JSONConverter,org.apache.dubbo.common.json.JSONWriter,boolean)",
            "org.apache.dubbo.common.json.JSONObject:void writeJSON(org.apache.dubbo.common.json.JSONConverter,org.apache.dubbo.common.json.JSONWriter,boolean)"
        ]
    },
    "org.apache.dubbo.common.json.J2oVisitor:java.lang.Object toArray(java.lang.Class,org.apache.dubbo.common.utils.Stack,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.J2oVisitor:java.lang.Object arrayEnd(int)"
        ]
    },
    "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader)"
        ]
    },
    "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,org.apache.dubbo.common.json.JSONVisitor,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,java.lang.Class)",
            "org.apache.dubbo.common.json.JSON:java.lang.Object[] parse(java.io.Reader,java.lang.Class[])",
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,org.apache.dubbo.common.json.JSONVisitor)"
        ]
    },
    "org.apache.dubbo.common.json.JSONArray:java.lang.String getString(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.json.JSONObject:java.lang.String getString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.utils.DubboAppender:org.apache.dubbo.common.utils.Log parseLog(org.apache.log4j.spi.LoggingEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.utils.DubboAppender:void append(org.apache.log4j.spi.LoggingEvent)"
        ]
    },
    "org.apache.dubbo.common.utils.LogUtil:void printList(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object convertClassType(java.lang.Object,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object getFieldObject(java.lang.Object,java.lang.reflect.Type)"
        ]
    },
    "org.apache.dubbo.common.utils.StringUtils:java.lang.String nullSafeToString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.utils.StringUtils:java.lang.String arrayToDelimitedString(java.lang.Object[],java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Request:java.lang.String safeToString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Request:java.lang.String toString()"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)"
        ]
    },
    "org.apache.dubbo.qos.textui.TTable:org.apache.dubbo.qos.textui.TTable addRow(java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.Help:java.lang.String commandHelp(java.lang.String)",
            "org.apache.dubbo.qos.command.impl.Help:java.lang.String mainHelp()",
            "org.apache.dubbo.qos.command.impl.Ls:java.lang.String listProvider()",
            "org.apache.dubbo.qos.command.impl.Ls:java.lang.String listConsumer()",
            "org.apache.dubbo.qos.command.impl.Ready:java.lang.String buildUiText(java.util.Map)",
            "org.apache.dubbo.qos.textui.TKv:org.apache.dubbo.qos.textui.TKv add(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.qos.textui.TTree$1:void callback(int,boolean,java.lang.String,org.apache.dubbo.qos.textui.TTree$Node)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.textui.TTree:void recursive(int,boolean,java.lang.String,org.apache.dubbo.qos.textui.TTree$Node,org.apache.dubbo.qos.textui.TTree$Callback)"
        ]
    },
    "org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.metadata.definition.TypeDefinitionBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.StringValueSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeObject(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.json.GenericJSONConverter$toString__452:java.lang.Object decode(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.GenericJSONConverter:java.lang.Object readValue(java.lang.Class,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper doLocalExport(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol:org.apache.dubbo.rpc.Exporter export(org.apache.dubbo.rpc.Invoker)"
        ]
    },
    "org.apache.dubbo.registry.integration.RegistryProtocol:java.lang.String access$400(org.apache.dubbo.registry.integration.RegistryProtocol,org.apache.dubbo.rpc.Invoker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.RegistryProtocol$ExporterChangeableWrapper:void unexport()",
            "org.apache.dubbo.registry.integration.RegistryProtocol$OverrideListener:void doOverrideIfNecessary()"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.DubboMonitor:void lambda$new$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.monitor.dubbo.DubboMonitor$lambda_new_0__646:void run()"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateAbstractInterfaceConfig(org.apache.dubbo.config.AbstractInterfaceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateServiceConfig(org.apache.dubbo.config.ServiceConfig)",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateReferenceConfig(org.apache.dubbo.config.ReferenceConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateProtocolConfig(org.apache.dubbo.config.ProtocolConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateServiceConfig(org.apache.dubbo.config.ServiceConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateProviderConfig(org.apache.dubbo.config.ProviderConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void checkGlobalConfigs()",
            "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateServiceConfig(org.apache.dubbo.config.ServiceConfig)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateMethodConfig(org.apache.dubbo.config.MethodConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.utils.ConfigValidationUtils$validateMethodConfig__90:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateServiceConfig(org.apache.dubbo.config.ServiceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ServiceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils:void validateReferenceConfig(org.apache.dubbo.config.ReferenceConfig)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.ReferenceConfig:void checkAndUpdateSubConfigs()"
        ]
    },
    "org.apache.dubbo.rpc.model.ApplicationModel:void setApplication(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerAdapter:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void <init>(org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:void <init>(org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void <init>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void <init>(org.apache.dubbo.remoting.exchange.support.Replier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void <init>(org.apache.dubbo.remoting.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.support.ExchangeHandlerDispatcher:void <init>(org.apache.dubbo.remoting.exchange.support.Replier,org.apache.dubbo.remoting.ChannelHandler[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeServer bind(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)",
            "org.apache.dubbo.remoting.exchange.Exchangers:org.apache.dubbo.remoting.exchange.ExchangeClient connect(org.apache.dubbo.common.URL,org.apache.dubbo.remoting.ChannelHandler,org.apache.dubbo.remoting.exchange.support.Replier)"
        ]
    },
    "org.apache.dubbo.container.Main$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap start()",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.rpc.protocol.nativethrift.ThriftProtocol:java.lang.Runnable exportThreadedSelectorServer(java.lang.Object,java.lang.Class,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.common.timer.HashedWheelTimer:void start()",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.cache.support.expiring.ExpiringMap$ExpireThread:void startExpiring()",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.support.MulticastGroup:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.registry.multicast.MulticastRegistry:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.qos.legacy.CountTelnetHandler:java.lang.String telnet(org.apache.dubbo.remoting.Channel,java.lang.String)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.container.Main:org.apache.dubbo.common.logger.Logger access$000()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.container.Main$1:void run()"
        ]
    },
    "org.apache.dubbo.container.Main:java.util.concurrent.locks.ReentrantLock access$100()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.container.Main$1:void run()"
        ]
    },
    "org.apache.dubbo.container.Main:java.util.concurrent.locks.Condition access$200()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.container.Main$1:void run()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>(java.io.File)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration:void addListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:void addListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:void addListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void lambda$addListener$0(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)",
            "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void lambda$null$0(java.lang.String,java.lang.String)",
            "org.apache.dubbo.registry.client.migration.MigrationRuleListener:void <init>()"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.TreePathDynamicConfiguration:void removeListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.governance.DefaultGovernanceRuleRepositoryImpl:void removeListener(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.DynamicConfiguration:void removeListener(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void lambda$removeListener$1(java.lang.String,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener,org.apache.dubbo.common.config.configcenter.DynamicConfiguration)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration$lambda_null_4__446:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object write(java.util.concurrent.Callable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object read(java.util.concurrent.Callable)",
            "org.apache.dubbo.rpc.RpcContext:java.util.concurrent.CompletableFuture asyncCall(java.util.concurrent.Callable)",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object execute(java.util.concurrent.Callable,long)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object executeMutually(java.lang.Object,java.util.concurrent.Callable)",
            "org.apache.dubbo.remoting.etcd.jetcd.RetryLoops:java.lang.Object invokeWithRetry(java.util.concurrent.Callable,org.apache.dubbo.remoting.etcd.RetryPolicy)",
            "org.apache.dubbo.registry.client.metadata.store.InMemoryWritableMetadataService:boolean executeMutually(java.util.concurrent.Callable)",
            "com.alibaba.dubbo.rpc.RpcContext:java.util.concurrent.Future asyncCall(java.util.concurrent.Callable)"
        ]
    },
    "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery$lambda_doInServiceRegistry_8__566:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.function.ThrowableConsumer:void execute(java.lang.Object)",
            "org.apache.dubbo.registry.zookeeper.ZookeeperServiceDiscovery:void lambda$doInServiceRegistry$8(org.apache.dubbo.common.function.ThrowableConsumer,org.apache.curator.x.discovery.ServiceDiscovery)"
        ]
    },
    "org.apache.dubbo.rpc.filter.AccessLogFilter:void processWithServiceLogger(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.AccessLogFilter:void writeLogSetToFile(java.lang.String,java.util.Set)"
        ]
    },
    "org.apache.dubbo.rpc.filter.AccessLogFilter:void processWithAccessKeyLogger(java.util.Set,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.AccessLogFilter:void writeLogSetToFile(java.lang.String,java.util.Set)"
        ]
    },
    "org.apache.dubbo.rpc.support.RpcUtils:long getTimeout(org.apache.dubbo.rpc.Invocation,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.support.RpcUtils:long getTimeout(org.apache.dubbo.common.URL,java.lang.String,org.apache.dubbo.rpc.RpcContext,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:int calculateTimeout(org.apache.dubbo.rpc.Invocation,java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper:javax.ws.rs.core.Response toResponse(org.apache.dubbo.rpc.RpcException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper:javax.ws.rs.core.Response toResponse(java.lang.Throwable)"
        ]
    },
    "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:void serializeInternal(org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.Object,org.apache.dubbo.common.beanutil.JavaBeanAccessor,java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:org.apache.dubbo.common.beanutil.JavaBeanDescriptor createDescriptorIfAbsent(java.lang.Object,org.apache.dubbo.common.beanutil.JavaBeanAccessor,java.util.IdentityHashMap)"
        ]
    },
    "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:java.lang.Object instantiateForDeserialize(org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.ClassLoader,java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:java.lang.Object deserialize(org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.ClassLoader)",
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:void deserializeInternal(java.lang.Object,org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.ClassLoader,java.util.IdentityHashMap)"
        ]
    },
    "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:java.lang.Object deserialize(org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.ClassLoader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:java.lang.Object deserialize(org.apache.dubbo.common.beanutil.JavaBeanDescriptor)"
        ]
    },
    "org.apache.dubbo.rpc.proxy.javassist.JavassistProxyFactory$1:java.lang.Object doInvoke(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.proxy.AbstractProxyInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.common.json.GenericJSONConverter:java.lang.Object readValue(java.lang.Class,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.J2oVisitor:java.lang.Object end(java.lang.Object,boolean)",
            "org.apache.dubbo.common.json.J2oVisitor:void objectItemValue(java.lang.Object,boolean)",
            "org.apache.dubbo.common.json.J2oVisitor:void arrayItemValue(int,java.lang.Object,boolean)"
        ]
    },
    "org.apache.dubbo.common.json.JSON:void json(java.lang.Object,org.apache.dubbo.common.json.JSONWriter,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.JSON:void json(java.lang.Object,java.io.Writer,boolean)"
        ]
    },
    "org.apache.dubbo.common.json.JSON:void json(java.lang.Object,java.lang.String[],org.apache.dubbo.common.json.JSONWriter,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.JSON:void json(java.lang.Object,java.lang.String[],java.io.Writer,boolean)"
        ]
    },
    "org.apache.dubbo.common.json.JSONArray:void writeJSON(org.apache.dubbo.common.json.JSONConverter,org.apache.dubbo.common.json.JSONWriter,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.GenericJSONConverter:void writeValue(java.lang.Object,org.apache.dubbo.common.json.JSONWriter,boolean)"
        ]
    },
    "org.apache.dubbo.common.json.JSONObject:void writeJSON(org.apache.dubbo.common.json.JSONConverter,org.apache.dubbo.common.json.JSONWriter,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.GenericJSONConverter:void writeValue(java.lang.Object,org.apache.dubbo.common.json.JSONWriter,boolean)"
        ]
    },
    "org.apache.dubbo.common.json.J2oVisitor:java.lang.Object arrayEnd(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,org.apache.dubbo.common.json.JSONVisitor,int)"
        ]
    },
    "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.lang.String)"
        ]
    },
    "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.common.json.JSON:java.lang.Object[] parse(java.io.Reader,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.JSON:java.lang.Object[] parse(java.lang.String,java.lang.Class[])"
        ]
    },
    "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,org.apache.dubbo.common.json.JSONVisitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.lang.String,org.apache.dubbo.common.json.JSONVisitor)"
        ]
    },
    "org.apache.dubbo.common.utils.DubboAppender:void append(org.apache.log4j.spi.LoggingEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object getFieldObject(java.lang.Object,java.lang.reflect.Type)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object mapToPojo(java.util.Map,java.lang.Class)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object convertParameterizedType(java.lang.Object,java.lang.reflect.ParameterizedType)"
        ]
    },
    "org.apache.dubbo.common.utils.StringUtils:java.lang.String arrayToDelimitedString(java.lang.Object[],java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.utils.StringUtils:java.lang.String toCommaDelimitedString(java.lang.String,java.lang.String[])",
            "org.apache.dubbo.registry.consul.ConsulServiceDiscovery:java.util.Map getScCompatibleMetadata(java.util.List)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.Request:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.support.AccessLogData:java.lang.String getServiceName()",
            "org.apache.dubbo.rpc.support.AccessLogData:java.lang.String getLogMessage()",
            "org.apache.dubbo.rpc.support.RpcUtils:long convertToNumber(java.lang.Object,long)",
            "org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper:javax.ws.rs.core.Response handleConstraintViolationException(javax.validation.ConstraintViolationException)",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String setEnumNameProperty(java.lang.String)",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String getEnumPropertyName()",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String setClassNameProperty(java.lang.String)",
            "org.apache.dubbo.common.beanutil.JavaBeanDescriptor:java.lang.String getClassNameProperty()",
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:void deserializeInternal(java.lang.Object,org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.ClassLoader,java.util.IdentityHashMap)",
            "org.apache.dubbo.common.bytecode.CustomizedLoaderClassPath:java.lang.String toString()",
            "org.apache.dubbo.common.bytecode.Wrapper$1:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Class[],java.lang.Object[])",
            "org.apache.dubbo.common.json.GenericJSONConverter$27:java.lang.Object decode(java.lang.Object)",
            "org.apache.dubbo.common.json.GenericJSONConverter$28:java.lang.Object decode(java.lang.Object)",
            "org.apache.dubbo.common.json.GenericJSONConverter$7:void encode(java.lang.Object,org.apache.dubbo.common.json.JSONWriter)",
            "org.apache.dubbo.common.json.GenericJSONConverter:void writeValue(java.lang.Object,org.apache.dubbo.common.json.JSONWriter,boolean)",
            "org.apache.dubbo.common.json.J2oVisitor:java.lang.Object toArray(java.lang.Class,org.apache.dubbo.common.utils.Stack,int)",
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,int)",
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,org.apache.dubbo.common.json.JSONVisitor,int)",
            "org.apache.dubbo.common.json.JSONArray:java.lang.String getString(int)",
            "org.apache.dubbo.common.json.JSONObject:java.lang.String getString(java.lang.String)",
            "org.apache.dubbo.common.utils.DubboAppender:org.apache.dubbo.common.utils.Log parseLog(org.apache.log4j.spi.LoggingEvent)",
            "org.apache.dubbo.common.utils.LogUtil:void printList(java.util.List)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object realize0(java.lang.Object,java.lang.Class,java.lang.reflect.Type,java.util.Map)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object convertClassType(java.lang.Object,java.lang.Class)",
            "org.apache.dubbo.common.utils.StringUtils:java.lang.String nullSafeToString(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.Request:java.lang.String safeToString(java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.support.header.HeaderExchangeHandler:void handleRequest(org.apache.dubbo.remoting.exchange.ExchangeChannel,org.apache.dubbo.remoting.exchange.Request)",
            "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:void safeObjectAppend(java.lang.StringBuffer,java.lang.Object)",
            "org.apache.dubbo.registry.integration.RegistryDirectory:void refreshInvoker(java.util.List)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter$3:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.qos.textui.TTable:org.apache.dubbo.qos.textui.TTable addRow(java.lang.Object[])",
            "org.apache.dubbo.qos.textui.TTree$1:void callback(int,boolean,java.lang.String,org.apache.dubbo.qos.textui.TTree$Node)",
            "org.apache.dubbo.metadata.definition.builder.EnumTypeBuilder:org.apache.dubbo.metadata.definition.model.TypeDefinition build(java.lang.reflect.Type,java.lang.Class,java.util.Map)",
            "com.alibaba.com.caucho.hessian.io.StringValueSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "org.apache.dubbo.common.json.GenericJSONConverter$toString__452:java.lang.Object decode(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:org.apache.dubbo.remoting.transport.netty4.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])",
            "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)"
        ]
    },
    "org.apache.dubbo.qos.command.impl.Ready:java.lang.String buildUiText(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.command.impl.Ready:java.lang.String execute(org.apache.dubbo.qos.command.CommandContext,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.qos.textui.TKv:org.apache.dubbo.qos.textui.TKv add(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.qos.textui.TTree:void recursive(int,boolean,java.lang.String,org.apache.dubbo.qos.textui.TTree$Node,org.apache.dubbo.qos.textui.TTree$Callback)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.qos.textui.TTree:java.lang.String rendering()",
            "org.apache.dubbo.qos.textui.TTree:void recursive(int,boolean,java.lang.String,org.apache.dubbo.qos.textui.TTree$Node,org.apache.dubbo.qos.textui.TTree$Callback)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.java8.ZoneIdSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.java8.Java8TimeSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.LocaleSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.JavaSerializer$FieldSerializer:void serialize(com.alibaba.com.caucho.hessian.io.AbstractHessianOutput,java.lang.Object,java.lang.reflect.Field)",
            "com.alibaba.com.caucho.hessian.io.CollectionSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void call(java.lang.String,java.lang.Object[])",
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeFault(java.lang.String,java.lang.String,java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.JavaSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.CalendarSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.ArraySerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.EnumerationSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.EnumSetSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.HessianSerializerOutput:void writeObjectImpl(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.BasicSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.MapSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.BeanSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.AbstractHessianOutput:void call(java.lang.String,java.lang.Object[])",
            "com.alibaba.com.caucho.hessian.io.AbstractHessianOutput:void writeReply(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.IteratorSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput:void writeObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.java8.ZoneIdSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.java8.Java8TimeSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.LocaleSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.JavaSerializer$FieldSerializer:void serialize(com.alibaba.com.caucho.hessian.io.AbstractHessianOutput,java.lang.Object,java.lang.reflect.Field)",
            "com.alibaba.com.caucho.hessian.io.CollectionSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.JavaSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.CalendarSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.ArraySerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.EnumerationSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void call(java.lang.String,java.lang.Object[])",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeFault(java.lang.String,java.lang.String,java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeStreamingObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.EnumSetSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.BasicSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.MapSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.BeanSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.AbstractHessianOutput:void call(java.lang.String,java.lang.Object[])",
            "com.alibaba.com.caucho.hessian.io.AbstractHessianOutput:void writeReply(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.IteratorSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)"
        ]
    },
    "org.apache.dubbo.monitor.dubbo.DubboMonitor$lambda_new_0__646:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.config.utils.ConfigValidationUtils$validateMethodConfig__90:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:void <init>(org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void <init>()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:void <init>(org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:void <init>()"
        ]
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.AbstractExchangeGroup:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void <init>(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.remoting.p2p.exchange.support.MulticastExchangeGroup:void <init>(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void <init>()"
        ]
    },
    "org.apache.dubbo.registry.client.FileSystemServiceDiscovery:void lambda$null$0(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.client.FileSystemServiceDiscovery$lambda_null_0__539:void accept(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.filter.AccessLogFilter:void writeLogSetToFile(java.lang.String,java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.AccessLogFilter:void log(java.lang.String,org.apache.dubbo.rpc.support.AccessLogData)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:void writeLogToFile()"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:int calculateTimeout(org.apache.dubbo.rpc.Invocation,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.rest.RpcExceptionMapper:javax.ws.rs.core.Response toResponse(java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:org.apache.dubbo.common.beanutil.JavaBeanDescriptor createDescriptorIfAbsent(java.lang.Object,org.apache.dubbo.common.beanutil.JavaBeanAccessor,java.util.IdentityHashMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:org.apache.dubbo.common.beanutil.JavaBeanDescriptor serialize(java.lang.Object,org.apache.dubbo.common.beanutil.JavaBeanAccessor)",
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:void serializeInternal(org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.Object,org.apache.dubbo.common.beanutil.JavaBeanAccessor,java.util.IdentityHashMap)",
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:void lambda$serializeInternal$0(org.apache.dubbo.common.beanutil.JavaBeanAccessor,java.util.IdentityHashMap,org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:java.lang.Object deserialize(org.apache.dubbo.common.beanutil.JavaBeanDescriptor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.proxy.AbstractProxyInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.invoker.DelegateProviderMetaDataInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.AvailableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.BroadcastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker$RetryTimerTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.rpc.cluster.support.FailbackClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailfastClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailoverClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.FailsafeClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:void lambda$doInvoke$0(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation,java.util.concurrent.BlockingQueue,java.util.concurrent.atomic.AtomicInteger,java.util.List)",
            "org.apache.dubbo.rpc.cluster.support.MergeableClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.registry.ZoneAwareClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.cluster.support.wrapper.MockClusterInvoker:org.apache.dubbo.rpc.Result doMockInvoke(org.apache.dubbo.rpc.Invocation,org.apache.dubbo.rpc.RpcException)",
            "org.apache.dubbo.rpc.support.MockInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ActiveLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ClassLoaderFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.CompatibleFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ConsumerContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ContextFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.DeprecatedFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.EchoFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExceptionFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.ExecuteLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TimeoutFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TokenFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.TpsLimitFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.listener.ListenerInvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$2:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.AsyncToSyncInvoker:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.InvokerWrapper:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.FutureFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.filter.TraceFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.injvm.InjvmInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol$1:java.util.concurrent.CompletableFuture reply(org.apache.dubbo.remoting.exchange.ExchangeChannel,java.lang.Object)",
            "org.apache.dubbo.rpc.protocol.grpc.GrpcInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.proxy.InvokerInvocationHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.apache.dubbo.cache.filter.CacheFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.validation.filter.ValidationFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.support.MonitorFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.monitor.dubbo.MetricsFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "com.alibaba.dubbo.rpc.Invoker$CompatibleInvoker:com.alibaba.dubbo.rpc.Result invoke(com.alibaba.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.common.json.J2oVisitor:java.lang.Object end(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,org.apache.dubbo.common.json.JSONVisitor,int)"
        ]
    },
    "org.apache.dubbo.common.json.J2oVisitor:void objectItemValue(java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,org.apache.dubbo.common.json.JSONVisitor,int)"
        ]
    },
    "org.apache.dubbo.common.json.J2oVisitor:void arrayItemValue(int,java.lang.Object,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.io.Reader,org.apache.dubbo.common.json.JSONVisitor,int)"
        ]
    },
    "org.apache.dubbo.common.json.JSON:void json(java.lang.Object,java.io.Writer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.JSON:void json(java.lang.Object,java.io.Writer)"
        ]
    },
    "org.apache.dubbo.common.json.JSON:void json(java.lang.Object,java.lang.String[],java.io.Writer,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.JSON:void json(java.lang.Object,java.lang.String[],java.io.Writer)"
        ]
    },
    "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.json.JSON:java.lang.Object[] parse(java.lang.String,java.lang.Class[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.json.JSON:java.lang.Object parse(java.lang.String,org.apache.dubbo.common.json.JSONVisitor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object mapToPojo(java.util.Map,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.configurator.parser.ConfigParser:java.lang.Object parseObject(java.lang.String)",
            "org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRuleParser:org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule parse(java.lang.String)",
            "org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser:org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule parse(java.lang.String)",
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object convertClassType(java.lang.Object,java.lang.Class)"
        ]
    },
    "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object convertParameterizedType(java.lang.Object,java.lang.reflect.ParameterizedType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.utils.PojoUtils:java.lang.Object getFieldObject(java.lang.Object,java.lang.reflect.Type)"
        ]
    },
    "org.apache.dubbo.common.utils.StringUtils:java.lang.String toCommaDelimitedString(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder:org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder services(java.lang.String,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulServiceDiscovery:java.util.Map getScCompatibleMetadata(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.consul.ConsulServiceDiscovery:java.util.Map getMetadata(com.ecwid.consul.v1.health.model.HealthService$Service)",
            "org.apache.dubbo.registry.consul.ConsulServiceDiscovery:java.util.Map buildMetadata(org.apache.dubbo.registry.client.ServiceInstance)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:org.apache.dubbo.remoting.transport.netty4.logging.FormattingTuple arrayFormat(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:org.apache.dubbo.remoting.transport.netty4.logging.FormattingTuple format(java.lang.String,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:org.apache.dubbo.remoting.transport.netty4.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:void objectArrayAppend(java.lang.StringBuffer,java.lang.Object[],java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:void deeplyAppendParameter(java.lang.StringBuffer,java.lang.Object,java.util.Map)"
        ]
    },
    "org.apache.dubbo.qos.textui.TTree:java.lang.String rendering()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.com.caucho.hessian.io.java8.ZoneIdSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeObject(java.lang.Object)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.java8.Java8TimeSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeObject(java.lang.Object)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.LocaleSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeObject(java.lang.Object)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.JavaSerializer$FieldSerializer:void serialize(com.alibaba.com.caucho.hessian.io.AbstractHessianOutput,java.lang.Object,java.lang.reflect.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.JavaSerializer:void writeObject10(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.JavaSerializer:void writeInstance(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.CollectionSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeObject(java.lang.Object)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.HessianOutput:void call(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeFault(java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.com.caucho.hessian.io.JavaSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.ThrowableSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)",
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeObject(java.lang.Object)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.CalendarSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeObject(java.lang.Object)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.ArraySerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeObject(java.lang.Object)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.EnumerationSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeObject(java.lang.Object)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.EnumSetSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeObject(java.lang.Object)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.HessianSerializerOutput:void writeObjectImpl(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.com.caucho.hessian.io.BasicSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeObject(java.lang.Object)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.MapSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeObject(java.lang.Object)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.BeanSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeObject(java.lang.Object)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.AbstractHessianOutput:void call(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.com.caucho.hessian.io.AbstractHessianOutput:void writeReply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.com.caucho.hessian.io.IteratorSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeObject(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.serialize.hessian2.Hessian2ObjectOutput:void writeObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.GenericFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object,java.lang.String)",
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeResponseData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object,java.lang.String)",
            "org.apache.dubbo.rpc.protocol.redis.RedisProtocol$1:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.common.serialize.ObjectOutput:void writeThrowable(java.lang.Object)",
            "org.apache.dubbo.common.serialize.ObjectOutput:void writeEvent(java.lang.Object)",
            "org.apache.dubbo.common.serialize.ObjectOutput:void writeAttachments(java.util.Map)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequestData(org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponseData(org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)",
            "org.apache.dubbo.remoting.transport.CodecSupport:byte[] lambda$getNullBytesOf$1(org.apache.dubbo.common.serialize.Serialization,java.lang.Byte)",
            "org.apache.dubbo.remoting.transport.codec.TransportCodec:void encodeData(org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.Hessian2Output:void call(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeFault(java.lang.String,java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeStreamingObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.Hessian2StreamingOutput:void writeObject(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboProtocol:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.protocol.thrift.ThriftProtocol:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeGroup:void <init>(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeNetworker:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.registry.client.FileSystemServiceDiscovery$lambda_null_0__539:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap application(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap registry(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap protocol(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap service(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap reference(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap provider(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:org.apache.dubbo.config.bootstrap.DubboBootstrap consumer(java.lang.String,java.util.function.Consumer)",
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:void iterateListenerOperation(java.util.function.Consumer)",
            "org.apache.dubbo.common.utils.PojoUtils:void updatePropertyIfAbsent(java.util.function.Supplier,java.util.function.Consumer,java.lang.Object)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void doInListener(org.apache.dubbo.event.EventListener,java.util.function.Consumer)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClientWrapper:void keepAlive0(java.util.function.Consumer)",
            "org.apache.dubbo.metadata.rest.AbstractServiceRestMetadataResolver:boolean processRestMethodMetadata(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.util.function.Consumer)"
        ]
    },
    "org.apache.dubbo.rpc.filter.AccessLogFilter:void log(java.lang.String,org.apache.dubbo.rpc.support.AccessLogData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.AccessLogFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)"
        ]
    },
    "org.apache.dubbo.rpc.filter.AccessLogFilter:void writeLogToFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.AccessLogFilter$writeLogToFile__382:void run()"
        ]
    },
    "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:org.apache.dubbo.common.beanutil.JavaBeanDescriptor serialize(java.lang.Object,org.apache.dubbo.common.beanutil.JavaBeanAccessor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.filter.GenericFilter:void onResponse(org.apache.dubbo.rpc.Result,org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.rpc.filter.GenericImplFilter:org.apache.dubbo.rpc.Result invoke(org.apache.dubbo.rpc.Invoker,org.apache.dubbo.rpc.Invocation)",
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:org.apache.dubbo.common.beanutil.JavaBeanDescriptor serialize(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:void lambda$serializeInternal$0(org.apache.dubbo.common.beanutil.JavaBeanAccessor,java.util.IdentityHashMap,org.apache.dubbo.common.beanutil.JavaBeanDescriptor,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil$lambda_serializeInternal_0__384:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.json.JSON:void json(java.lang.Object,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.JSON:java.lang.String json(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.common.json.JSON:void json(java.lang.Object,java.lang.String[],java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.json.JSON:java.lang.String json(java.lang.Object,java.lang.String[])"
        ]
    },
    "org.apache.dubbo.rpc.cluster.configurator.parser.ConfigParser:java.lang.Object parseObject(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.configurator.parser.ConfigParser:java.util.List parseConfigurators(java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRuleParser:org.apache.dubbo.rpc.cluster.router.condition.config.model.ConditionRouterRule parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.condition.config.ListenableRouter:void process(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.model.TagRuleParser:org.apache.dubbo.rpc.cluster.router.tag.model.TagRouterRule parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:void process(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent)"
        ]
    },
    "org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder:org.apache.dubbo.config.bootstrap.builders.ReferenceBuilder services(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.registry.consul.ConsulServiceDiscovery:java.util.Map getMetadata(com.ecwid.consul.v1.health.model.HealthService$Service)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.consul.ConsulServiceDiscovery:org.apache.dubbo.registry.client.ServiceInstance lambda$convert$1(com.ecwid.consul.v1.health.model.HealthService$Service)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulServiceDiscovery:java.util.Map buildMetadata(org.apache.dubbo.registry.client.ServiceInstance)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:org.apache.dubbo.remoting.transport.netty4.logging.FormattingTuple format(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.transport.netty4.logging.MessageFormatter:org.apache.dubbo.remoting.transport.netty4.logging.FormattingTuple format(java.lang.String,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.alibaba.com.caucho.hessian.io.JavaSerializer:void writeObject10(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.JavaSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.JavaSerializer:void writeInstance(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.JavaSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.ThrowableSerializer:void writeObject(java.lang.Object,com.alibaba.com.caucho.hessian.io.AbstractHessianOutput)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.alibaba.com.caucho.hessian.io.HessianOutput:void writeObject(java.lang.Object)",
            "com.alibaba.com.caucho.hessian.io.Hessian2Output:void writeObject(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeResponseData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeResponseData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)"
        ]
    },
    "org.apache.dubbo.common.serialize.ObjectOutput:void writeThrowable(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.serialize.ObjectOutput:void writeEvent(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.serialize.ObjectOutput:void writeAttachments(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequestData(org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeData(org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponseData(org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponseData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)",
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponseData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.dubbo.remoting.transport.codec.TransportCodec:void encodeData(org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.codec.TransportCodec:void encodeData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)"
        ]
    },
    "com.alibaba.com.caucho.hessian.io.Hessian2StreamingOutput:void writeObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.p2p.exchange.support.FileExchangeNetworker:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(org.apache.dubbo.common.URL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.p2p.exchange.ExchangeNetworkers:org.apache.dubbo.remoting.p2p.exchange.ExchangeGroup lookup(org.apache.dubbo.common.URL)"
        ]
    },
    "org.apache.dubbo.rpc.filter.AccessLogFilter$writeLogToFile__382:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.config.bootstrap.DubboBootstrap:void executeMutually(java.lang.Runnable)",
            "org.apache.dubbo.config.context.ConfigManager:java.lang.Object lambda$write$10(java.lang.Runnable)",
            "org.apache.dubbo.rpc.cluster.support.ForkingClusterInvoker:org.apache.dubbo.rpc.Result doInvoke(org.apache.dubbo.rpc.Invocation,java.util.List,org.apache.dubbo.rpc.cluster.LoadBalance)",
            "org.apache.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.rpc.protocol.AbstractProxyProtocol$1:void afterUnExport()",
            "org.apache.dubbo.common.config.configcenter.AbstractDynamicConfiguration:java.lang.Object lambda$execute$2(java.lang.Runnable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void processWatchEvents(java.nio.file.WatchService)",
            "org.apache.dubbo.common.threadlocal.InternalRunnable:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor$RunnableWrapper:void run()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void waitAndDrain()",
            "org.apache.dubbo.common.threadpool.ThreadlessExecutor:void notifyReturn(java.lang.Throwable)",
            "org.apache.dubbo.common.threadpool.support.AbortPolicyWithReport:void dumpJStack()",
            "org.apache.dubbo.common.threadpool.support.eager.EagerThreadPoolExecutor:void execute(java.lang.Runnable)",
            "org.apache.dubbo.event.AbstractEventDispatcher:void dispatch(org.apache.dubbo.event.Event)",
            "org.apache.dubbo.remoting.exchange.support.DefaultFuture$TimeoutCheckTask:void run(org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.remoting.etcd.jetcd.JEtcdClient$EtcdWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.registry.retry.ReExportTask:void doRetry(org.apache.dubbo.common.URL,org.apache.dubbo.registry.support.FailbackRegistry,org.apache.dubbo.common.timer.Timeout)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void map(org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:java.util.Set getAndListen(org.apache.dubbo.common.URL,org.apache.dubbo.metadata.MappingListener)",
            "org.apache.dubbo.metadata.DynamicConfigurationServiceNameMapping:void execute(java.lang.Runnable)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeProviderMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,org.apache.dubbo.metadata.definition.model.ServiceDefinition)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void storeConsumerMetadata(org.apache.dubbo.metadata.report.identifier.MetadataIdentifier,java.util.Map)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier,org.apache.dubbo.common.URL)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void removeServiceMetadata(org.apache.dubbo.metadata.report.identifier.ServiceMetadataIdentifier)",
            "org.apache.dubbo.metadata.report.support.AbstractMetadataReport:void saveSubscribedData(org.apache.dubbo.metadata.report.identifier.SubscriberMetadataIdentifier,java.util.Set)",
            "com.alibaba.dubbo.rpc.RpcContext:void asyncCall(java.lang.Runnable)",
            "org.apache.dubbo.event.EventDispatcher$run__79:void execute(java.lang.Runnable)"
        ]
    },
    "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil:org.apache.dubbo.common.beanutil.JavaBeanDescriptor serialize(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.beanutil.JavaBeanSerializeUtil$lambda_serializeInternal_0__384:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.AsyncRpcResult:void lambda$whenCompleteWithContext$0(java.util.function.BiConsumer,org.apache.dubbo.rpc.AppResponse,java.lang.Throwable)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:java.lang.Object lambda$null$0(java.nio.file.WatchService,java.io.File,java.util.function.BiConsumer)"
        ]
    },
    "org.apache.dubbo.common.json.JSON:java.lang.String json(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.common.json.JSON:java.lang.String json(java.lang.Object,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.rpc.cluster.configurator.parser.ConfigParser:java.util.List parseConfigurators(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.integration.AbstractConfiguratorListener:boolean genConfiguratorsFromRawRule(java.lang.String)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.condition.config.ListenableRouter:void process(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.condition.config.ListenableRouter:void init(java.lang.String)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$fireConfigChangeEvent$7(java.lang.String,java.io.File,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigChangeType,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.zookeeper.CacheListener:void lambda$dataChanged$1(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration$ApolloListener:void lambda$onChange$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration$NacosConfigListener:void lambda$innerReceive$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.configcenter.consul.ConsulDynamicConfiguration$ConsulListener:void lambda$null$1(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:void process(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.tag.TagRouter:void notify(java.util.List)",
            "org.apache.dubbo.common.config.configcenter.file.FileSystemDynamicConfiguration:void lambda$fireConfigChangeEvent$7(java.lang.String,java.io.File,java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigChangeType,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.zookeeper.CacheListener:void lambda$dataChanged$1(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.apollo.ApolloDynamicConfiguration$ApolloListener:void lambda$onChange$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.nacos.NacosDynamicConfiguration$NacosConfigListener:void lambda$innerReceive$0(org.apache.dubbo.common.config.configcenter.ConfigChangedEvent,org.apache.dubbo.common.config.configcenter.ConfigurationListener)",
            "org.apache.dubbo.configcenter.support.etcd.EtcdDynamicConfiguration$EtcdConfigWatcher:void onNext(io.etcd.jetcd.api.WatchResponse)",
            "org.apache.dubbo.configcenter.consul.ConsulDynamicConfiguration$ConsulListener:void lambda$null$1(java.lang.String,org.apache.dubbo.common.config.configcenter.ConfigurationListener)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulServiceDiscovery:org.apache.dubbo.registry.client.ServiceInstance lambda$convert$1(com.ecwid.consul.v1.health.model.HealthService$Service)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.registry.consul.ConsulServiceDiscovery$lambda_convert_1__594:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.protocol.dubbo.DubboCodec:void encodeResponseData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeData(org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.codec.TransportCodec:void encodeData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequestData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeRequest(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Request)"
        ]
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponseData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponseData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.exchange.codec.ExchangeCodec:void encodeResponse(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,org.apache.dubbo.remoting.exchange.Response)"
        ]
    },
    "org.apache.dubbo.remoting.transport.codec.TransportCodec:void encodeData(org.apache.dubbo.remoting.Channel,org.apache.dubbo.common.serialize.ObjectOutput,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.remoting.transport.codec.TransportCodec:void encode(org.apache.dubbo.remoting.Channel,org.apache.dubbo.remoting.buffer.ChannelBuffer,java.lang.Object)"
        ]
    },
    "org.apache.dubbo.rpc.cluster.router.condition.config.ListenableRouter:void init(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.rpc.cluster.router.condition.config.ListenableRouter:void <init>(org.apache.dubbo.common.URL,java.lang.String)"
        ]
    },
    "org.apache.dubbo.registry.consul.ConsulServiceDiscovery$lambda_convert_1__594:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.dubbo.common.config.configcenter.wrapper.CompositeDynamicConfiguration:java.lang.Object iterateConfigOperation(java.util.function.Function)",
            "org.apache.dubbo.registry.zookeeper.util.CuratorFrameworkParams:java.lang.Object getParameterValue(org.apache.dubbo.common.URL)"
        ]
    }
}