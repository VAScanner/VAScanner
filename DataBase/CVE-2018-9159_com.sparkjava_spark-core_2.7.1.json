{
    "spark.resource.ClassPathResource:void <init>(java.lang.String,java.lang.ClassLoader)": {
        "isVulRoot": true,
        "vulCaller": [
            "spark.resource.ClassPathResource:void <init>(java.lang.String)"
        ]
    },
    "spark.resource.ClassPathResource:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "spark.resource.ClassPathResourceHandler:spark.resource.AbstractFileResolvingResource getResource(java.lang.String)"
        ]
    },
    "spark.resource.ClassPathResourceHandler:spark.resource.AbstractFileResolvingResource getResource(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "spark.resource.AbstractResourceHandler:spark.resource.AbstractFileResolvingResource getResource(javax.servlet.http.HttpServletRequest)"
        ]
    },
    "spark.resource.AbstractResourceHandler:spark.resource.AbstractFileResolvingResource getResource(javax.servlet.http.HttpServletRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "spark.staticfiles.StaticFilesConfiguration:boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "spark.staticfiles.StaticFilesConfiguration:boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "spark.staticfiles.StaticFilesConfiguration:boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "spark.staticfiles.StaticFilesConfiguration:boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "spark.http.matching.MatcherFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)",
            "spark.servlet.SparkFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "spark.http.matching.MatcherFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "spark.embeddedserver.jetty.JettyHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)",
            "spark.servlet.SparkFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)"
        ]
    },
    "spark.servlet.SparkFilter:void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)": {
        "isVulRoot": false,
        "vulCaller": [
            "spark.embeddedserver.jetty.JettyHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)"
        ]
    },
    "spark.embeddedserver.jetty.JettyHandler:void doHandle(java.lang.String,org.eclipse.jetty.server.Request,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)": {
        "isVulRoot": false,
        "vulCaller": []
    }
}