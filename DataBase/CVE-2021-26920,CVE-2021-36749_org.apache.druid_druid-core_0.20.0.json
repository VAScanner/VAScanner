{
    "org.apache.druid.data.input.impl.HttpInputSource:boolean equals(java.lang.Object)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.druid.java.util.common.collect.Utils:boolean isPrefix(java.util.List,java.util.List)",
            "org.apache.druid.java.util.http.client.pool.ResourcePool$ImmediateCreationResourceHolder:boolean lambda$holderListContains$0(java.lang.Object,org.apache.druid.java.util.http.client.pool.ResourcePool$ResourceHolder)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry:boolean equals(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.collect.Utils:boolean isPrefix(java.util.List,java.util.List)": {
        "isVulRoot": true,
        "vulCaller": []
    },
    "org.apache.druid.java.util.http.client.pool.ResourcePool$ImmediateCreationResourceHolder:boolean lambda$holderListContains$0(java.lang.Object,org.apache.druid.java.util.http.client.pool.ResourcePool$ResourceHolder)": {
        "isVulRoot": true,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime extractTimestamp(java.util.Map)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry:boolean equals(java.lang.Object)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.druid.java.util.common.collect.Utils:boolean isPrefix(java.util.List,java.util.List)",
            "org.apache.druid.java.util.http.client.pool.ResourcePool$ImmediateCreationResourceHolder:boolean lambda$holderListContains$0(java.lang.Object,org.apache.druid.java.util.http.client.pool.ResourcePool$ResourceHolder)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry:boolean equals(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean addAtKey(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry)"
        ]
    },
    "org.apache.druid.java.util.common.Pair:int hashCode()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.druid.java.util.common.Pair:int hashCode()",
            "org.apache.druid.timeline.partition.StringPartitionChunk:int hashCode()"
        ]
    },
    "org.apache.druid.timeline.partition.StringPartitionChunk:int hashCode()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.druid.java.util.common.Pair:int hashCode()",
            "org.apache.druid.timeline.partition.StringPartitionChunk:int hashCode()"
        ]
    },
    "org.apache.druid.data.input.impl.HttpInputSource:org.apache.druid.data.input.impl.SplittableInputSource withSplit(org.apache.druid.data.input.InputSplit)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.apache.druid.data.input.impl.HttpInputSource:org.apache.druid.data.input.InputSource withSplit(org.apache.druid.data.input.InputSplit)"
        ]
    },
    "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime extractTimestamp(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.MapInputRowParser:org.apache.druid.data.input.InputRow parse(org.apache.druid.data.input.impl.TimestampSpec,java.util.List,java.util.Set,java.util.Map)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:boolean addAtKey(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:void add(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry)"
        ]
    },
    "org.apache.druid.data.input.impl.HttpInputSource:org.apache.druid.data.input.InputSource withSplit(org.apache.druid.data.input.InputSplit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.CombiningInputSource:org.apache.druid.data.input.InputSource withSplit(org.apache.druid.data.input.InputSplit)"
        ]
    },
    "org.apache.druid.data.input.impl.MapInputRowParser:org.apache.druid.data.input.InputRow parse(org.apache.druid.data.input.impl.TimestampSpec,java.util.List,java.util.Set,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.MapInputRowParser:java.util.List parseBatch(java.util.Map)",
            "org.apache.druid.data.input.impl.MapInputRowParser:org.apache.druid.data.input.InputRow parse(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.util.Map)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:void add(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)"
        ]
    },
    "org.apache.druid.data.input.impl.CombiningInputSource:org.apache.druid.data.input.InputSource withSplit(org.apache.druid.data.input.InputSplit)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.CombiningInputSource:org.apache.druid.data.input.InputSource withSplit(org.apache.druid.data.input.InputSplit)"
        ]
    },
    "org.apache.druid.data.input.impl.MapInputRowParser:java.util.List parseBatch(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:org.apache.druid.data.input.InputRow parseMap(java.util.Map)",
            "org.apache.druid.data.input.impl.MapInputRowParser:java.util.List parseBatch(java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.impl.MapInputRowParser:org.apache.druid.data.input.InputRow parse(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.MapInputRowParser:org.apache.druid.data.input.InputRow parse(org.apache.druid.data.input.InputRowSchema,java.util.Map)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addSegments(org.apache.druid.timeline.VersionedIntervalTimeline,java.util.Iterator)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void add(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.partition.PartitionChunk)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)"
        ]
    },
    "org.apache.druid.data.input.impl.StringInputRowParser:org.apache.druid.data.input.InputRow parseMap(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:java.util.List parseBatch(java.nio.ByteBuffer)",
            "org.apache.druid.data.input.impl.StringInputRowParser:org.apache.druid.data.input.InputRow parse(java.lang.String)"
        ]
    },
    "org.apache.druid.data.input.impl.MapInputRowParser:java.util.List parseBatch(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.MapInputRowParser:org.apache.druid.data.input.InputRow parse(org.apache.druid.data.input.InputRowSchema,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.JsonReader:java.util.List parseInputRows(java.lang.String)",
            "org.apache.druid.data.input.impl.RegexReader:java.util.List parseInputRows(java.lang.String)",
            "org.apache.druid.data.input.impl.DelimitedValueReader:java.util.List parseInputRows(java.lang.String)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:void addSegments(org.apache.druid.timeline.VersionedIntervalTimeline,java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.VersionedIntervalTimeline forSegments(java.util.Iterator)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:void add(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.partition.PartitionChunk)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionChunk remove(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.partition.PartitionChunk)"
        ]
    },
    "org.apache.druid.data.input.impl.StringInputRowParser:java.util.List parseBatch(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:java.util.List parseBatch(java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.impl.StringInputRowParser:org.apache.druid.data.input.InputRow parse(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.druid.data.input.InputRow nextRow()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.druid.data.input.InputRowListPlusRawValues nextRowWithRaw()"
        ]
    },
    "org.apache.druid.data.input.impl.JsonReader:java.util.List parseInputRows(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.JsonReader:java.util.List parseInputRows(java.lang.Object)",
            "org.apache.druid.data.input.TextReader:java.util.List parseInputRows(java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.impl.RegexReader:java.util.List parseInputRows(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.RegexReader:java.util.List parseInputRows(java.lang.Object)",
            "org.apache.druid.data.input.TextReader:java.util.List parseInputRows(java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.impl.DelimitedValueReader:java.util.List parseInputRows(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.DelimitedValueReader:java.util.List parseInputRows(java.lang.Object)",
            "org.apache.druid.data.input.TextReader:java.util.List parseInputRows(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.VersionedIntervalTimeline forSegments(java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.VersionedIntervalTimeline forSegments(java.lang.Iterable)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionChunk remove(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.partition.PartitionChunk)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.StringInputRowParser:java.util.List parseBatch(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.druid.data.input.InputRow nextRow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.FirehoseToInputSourceReaderAdaptor$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Firehose:org.apache.druid.data.input.InputRowListPlusRawValues nextRowWithRaw()"
        ]
    },
    "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.druid.data.input.InputRowListPlusRawValues nextRowWithRaw()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.FirehoseToInputSourceReaderAdaptor$2:org.apache.druid.data.input.InputRowListPlusRawValues next()"
        ]
    },
    "org.apache.druid.data.input.impl.JsonReader:java.util.List parseInputRows(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.data.input.IntermediateRowParsingReader:org.apache.druid.data.input.InputRowListPlusRawValues lambda$sample$0(java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.TextReader:java.util.List parseInputRows(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.RegexReader:java.util.List parseInputRows(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.data.input.IntermediateRowParsingReader:org.apache.druid.data.input.InputRowListPlusRawValues lambda$sample$0(java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.impl.DelimitedValueReader:java.util.List parseInputRows(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.data.input.IntermediateRowParsingReader:org.apache.druid.data.input.InputRowListPlusRawValues lambda$sample$0(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.VersionedIntervalTimeline forSegments(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.FirehoseToInputSourceReaderAdaptor$1:org.apache.druid.data.input.InputRow next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.FirehoseToInputSourceReaderAdaptor$1:java.lang.Object next()"
        ]
    },
    "org.apache.druid.data.input.Firehose:org.apache.druid.data.input.InputRowListPlusRawValues nextRowWithRaw()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.FirehoseToInputSourceReaderAdaptor$2:org.apache.druid.data.input.InputRowListPlusRawValues next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.FirehoseToInputSourceReaderAdaptor$2:java.lang.Object next()"
        ]
    },
    "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:boolean hasNext()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:boolean hasMore()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:boolean hasNext()",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:boolean hasNext()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.data.input.IntermediateRowParsingReader:org.apache.druid.data.input.InputRowListPlusRawValues lambda$sample$0(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.IntermediateRowParsingReader$lambda_sample_0__60:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.impl.FirehoseToInputSourceReaderAdaptor$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.DroppingIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:java.lang.Object next()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.data.input.impl.FirehoseToInputSourceReaderAdaptor$2:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.DroppingIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:java.lang.Object next()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.LifecycleModule:org.apache.druid.java.util.common.lifecycle.Lifecycle getLifecycle(com.google.inject.Injector)"
        ]
    },
    "org.apache.druid.guice.LifecycleModule$2:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void start()"
        ]
    },
    "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.JsonConfigProvider:com.google.common.base.Supplier get()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class)"
        ]
    },
    "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "org.apache.druid.guice.ListProvider:java.util.List get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.ListProvider:java.lang.Object get()"
        ]
    },
    "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:java.nio.file.Path discover(java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:java.nio.file.Path discover(java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map 'to'(java.lang.String,java.util.Map)"
        ]
    },
    "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmThreadsMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CgroupMemoryMonitor:void lambda$doMonitor$2(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.lang.Long,java.util.Map)",
            "org.apache.druid.java.util.metrics.CgroupMemoryMonitor:void lambda$doMonitor$0(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.lang.String,java.lang.Long)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitThreadAllocationMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CpuAcctDeltaMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGenerationCollector:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGenerationSpace:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.CompoundMonitor:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void startMonitor(org.apache.druid.java.util.metrics.Monitor)"
        ]
    },
    "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void removeMonitor(org.apache.druid.java.util.metrics.Monitor)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()"
        ]
    },
    "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.CompoundMonitor:boolean monitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitGcMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.AbstractMonitor:boolean monitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.MonitorScheduler:void start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)"
        ]
    },
    "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.AbstractMonitor:boolean monitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.Emitters:org.apache.druid.java.util.emitter.core.Emitter create(java.util.Properties,org.asynchttpclient.AsyncHttpClient,com.fasterxml.jackson.databind.ObjectMapper,org.apache.druid.java.util.common.lifecycle.Lifecycle)"
        ]
    },
    "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.service.ServiceEmitter:void start()"
        ]
    },
    "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.service.ServiceEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)"
        ]
    },
    "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.service.ServiceEmitter:void flush()"
        ]
    },
    "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.service.ServiceEmitter:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.service.ServiceEmitter:void flush()"
        ]
    },
    "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)"
        ]
    },
    "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.RegexParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.AbstractFlatTextFormatParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.data.input.impl.RegexReader:java.util.Map parseLine(java.lang.String)",
            "org.apache.druid.data.input.impl.DelimitedValueReader:java.util.Map parseLine(java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.ParserUtils:void validateFields(java.lang.Iterable)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:void <init>(org.apache.druid.java.util.common.parsers.CloseableIterator,org.apache.druid.java.util.common.parsers.CloseableIterator,java.util.function.Function)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:java.lang.Object next()"
        ]
    },
    "org.apache.druid.java.util.common.parsers.CloseableIterator$2:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:boolean hasNext()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:boolean hasMore()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:boolean hasNext()",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:boolean hasNext()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:java.util.Map parseString(java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.CloseableIterator$1:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:boolean hasNext()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:boolean hasMore()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:boolean hasNext()",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:boolean hasNext()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONPathParser:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,com.fasterxml.jackson.databind.ObjectMapper,boolean)",
            "org.apache.druid.data.input.impl.JsonReader:void <init>(org.apache.druid.data.input.InputRowSchema,org.apache.druid.data.input.InputEntity,org.apache.druid.java.util.common.parsers.JSONPathSpec,com.fasterxml.jackson.databind.ObjectMapper,boolean)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object getRootField(com.fasterxml.jackson.databind.JsonNode,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object lambda$makeJsonQueryExtractor$3(net.thisptr.jackson.jq.JsonQuery,com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object lambda$makeJsonPathExtractor$2(com.jayway.jsonpath.JsonPath,com.fasterxml.jackson.databind.JsonNode)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean lambda$discoverRootFields$1(java.util.Map$Entry)"
        ]
    },
    "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.logger.Logger:void infoSegmentIds(java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegments(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.Collection,java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:boolean hasNext()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:boolean hasMore()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:boolean hasNext()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.DroppingIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:java.lang.Object next()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()"
        ]
    },
    "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:boolean hasNext()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:boolean hasMore()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:boolean hasNext()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void lambda$toYielder$0(org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.MappedSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$1:java.lang.Object get()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.Sequence:java.util.List toList()",
            "org.apache.druid.java.util.common.guava.LazySequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.TopNSequence$1:java.util.Iterator make()",
            "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object lambda$accumulate$0(org.apache.druid.java.util.common.guava.Accumulator,java.lang.Object,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.common.guava.CombiningSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder access$000(org.apache.druid.java.util.common.guava.BaseSequence,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()"
        ]
    },
    "org.apache.druid.java.util.common.guava.FunctionalIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:boolean hasNext()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:boolean hasMore()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:boolean hasNext()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.DroppingIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.Sequences$1:java.util.Iterator make()",
            "org.apache.druid.java.util.common.guava.FunctionalIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.collections.CombiningIterable:java.util.Iterator iterator()",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.VersionedIntervalTimeline forSegments(java.lang.Iterable)"
        ]
    },
    "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.nio.ByteBuffer)"
        ]
    },
    "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void access$300(org.apache.druid.java.util.common.io.smoosh.FileSmoosher)"
        ]
    },
    "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void closeAllCursors(java.util.Collection)"
        ]
    },
    "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void start()"
        ]
    },
    "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$1:void run()"
        ]
    },
    "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void <init>(java.util.Collection)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addFiles(java.util.Collection)"
        ]
    },
    "org.apache.druid.java.util.common.CloseableIterators$1:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:boolean hasNext()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:boolean hasMore()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:boolean hasNext()",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:boolean hasNext()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:java.lang.Object getContent()"
        ]
    },
    "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:void stop()",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.http.client.AbstractHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler)",
            "org.apache.druid.java.util.http.client.CredentialedHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$MatchFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.ApplyFunctionExpr liftApplyLambda(org.apache.druid.math.expr.ApplyFunctionExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitApplyFunctionExpr(org.apache.druid.math.expr.antlr.ExprParser$ApplyFunctionExprContext)"
        ]
    },
    "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$NvlFunc:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$CaseSimpleFunc:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ConditionFunc:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$CaseSearchedFunc:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnappliedBindings(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser$lambda_applyUnappliedBindings_2__305:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr)"
        ]
    },
    "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$flatten$0(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(org.apache.druid.math.expr.Expr[])"
        ]
    },
    "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarUnivariateMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()"
        ]
    },
    "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()"
        ]
    },
    "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set getRequiredBindings()",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set getScalarBindings()",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set getArrayBindings()",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set getScalarVariables()",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set getArrayVariables()"
        ]
    },
    "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnappliedBindings(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis 'with'(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarUnivariateMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()"
        ]
    },
    "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)"
        ]
    },
    "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.common.config.ConfigManager:void poll()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.common.config.ConfigManager:void access$600(org.apache.druid.common.config.ConfigManager)"
        ]
    },
    "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List)",
            "org.apache.druid.data.input.impl.DimensionsSpec:org.apache.druid.data.input.impl.DimensionsSpec withDimensions(java.util.List)",
            "org.apache.druid.data.input.impl.DimensionsSpec:org.apache.druid.data.input.impl.DimensionsSpec withDimensionExclusions(java.util.Set)",
            "org.apache.druid.data.input.impl.DimensionsSpec:org.apache.druid.data.input.impl.DimensionsSpec withSpatialDimensions(java.util.List)",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <clinit>()",
            "org.apache.druid.data.input.impl.TimeAndDimsParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec)"
        ]
    },
    "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.CSVParseSpec:org.apache.druid.data.input.impl.ParseSpec withTimestampSpec(org.apache.druid.data.input.impl.TimestampSpec)",
            "org.apache.druid.data.input.impl.CSVParseSpec:org.apache.druid.data.input.impl.ParseSpec withDimensionsSpec(org.apache.druid.data.input.impl.DimensionsSpec)"
        ]
    },
    "org.apache.druid.data.input.impl.FileIteratingFirehose:boolean hasMore()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.FirehoseToInputSourceReaderAdaptor$2:boolean hasNext()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.druid.data.input.InputRow nextRow()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.druid.data.input.InputRowListPlusRawValues nextRowWithRaw()",
            "org.apache.druid.data.input.impl.FirehoseToInputSourceReaderAdaptor$1:boolean hasNext()"
        ]
    },
    "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:boolean hasNext()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:boolean hasMore()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:boolean hasNext()",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:boolean hasNext()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.CsvInputFormat:void <init>(java.util.List,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)"
        ]
    },
    "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.DelimitedParser:java.util.List splitToList(java.lang.String)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List lambda$createReader$0(java.lang.String)"
        ]
    },
    "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:boolean hasNext()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:boolean hasMore()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:boolean hasNext()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec)",
            "org.apache.druid.data.input.impl.JSONParseSpec:org.apache.druid.data.input.impl.ParseSpec withTimestampSpec(org.apache.druid.data.input.impl.TimestampSpec)",
            "org.apache.druid.data.input.impl.JSONParseSpec:org.apache.druid.data.input.impl.ParseSpec withDimensionsSpec(org.apache.druid.data.input.impl.DimensionsSpec)"
        ]
    },
    "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:org.apache.druid.data.input.impl.ParseSpec withTimestampSpec(org.apache.druid.data.input.impl.TimestampSpec)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:org.apache.druid.data.input.impl.ParseSpec withDimensionsSpec(org.apache.druid.data.input.impl.DimensionsSpec)"
        ]
    },
    "org.apache.druid.data.input.HandlingInputRowIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:boolean hasNext()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:boolean hasMore()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:boolean hasNext()",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:boolean hasNext()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.HandlingInputRowIterator:java.lang.Object next()"
        ]
    },
    "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.HashPartitioner:java.util.List extractKeys(java.util.List,long,org.apache.druid.data.input.InputRow)"
        ]
    },
    "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:boolean hasNext()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:boolean hasMore()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:boolean hasNext()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.lang.Object next()"
        ]
    },
    "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:java.lang.Object next()"
        ]
    },
    "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()"
        ]
    },
    "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)"
        ]
    },
    "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)"
        ]
    },
    "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean addChunk(org.apache.druid.timeline.partition.PartitionChunk)"
        ]
    },
    "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:void determineVisibleGroupAfterRemove(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:void determineVisibleGroupAfterRemove(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean addChunk(org.apache.druid.timeline.partition.PartitionChunk)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:void moveNewStandbyToVisibleIfNecessary(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:void checkVisibleIsFullyAvailableAndTryToMoveOvershadowedToVisible(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:void checkVisibleIsFullyAvailableAndTryToMoveOvershadowedToVisible(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:void determineVisibleGroupAfterRemove(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:void determineVisibleGroupAfterRemove(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.lang.Iterable lambda$checkVisibleIsFullyAvailableAndTryToMoveOvershadowedToVisible$12(org.apache.druid.timeline.partition.AtomicUpdateGroup)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getOvershadowedChunks()",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getStandbyChunks()"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findNonOvershadowedObjectsInInterval(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookupWithIncompletePartitions(org.joda.time.Interval)"
        ]
    },
    "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.DataSegment:void <init>(java.lang.String,org.joda.time.Interval,java.lang.String,java.util.Map,java.util.List,java.util.List,org.apache.druid.timeline.partition.ShardSpec,org.apache.druid.timeline.CompactionState,java.lang.Integer,long,org.apache.druid.timeline.DataSegment$PruneSpecsHolder)"
        ]
    },
    "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)"
        ]
    },
    "org.apache.druid.data.input.IntermediateRowParsingReader$lambda_sample_0__60:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapKeys$1(java.util.function.Function,java.util.Map,java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapValues$0(java.util.Map,java.util.function.Function,java.lang.Object,java.lang.Object)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec:boolean lambda$split$0(java.util.function.Function,java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.CloseableIterator$2:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.DroppingIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:java.lang.Object next()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.DroppingIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:java.lang.Object next()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.java.util.common.guava.DroppingIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.DroppingIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:java.lang.Object next()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.java.util.common.guava.FunctionalIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.DroppingIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:java.lang.Object next()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.java.util.common.CloseableIterators$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.DroppingIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:java.lang.Object next()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.FileIteratingFirehose:boolean hasMore()"
        ]
    },
    "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:java.lang.Object next()"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.guice.LifecycleModule:org.apache.druid.java.util.common.lifecycle.Lifecycle getLifecycle(com.google.inject.Injector)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.service.ServiceEmitter:void start()"
        ]
    },
    "org.apache.druid.guice.JsonConfigProvider:com.google.common.base.Supplier get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.JsonConfigProvider:java.lang.Object get()"
        ]
    },
    "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.guice.ListProvider:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.PolyBind$ConfiggedProvider:java.lang.Object get()",
            "org.apache.druid.guice.LifecycleScope$1:java.lang.Object get()",
            "org.apache.druid.guice.SupplierProvider:java.lang.Object get()"
        ]
    },
    "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:java.nio.file.Path discover(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.cgroups.Memory:org.apache.druid.java.util.metrics.cgroups.Memory$MemoryStat snapshot()",
            "org.apache.druid.java.util.metrics.cgroups.ProcSelfCgroupDiscoverer:java.nio.file.Path discover(java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.CpuAcct:org.apache.druid.java.util.metrics.cgroups.CpuAcct$CpuAcctMetric snapshot()"
        ]
    },
    "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map 'to'(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmThreadsMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.AbstractMonitor:boolean monitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.CgroupMemoryMonitor:void lambda$doMonitor$2(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.lang.Long,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.CgroupMemoryMonitor$lambda_doMonitor_2__40:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.metrics.CgroupMemoryMonitor:void lambda$doMonitor$0(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.lang.String,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.CgroupMemoryMonitor$lambda_doMonitor_0__39:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmMonitor:void emitThreadAllocationMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.CpuAcctDeltaMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.AbstractMonitor:boolean monitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmMonitor$GcGenerationCollector:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmMonitor$GcGenerationSpace:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.AbstractMonitor:boolean monitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.MonitorScheduler:void startMonitor(org.apache.druid.java.util.metrics.Monitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void addMonitor(org.apache.druid.java.util.metrics.Monitor)"
        ]
    },
    "org.apache.druid.java.util.metrics.MonitorScheduler:void removeMonitor(org.apache.druid.java.util.metrics.Monitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.MonitorScheduler$1:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()"
        ]
    },
    "org.apache.druid.java.util.metrics.CompoundMonitor:boolean monitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.CompoundMonitor:java.lang.Boolean lambda$monitor$0(org.apache.druid.java.util.emitter.service.ServiceEmitter,org.apache.druid.java.util.metrics.Monitor)",
            "org.apache.druid.java.util.metrics.MonitorScheduler$1:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmMonitor:void emitGcMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.AbstractMonitor:boolean monitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.CompoundMonitor:java.lang.Boolean lambda$monitor$0(org.apache.druid.java.util.emitter.service.ServiceEmitter,org.apache.druid.java.util.metrics.Monitor)",
            "org.apache.druid.java.util.metrics.MonitorScheduler$1:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()"
        ]
    },
    "org.apache.druid.java.util.emitter.core.Emitters:org.apache.druid.java.util.emitter.core.Emitter create(java.util.Properties,org.asynchttpclient.AsyncHttpClient,com.fasterxml.jackson.databind.ObjectMapper,org.apache.druid.java.util.common.lifecycle.Lifecycle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.Emitters:org.apache.druid.java.util.emitter.core.Emitter create(java.util.Properties,org.asynchttpclient.AsyncHttpClient,org.apache.druid.java.util.common.lifecycle.Lifecycle)"
        ]
    },
    "org.apache.druid.java.util.emitter.service.ServiceEmitter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.service.ServiceEmitter:void start()"
        ]
    },
    "org.apache.druid.java.util.emitter.service.ServiceEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.service.ServiceEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.service.ServiceEmitter:void emit(org.apache.druid.java.util.emitter.service.ServiceEventBuilder)"
        ]
    },
    "org.apache.druid.java.util.emitter.service.ServiceEmitter:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.service.ServiceEmitter:void flush()"
        ]
    },
    "org.apache.druid.java.util.emitter.service.ServiceEmitter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.service.ServiceEmitter:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.WrappingYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.WrappingYielder:void close()",
            "org.apache.druid.java.util.common.guava.WrappingSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.Yielders$2:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.WrappingYielder:void close()",
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:void close()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:void close()",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:void close()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void closeAllCursors(java.util.Collection)",
            "org.apache.druid.java.util.http.client.response.SequenceInputStreamResponseHandler:org.apache.druid.java.util.http.client.response.ClientResponse handleResponse(org.jboss.netty.handler.codec.http.HttpResponse,org.apache.druid.java.util.http.client.response.HttpResponseHandler$TrafficCop)",
            "org.apache.druid.java.util.http.client.response.SequenceInputStreamResponseHandler:org.apache.druid.java.util.http.client.response.ClientResponse handleChunk(org.apache.druid.java.util.http.client.response.ClientResponse,org.jboss.netty.handler.codec.http.HttpChunk,long)",
            "org.apache.druid.java.util.http.client.HttpClientInit:javax.net.ssl.SSLContext sslContextWithTrustedKeyStore(java.lang.String,java.lang.String)",
            "org.apache.druid.data.input.impl.prefetch.JsonIterator:boolean hasNext()"
        ]
    },
    "org.apache.druid.java.util.common.io.Closer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.guava.MergeSequence:void closeAll(java.util.PriorityQueue)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher$Outer:void close()",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.JsonIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:void close()"
        ]
    },
    "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()"
        ]
    },
    "org.apache.druid.java.util.common.CloseableIterators$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:void close()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader:void lambda$decorateShutdownTimeout$0(org.apache.druid.java.util.common.parsers.CloseableIterator)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()",
            "org.apache.druid.data.input.HandlingInputRowIterator:void close()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:void close()"
        ]
    },
    "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)"
        ]
    },
    "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void close()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void access$100(org.apache.druid.collections.ReferenceCountingResourceHolder)"
        ]
    },
    "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$3:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$1:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()",
            "org.apache.druid.java.util.common.concurrent.DirectExecutorService:void execute(java.lang.Runnable)",
            "org.apache.druid.common.config.Log4jShutdown:org.apache.logging.log4j.core.util.Cancellable addShutdownCallback(java.lang.Runnable)",
            "org.apache.druid.common.config.Log4jShutdown:void runCallbacks()",
            "org.apache.druid.common.config.Log4jShutdown$1:void run()"
        ]
    },
    "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()",
            "org.apache.druid.data.input.TextReader$1:void close()"
        ]
    },
    "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:java.lang.Object next()"
        ]
    },
    "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FirehoseToInputSourceReaderAdaptor$2:void close()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()",
            "org.apache.druid.data.input.impl.FirehoseToInputSourceReaderAdaptor$1:void close()"
        ]
    },
    "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.service.ServiceEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.RegexParser:java.util.Map parseToMap(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:java.util.Map parseString(java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.AbstractFlatTextFormatParser:java.util.Map parseToMap(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:java.util.Map parseString(java.lang.String)"
        ]
    },
    "org.apache.druid.data.input.impl.RegexReader:java.util.Map parseLine(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.RegexReader:java.util.List parseInputRows(java.lang.String)",
            "org.apache.druid.data.input.impl.RegexReader:java.util.Map toMap(java.lang.String)"
        ]
    },
    "org.apache.druid.data.input.impl.DelimitedValueReader:java.util.Map parseLine(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.DelimitedValueReader:java.util.List parseInputRows(java.lang.String)",
            "org.apache.druid.data.input.impl.DelimitedValueReader:java.util.Map toMap(java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.ParserUtils:void validateFields(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:void setFieldNames(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.RegexParser:void setFieldNames(java.lang.Iterable)",
            "org.apache.druid.data.input.impl.DimensionsSpec:void verify(java.util.List)",
            "org.apache.druid.data.input.TextReader:java.util.List findOrCreateColumnNames(java.util.List)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.CloseableIterator$2:void <init>(org.apache.druid.java.util.common.parsers.CloseableIterator,org.apache.druid.java.util.common.parsers.CloseableIterator,java.util.function.Function)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator:org.apache.druid.java.util.common.parsers.CloseableIterator flatMap(java.util.function.Function)"
        ]
    },
    "org.apache.druid.data.input.impl.StringInputRowParser:java.util.Map parseString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:java.util.Map buildStringKeyMap(java.nio.ByteBuffer)",
            "org.apache.druid.data.input.impl.StringInputRowParser:org.apache.druid.data.input.InputRow parse(java.lang.String)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.druid.data.input.InputRowListPlusRawValues nextRowWithRaw()"
        ]
    },
    "org.apache.druid.java.util.common.parsers.JSONPathParser:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,com.fasterxml.jackson.databind.ObjectMapper,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.JSONParseSpec:org.apache.druid.java.util.common.parsers.Parser makeParser()"
        ]
    },
    "org.apache.druid.data.input.impl.JsonReader:void <init>(org.apache.druid.data.input.InputRowSchema,org.apache.druid.data.input.InputEntity,org.apache.druid.java.util.common.parsers.JSONPathSpec,com.fasterxml.jackson.databind.ObjectMapper,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.JsonInputFormat:org.apache.druid.data.input.InputEntityReader createReader(org.apache.druid.data.input.InputRowSchema,org.apache.druid.data.input.InputEntity,java.io.File)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object getRootField(com.fasterxml.jackson.databind.JsonNode,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object getRootField(java.lang.Object,java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object lambda$makeJsonQueryExtractor$3(net.thisptr.jackson.jq.JsonQuery,com.fasterxml.jackson.databind.JsonNode)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker$lambda_makeJsonQueryExtractor_3__55:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object lambda$makeJsonPathExtractor$2(com.jayway.jsonpath.JsonPath,com.fasterxml.jackson.databind.JsonNode)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker$lambda_makeJsonPathExtractor_2__54:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean lambda$discoverRootFields$1(java.util.Map$Entry)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker$lambda_discoverRootFields_1__52:boolean apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.logger.Logger:void infoSegmentIds(java.util.stream.Stream,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.logger.Logger:void logSegments(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.Collection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.logger.Logger:void debugSegments(java.util.Collection,java.lang.String)",
            "org.apache.druid.java.util.common.logger.Logger:void infoSegments(java.util.Collection,java.lang.String)",
            "org.apache.druid.java.util.common.logger.Logger:void warnSegments(java.util.Collection,java.lang.String)",
            "org.apache.druid.java.util.common.logger.Logger:void errorSegments(java.util.Collection,java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void lambda$toYielder$0(org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$lambda_toYielder_0__77:void close()"
        ]
    },
    "org.apache.druid.java.util.common.guava.MappedSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.MappedSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$1:java.lang.Object get()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.Sequence:java.util.List toList()",
            "org.apache.druid.java.util.common.guava.LazySequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.TopNSequence$1:java.util.Iterator make()",
            "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object lambda$accumulate$0(org.apache.druid.java.util.common.guava.Accumulator,java.lang.Object,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.common.guava.CombiningSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.WrappingSequence$1:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.SupplierProvider:java.lang.Object get()",
            "org.apache.druid.java.util.common.guava.SequenceWrapper:java.lang.Object wrap(com.google.common.base.Supplier)",
            "org.apache.druid.java.util.common.guava.LazySequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.math.expr.Parser:java.lang.Object lambda$withSuppliers$10(java.util.Map,java.lang.String)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarUnivariateMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.common.config.ConfigManager:void <init>(org.apache.druid.metadata.MetadataStorageConnector,com.google.common.base.Supplier,com.google.common.base.Supplier)",
            "org.apache.druid.common.config.ConfigManager:void start()",
            "org.apache.druid.collections.StupidPool:org.apache.druid.collections.StupidPool$ObjectResourceHolder makeObjectWithHandler()",
            "org.apache.druid.collections.DefaultBlockingPool:void <init>(com.google.common.base.Supplier,int)",
            "org.apache.druid.data.input.impl.RegexInputFormat:org.apache.druid.data.input.InputEntityReader createReader(org.apache.druid.data.input.InputRowSchema,org.apache.druid.data.input.InputEntity,java.io.File)"
        ]
    },
    "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Yielders:org.apache.druid.java.util.common.guava.Yielder each(org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$ResultBatch:org.apache.druid.java.util.common.guava.Yielder fromSequence(org.apache.druid.java.util.common.guava.Sequence,int)",
            "org.apache.druid.java.util.common.guava.Sequences$3:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MappedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ExplodingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.SkippingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LimitedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$2:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.FilteredSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.MappedSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$1:java.lang.Object get()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.Sequence:java.util.List toList()",
            "org.apache.druid.java.util.common.guava.LazySequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.TopNSequence$1:java.util.Iterator make()",
            "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object lambda$accumulate$0(org.apache.druid.java.util.common.guava.Accumulator,java.lang.Object,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.common.guava.CombiningSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.Sequence:java.util.List toList()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.guava.LazySequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.MappedSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$1:java.lang.Object get()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.Sequence:java.util.List toList()",
            "org.apache.druid.java.util.common.guava.LazySequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.TopNSequence$1:java.util.Iterator make()",
            "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object lambda$accumulate$0(org.apache.druid.java.util.common.guava.Accumulator,java.lang.Object,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.common.guava.CombiningSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.TopNSequence$1:java.util.Iterator make()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.MappedSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$1:java.lang.Object get()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.Sequence:java.util.List toList()",
            "org.apache.druid.java.util.common.guava.LazySequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.TopNSequence$1:java.util.Iterator make()",
            "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object lambda$accumulate$0(org.apache.druid.java.util.common.guava.Accumulator,java.lang.Object,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.common.guava.CombiningSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object lambda$accumulate$0(org.apache.druid.java.util.common.guava.Accumulator,java.lang.Object,org.apache.druid.java.util.common.guava.Sequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ConcatSequence$lambda_accumulate_0__81:java.lang.Object accumulate(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.druid.common.guava.CombiningSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.MappedSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$1:java.lang.Object get()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.Sequence:java.util.List toList()",
            "org.apache.druid.java.util.common.guava.LazySequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.TopNSequence$1:java.util.Iterator make()",
            "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object lambda$accumulate$0(org.apache.druid.java.util.common.guava.Accumulator,java.lang.Object,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.common.guava.CombiningSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Yielders:org.apache.druid.java.util.common.guava.Yielder each(org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$ResultBatch:org.apache.druid.java.util.common.guava.Yielder fromSequence(org.apache.druid.java.util.common.guava.Sequence,int)",
            "org.apache.druid.java.util.common.guava.Sequences$3:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MappedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ExplodingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.SkippingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LimitedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$2:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder access$000(org.apache.druid.java.util.common.guava.BaseSequence,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.BaseSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterable:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.DroppingIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.Sequences$1:java.util.Iterator make()",
            "org.apache.druid.java.util.common.guava.FunctionalIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.collections.CombiningIterable:java.util.Iterator iterator()",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.VersionedIntervalTimeline forSegments(java.lang.Iterable)"
        ]
    },
    "org.apache.druid.java.util.common.guava.DroppingIterable:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.DroppingIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.Sequences$1:java.util.Iterator make()",
            "org.apache.druid.java.util.common.guava.FunctionalIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.collections.CombiningIterable:java.util.Iterator iterator()",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.VersionedIntervalTimeline forSegments(java.lang.Iterable)"
        ]
    },
    "org.apache.druid.java.util.common.guava.Sequences$1:java.util.Iterator make()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.FunctionalIterable:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.DroppingIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.Sequences$1:java.util.Iterator make()",
            "org.apache.druid.java.util.common.guava.FunctionalIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.collections.CombiningIterable:java.util.Iterator iterator()",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.VersionedIntervalTimeline forSegments(java.lang.Iterable)"
        ]
    },
    "org.apache.druid.collections.CombiningIterable:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.DroppingIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.Sequences$1:java.util.Iterator make()",
            "org.apache.druid.java.util.common.guava.FunctionalIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.collections.CombiningIterable:java.util.Iterator iterator()",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.VersionedIntervalTimeline forSegments(java.lang.Iterable)"
        ]
    },
    "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.io.File)"
        ]
    },
    "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void access$300(org.apache.druid.java.util.common.io.smoosh.FileSmoosher)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher$2:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher$1:void close()"
        ]
    },
    "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void closeAllCursors(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void access$400(java.util.Collection)"
        ]
    },
    "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.service.ServiceEmitter:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.lifecycle.Lifecycle$1:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$3:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$1:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()",
            "org.apache.druid.java.util.common.concurrent.DirectExecutorService:void execute(java.lang.Runnable)",
            "org.apache.druid.common.config.Log4jShutdown:org.apache.logging.log4j.core.util.Cancellable addShutdownCallback(java.lang.Runnable)",
            "org.apache.druid.common.config.Log4jShutdown:void runCallbacks()",
            "org.apache.druid.common.config.Log4jShutdown$1:void run()"
        ]
    },
    "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void <init>(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void <init>(java.io.File[])"
        ]
    },
    "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addFiles(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addFile(java.io.File)",
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult unzip(java.io.File,java.io.File)"
        ]
    },
    "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:java.lang.Object getContent()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.http.client.NettyHttpClient:void stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.http.client.AbstractHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.http.client.CredentialedHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.http.client.AbstractHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler)",
            "org.apache.druid.java.util.http.client.CredentialedHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$MatchFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$Div:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$LambdaInputBindingTypes:org.apache.druid.math.expr.ExprType getType(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayAppendFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOrdinalFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$BivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$UnivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOffsetFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayConcatFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryNotExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ParseLong:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$NvlFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayLengthFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$BivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MatchFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UpperFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$RpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSimpleFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinAndExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConditionFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$flatten$0(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$IsNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubMonthFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayScalarFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraysFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConcatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$TimestampFromEpochFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UnivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringToArrayFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinOrExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrposFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubstringFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryMinusExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LowerFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReplaceFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringFormatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinaryEvalOpExprBase:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSearchedFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrlenFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$IsNotNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$CartesianFoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr flatten(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnappliedBindings(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)"
        ]
    },
    "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.ApplyFunctionExpr liftApplyLambda(org.apache.druid.math.expr.ApplyFunctionExpr,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)"
        ]
    },
    "org.apache.druid.math.expr.ExprListenerImpl:void exitApplyFunctionExpr(org.apache.druid.math.expr.antlr.ExprParser$ApplyFunctionExprContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.antlr.ExprParser$ApplyFunctionExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)"
        ]
    },
    "org.apache.druid.math.expr.Function$NvlFunc:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$CaseSimpleFunc:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$ConditionFunc:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$CaseSearchedFunc:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnappliedBindings(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.ApplyFunctionExpr liftApplyLambda(org.apache.druid.math.expr.ApplyFunctionExpr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)"
        ]
    },
    "org.apache.druid.math.expr.Parser$lambda_applyUnappliedBindings_2__305:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.ConstantExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.IdentifierExpr lambda$visit$0(org.apache.druid.math.expr.Expr$Shuttle,org.apache.druid.math.expr.IdentifierExpr)",
            "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.ApplyFunctionExpr$visit__297:java.lang.Object apply(java.lang.Object)",
            "org.apache.druid.math.expr.FunctionExpr$visit__317:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryNotExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ParseLong:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$NvlFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayLengthFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$BivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MatchFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UpperFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$RpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSimpleFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinAndExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConditionFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$flatten$0(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$IsNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubMonthFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayScalarFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraysFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConcatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$TimestampFromEpochFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UnivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringToArrayFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinOrExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrposFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubstringFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryMinusExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LowerFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReplaceFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringFormatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinaryEvalOpExprBase:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSearchedFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrlenFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$IsNotNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$flatten$0(org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser$lambda_flatten_0__303:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr)"
        ]
    },
    "org.apache.druid.math.expr.Evals:boolean isAllConstants(org.apache.druid.math.expr.Expr[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$flatten$0(org.apache.druid.math.expr.Expr)"
        ]
    },
    "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnappliedBindings(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis 'with'(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarUnivariateMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()"
        ]
    },
    "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnappliedBindings(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis 'with'(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarUnivariateMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()"
        ]
    },
    "org.apache.druid.math.expr.ExprMacroTable$BaseScalarUnivariateMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set getRequiredBindings()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser:boolean lambda$applyUnappliedBindings$1(org.apache.druid.math.expr.Expr$BindingAnalysis,java.lang.String)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.List getRequiredBindingsList()"
        ]
    },
    "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set getScalarBindings()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser:void validateExpr(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis)"
        ]
    },
    "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set getArrayBindings()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser:void validateExpr(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis)",
            "org.apache.druid.math.expr.Parser:boolean lambda$liftApplyLambda$6(org.apache.druid.math.expr.ApplyFunctionExpr,java.lang.String)"
        ]
    },
    "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set getScalarVariables()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set getArrayVariables()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnappliedBindings(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnappliedBindings(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:boolean hasArrayOutput(org.apache.druid.math.expr.LambdaExpr)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis 'with'(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarUnivariateMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()"
        ]
    },
    "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis 'with'(org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()"
        ]
    },
    "org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.common.config.ConfigManager:void access$600(org.apache.druid.common.config.ConfigManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.common.config.ConfigManager$PollingCallable:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()"
        ]
    },
    "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.DimensionsSpec:org.apache.druid.data.input.impl.DimensionsSpec withDimensions(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.DimensionsSpec:org.apache.druid.data.input.impl.DimensionsSpec withDimensionExclusions(java.util.Set)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.DimensionsSpec:org.apache.druid.data.input.impl.DimensionsSpec withSpatialDimensions(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.DimensionsSpec:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.DimensionsSpec:java.util.List getDefaultSchemas(java.util.List)",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.DimensionsSpec:org.apache.druid.data.input.impl.DimensionsSpec withDimensions(java.util.List)",
            "org.apache.druid.data.input.impl.DimensionsSpec:org.apache.druid.data.input.impl.DimensionsSpec withDimensionExclusions(java.util.Set)",
            "org.apache.druid.data.input.impl.DimensionsSpec:org.apache.druid.data.input.impl.DimensionsSpec withSpatialDimensions(java.util.List)",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <clinit>()",
            "org.apache.druid.data.input.impl.TimeAndDimsParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec)",
            "org.apache.druid.data.input.impl.DimensionsSpec$lambda_getDefaultSchemas_0__62:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.impl.TimeAndDimsParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.NoopInputRowParser:void <init>(org.apache.druid.data.input.impl.ParseSpec)",
            "org.apache.druid.data.input.impl.TimeAndDimsParseSpec:org.apache.druid.data.input.impl.ParseSpec withTimestampSpec(org.apache.druid.data.input.impl.TimestampSpec)",
            "org.apache.druid.data.input.impl.TimeAndDimsParseSpec:org.apache.druid.data.input.impl.ParseSpec withDimensionsSpec(org.apache.druid.data.input.impl.DimensionsSpec)"
        ]
    },
    "org.apache.druid.data.input.impl.CSVParseSpec:org.apache.druid.data.input.impl.ParseSpec withTimestampSpec(org.apache.druid.data.input.impl.TimestampSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.CSVParseSpec:org.apache.druid.data.input.impl.ParseSpec withDimensionsSpec(org.apache.druid.data.input.impl.DimensionsSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.FirehoseToInputSourceReaderAdaptor$2:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:boolean hasNext()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:boolean hasMore()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:boolean hasNext()",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:boolean hasNext()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.data.input.impl.FirehoseToInputSourceReaderAdaptor$1:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:boolean hasNext()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:boolean hasMore()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:boolean hasNext()",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:boolean hasNext()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.data.input.impl.CsvInputFormat:void <init>(java.util.List,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.DelimitedInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.parsers.DelimitedParser:java.util.List splitToList(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.DelimitedParser:java.util.List parseLine(java.lang.String)"
        ]
    },
    "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List lambda$createReader$0(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.DelimitedInputFormat$lambda_createReader_0__74:java.util.List parseLine(java.lang.String)"
        ]
    },
    "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.JSONParseSpec:org.apache.druid.data.input.impl.ParseSpec withTimestampSpec(org.apache.druid.data.input.impl.TimestampSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.JSONParseSpec:org.apache.druid.data.input.impl.ParseSpec withDimensionsSpec(org.apache.druid.data.input.impl.DimensionsSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.DelimitedParseSpec:org.apache.druid.data.input.impl.ParseSpec withTimestampSpec(org.apache.druid.data.input.impl.TimestampSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.DelimitedParseSpec:org.apache.druid.data.input.impl.ParseSpec withDimensionsSpec(org.apache.druid.data.input.impl.DimensionsSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.HandlingInputRowIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.DroppingIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:java.lang.Object next()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.timeline.partition.HashPartitioner:java.util.List extractKeys(java.util.List,long,org.apache.druid.data.input.InputRow)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.HashPartitioner:java.util.List extractKeys(long,org.apache.druid.data.input.InputRow)"
        ]
    },
    "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.DroppingIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:java.lang.Object next()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.data.input.IntermediateRowParsingReader$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.DroppingIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:java.lang.Object next()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:boolean addChunk(org.apache.druid.timeline.partition.PartitionChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.PartitionHolder:boolean add(org.apache.druid.timeline.partition.PartitionChunk)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:void moveNewStandbyToVisibleIfNecessary(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.lang.Iterable lambda$determineVisibleGroupAfterRemove$18(org.apache.druid.timeline.partition.AtomicUpdateGroup)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.lang.Iterable lambda$determineVisibleGroupAfterRemove$17(org.apache.druid.timeline.partition.AtomicUpdateGroup)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:void determineVisibleGroupAfterRemove(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:org.apache.druid.timeline.partition.AtomicUpdateGroup tryRemoveChunkFromGroupWithState(org.apache.druid.timeline.partition.PartitionChunk,org.apache.druid.timeline.partition.OvershadowableManager$State)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:void checkVisibleIsFullyAvailableAndTryToMoveOvershadowedToVisible(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.lang.Iterable lambda$determineVisibleGroupAfterRemove$15(org.apache.druid.timeline.partition.AtomicUpdateGroup)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.lang.Iterable lambda$determineVisibleGroupAfterRemove$14(org.apache.druid.timeline.partition.AtomicUpdateGroup)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:void moveNewStandbyToVisibleIfNecessary(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:void determineVisibleGroupAfterAdd(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:void checkVisibleIsFullyAvailableAndTryToMoveOvershadowedToVisible(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:void determineVisibleGroupAfterAdd(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:java.lang.Iterable lambda$checkVisibleIsFullyAvailableAndTryToMoveOvershadowedToVisible$12(org.apache.druid.timeline.partition.AtomicUpdateGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager$lambda_checkVisibleIsFullyAvailableAndTryToMoveOvershadowedToVisible_12__371:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getOvershadowedChunks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.PartitionHolder:java.util.List getOvershadowed()"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getStandbyChunks()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findNonOvershadowedObjectsInInterval(org.joda.time.Interval,org.apache.druid.timeline.Partitions)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookupWithIncompletePartitions(org.joda.time.Interval)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.DataSegment:void <init>(java.lang.String,org.joda.time.Interval,java.lang.String,java.util.Map,java.util.List,java.util.List,org.apache.druid.timeline.partition.ShardSpec,org.apache.druid.timeline.CompactionState,java.lang.Integer,long,org.apache.druid.timeline.DataSegment$PruneSpecsHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.DataSegment:void <init>(java.lang.String,org.joda.time.Interval,java.lang.String,java.util.Map,java.util.List,java.util.List,org.apache.druid.timeline.partition.ShardSpec,org.apache.druid.timeline.CompactionState,java.lang.Integer,long)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.PolyBind$ConfiggedProvider:java.lang.Object get()",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGenerationCollector:void <init>(org.apache.druid.java.util.metrics.JvmMonitor,java.util.Map,long)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void <init>(org.apache.druid.java.util.metrics.JvmMonitor,java.util.Map,long,java.lang.String)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGenerationSpace:void <init>(org.apache.druid.java.util.metrics.JvmMonitor,java.util.Map,long,long)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder:java.lang.Object getDimension(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1$1:java.lang.Object getValue()",
            "org.apache.druid.java.util.common.parsers.ParserUtils:org.joda.time.DateTimeZone getDateTimeZone(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:java.nio.ByteBuffer mapFile(java.lang.String)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.MapUtils:java.lang.String getString(java.util.Map,java.lang.String,java.lang.String)",
            "org.apache.druid.java.util.common.MapUtils:int getInt(java.util.Map,java.lang.String,java.lang.Integer)",
            "org.apache.druid.java.util.common.MapUtils:long getLong(java.util.Map,java.lang.String,java.lang.Long)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ExprMacroTable:org.apache.druid.math.expr.Expr get(java.lang.String,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Function getFunction(java.lang.String)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.ApplyFunction getApplyFunction(java.lang.String)",
            "org.apache.druid.math.expr.Parser:java.lang.Object lambda$withSuppliers$10(java.util.Map,java.lang.String)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnapplied$5(java.util.Map,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.ExprListenerImpl:org.apache.druid.math.expr.Expr getAST()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitUnaryOpExpr(org.apache.druid.math.expr.antlr.ExprParser$UnaryOpExprContext)",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitApplyFunctionExpr(org.apache.druid.math.expr.antlr.ExprParser$ApplyFunctionExprContext)",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitAddSubExpr(org.apache.druid.math.expr.antlr.ExprParser$AddSubExprContext)",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitLogicalAndOrExpr(org.apache.druid.math.expr.antlr.ExprParser$LogicalAndOrExprContext)",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitNestedExpr(org.apache.druid.math.expr.antlr.ExprParser$NestedExprContext)",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitLogicalOpExpr(org.apache.druid.math.expr.antlr.ExprParser$LogicalOpExprContext)",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitMulDivModuloExpr(org.apache.druid.math.expr.antlr.ExprParser$MulDivModuloExprContext)",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitPowOpExpr(org.apache.druid.math.expr.antlr.ExprParser$PowOpExprContext)",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionExpr(org.apache.druid.math.expr.antlr.ExprParser$FunctionExprContext)",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitLambda(org.apache.druid.math.expr.antlr.ExprParser$LambdaContext)",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.data.input.impl.DimensionsSpec:org.apache.druid.data.input.impl.DimensionSchema getSchema(java.lang.String)",
            "org.apache.druid.data.input.impl.TimestampSpec:java.lang.Object getRawTimestamp(java.util.Map)",
            "org.apache.druid.data.input.MapBasedRow:java.util.List getDimension(java.lang.String)",
            "org.apache.druid.data.input.MapBasedRow:java.lang.Object getRaw(java.lang.String)",
            "org.apache.druid.data.input.MapBasedRow:java.lang.Number getMetric(java.lang.String)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:java.lang.Object lambda$isInChunk$1(java.util.Map,java.lang.String)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.OvershadowableManager:org.apache.druid.timeline.partition.PartitionChunk removeChunk(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.OvershadowableManager:org.apache.druid.timeline.partition.PartitionChunk getChunk(int)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionChunk remove(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.metadata.MetadataStorageTablesConfig:java.lang.String getEntryTable(java.lang.String)",
            "org.apache.druid.metadata.MetadataStorageTablesConfig:java.lang.String getLogTable(java.lang.String)",
            "org.apache.druid.metadata.MetadataStorageTablesConfig:java.lang.String getLockTable(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding$get__281:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FoldLambdaBinding$get__286:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldLambdaBinding$get__287:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapLambdaBinding$get__293:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$MapLambdaBinding$get__294:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.Parser$get__314:java.lang.Object get(java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.FilteringYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.DelegatingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator:void accumulateLastValue()"
        ]
    },
    "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.YieldingAccumulators$1:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteringAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.common.guava.CombiningSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.druid.utils.CollectionUtils:void lambda$mapKeys$1(java.util.function.Function,java.util.Map,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$lambda_mapKeys_1__95:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.druid.utils.CollectionUtils:void lambda$mapValues$0(java.util.Map,java.util.function.Function,java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$lambda_mapValues_0__94:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.MaxSizeSplitHintSpec:boolean lambda$split$0(java.util.function.Function,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$lambda_split_0__339:boolean apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.DroppingIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:java.lang.Object next()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.guice.JsonConfigProvider:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.PolyBind$ConfiggedProvider:java.lang.Object get()",
            "org.apache.druid.guice.LifecycleScope$1:java.lang.Object get()",
            "org.apache.druid.guice.SupplierProvider:java.lang.Object get()"
        ]
    },
    "org.apache.druid.guice.PolyBind$ConfiggedProvider:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.PolyBind$ConfiggedProvider:java.lang.Object get()",
            "org.apache.druid.guice.LifecycleScope$1:java.lang.Object get()",
            "org.apache.druid.guice.SupplierProvider:java.lang.Object get()"
        ]
    },
    "org.apache.druid.guice.LifecycleScope$1:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.PolyBind$ConfiggedProvider:java.lang.Object get()",
            "org.apache.druid.guice.LifecycleScope$1:java.lang.Object get()",
            "org.apache.druid.guice.SupplierProvider:java.lang.Object get()"
        ]
    },
    "org.apache.druid.guice.SupplierProvider:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.PolyBind$ConfiggedProvider:java.lang.Object get()",
            "org.apache.druid.guice.LifecycleScope$1:java.lang.Object get()",
            "org.apache.druid.guice.SupplierProvider:java.lang.Object get()"
        ]
    },
    "org.apache.druid.java.util.metrics.cgroups.Memory:org.apache.druid.java.util.metrics.cgroups.Memory$MemoryStat snapshot()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.CgroupMemoryMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.cgroups.ProcSelfCgroupDiscoverer:java.nio.file.Path discover(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.cgroups.Memory:org.apache.druid.java.util.metrics.cgroups.Memory$MemoryStat snapshot()",
            "org.apache.druid.java.util.metrics.cgroups.CpuAcct:org.apache.druid.java.util.metrics.cgroups.CpuAcct$CpuAcctMetric snapshot()"
        ]
    },
    "org.apache.druid.java.util.metrics.cgroups.CpuAcct:org.apache.druid.java.util.metrics.cgroups.CpuAcct$CpuAcctMetric snapshot()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.CpuAcctDeltaMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.CgroupMemoryMonitor$lambda_doMonitor_2__40:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.logger.Logger:void logException(java.util.function.BiConsumer,java.lang.Throwable,java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.metrics.CgroupMemoryMonitor$lambda_doMonitor_0__39:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.logger.Logger:void logException(java.util.function.BiConsumer,java.lang.Throwable,java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.metrics.MonitorScheduler:void addMonitor(org.apache.druid.java.util.metrics.Monitor)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.metrics.MonitorScheduler$1:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.MonitorScheduler$1:java.lang.Object call()"
        ]
    },
    "org.apache.druid.java.util.metrics.CompoundMonitor:java.lang.Boolean lambda$monitor$0(org.apache.druid.java.util.emitter.service.ServiceEmitter,org.apache.druid.java.util.metrics.Monitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.CompoundMonitor$lambda_monitor_0__42:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.emitter.core.Emitters:org.apache.druid.java.util.emitter.core.Emitter create(java.util.Properties,org.asynchttpclient.AsyncHttpClient,org.apache.druid.java.util.common.lifecycle.Lifecycle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.emitter.service.ServiceEmitter:void emit(org.apache.druid.java.util.emitter.service.ServiceEventBuilder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmThreadsMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:void emitEmittedEvents(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:void emitDroppedBuffers(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:void emitAllocatedBuffers(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:void emitFailedBuffers(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:void emitTimeCounterMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter,org.apache.druid.java.util.emitter.core.ConcurrentTimeCounter,java.lang.String)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CgroupMemoryMonitor:void lambda$null$1(org.apache.druid.java.util.emitter.service.ServiceEmitter,org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.lang.String,java.lang.Long)",
            "org.apache.druid.java.util.metrics.CgroupMemoryMonitor:void lambda$doMonitor$0(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.lang.String,java.lang.Long)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitThreadAllocationMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CpuAcctDeltaMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGenerationCollector:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGenerationSpace:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.service.AlertBuilder:void emit()"
        ]
    },
    "org.apache.druid.java.util.common.guava.WrappingYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingYielder$1:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:boolean block()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.guava.WrappingYielder:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.WrappingYielder:void close()",
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:void close()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:void close()",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:void close()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.guava.WrappingSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.MappedSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$1:java.lang.Object get()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.Sequence:java.util.List toList()",
            "org.apache.druid.java.util.common.guava.LazySequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.TopNSequence$1:java.util.Iterator make()",
            "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object lambda$accumulate$0(org.apache.druid.java.util.common.guava.Accumulator,java.lang.Object,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.common.guava.CombiningSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.WrappingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Yielders:org.apache.druid.java.util.common.guava.Yielder each(org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$ResultBatch:org.apache.druid.java.util.common.guava.Yielder fromSequence(org.apache.druid.java.util.common.guava.Sequence,int)",
            "org.apache.druid.java.util.common.guava.Sequences$3:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MappedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ExplodingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.SkippingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LimitedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$2:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.ConcatSequence$2:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.WrappingYielder:void close()",
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:void close()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:void close()",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:void close()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.WrappingYielder:void close()",
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:void close()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:void close()",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:void close()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.guava.FilteredSequence$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.WrappingYielder:void close()",
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:void close()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:void close()",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:void close()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.guava.SkippingSequence$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.WrappingYielder:void close()",
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:void close()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:void close()",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:void close()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder access$000(org.apache.druid.java.util.common.guava.MergeSequence,java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.MergeSequence$lambda_toYielder_1__83:java.lang.Object accumulate(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.guava.ExplodingSequence$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.WrappingYielder:void close()",
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:void close()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:void close()",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:void close()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.WrappingYielder:void close()",
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:void close()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:void close()",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:void close()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.MappedSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$1:java.lang.Object get()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.Sequence:java.util.List toList()",
            "org.apache.druid.java.util.common.guava.LazySequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.TopNSequence$1:java.util.Iterator make()",
            "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:java.lang.Object lambda$accumulate$0(org.apache.druid.java.util.common.guava.Accumulator,java.lang.Object,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.common.guava.CombiningSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Yielders:org.apache.druid.java.util.common.guava.Yielder each(org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$ResultBatch:org.apache.druid.java.util.common.guava.Yielder fromSequence(org.apache.druid.java.util.common.guava.Sequence,int)",
            "org.apache.druid.java.util.common.guava.Sequences$3:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MappedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ExplodingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.SkippingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LimitedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$2:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder access$000(org.apache.druid.java.util.common.guava.ConcatSequence,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Yielders:org.apache.druid.java.util.common.guava.Yielder each(org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$ResultBatch:org.apache.druid.java.util.common.guava.Yielder fromSequence(org.apache.druid.java.util.common.guava.Sequence,int)",
            "org.apache.druid.java.util.common.guava.Sequences$3:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MappedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ExplodingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.SkippingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LimitedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$2:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.common.guava.CombiningSequence$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.WrappingYielder:void close()",
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:void close()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:void close()",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:void close()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.http.client.response.SequenceInputStreamResponseHandler:org.apache.druid.java.util.http.client.response.ClientResponse handleResponse(org.jboss.netty.handler.codec.http.HttpResponse,org.apache.druid.java.util.http.client.response.HttpResponseHandler$TrafficCop)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.http.client.NettyHttpClient$1:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.apache.druid.java.util.http.client.response.SequenceInputStreamResponseHandler:org.apache.druid.java.util.http.client.response.ClientResponse handleChunk(org.apache.druid.java.util.http.client.response.ClientResponse,org.jboss.netty.handler.codec.http.HttpChunk,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.http.client.NettyHttpClient$1:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.apache.druid.java.util.http.client.HttpClientInit:javax.net.ssl.SSLContext sslContextWithTrustedKeyStore(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.prefetch.JsonIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:boolean hasNext()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:boolean hasNext()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.prefetch.JsonIterator:java.lang.Object next()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:boolean hasMore()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:boolean hasNext()",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:boolean hasNext()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.java.util.common.guava.MergeSequence:void closeAll(java.util.PriorityQueue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:void access$100(java.util.PriorityQueue)"
        ]
    },
    "org.apache.druid.java.util.common.io.smoosh.FileSmoosher$Outer:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher$2:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:org.apache.druid.java.util.common.io.smoosh.SmooshedWriter addWithSmooshedWriter(java.lang.String,long)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.data.input.impl.prefetch.JsonIterator:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:void close()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader:void lambda$decorateShutdownTimeout$0(org.apache.druid.java.util.common.parsers.CloseableIterator)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()",
            "org.apache.druid.data.input.HandlingInputRowIterator:void close()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:void close()"
        ]
    },
    "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:void close()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader:void lambda$decorateShutdownTimeout$0(org.apache.druid.java.util.common.parsers.CloseableIterator)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()",
            "org.apache.druid.data.input.HandlingInputRowIterator:void close()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:void close()"
        ]
    },
    "org.apache.druid.java.util.common.parsers.CloseableIterator$2:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:void close()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader:void lambda$decorateShutdownTimeout$0(org.apache.druid.java.util.common.parsers.CloseableIterator)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()",
            "org.apache.druid.data.input.HandlingInputRowIterator:void close()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:void close()"
        ]
    },
    "org.apache.druid.java.util.common.parsers.CloseableIterator$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:void close()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader:void lambda$decorateShutdownTimeout$0(org.apache.druid.java.util.common.parsers.CloseableIterator)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()",
            "org.apache.druid.data.input.HandlingInputRowIterator:void close()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:void close()"
        ]
    },
    "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader:void lambda$decorateShutdownTimeout$0(org.apache.druid.java.util.common.parsers.CloseableIterator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$lambda_decorateShutdownTimeout_0__344:void run()"
        ]
    },
    "org.apache.druid.data.input.HandlingInputRowIterator:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:void close()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader:void lambda$decorateShutdownTimeout$0(org.apache.druid.java.util.common.parsers.CloseableIterator)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()",
            "org.apache.druid.data.input.HandlingInputRowIterator:void close()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:void close()"
        ]
    },
    "org.apache.druid.data.input.IntermediateRowParsingReader$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:void close()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader:void lambda$decorateShutdownTimeout$0(org.apache.druid.java.util.common.parsers.CloseableIterator)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()",
            "org.apache.druid.data.input.HandlingInputRowIterator:void close()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:void close()"
        ]
    },
    "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CompressionUtils:long zip(java.io.File,java.io.File,boolean)"
        ]
    },
    "org.apache.druid.collections.ReferenceCountingResourceHolder:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.collections.ReferenceCountingResourceHolder:void access$100(org.apache.druid.collections.ReferenceCountingResourceHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.collections.ReferenceCountingResourceHolder$1:void close()"
        ]
    },
    "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$3:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$3:java.lang.Object call()"
        ]
    },
    "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$1:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$1:java.lang.Object call()"
        ]
    },
    "org.apache.druid.java.util.common.concurrent.DirectExecutorService:void execute(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.common.config.Log4jShutdown:org.apache.logging.log4j.core.util.Cancellable addShutdownCallback(java.lang.Runnable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.common.config.Log4jShutdown:void runCallbacks()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.common.config.Log4jShutdown:void stop()"
        ]
    },
    "org.apache.druid.common.config.Log4jShutdown$1:void run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.TextReader$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:void close()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader:void lambda$decorateShutdownTimeout$0(org.apache.druid.java.util.common.parsers.CloseableIterator)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()",
            "org.apache.druid.data.input.HandlingInputRowIterator:void close()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:void close()"
        ]
    },
    "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.DroppingIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:java.lang.Object next()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.data.input.impl.FirehoseToInputSourceReaderAdaptor$2:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:void close()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader:void lambda$decorateShutdownTimeout$0(org.apache.druid.java.util.common.parsers.CloseableIterator)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()",
            "org.apache.druid.data.input.HandlingInputRowIterator:void close()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:void close()"
        ]
    },
    "org.apache.druid.data.input.impl.FirehoseToInputSourceReaderAdaptor$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:void close()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader:void lambda$decorateShutdownTimeout$0(org.apache.druid.java.util.common.parsers.CloseableIterator)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()",
            "org.apache.druid.data.input.HandlingInputRowIterator:void close()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:void close()"
        ]
    },
    "org.apache.druid.data.input.impl.RegexReader:java.util.Map toMap(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.RegexReader:java.util.Map toMap(java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.impl.DelimitedValueReader:java.util.Map toMap(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.DelimitedValueReader:java.util.Map toMap(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.JSONToLowerParser:void setFieldNames(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:void <init>(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Iterable,java.lang.Iterable)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.RegexParser:void setFieldNames(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.RegexParser:void <init>(java.lang.String,com.google.common.base.Optional,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.RegexParser:java.util.Map parseToMap(java.lang.String)"
        ]
    },
    "org.apache.druid.data.input.impl.DimensionsSpec:void verify(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)"
        ]
    },
    "org.apache.druid.data.input.TextReader:java.util.List findOrCreateColumnNames(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.AbstractFlatTextFormatParser:void setFieldNames(java.lang.Iterable)",
            "org.apache.druid.data.input.impl.DelimitedValueReader:void processHeaderLine(java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.CloseableIterator:org.apache.druid.java.util.common.parsers.CloseableIterator flatMap(java.util.function.Function)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.StringInputRowParser:java.util.Map buildStringKeyMap(java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:java.util.List parseBatch(java.nio.ByteBuffer)"
        ]
    },
    "org.apache.druid.data.input.impl.JSONParseSpec:org.apache.druid.java.util.common.parsers.Parser makeParser()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:void initializeParser()"
        ]
    },
    "org.apache.druid.data.input.impl.JsonInputFormat:org.apache.druid.data.input.InputEntityReader createReader(org.apache.druid.data.input.InputRowSchema,org.apache.druid.data.input.InputEntity,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.InputEntityIteratingReader:org.apache.druid.java.util.common.parsers.CloseableIterator lambda$sample$1(org.apache.druid.data.input.InputEntity)",
            "org.apache.druid.data.input.impl.InputEntityIteratingReader:org.apache.druid.java.util.common.parsers.CloseableIterator lambda$read$0(org.apache.druid.data.input.InputEntity)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object getRootField(java.lang.Object,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:java.lang.Object lambda$create$0(org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker,org.apache.druid.java.util.common.parsers.JSONPathFieldSpec,java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker$lambda_makeJsonQueryExtractor_3__55:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapKeys$1(java.util.function.Function,java.util.Map,java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapValues$0(java.util.Map,java.util.function.Function,java.lang.Object,java.lang.Object)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec:boolean lambda$split$0(java.util.function.Function,java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker$lambda_makeJsonPathExtractor_2__54:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapKeys$1(java.util.function.Function,java.util.Map,java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapValues$0(java.util.Map,java.util.function.Function,java.lang.Object,java.lang.Object)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec:boolean lambda$split$0(java.util.function.Function,java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker$lambda_discoverRootFields_1__52:boolean apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.ConditionalMultibind:boolean matchCondition(java.lang.String,java.lang.String,com.google.common.base.Predicate)",
            "org.apache.druid.java.util.common.guava.FilteringYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteringAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.RetryUtils:java.lang.Object retry(org.apache.druid.java.util.common.RetryUtils$Task,com.google.common.base.Predicate,int,int,org.apache.druid.java.util.common.RetryUtils$CleanupAfterFailure,java.lang.String)",
            "org.apache.druid.data.input.impl.RetryingInputStream:void waitOrThrow(java.lang.Throwable,int)"
        ]
    },
    "org.apache.druid.java.util.common.logger.Logger:void debugSegments(java.util.Collection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.logger.Logger:void infoSegments(java.util.Collection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.logger.Logger:void warnSegments(java.util.Collection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.logger.Logger:void errorSegments(java.util.Collection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$lambda_toYielder_0__77:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.guava.SequenceWrapper:java.lang.Object wrap(com.google.common.base.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.WrappingYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.WrappingSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Yielders:org.apache.druid.java.util.common.guava.Yielder each(org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$ResultBatch:org.apache.druid.java.util.common.guava.Yielder fromSequence(org.apache.druid.java.util.common.guava.Sequence,int)",
            "org.apache.druid.java.util.common.guava.Sequences$3:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MappedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ExplodingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.SkippingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LimitedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$2:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.math.expr.Parser:java.lang.Object lambda$withSuppliers$10(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser$lambda_withSuppliers_10__315:java.lang.Object get(java.lang.String)"
        ]
    },
    "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.ExprMacroTable$BaseScalarUnivariateMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.common.config.ConfigManager:void <init>(org.apache.druid.metadata.MetadataStorageConnector,com.google.common.base.Supplier,com.google.common.base.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.JacksonConfigManagerModule:org.apache.druid.common.config.ConfigManager getConfigManager(org.apache.druid.metadata.MetadataStorageConnector,com.google.common.base.Supplier,com.google.common.base.Supplier,org.apache.druid.java.util.common.lifecycle.Lifecycle)"
        ]
    },
    "org.apache.druid.common.config.ConfigManager:void start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.collections.StupidPool:org.apache.druid.collections.StupidPool$ObjectResourceHolder makeObjectWithHandler()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.collections.StupidPool:void <init>(java.lang.String,com.google.common.base.Supplier,int,int)",
            "org.apache.druid.collections.StupidPool:org.apache.druid.collections.ResourceHolder take()"
        ]
    },
    "org.apache.druid.collections.DefaultBlockingPool:void <init>(com.google.common.base.Supplier,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.RegexInputFormat:org.apache.druid.data.input.InputEntityReader createReader(org.apache.druid.data.input.InputRowSchema,org.apache.druid.data.input.InputEntity,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.InputEntityIteratingReader:org.apache.druid.java.util.common.parsers.CloseableIterator lambda$sample$1(org.apache.druid.data.input.InputEntity)",
            "org.apache.druid.data.input.impl.InputEntityIteratingReader:org.apache.druid.java.util.common.parsers.CloseableIterator lambda$read$0(org.apache.druid.data.input.InputEntity)"
        ]
    },
    "org.apache.druid.java.util.common.guava.Yielders:org.apache.druid.java.util.common.guava.Yielder each(org.apache.druid.java.util.common.guava.Sequence)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$ResultBatch:org.apache.druid.java.util.common.guava.Yielder fromSequence(org.apache.druid.java.util.common.guava.Sequence,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$SequenceBatcher:boolean block()"
        ]
    },
    "org.apache.druid.java.util.common.guava.Sequences$3:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Yielders:org.apache.druid.java.util.common.guava.Yielder each(org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$ResultBatch:org.apache.druid.java.util.common.guava.Yielder fromSequence(org.apache.druid.java.util.common.guava.Sequence,int)",
            "org.apache.druid.java.util.common.guava.Sequences$3:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MappedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ExplodingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.SkippingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LimitedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$2:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.MappedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Yielders:org.apache.druid.java.util.common.guava.Yielder each(org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$ResultBatch:org.apache.druid.java.util.common.guava.Yielder fromSequence(org.apache.druid.java.util.common.guava.Sequence,int)",
            "org.apache.druid.java.util.common.guava.Sequences$3:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MappedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ExplodingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.SkippingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LimitedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$2:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.FilteredSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Yielders:org.apache.druid.java.util.common.guava.Yielder each(org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$ResultBatch:org.apache.druid.java.util.common.guava.Yielder fromSequence(org.apache.druid.java.util.common.guava.Sequence,int)",
            "org.apache.druid.java.util.common.guava.Sequences$3:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MappedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ExplodingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.SkippingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LimitedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$2:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.ExplodingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Yielders:org.apache.druid.java.util.common.guava.Yielder each(org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$ResultBatch:org.apache.druid.java.util.common.guava.Yielder fromSequence(org.apache.druid.java.util.common.guava.Sequence,int)",
            "org.apache.druid.java.util.common.guava.Sequences$3:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MappedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ExplodingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.SkippingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LimitedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$2:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.SkippingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Yielders:org.apache.druid.java.util.common.guava.Yielder each(org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$ResultBatch:org.apache.druid.java.util.common.guava.Yielder fromSequence(org.apache.druid.java.util.common.guava.Sequence,int)",
            "org.apache.druid.java.util.common.guava.Sequences$3:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MappedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ExplodingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.SkippingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LimitedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$2:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Yielders:org.apache.druid.java.util.common.guava.Yielder each(org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$ResultBatch:org.apache.druid.java.util.common.guava.Yielder fromSequence(org.apache.druid.java.util.common.guava.Sequence,int)",
            "org.apache.druid.java.util.common.guava.Sequences$3:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MappedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ExplodingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.SkippingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LimitedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$2:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.LimitedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Yielders:org.apache.druid.java.util.common.guava.Yielder each(org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$ResultBatch:org.apache.druid.java.util.common.guava.Yielder fromSequence(org.apache.druid.java.util.common.guava.Sequence,int)",
            "org.apache.druid.java.util.common.guava.Sequences$3:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MappedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.FilteredSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ExplodingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.SkippingSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.LimitedSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingSequence$2:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)"
        ]
    },
    "org.apache.druid.java.util.common.guava.WrappingSequence$2:org.apache.druid.java.util.common.guava.Yielder get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.WrappingSequence$2:java.lang.Object get()"
        ]
    },
    "org.apache.druid.java.util.common.guava.ConcatSequence$lambda_accumulate_0__81:java.lang.Object accumulate(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.YieldingAccumulators$1:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteringAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.common.guava.CombiningSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.guava.BaseSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingYielder$1:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:boolean block()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.io.File)"
        ]
    },
    "org.apache.druid.java.util.common.io.smoosh.FileSmoosher$2:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher$2:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.io.smoosh.FileSmoosher$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher$2:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void access$400(java.util.Collection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()"
        ]
    },
    "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void <init>(java.io.File[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.FileUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult retryCopy(com.google.common.io.ByteSource,java.io.File,com.google.common.base.Predicate,int)",
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult unzip(java.io.File,java.io.File)",
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult unzip(java.io.InputStream,java.io.File)",
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult gunzip(java.io.InputStream,java.io.File)",
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult gzip(java.io.File,java.io.File,com.google.common.base.Predicate)"
        ]
    },
    "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addFile(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult unzip(java.io.InputStream,java.io.File)"
        ]
    },
    "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult unzip(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult unzip(com.google.common.io.ByteSource,java.io.File,com.google.common.base.Predicate,boolean)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor negate(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor abs(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor acos(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor asin(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor atan(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor cos(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor cosh(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor cot(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor sin(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor sinh(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor tan(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor tanh(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor cbrt(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor ceil(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor floor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor exp(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor expm1(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor log(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor log10(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor log1p(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor nextUp(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor rint(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor signum(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor sqrt(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor toDegrees(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor toRadians(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor ulp(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor getExponent(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor plus(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor minus(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor multiply(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor divide(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor modulo(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor power(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor max(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor min(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor equal(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor notEqual(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor greaterThanOrEqual(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor greaterThan(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor lessThanOrEqual(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor lessThan(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor atan2(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor copySign(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor hypot(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor remainder(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor nextAfter(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor scalb(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor longDivide(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Pow:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$Div:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$LambdaInputBindingTypes:org.apache.druid.math.expr.ExprType getType(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayAppendFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.BinGeqExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOrdinalFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.BinGtExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.BinEqExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.BinLtExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.BinNeqExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$BivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$UnivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOffsetFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayConcatFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.BinLeqExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Div:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$LambdaInputBindingTypes:org.apache.druid.math.expr.ExprType getType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$LambdaInputBindingTypes:org.apache.druid.math.expr.ExprType getType(java.lang.String)",
            "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.IdentifierExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$ArrayAppendFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$Div:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$LambdaInputBindingTypes:org.apache.druid.math.expr.ExprType getType(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayAppendFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOrdinalFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$BivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$UnivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$BaseMapFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOffsetFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayConcatFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.Function$ArrayOrdinalFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$BivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$UnivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$ArrayOffsetFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$ArrayConcatFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.UnaryNotExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$Div:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$LambdaInputBindingTypes:org.apache.druid.math.expr.ExprType getType(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayAppendFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOrdinalFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$BivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$UnivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOffsetFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayConcatFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.UnaryNotExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryNotExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ParseLong:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$NvlFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayLengthFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$BivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MatchFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UpperFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$RpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSimpleFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinAndExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConditionFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$flatten$0(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$IsNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubMonthFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayScalarFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraysFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConcatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$TimestampFromEpochFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UnivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringToArrayFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinOrExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrposFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubstringFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryMinusExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LowerFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReplaceFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringFormatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinaryEvalOpExprBase:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSearchedFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrlenFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$IsNotNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$ParseLong:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$NvlFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$ArrayLengthFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$BivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$LpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$UpperFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$RpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$MapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryNotExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ParseLong:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$NvlFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayLengthFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$BivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MatchFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UpperFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:boolean lambda$filter$3(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding,java.lang.Object)",
            "org.apache.druid.math.expr.Function$RpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSimpleFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinAndExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$AnyMatchFunction:boolean lambda$match$0(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding,java.lang.Object)",
            "org.apache.druid.math.expr.Function$ConditionFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$flatten$0(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$IsNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubMonthFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayScalarFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraysFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConcatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$TimestampFromEpochFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UnivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringToArrayFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:org.apache.druid.math.expr.ExprEval applyFold(org.apache.druid.math.expr.LambdaExpr,java.lang.Object,org.apache.druid.math.expr.ApplyFunction$IndexableFoldLambdaBinding)",
            "org.apache.druid.math.expr.BinOrExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$AllMatchFunction:boolean lambda$match$0(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding,java.lang.Object)",
            "org.apache.druid.math.expr.Function$StrposFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$BaseMapFunction:org.apache.druid.math.expr.ExprEval applyMap(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.ApplyFunction$IndexableMapLambdaObjectBinding)",
            "org.apache.druid.math.expr.Function$SubstringFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryMinusExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LowerFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReplaceFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringFormatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinaryEvalOpExprBase:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSearchedFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrlenFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$IsNotNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$CaseSimpleFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$FoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.BinAndExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryNotExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ParseLong:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$NvlFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayLengthFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$BivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MatchFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UpperFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$RpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSimpleFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinAndExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConditionFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$flatten$0(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$IsNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubMonthFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayScalarFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraysFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConcatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$TimestampFromEpochFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UnivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringToArrayFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinOrExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrposFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubstringFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryMinusExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LowerFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReplaceFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringFormatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinaryEvalOpExprBase:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSearchedFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrlenFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$IsNotNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$ConditionFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$IsNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$SubMonthFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$ArrayScalarFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$ArraysFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$ConcatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$TimestampFromEpochFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$UnivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$StringToArrayFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.BinOrExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryNotExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ParseLong:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$NvlFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayLengthFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$BivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MatchFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UpperFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$RpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSimpleFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinAndExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConditionFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$flatten$0(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$IsNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubMonthFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayScalarFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraysFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConcatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$TimestampFromEpochFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UnivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringToArrayFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinOrExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrposFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubstringFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryMinusExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LowerFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReplaceFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringFormatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinaryEvalOpExprBase:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSearchedFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrlenFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$IsNotNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$StrposFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$SubstringFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.UnaryMinusExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryNotExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ParseLong:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$NvlFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayLengthFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$BivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MatchFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UpperFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$RpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSimpleFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinAndExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConditionFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$flatten$0(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$IsNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubMonthFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayScalarFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraysFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConcatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$TimestampFromEpochFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UnivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringToArrayFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinOrExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrposFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubstringFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryMinusExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LowerFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReplaceFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringFormatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinaryEvalOpExprBase:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSearchedFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrlenFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$IsNotNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$LowerFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$ReplaceFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$StringFormatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.BinaryEvalOpExprBase:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryNotExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ParseLong:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$NvlFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayLengthFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$BivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MatchFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UpperFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$RpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSimpleFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinAndExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConditionFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$flatten$0(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$IsNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubMonthFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayScalarFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraysFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConcatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$TimestampFromEpochFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UnivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringToArrayFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinOrExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrposFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubstringFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryMinusExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LowerFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReplaceFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringFormatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinaryEvalOpExprBase:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSearchedFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrlenFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$IsNotNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$CaseSearchedFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$StrlenFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Function$IsNotNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr flatten(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnappliedBindings(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)"
        ]
    },
    "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr flatten(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnappliedBindings(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)"
        ]
    },
    "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr flatten(org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr parse(java.lang.String,org.apache.druid.math.expr.ExprMacroTable,boolean)"
        ]
    },
    "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr flatten(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnappliedBindings(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)"
        ]
    },
    "org.apache.druid.math.expr.antlr.ExprParser$ApplyFunctionExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.ConstantExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr flatten(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnappliedBindings(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)"
        ]
    },
    "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.IdentifierExpr lambda$visit$0(org.apache.druid.math.expr.Expr$Shuttle,org.apache.druid.math.expr.IdentifierExpr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.LambdaExpr$lambda_visit_0__283:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr flatten(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnappliedBindings(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)"
        ]
    },
    "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr flatten(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnappliedBindings(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunctionExpr$visit__297:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapKeys$1(java.util.function.Function,java.util.Map,java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapValues$0(java.util.Map,java.util.function.Function,java.lang.Object,java.lang.Object)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec:boolean lambda$split$0(java.util.function.Function,java.lang.Object)"
        ]
    },
    "org.apache.druid.math.expr.FunctionExpr$visit__317:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapKeys$1(java.util.function.Function,java.util.Map,java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapValues$0(java.util.Map,java.util.function.Function,java.lang.Object,java.lang.Object)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec:boolean lambda$split$0(java.util.function.Function,java.lang.Object)"
        ]
    },
    "org.apache.druid.math.expr.Parser$lambda_flatten_0__303:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.ConstantExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.IdentifierExpr lambda$visit$0(org.apache.druid.math.expr.Expr$Shuttle,org.apache.druid.math.expr.IdentifierExpr)",
            "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.ApplyFunctionExpr$visit__297:java.lang.Object apply(java.lang.Object)",
            "org.apache.druid.math.expr.FunctionExpr$visit__317:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.math.expr.Parser:boolean lambda$applyUnappliedBindings$1(org.apache.druid.math.expr.Expr$BindingAnalysis,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.List getRequiredBindingsList()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.Parser:void validateExpr(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.Parser:boolean lambda$liftApplyLambda$6(org.apache.druid.math.expr.ApplyFunctionExpr,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:boolean hasArrayOutput(org.apache.druid.math.expr.LambdaExpr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)"
        ]
    },
    "org.apache.druid.common.config.ConfigManager$PollingCallable:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.common.config.ConfigManager$PollingCallable:java.lang.Object call()"
        ]
    },
    "org.apache.druid.data.input.impl.DimensionsSpec:java.util.List getDefaultSchemas(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.DimensionsSpec$lambda_getDefaultSchemas_0__62:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapKeys$1(java.util.function.Function,java.util.Map,java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapValues$0(java.util.Map,java.util.function.Function,java.lang.Object,java.lang.Object)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec:boolean lambda$split$0(java.util.function.Function,java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.impl.NoopInputRowParser:void <init>(org.apache.druid.data.input.impl.ParseSpec)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.NoopInputRowParser:org.apache.druid.data.input.impl.InputRowParser withParseSpec(org.apache.druid.data.input.impl.ParseSpec)"
        ]
    },
    "org.apache.druid.data.input.impl.TimeAndDimsParseSpec:org.apache.druid.data.input.impl.ParseSpec withTimestampSpec(org.apache.druid.data.input.impl.TimestampSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.TimeAndDimsParseSpec:org.apache.druid.data.input.impl.ParseSpec withDimensionsSpec(org.apache.druid.data.input.impl.DimensionsSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.parsers.DelimitedParser:java.util.List parseLine(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.AbstractFlatTextFormatParser:void setFieldNames(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.AbstractFlatTextFormatParser:java.util.Map parseToMap(java.lang.String)"
        ]
    },
    "org.apache.druid.data.input.impl.DelimitedInputFormat$lambda_createReader_0__74:java.util.List parseLine(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.DelimitedValueReader:java.util.Map parseLine(java.lang.String)",
            "org.apache.druid.data.input.impl.DelimitedValueReader:void processHeaderLine(java.lang.String)"
        ]
    },
    "org.apache.druid.timeline.partition.HashPartitioner:java.util.List extractKeys(long,org.apache.druid.data.input.InputRow)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.HashPartitioner:int hash(long,org.apache.druid.data.input.InputRow)"
        ]
    },
    "org.apache.druid.timeline.partition.PartitionHolder:boolean add(org.apache.druid.timeline.partition.PartitionChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:java.lang.Iterable lambda$determineVisibleGroupAfterRemove$18(org.apache.druid.timeline.partition.AtomicUpdateGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager$lambda_determineVisibleGroupAfterRemove_18__375:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:java.lang.Iterable lambda$determineVisibleGroupAfterRemove$17(org.apache.druid.timeline.partition.AtomicUpdateGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager$lambda_determineVisibleGroupAfterRemove_17__374:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:org.apache.druid.timeline.partition.AtomicUpdateGroup tryRemoveChunkFromGroupWithState(org.apache.druid.timeline.partition.PartitionChunk,org.apache.druid.timeline.partition.OvershadowableManager$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:org.apache.druid.timeline.partition.PartitionChunk removeChunk(org.apache.druid.timeline.partition.PartitionChunk)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:java.lang.Iterable lambda$determineVisibleGroupAfterRemove$15(org.apache.druid.timeline.partition.AtomicUpdateGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager$lambda_determineVisibleGroupAfterRemove_15__378:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:java.lang.Iterable lambda$determineVisibleGroupAfterRemove$14(org.apache.druid.timeline.partition.AtomicUpdateGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager$lambda_determineVisibleGroupAfterRemove_14__377:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:void determineVisibleGroupAfterAdd(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:void addAtomicUpdateGroupWithState(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State,boolean)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean addChunk(org.apache.druid.timeline.partition.PartitionChunk)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager$lambda_checkVisibleIsFullyAvailableAndTryToMoveOvershadowedToVisible_12__371:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.JavaScriptParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createObjectTimestampParser$10(boolean,com.google.common.base.Function,com.google.common.base.Function,java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$3(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$2(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.java.util.common.guava.Sequences$apply__78:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.PartitionHolder:java.util.List getOvershadowed()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()"
        ]
    },
    "org.apache.druid.timeline.DataSegment:void <init>(java.lang.String,org.joda.time.Interval,java.lang.String,java.util.Map,java.util.List,java.util.List,org.apache.druid.timeline.partition.ShardSpec,org.apache.druid.timeline.CompactionState,java.lang.Integer,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.DataSegment$Builder:org.apache.druid.timeline.DataSegment build()",
            "org.apache.druid.timeline.DataSegment:void <init>(org.apache.druid.timeline.SegmentId,java.util.Map,java.util.List,java.util.List,org.apache.druid.timeline.partition.ShardSpec,org.apache.druid.timeline.CompactionState,java.lang.Integer,long)",
            "org.apache.druid.timeline.DataSegment:void <init>(java.lang.String,org.joda.time.Interval,java.lang.String,java.util.Map,java.util.List,java.util.List,org.apache.druid.timeline.partition.ShardSpec,java.lang.Integer,long)"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmMonitor$GcGenerationCollector:void <init>(org.apache.druid.java.util.metrics.JvmMonitor,java.util.Map,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void <init>(org.apache.druid.java.util.metrics.JvmMonitor,java.util.Map,long,java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void <init>(org.apache.druid.java.util.metrics.JvmMonitor,java.util.Map,long,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void <init>(org.apache.druid.java.util.metrics.JvmMonitor)"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmMonitor$GcGenerationSpace:void <init>(org.apache.druid.java.util.metrics.JvmMonitor,java.util.Map,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void <init>(org.apache.druid.java.util.metrics.JvmMonitor,java.util.Map,long,java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder:java.lang.Object getDimension(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1$1:java.lang.Object getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean lambda$discoverRootFields$1(java.util.Map$Entry)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.TimelineObjectHolder first()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.TimelineObjectHolder last()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.ParserUtils:org.joda.time.DateTimeZone getDateTimeZone(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$0(org.apache.druid.java.util.common.DateTimes$UtcFormatter,java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:java.nio.ByteBuffer mapFile(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.MapUtils:java.lang.String getString(java.util.Map,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.MapUtils:java.lang.String getString(java.util.Map,java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.common.MapUtils:int getInt(java.util.Map,java.lang.String,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.MapUtils:long getLong(java.util.Map,java.lang.String,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:java.lang.Object get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FoldLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$MapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldLambdaBinding:java.lang.Object get(java.lang.String)"
        ]
    },
    "org.apache.druid.math.expr.ExprMacroTable:org.apache.druid.math.expr.Expr get(java.lang.String,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionExpr(org.apache.druid.math.expr.antlr.ExprParser$FunctionExprContext)"
        ]
    },
    "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Function getFunction(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionExpr(org.apache.druid.math.expr.antlr.ExprParser$FunctionExprContext)"
        ]
    },
    "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.ApplyFunction getApplyFunction(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ExprListenerImpl:void exitApplyFunctionExpr(org.apache.druid.math.expr.antlr.ExprParser$ApplyFunctionExprContext)"
        ]
    },
    "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnapplied$5(java.util.Map,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser$lambda_applyUnapplied_5__308:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr)"
        ]
    },
    "org.apache.druid.math.expr.ExprListenerImpl:org.apache.druid.math.expr.Expr getAST()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr parse(java.lang.String,org.apache.druid.math.expr.ExprMacroTable,boolean)"
        ]
    },
    "org.apache.druid.math.expr.ExprListenerImpl:void exitUnaryOpExpr(org.apache.druid.math.expr.antlr.ExprParser$UnaryOpExprContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.antlr.ExprParser$UnaryOpExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)"
        ]
    },
    "org.apache.druid.math.expr.ExprListenerImpl:void exitAddSubExpr(org.apache.druid.math.expr.antlr.ExprParser$AddSubExprContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.antlr.ExprParser$AddSubExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)"
        ]
    },
    "org.apache.druid.math.expr.ExprListenerImpl:void exitLogicalAndOrExpr(org.apache.druid.math.expr.antlr.ExprParser$LogicalAndOrExprContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.antlr.ExprParser$LogicalAndOrExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)"
        ]
    },
    "org.apache.druid.math.expr.ExprListenerImpl:void exitNestedExpr(org.apache.druid.math.expr.antlr.ExprParser$NestedExprContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.antlr.ExprParser$NestedExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)"
        ]
    },
    "org.apache.druid.math.expr.ExprListenerImpl:void exitLogicalOpExpr(org.apache.druid.math.expr.antlr.ExprParser$LogicalOpExprContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.antlr.ExprParser$LogicalOpExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)"
        ]
    },
    "org.apache.druid.math.expr.ExprListenerImpl:void exitMulDivModuloExpr(org.apache.druid.math.expr.antlr.ExprParser$MulDivModuloExprContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.antlr.ExprParser$MulDivModuloExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)"
        ]
    },
    "org.apache.druid.math.expr.ExprListenerImpl:void exitPowOpExpr(org.apache.druid.math.expr.antlr.ExprParser$PowOpExprContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.antlr.ExprParser$PowOpExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)"
        ]
    },
    "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionExpr(org.apache.druid.math.expr.antlr.ExprParser$FunctionExprContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.antlr.ExprParser$FunctionExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)"
        ]
    },
    "org.apache.druid.math.expr.ExprListenerImpl:void exitLambda(org.apache.druid.math.expr.antlr.ExprParser$LambdaContext)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.antlr.ExprParser$LambdaContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)"
        ]
    },
    "org.apache.druid.data.input.impl.DimensionsSpec:org.apache.druid.data.input.impl.DimensionSchema getSchema(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.TimestampSpec:java.lang.Object getRawTimestamp(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.MapInputRowParser:org.apache.druid.data.input.InputRow parse(org.apache.druid.data.input.impl.TimestampSpec,java.util.List,java.util.Set,java.util.Map)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime extractTimestamp(java.util.Map)"
        ]
    },
    "org.apache.druid.data.input.MapBasedRow:java.util.List getDimension(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:boolean isInChunk(java.lang.String,java.lang.String,java.lang.String,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.HashPartitioner$getDimension__360:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.MapBasedRow:java.lang.Object getRaw(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.MapBasedRow:java.lang.Number getMetric(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:java.lang.Object lambda$isInChunk$1(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec$lambda_isInChunk_1__358:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.SingleDimensionShardSpec:boolean possibleInDomain(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:org.apache.druid.timeline.partition.PartitionChunk removeChunk(org.apache.druid.timeline.partition.PartitionChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.PartitionHolder:org.apache.druid.timeline.partition.PartitionChunk remove(org.apache.druid.timeline.partition.PartitionChunk)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:org.apache.druid.timeline.partition.PartitionChunk getChunk(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.PartitionHolder:org.apache.druid.timeline.partition.PartitionChunk getChunk(int)"
        ]
    },
    "org.apache.druid.metadata.MetadataStorageTablesConfig:java.lang.String getEntryTable(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.metadata.MetadataStorageTablesConfig:java.lang.String getLogTable(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.metadata.MetadataStorageTablesConfig:java.lang.String getLockTable(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding$get__281:java.lang.Object get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FoldLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$MapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldLambdaBinding:java.lang.Object get(java.lang.String)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$FoldLambdaBinding$get__286:java.lang.Object get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FoldLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$MapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldLambdaBinding:java.lang.Object get(java.lang.String)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$CartesianFoldLambdaBinding$get__287:java.lang.Object get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FoldLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$MapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldLambdaBinding:java.lang.Object get(java.lang.String)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$CartesianMapLambdaBinding$get__293:java.lang.Object get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FoldLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$MapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldLambdaBinding:java.lang.Object get(java.lang.String)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$MapLambdaBinding$get__294:java.lang.Object get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FoldLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$MapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldLambdaBinding:java.lang.Object get(java.lang.String)"
        ]
    },
    "org.apache.druid.math.expr.Parser$get__314:java.lang.Object get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FoldLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$MapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldLambdaBinding:java.lang.Object get(java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.common.guava.FilteringYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.FilteringYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.DelegatingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator:void accumulateLastValue()"
        ]
    },
    "org.apache.druid.java.util.common.guava.DelegatingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.FilteringYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.DelegatingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$SkippingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator:void accumulateLastValue()"
        ]
    },
    "org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.FilteringYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.DelegatingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator:void accumulateLastValue()"
        ]
    },
    "org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator:void accumulateLastValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator,boolean)"
        ]
    },
    "org.apache.druid.java.util.common.guava.YieldingAccumulators$1:java.lang.Object accumulate(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.FilteringYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.DelegatingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator:void accumulateLastValue()"
        ]
    },
    "org.apache.druid.java.util.common.guava.FilteringAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.YieldingAccumulators$1:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteringAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.common.guava.CombiningSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.druid.common.guava.CombiningSequence$CombiningAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.YieldingAccumulators$1:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteringAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.common.guava.CombiningSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.druid.utils.CollectionUtils$lambda_mapKeys_1__95:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.logger.Logger:void logException(java.util.function.BiConsumer,java.lang.Throwable,java.lang.String)"
        ]
    },
    "org.apache.druid.utils.CollectionUtils$lambda_mapValues_0__94:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.logger.Logger:void logException(java.util.function.BiConsumer,java.lang.Throwable,java.lang.String)"
        ]
    },
    "org.apache.druid.data.input.MaxSizeSplitHintSpec$lambda_split_0__339:boolean apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.ConditionalMultibind:boolean matchCondition(java.lang.String,java.lang.String,com.google.common.base.Predicate)",
            "org.apache.druid.java.util.common.guava.FilteringYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteringAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.RetryUtils:java.lang.Object retry(org.apache.druid.java.util.common.RetryUtils$Task,com.google.common.base.Predicate,int,int,org.apache.druid.java.util.common.RetryUtils$CleanupAfterFailure,java.lang.String)",
            "org.apache.druid.data.input.impl.RetryingInputStream:void waitOrThrow(java.lang.Throwable,int)"
        ]
    },
    "org.apache.druid.java.util.metrics.CgroupMemoryMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.AbstractMonitor:boolean monitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.common.logger.Logger:void logException(java.util.function.BiConsumer,java.lang.Throwable,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.logger.Logger:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "org.apache.druid.java.util.common.logger.Logger:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "org.apache.druid.java.util.common.logger.Logger:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "org.apache.druid.java.util.common.logger.Logger:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.druid.java.util.metrics.MonitorScheduler$1:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$2:void run()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$4:void run()"
        ]
    },
    "org.apache.druid.java.util.metrics.CompoundMonitor$lambda_monitor_0__42:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.JavaScriptParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createObjectTimestampParser$10(boolean,com.google.common.base.Function,com.google.common.base.Function,java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$3(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$2(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.java.util.common.guava.Sequences$apply__78:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.AbstractMonitor:boolean monitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.ParametrizedUriEmitterMonitor:void lambda$doMonitor$2(org.apache.druid.java.util.emitter.service.ServiceEmitter,org.apache.druid.java.util.metrics.HttpPostEmitterMonitor)"
        ]
    },
    "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:void emitEmittedEvents(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:void emitDroppedBuffers(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:void emitAllocatedBuffers(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:void emitFailedBuffers(org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:void emitTimeCounterMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter,org.apache.druid.java.util.emitter.core.ConcurrentTimeCounter,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.HttpPostEmitterMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.metrics.CgroupMemoryMonitor:void lambda$null$1(org.apache.druid.java.util.emitter.service.ServiceEmitter,org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.lang.String,java.lang.Long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.CgroupMemoryMonitor$lambda_null_1__41:void accept(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.emitter.service.AlertBuilder:void emit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.EmittingLogger$EmittingAlertBuilder:void emit()",
            "org.apache.druid.java.util.emitter.EmittingLogger$EmittingAlertBuilder:void finalize()"
        ]
    },
    "org.apache.druid.java.util.common.guava.ConcatSequence$2:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingYielder$1:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:boolean block()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingYielder$1:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:boolean block()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.guava.FilteredSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingYielder$1:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:boolean block()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.guava.SkippingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingYielder$1:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:boolean block()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.guava.WrappingYielder$1:org.apache.druid.java.util.common.guava.Yielder get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.WrappingYielder$1:java.lang.Object get()"
        ]
    },
    "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:boolean block()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.guava.ExplodingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingYielder$1:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:boolean block()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingYielder$1:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:boolean block()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)"
        ]
    },
    "org.apache.druid.common.guava.CombiningSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingYielder$1:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:boolean block()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder access$000(org.apache.druid.java.util.common.guava.MergeSequence,java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.MergeSequence$2:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.guava.MergeSequence$lambda_toYielder_1__83:java.lang.Object accumulate(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.YieldingAccumulators$1:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteringAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.common.guava.CombiningSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineAction:void compute()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder access$000(org.apache.druid.java.util.common.guava.ConcatSequence,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.http.client.NettyHttpClient$1:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.prefetch.JsonIterator:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.DroppingIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:java.lang.Object next()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$1:boolean hasNext()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:boolean hasNext()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.java.util.common.guava.MergeSequence:void access$100(java.util.PriorityQueue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.MergeSequence$2:void close()"
        ]
    },
    "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:org.apache.druid.java.util.common.io.smoosh.SmooshedWriter addWithSmooshedWriter(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)"
        ]
    },
    "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader$lambda_decorateShutdownTimeout_0__344:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$3:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$1:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()",
            "org.apache.druid.java.util.common.concurrent.DirectExecutorService:void execute(java.lang.Runnable)",
            "org.apache.druid.common.config.Log4jShutdown:org.apache.logging.log4j.core.util.Cancellable addShutdownCallback(java.lang.Runnable)",
            "org.apache.druid.common.config.Log4jShutdown:void runCallbacks()",
            "org.apache.druid.common.config.Log4jShutdown$1:void run()"
        ]
    },
    "org.apache.druid.utils.CompressionUtils:long zip(java.io.File,java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CompressionUtils:long zip(java.io.File,java.io.File)"
        ]
    },
    "org.apache.druid.collections.ReferenceCountingResourceHolder$1:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$3:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$2:void run()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$4:void run()"
        ]
    },
    "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$1:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$2:void run()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$4:void run()"
        ]
    },
    "org.apache.druid.common.config.Log4jShutdown:void stop()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.RegexReader:java.util.Map toMap(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.IntermediateRowParsingReader:org.apache.druid.data.input.InputRowListPlusRawValues lambda$sample$0(java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.impl.DelimitedValueReader:java.util.Map toMap(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.IntermediateRowParsingReader:org.apache.druid.data.input.InputRowListPlusRawValues lambda$sample$0(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.JSONToLowerParser:void <init>(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Iterable,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.JSONLowercaseParseSpec:org.apache.druid.java.util.common.parsers.Parser makeParser()"
        ]
    },
    "org.apache.druid.java.util.common.parsers.RegexParser:void <init>(java.lang.String,com.google.common.base.Optional,java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.RegexParseSpec:org.apache.druid.java.util.common.parsers.Parser makeParser()"
        ]
    },
    "org.apache.druid.java.util.common.parsers.AbstractFlatTextFormatParser:void setFieldNames(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.DelimitedParser:void <init>(java.lang.String,java.lang.String,java.lang.Iterable,boolean,int)",
            "org.apache.druid.java.util.common.parsers.AbstractFlatTextFormatParser:void setFieldNames(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.AbstractFlatTextFormatParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CSVParser:void <init>(java.lang.String,java.lang.Iterable,boolean,int)"
        ]
    },
    "org.apache.druid.data.input.impl.DelimitedValueReader:void processHeaderLine(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.TextReader:org.apache.druid.java.util.common.parsers.CloseableIterator intermediateRowIterator()"
        ]
    },
    "org.apache.druid.data.input.impl.StringInputRowParser:void initializeParser()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:void startFileFromBeginning()",
            "org.apache.druid.data.input.impl.StringInputRowParser:java.util.Map parseString(java.lang.String)"
        ]
    },
    "org.apache.druid.data.input.impl.InputEntityIteratingReader:org.apache.druid.java.util.common.parsers.CloseableIterator lambda$sample$1(org.apache.druid.data.input.InputEntity)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.InputEntityIteratingReader$lambda_sample_1__331:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.impl.InputEntityIteratingReader:org.apache.druid.java.util.common.parsers.CloseableIterator lambda$read$0(org.apache.druid.data.input.InputEntity)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.InputEntityIteratingReader$lambda_read_0__330:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.ObjectFlatteners:java.lang.Object lambda$create$0(org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker,org.apache.druid.java.util.common.parsers.JSONPathFieldSpec,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$lambda_create_0__50:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.guice.ConditionalMultibind:boolean matchCondition(java.lang.String,java.lang.String,com.google.common.base.Predicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.ConditionalMultibind:org.apache.druid.guice.ConditionalMultibind addConditionBinding(java.lang.String,java.lang.String,com.google.common.base.Predicate,java.lang.Class)",
            "org.apache.druid.guice.ConditionalMultibind:boolean matchCondition(java.lang.String,com.google.common.base.Predicate)"
        ]
    },
    "org.apache.druid.java.util.common.RetryUtils:java.lang.Object retry(org.apache.druid.java.util.common.RetryUtils$Task,com.google.common.base.Predicate,int,int,org.apache.druid.java.util.common.RetryUtils$CleanupAfterFailure,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.RetryUtils:java.lang.Object retry(org.apache.druid.java.util.common.RetryUtils$Task,com.google.common.base.Predicate,int,int)",
            "org.apache.druid.java.util.common.RetryUtils:java.lang.Object retry(org.apache.druid.java.util.common.RetryUtils$Task,com.google.common.base.Predicate,org.apache.druid.java.util.common.RetryUtils$CleanupAfterFailure,int,java.lang.String)"
        ]
    },
    "org.apache.druid.data.input.impl.RetryingInputStream:void waitOrThrow(java.lang.Throwable,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.RetryingInputStream:int read()",
            "org.apache.druid.data.input.impl.RetryingInputStream:int read(byte[])",
            "org.apache.druid.data.input.impl.RetryingInputStream:int read(byte[],int,int)",
            "org.apache.druid.data.input.impl.RetryingInputStream:long skip(long)",
            "org.apache.druid.data.input.impl.RetryingInputStream:int available()"
        ]
    },
    "org.apache.druid.math.expr.Parser$lambda_withSuppliers_10__315:java.lang.Object get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FoldLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$MapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldLambdaBinding:java.lang.Object get(java.lang.String)"
        ]
    },
    "org.apache.druid.guice.JacksonConfigManagerModule:org.apache.druid.common.config.ConfigManager getConfigManager(org.apache.druid.metadata.MetadataStorageConnector,com.google.common.base.Supplier,com.google.common.base.Supplier,org.apache.druid.java.util.common.lifecycle.Lifecycle)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.collections.StupidPool:void <init>(java.lang.String,com.google.common.base.Supplier,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.collections.StupidPool:void <init>(java.lang.String,com.google.common.base.Supplier)"
        ]
    },
    "org.apache.druid.collections.StupidPool:org.apache.druid.collections.ResourceHolder take()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$SequenceBatcher:boolean block()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.guava.WrappingSequence$2:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.SupplierProvider:java.lang.Object get()",
            "org.apache.druid.java.util.common.guava.SequenceWrapper:java.lang.Object wrap(com.google.common.base.Supplier)",
            "org.apache.druid.java.util.common.guava.LazySequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.math.expr.Parser:java.lang.Object lambda$withSuppliers$10(java.util.Map,java.lang.String)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarUnivariateMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.common.config.ConfigManager:void <init>(org.apache.druid.metadata.MetadataStorageConnector,com.google.common.base.Supplier,com.google.common.base.Supplier)",
            "org.apache.druid.common.config.ConfigManager:void start()",
            "org.apache.druid.collections.StupidPool:org.apache.druid.collections.StupidPool$ObjectResourceHolder makeObjectWithHandler()",
            "org.apache.druid.collections.DefaultBlockingPool:void <init>(com.google.common.base.Supplier,int)",
            "org.apache.druid.data.input.impl.RegexInputFormat:org.apache.druid.data.input.InputEntityReader createReader(org.apache.druid.data.input.InputRowSchema,org.apache.druid.data.input.InputEntity,java.io.File)"
        ]
    },
    "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()"
        ]
    },
    "org.apache.druid.java.util.common.FileUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult retryCopy(com.google.common.io.ByteSource,java.io.File,com.google.common.base.Predicate,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult unzip(com.google.common.io.ByteSource,java.io.File,com.google.common.base.Predicate,boolean)",
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult unzip(java.io.File,java.io.File)",
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult gunzip(com.google.common.io.ByteSource,java.io.File,com.google.common.base.Predicate)"
        ]
    },
    "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult unzip(java.io.InputStream,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult lambda$unzip$1(com.google.common.io.ByteSource,java.io.File)"
        ]
    },
    "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult gunzip(java.io.InputStream,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult gzip(java.io.File,java.io.File,com.google.common.base.Predicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult gzip(java.io.File,java.io.File)"
        ]
    },
    "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult unzip(com.google.common.io.ByteSource,java.io.File,com.google.common.base.Predicate,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult unzip(com.google.common.io.ByteSource,java.io.File,boolean)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor negate(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.UnaryMinusExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor abs(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Abs:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor acos(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Acos:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor asin(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Asin:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor atan(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Atan:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor cos(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Cos:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor cosh(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Cosh:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor cot(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Cot:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor sin(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Sin:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor sinh(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Sinh:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor tan(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Tan:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor tanh(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Tanh:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor cbrt(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Cbrt:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor ceil(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Ceil:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor floor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Floor:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor exp(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Exp:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor expm1(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Expm1:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor log(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Log:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor log10(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Log10:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor log1p(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Log1p:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor nextUp(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$NextUp:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor rint(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Rint:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor signum(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Signum:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor sqrt(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Sqrt:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor toDegrees(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$ToDegrees:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor toRadians(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$ToRadians:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor ulp(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Ulp:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor getExponent(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$GetExponent:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor plus(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinPlusExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor minus(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinMinusExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor multiply(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinMulExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor divide(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinDivExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor modulo(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinModuloExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor power(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.BinPowExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor max(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Max:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor min(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Min:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor equal(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinEqExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor notEqual(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinNeqExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor greaterThanOrEqual(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinGeqExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor greaterThan(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinGtExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor lessThanOrEqual(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinLeqExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor lessThan(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.BinLtExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor atan2(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Atan2:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor copySign(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$CopySign:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor hypot(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Hypot:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor remainder(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Remainder:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor nextAfter(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$NextAfter:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor scalb(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Scalb:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor longDivide(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$Div:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.Function$Pow:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.BinGeqExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$Div:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$LambdaInputBindingTypes:org.apache.druid.math.expr.ExprType getType(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayAppendFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOrdinalFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$BivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$UnivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOffsetFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayConcatFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.BinGtExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$Div:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$LambdaInputBindingTypes:org.apache.druid.math.expr.ExprType getType(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayAppendFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOrdinalFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$BivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$UnivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOffsetFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayConcatFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.BinEqExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$Div:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$LambdaInputBindingTypes:org.apache.druid.math.expr.ExprType getType(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayAppendFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOrdinalFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$BivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$UnivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOffsetFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayConcatFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.BinLtExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$Div:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$LambdaInputBindingTypes:org.apache.druid.math.expr.ExprType getType(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayAppendFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOrdinalFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$BivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$UnivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOffsetFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayConcatFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.BinNeqExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$Div:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$LambdaInputBindingTypes:org.apache.druid.math.expr.ExprType getType(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayAppendFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOrdinalFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$BivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$UnivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOffsetFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayConcatFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.BinLeqExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$Div:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$LambdaInputBindingTypes:org.apache.druid.math.expr.ExprType getType(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayAppendFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOrdinalFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$BivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$UnivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOffsetFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayConcatFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$Div:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$LambdaInputBindingTypes:org.apache.druid.math.expr.ExprType getType(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayAppendFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOrdinalFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$BivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$UnivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOffsetFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayConcatFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.IdentifierExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:boolean lambda$canVectorize$0(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.UnaryMinusExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$Div:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$LambdaInputBindingTypes:org.apache.druid.math.expr.ExprType getType(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayAppendFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOrdinalFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$BivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$UnivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOffsetFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayConcatFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$BaseMapFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.UnaryNotExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$Div:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$LambdaInputBindingTypes:org.apache.druid.math.expr.ExprType getType(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayAppendFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOrdinalFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.Function$BivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$UnivariateMathFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayOffsetFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ArrayConcatFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$FilterFunction:boolean lambda$filter$3(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.ApplyFunction$AnyMatchFunction:boolean lambda$match$0(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.ApplyFunction$BaseFoldFunction:org.apache.druid.math.expr.ExprEval applyFold(org.apache.druid.math.expr.LambdaExpr,java.lang.Object,org.apache.druid.math.expr.ApplyFunction$IndexableFoldLambdaBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$FoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$AllMatchFunction:boolean lambda$match$0(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.ApplyFunction$BaseMapFunction:org.apache.druid.math.expr.ExprEval applyMap(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.ApplyFunction$IndexableMapLambdaObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$MapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr parse(java.lang.String,org.apache.druid.math.expr.ExprMacroTable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr parse(java.lang.String,org.apache.druid.math.expr.ExprMacroTable)"
        ]
    },
    "org.apache.druid.math.expr.LambdaExpr$lambda_visit_0__283:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapKeys$1(java.util.function.Function,java.util.Map,java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapValues$0(java.util.Map,java.util.function.Function,java.lang.Object,java.lang.Object)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec:boolean lambda$split$0(java.util.function.Function,java.lang.Object)"
        ]
    },
    "org.apache.druid.common.config.ConfigManager$PollingCallable:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$2:void run()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$4:void run()"
        ]
    },
    "org.apache.druid.data.input.impl.NoopInputRowParser:org.apache.druid.data.input.impl.InputRowParser withParseSpec(org.apache.druid.data.input.impl.ParseSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.parsers.AbstractFlatTextFormatParser:void setFieldNames(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.DelimitedParser:void <init>(java.lang.String,java.lang.String,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.CSVParser:void <init>(java.lang.String,java.lang.String)"
        ]
    },
    "org.apache.druid.timeline.partition.HashPartitioner:int hash(long,org.apache.druid.data.input.InputRow)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.HashPartitioner:org.apache.druid.timeline.partition.ShardSpec lambda$createHashLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)"
        ]
    },
    "org.apache.druid.timeline.partition.PartitionHolder:void <init>(org.apache.druid.timeline.partition.PartitionChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager$lambda_determineVisibleGroupAfterRemove_18__375:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.JavaScriptParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createObjectTimestampParser$10(boolean,com.google.common.base.Function,com.google.common.base.Function,java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$3(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$2(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.java.util.common.guava.Sequences$apply__78:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager$lambda_determineVisibleGroupAfterRemove_17__374:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.JavaScriptParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createObjectTimestampParser$10(boolean,com.google.common.base.Function,com.google.common.base.Function,java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$3(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$2(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.java.util.common.guava.Sequences$apply__78:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager$lambda_determineVisibleGroupAfterRemove_15__378:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.JavaScriptParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createObjectTimestampParser$10(boolean,com.google.common.base.Function,com.google.common.base.Function,java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$3(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$2(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.java.util.common.guava.Sequences$apply__78:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager$lambda_determineVisibleGroupAfterRemove_14__377:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.JavaScriptParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createObjectTimestampParser$10(boolean,com.google.common.base.Function,com.google.common.base.Function,java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$3(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$2(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.java.util.common.guava.Sequences$apply__78:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:void addAtomicUpdateGroupWithState(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:void transitAtomicUpdateGroupState(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean addChunk(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.OvershadowableManager:void lambda$replaceVisibleWith$8(org.apache.druid.timeline.partition.OvershadowableManager$State,org.apache.druid.timeline.partition.AtomicUpdateGroup)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.JavaScriptParser:java.util.Map parseToMap(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:java.util.Map parseString(java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createObjectTimestampParser$10(boolean,com.google.common.base.Function,com.google.common.base.Function,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.TimestampParser$lambda_createObjectTimestampParser_10__73:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$3(com.google.common.base.Function,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.TimestampParser$lambda_createTimestampParser_3__65:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$2(com.google.common.base.Function,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.TimestampParser$lambda_createTimestampParser_2__63:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.guava.Sequences$apply__78:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapKeys$1(java.util.function.Function,java.util.Map,java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapValues$0(java.util.Map,java.util.function.Function,java.lang.Object,java.lang.Object)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec:boolean lambda$split$0(java.util.function.Function,java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.DataSegment$Builder:org.apache.druid.timeline.DataSegment build()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.DataSegment:org.apache.druid.timeline.DataSegment withLoadSpec(java.util.Map)",
            "org.apache.druid.timeline.DataSegment:org.apache.druid.timeline.DataSegment withDimensions(java.util.List)",
            "org.apache.druid.timeline.DataSegment:org.apache.druid.timeline.DataSegment withMetrics(java.util.List)",
            "org.apache.druid.timeline.DataSegment:org.apache.druid.timeline.DataSegment withShardSpec(org.apache.druid.timeline.partition.ShardSpec)",
            "org.apache.druid.timeline.DataSegment:org.apache.druid.timeline.DataSegment withSize(long)",
            "org.apache.druid.timeline.DataSegment:org.apache.druid.timeline.DataSegment withVersion(java.lang.String)",
            "org.apache.druid.timeline.DataSegment:org.apache.druid.timeline.DataSegment withBinaryVersion(int)",
            "org.apache.druid.timeline.DataSegment:org.apache.druid.timeline.DataSegment withLastCompactionState(org.apache.druid.timeline.CompactionState)"
        ]
    },
    "org.apache.druid.timeline.DataSegment:void <init>(org.apache.druid.timeline.SegmentId,java.util.Map,java.util.List,java.util.List,org.apache.druid.timeline.partition.ShardSpec,org.apache.druid.timeline.CompactionState,java.lang.Integer,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.DataSegment:void <init>(java.lang.String,org.joda.time.Interval,java.lang.String,java.util.Map,java.util.List,java.util.List,org.apache.druid.timeline.partition.ShardSpec,java.lang.Integer,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void <init>(org.apache.druid.java.util.metrics.JvmMonitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor:org.apache.druid.java.util.metrics.JvmMonitor$GcCounters tryCreateGcCounters()"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.TimelineObjectHolder first()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.TimelineObjectHolder last()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$0(org.apache.druid.java.util.common.DateTimes$UtcFormatter,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.TimestampParser$lambda_createTimestampParser_0__67:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.MapUtils:java.lang.String getString(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.ApplyFunction$FoldLambdaBinding:java.lang.Object get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FoldLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$MapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldLambdaBinding:java.lang.Object get(java.lang.String)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$CartesianMapLambdaBinding:java.lang.Object get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FoldLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$MapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldLambdaBinding:java.lang.Object get(java.lang.String)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$MapLambdaBinding:java.lang.Object get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FoldLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$MapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldLambdaBinding:java.lang.Object get(java.lang.String)"
        ]
    },
    "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryNotExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ParseLong:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$NvlFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayLengthFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$BivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MatchFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UpperFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FilterFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$RpadFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$MapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSimpleFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$FoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinAndExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConditionFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$flatten$0(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$IsNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubMonthFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayScalarFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraysFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ConcatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$TimestampFromEpochFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$UnivariateFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringToArrayFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinOrExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrposFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$SubstringFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$Round:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArrayPrependFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.UnaryMinusExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$LowerFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReplaceFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StringFormatFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.BinaryEvalOpExprBase:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$CaseSearchedFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$StrlenFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ArraySliceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$IsNotNullFunc:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunction$CartesianFoldLambdaBinding:java.lang.Object get(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$FoldLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.ApplyFunction$MapLambdaBinding:java.lang.Object get(java.lang.String)",
            "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.ExprEval eval(org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianFoldLambdaBinding:java.lang.Object get(java.lang.String)"
        ]
    },
    "org.apache.druid.math.expr.Parser$lambda_applyUnapplied_5__308:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.BinaryOpExprBase:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.ConstantExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.IdentifierExpr lambda$visit$0(org.apache.druid.math.expr.Expr$Shuttle,org.apache.druid.math.expr.IdentifierExpr)",
            "org.apache.druid.math.expr.IdentifierExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.UnaryExpr:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr$Shuttle)",
            "org.apache.druid.math.expr.ApplyFunctionExpr$visit__297:java.lang.Object apply(java.lang.Object)",
            "org.apache.druid.math.expr.FunctionExpr$visit__317:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.math.expr.antlr.ExprParser$UnaryOpExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.antlr.ExprParser$AddSubExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.antlr.ExprParser$LogicalAndOrExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.antlr.ExprParser$NestedExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.antlr.ExprParser$LogicalOpExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.antlr.ExprParser$MulDivModuloExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.antlr.ExprParser$PowOpExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.antlr.ExprParser$FunctionExprContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.antlr.ExprParser$LambdaContext:void exitRule(org.antlr.v4.runtime.tree.ParseTreeListener)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.partition.SingleDimensionShardSpec:boolean isInChunk(java.lang.String,java.lang.String,java.lang.String,org.apache.druid.data.input.InputRow)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:boolean isInChunk(org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:boolean isInChunk(org.apache.druid.data.input.InputRow)"
        ]
    },
    "org.apache.druid.timeline.partition.HashPartitioner$getDimension__360:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.JavaScriptParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createObjectTimestampParser$10(boolean,com.google.common.base.Function,com.google.common.base.Function,java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$3(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$2(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.java.util.common.guava.Sequences$apply__78:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec$lambda_isInChunk_1__358:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.JavaScriptParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createObjectTimestampParser$10(boolean,com.google.common.base.Function,com.google.common.base.Function,java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$3(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$2(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.java.util.common.guava.Sequences$apply__78:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.PartitionHolder:org.apache.druid.timeline.partition.PartitionChunk remove(org.apache.druid.timeline.partition.PartitionChunk)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionChunk remove(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.partition.PartitionChunk)"
        ]
    },
    "org.apache.druid.timeline.partition.PartitionHolder:org.apache.druid.timeline.partition.PartitionChunk getChunk(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.FilteringYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.DelegatingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator:void accumulateLastValue()"
        ]
    },
    "org.apache.druid.java.util.common.guava.SkippingSequence$SkippingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.FilteringYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.DelegatingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator:void accumulateLastValue()"
        ]
    },
    "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder access$100(org.apache.druid.common.guava.CombiningSequence,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator,boolean)"
        ]
    },
    "org.apache.druid.java.util.common.logger.Logger:void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.segment.loading.DataSegmentKiller:void killQuietly(org.apache.druid.timeline.DataSegment)",
            "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:boolean sendWithRetries(byte[],int,int,boolean)",
            "org.apache.druid.java.util.common.RetryUtils:void awaitNextRetry(java.lang.Throwable,java.lang.String,int,int,boolean)",
            "org.apache.druid.java.util.http.client.response.SequenceInputStreamResponseHandler:void exceptionCaught(org.apache.druid.java.util.http.client.response.ClientResponse,java.lang.Throwable)",
            "org.apache.druid.java.util.http.client.NettyHttpClient$1:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)"
        ]
    },
    "org.apache.druid.java.util.common.logger.Logger:void info(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)"
        ]
    },
    "org.apache.druid.java.util.common.logger.Logger:void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.LifecycleScope$1:java.lang.Object get()",
            "org.apache.druid.java.util.metrics.AllocationMetricCollectors:void <clinit>()",
            "org.apache.druid.java.util.emitter.core.LoggingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.logger.Logger:void warn(java.lang.String,java.lang.Throwable)",
            "org.apache.druid.java.util.common.io.NativeIO:void trySkipCache(int,long,long)",
            "org.apache.druid.java.util.common.io.NativeIO:void trySyncFileRange(int,long,long,int)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.RetryUtils:void awaitNextRetry(java.lang.Throwable,java.lang.String,int,int,boolean)",
            "org.apache.druid.java.util.http.client.response.SequenceInputStreamResponseHandler$1:java.io.InputStream nextElement()",
            "org.apache.druid.java.util.http.client.response.SequenceInputStreamResponseHandler:org.apache.druid.java.util.http.client.response.ClientResponse handleChunk(org.apache.druid.java.util.http.client.response.ClientResponse,org.jboss.netty.handler.codec.http.HttpChunk,long)",
            "org.apache.druid.java.util.http.client.response.SequenceInputStreamResponseHandler:org.apache.druid.java.util.http.client.response.ClientResponse done(org.apache.druid.java.util.http.client.response.ClientResponse)",
            "org.apache.druid.java.util.http.client.pool.ResourcePool$ImmediateCreationResourceHolder:void giveBack(java.lang.Object)",
            "org.apache.druid.java.util.http.client.NettyHttpClient$1:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.druid.java.util.http.client.NettyHttpClient$1:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.druid.common.guava.GuavaUtils:void lambda$cancelAll$0(boolean,java.util.concurrent.Future)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.common.config.ConfigManager:org.apache.druid.common.config.ConfigManager$SetResult set(java.lang.String,org.apache.druid.common.config.ConfigSerde,java.lang.Object)",
            "org.apache.druid.common.config.ConfigManager$1:org.apache.druid.common.config.ConfigManager$ConfigHolder call()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void close()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$1:void close()",
            "org.apache.druid.data.input.impl.RetryingInputStream:void waitOrThrow(java.lang.Throwable,int)",
            "org.apache.druid.data.input.impl.TimedShutoffInputSourceReader:void lambda$decorateShutdownTimeout$0(org.apache.druid.java.util.common.parsers.CloseableIterator)"
        ]
    },
    "org.apache.druid.java.util.common.logger.Logger:void error(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.cgroups.Memory:org.apache.druid.java.util.metrics.cgroups.Memory$MemoryStat snapshot()",
            "org.apache.druid.java.util.metrics.cgroups.CpuAcct:org.apache.druid.java.util.metrics.cgroups.CpuAcct$CpuAcctMetric snapshot()",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void <init>(org.apache.druid.java.util.metrics.SysMonitor)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.AllocationMetricCollector:long calculateDelta()",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void run()",
            "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:boolean sendWithRetries(byte[],int,int,boolean)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.HttpPostEmitter:void onSealExclusive(org.apache.druid.java.util.emitter.core.Batch,long)",
            "org.apache.druid.java.util.emitter.EmittingLogger:org.apache.druid.java.util.emitter.service.AlertBuilder makeAlert(java.lang.Throwable,java.lang.String,java.lang.Object[])",
            "org.apache.druid.java.util.emitter.EmittingLogger$EmittingAlertBuilder:void logIt(java.lang.String)",
            "org.apache.druid.java.util.common.logger.Logger:void error(java.lang.String,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$AnnotationBasedHandler:void stop()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$StartCloseHandler:void stop()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$2:void run()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$4:void run()",
            "org.apache.druid.java.util.http.client.response.SequenceInputStreamResponseHandler:org.apache.druid.java.util.http.client.response.ClientResponse handleResponse(org.jboss.netty.handler.codec.http.HttpResponse,org.apache.druid.java.util.http.client.response.HttpResponseHandler$TrafficCop)",
            "org.apache.druid.java.util.http.client.response.SequenceInputStreamResponseHandler:org.apache.druid.java.util.http.client.response.ClientResponse done(org.apache.druid.java.util.http.client.response.ClientResponse)",
            "org.apache.druid.math.expr.Parser:void <clinit>()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.collections.StupidPool:void impossibleOffsetFailed(java.lang.Object,org.apache.druid.collections.StupidPool$ObjectId,org.apache.druid.java.util.common.Cleaners$Cleanable,org.apache.druid.collections.StupidPool$ObjectLeakNotifier)",
            "org.apache.druid.collections.StupidPool$ObjectLeakNotifier:void run()",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()"
        ]
    },
    "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$2:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$3:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$1:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()",
            "org.apache.druid.java.util.common.concurrent.DirectExecutorService:void execute(java.lang.Runnable)",
            "org.apache.druid.common.config.Log4jShutdown:org.apache.logging.log4j.core.util.Cancellable addShutdownCallback(java.lang.Runnable)",
            "org.apache.druid.common.config.Log4jShutdown:void runCallbacks()",
            "org.apache.druid.common.config.Log4jShutdown$1:void run()"
        ]
    },
    "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$4:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$3:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$1:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()",
            "org.apache.druid.java.util.common.concurrent.DirectExecutorService:void execute(java.lang.Runnable)",
            "org.apache.druid.common.config.Log4jShutdown:org.apache.logging.log4j.core.util.Cancellable addShutdownCallback(java.lang.Runnable)",
            "org.apache.druid.common.config.Log4jShutdown:void runCallbacks()",
            "org.apache.druid.common.config.Log4jShutdown$1:void run()"
        ]
    },
    "org.apache.druid.java.util.metrics.ParametrizedUriEmitterMonitor:void lambda$doMonitor$2(org.apache.druid.java.util.emitter.service.ServiceEmitter,org.apache.druid.java.util.metrics.HttpPostEmitterMonitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.ParametrizedUriEmitterMonitor$lambda_doMonitor_2__45:void accept(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.metrics.CgroupMemoryMonitor$lambda_null_1__41:void accept(java.lang.Object,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.logger.Logger:void logException(java.util.function.BiConsumer,java.lang.Throwable,java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.emitter.EmittingLogger$EmittingAlertBuilder:void emit()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.emitter.EmittingLogger$EmittingAlertBuilder:void finalize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.EmittingLogger$EmittingAlertBuilder:void <init>(org.apache.druid.java.util.emitter.EmittingLogger,java.lang.Throwable,java.lang.String,org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.EmittingLogger$EmittingAlertBuilder:void <init>(org.apache.druid.java.util.emitter.EmittingLogger,java.lang.Throwable,java.lang.String,org.apache.druid.java.util.emitter.service.ServiceEmitter,org.apache.druid.java.util.emitter.EmittingLogger$1)"
        ]
    },
    "org.apache.druid.java.util.common.guava.WrappingYielder$1:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.SupplierProvider:java.lang.Object get()",
            "org.apache.druid.java.util.common.guava.SequenceWrapper:java.lang.Object wrap(com.google.common.base.Supplier)",
            "org.apache.druid.java.util.common.guava.LazySequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.LazySequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.math.expr.Parser:java.lang.Object lambda$withSuppliers$10(java.util.Map,java.lang.String)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarUnivariateMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.common.config.ConfigManager:void <init>(org.apache.druid.metadata.MetadataStorageConnector,com.google.common.base.Supplier,com.google.common.base.Supplier)",
            "org.apache.druid.common.config.ConfigManager:void start()",
            "org.apache.druid.collections.StupidPool:org.apache.druid.collections.StupidPool$ObjectResourceHolder makeObjectWithHandler()",
            "org.apache.druid.collections.DefaultBlockingPool:void <init>(com.google.common.base.Supplier,int)",
            "org.apache.druid.data.input.impl.RegexInputFormat:org.apache.druid.data.input.InputEntityReader createReader(org.apache.druid.data.input.InputRowSchema,org.apache.druid.data.input.InputEntity,java.io.File)"
        ]
    },
    "org.apache.druid.java.util.common.guava.MergeSequence$2:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.WrappingYielder$1:org.apache.druid.java.util.common.guava.Yielder get()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:boolean block()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.guava.MergeSequence$2:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.WrappingYielder:void close()",
            "org.apache.druid.java.util.common.guava.ConcatSequence$2:void close()",
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.guava.FilteredSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.guava.SkippingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.MergeSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.util.PriorityQueue,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.MergeSequence:java.util.PriorityQueue lambda$toYielder$1(java.util.PriorityQueue,org.apache.druid.java.util.common.guava.Sequence)",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$YielderBatchedResultsCursor:void close()",
            "org.apache.druid.java.util.common.guava.ExplodingSequence$1:void close()",
            "org.apache.druid.java.util.common.guava.LimitedSequence$LimitedYielder:void close()",
            "org.apache.druid.java.util.common.guava.YieldingSequenceBase:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(org.apache.druid.java.util.common.guava.Yielder,java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.guava.ConcatSequence:org.apache.druid.java.util.common.guava.Yielder wrapYielder(org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder toYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator)",
            "org.apache.druid.common.guava.CombiningSequence$1:void close()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.utils.CompressionUtils:long zip(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.JSONLowercaseParseSpec:org.apache.druid.java.util.common.parsers.Parser makeParser()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:void initializeParser()"
        ]
    },
    "org.apache.druid.data.input.impl.RegexParseSpec:org.apache.druid.java.util.common.parsers.Parser makeParser()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:void initializeParser()"
        ]
    },
    "org.apache.druid.java.util.common.parsers.DelimitedParser:void <init>(java.lang.String,java.lang.String,java.lang.Iterable,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.DelimitedParseSpec:org.apache.druid.java.util.common.parsers.Parser makeParser()"
        ]
    },
    "org.apache.druid.java.util.common.parsers.CSVParser:void <init>(java.lang.String,java.lang.Iterable,boolean,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.CSVParseSpec:org.apache.druid.java.util.common.parsers.Parser makeParser()"
        ]
    },
    "org.apache.druid.data.input.TextReader:org.apache.druid.java.util.common.parsers.CloseableIterator intermediateRowIterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.IntermediateRowParsingReader:org.apache.druid.java.util.common.parsers.CloseableIterator read()",
            "org.apache.druid.data.input.IntermediateRowParsingReader:org.apache.druid.java.util.common.parsers.CloseableIterator sample()"
        ]
    },
    "org.apache.druid.data.input.impl.StringInputRowParser:void startFileFromBeginning()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()"
        ]
    },
    "org.apache.druid.data.input.impl.InputEntityIteratingReader$lambda_sample_1__331:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapKeys$1(java.util.function.Function,java.util.Map,java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapValues$0(java.util.Map,java.util.function.Function,java.lang.Object,java.lang.Object)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec:boolean lambda$split$0(java.util.function.Function,java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.impl.InputEntityIteratingReader$lambda_read_0__330:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapKeys$1(java.util.function.Function,java.util.Map,java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapValues$0(java.util.Map,java.util.function.Function,java.lang.Object,java.lang.Object)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec:boolean lambda$split$0(java.util.function.Function,java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.ObjectFlatteners$lambda_create_0__50:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapKeys$1(java.util.function.Function,java.util.Map,java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapValues$0(java.util.Map,java.util.function.Function,java.lang.Object,java.lang.Object)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec:boolean lambda$split$0(java.util.function.Function,java.lang.Object)"
        ]
    },
    "org.apache.druid.guice.ConditionalMultibind:org.apache.druid.guice.ConditionalMultibind addConditionBinding(java.lang.String,java.lang.String,com.google.common.base.Predicate,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.ConditionalMultibind:org.apache.druid.guice.ConditionalMultibind addConditionBinding(java.lang.String,com.google.common.base.Predicate,java.lang.Class)"
        ]
    },
    "org.apache.druid.guice.ConditionalMultibind:boolean matchCondition(java.lang.String,com.google.common.base.Predicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.ConditionalMultibind:org.apache.druid.guice.ConditionalMultibind addConditionBinding(java.lang.String,com.google.common.base.Predicate,java.lang.Object)",
            "org.apache.druid.guice.ConditionalMultibind:org.apache.druid.guice.ConditionalMultibind addConditionBinding(java.lang.String,com.google.common.base.Predicate,com.google.inject.TypeLiteral)"
        ]
    },
    "org.apache.druid.java.util.common.RetryUtils:java.lang.Object retry(org.apache.druid.java.util.common.RetryUtils$Task,com.google.common.base.Predicate,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.RetryUtils:java.lang.Object retry(org.apache.druid.java.util.common.RetryUtils$Task,com.google.common.base.Predicate,int)"
        ]
    },
    "org.apache.druid.java.util.common.RetryUtils:java.lang.Object retry(org.apache.druid.java.util.common.RetryUtils$Task,com.google.common.base.Predicate,org.apache.druid.java.util.common.RetryUtils$CleanupAfterFailure,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.FileUtils:long copyLarge(java.lang.Object,org.apache.druid.data.input.impl.prefetch.ObjectOpenFunction,java.io.File,byte[],com.google.common.base.Predicate,int,java.lang.String)",
            "org.apache.druid.java.util.common.FileUtils:long copyLarge(java.io.InputStream,java.io.File,byte[],com.google.common.base.Predicate,int,java.lang.String)"
        ]
    },
    "org.apache.druid.data.input.impl.RetryingInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.RetryingInputStream:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.RetryingInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.io.NativeIO:void chunkedCopy(java.io.InputStream,java.io.File)"
        ]
    },
    "org.apache.druid.data.input.impl.RetryingInputStream:long skip(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.HttpEntity:java.io.InputStream openInputStream(java.net.URI,java.lang.String,org.apache.druid.metadata.PasswordProvider,long)"
        ]
    },
    "org.apache.druid.data.input.impl.RetryingInputStream:int available()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.collections.StupidPool:void <init>(java.lang.String,com.google.common.base.Supplier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult gunzip(com.google.common.io.ByteSource,java.io.File,com.google.common.base.Predicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult gunzip(com.google.common.io.ByteSource,java.io.File)"
        ]
    },
    "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult lambda$unzip$1(com.google.common.io.ByteSource,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CompressionUtils$lambda_unzip_1__97:java.lang.Object perform()"
        ]
    },
    "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult gzip(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult unzip(com.google.common.io.ByteSource,java.io.File,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.UnaryMinusExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor parseLong(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,int)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ulp$115(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ulp$114(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toRadians$113(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toRadians$112(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toDegrees$111(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toDegrees$110(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sqrt$109(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sqrt$108(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$signum$107(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$signum$106(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$rint$105(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$rint$104(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$nextUp$103(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$nextUp$102(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log1p$101(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log1p$100(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log10$99(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log10$98(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log$97(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log$96(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleInFunctionVectorProcessor lambda$getExponent$95(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$getExponent$94(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$expm1$93(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$expm1$92(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$exp$91(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$exp$90(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$floor$89(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$floor$88(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ceil$87(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ceil$86(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cbrt$85(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cbrt$84(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$abs$83(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$abs$82(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tanh$81(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tanh$80(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tan$79(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tan$78(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sinh$77(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sinh$76(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sin$75(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sin$74(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cot$73(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cot$72(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cosh$71(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cosh$70(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cos$69(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cos$68(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$atan$67(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$atan$66(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$asin$65(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$asin$64(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$acos$63(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$acos$62(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$scalb$61(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$scalb$60(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$scalb$59(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$scalb$58(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$nextAfter$57(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$nextAfter$56(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$nextAfter$55(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$nextAfter$54(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$remainder$53(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$remainder$52(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$remainder$51(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$remainder$50(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$hypot$49(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$hypot$48(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$hypot$47(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$hypot$46(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$copySign$45(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$copySign$44(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$copySign$43(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$copySign$42(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$atan2$41(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$atan2$40(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$atan2$39(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$atan2$38(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$min$37(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$min$36(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$min$35(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$min$34(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$max$33(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$max$32(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$max$31(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$max$30(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$power$29(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$power$28(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$power$27(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$power$26(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$negate$25(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$negate$24(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$modulo$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$modulo$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$modulo$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$modulo$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoublesInFunctionVectorProcessor lambda$longDivide$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleLongInFunctionVectorProcessor lambda$longDivide$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongDoubleInFunctionVectorProcessor lambda$longDivide$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$longDivide$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$divide$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$divide$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$divide$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$divide$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$multiply$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$multiply$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$multiply$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$multiply$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$minus$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$minus$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$minus$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$minus$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$plus$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$plus$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$plus$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$plus$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThan$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThan$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThan$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThan$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThanOrEqual$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThanOrEqual$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThanOrEqual$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThanOrEqual$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThan$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThan$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThan$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThan$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThanOrEqual$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThanOrEqual$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThanOrEqual$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThanOrEqual$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$notEqual$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$notEqual$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$notEqual$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$notEqual$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$equal$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$equal$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$equal$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$equal$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.Function$Abs:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Acos:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Asin:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Atan:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Cos:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Cosh:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Cot:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Sin:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Sinh:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Tan:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Tanh:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Cbrt:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Ceil:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Floor:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Exp:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Expm1:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Log:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Log10:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Log1p:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$NextUp:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Rint:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Signum:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Sqrt:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$ToDegrees:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$ToRadians:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Ulp:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$GetExponent:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.BinPlusExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor parseLong(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,int)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ulp$115(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ulp$114(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toRadians$113(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toRadians$112(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toDegrees$111(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toDegrees$110(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sqrt$109(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sqrt$108(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$signum$107(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$signum$106(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$rint$105(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$rint$104(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$nextUp$103(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$nextUp$102(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log1p$101(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log1p$100(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log10$99(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log10$98(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log$97(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log$96(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleInFunctionVectorProcessor lambda$getExponent$95(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$getExponent$94(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$expm1$93(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$expm1$92(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$exp$91(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$exp$90(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$floor$89(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$floor$88(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ceil$87(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ceil$86(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cbrt$85(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cbrt$84(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$abs$83(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$abs$82(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tanh$81(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tanh$80(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tan$79(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tan$78(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sinh$77(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sinh$76(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sin$75(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sin$74(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cot$73(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cot$72(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cosh$71(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cosh$70(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cos$69(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cos$68(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$atan$67(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$atan$66(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$asin$65(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$asin$64(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$acos$63(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$acos$62(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$scalb$61(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$scalb$60(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$scalb$59(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$scalb$58(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$nextAfter$57(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$nextAfter$56(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$nextAfter$55(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$nextAfter$54(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$remainder$53(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$remainder$52(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$remainder$51(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$remainder$50(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$hypot$49(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$hypot$48(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$hypot$47(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$hypot$46(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$copySign$45(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$copySign$44(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$copySign$43(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$copySign$42(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$atan2$41(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$atan2$40(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$atan2$39(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$atan2$38(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$min$37(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$min$36(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$min$35(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$min$34(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$max$33(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$max$32(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$max$31(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$max$30(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$power$29(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$power$28(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$power$27(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$power$26(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$negate$25(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$negate$24(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$modulo$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$modulo$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$modulo$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$modulo$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoublesInFunctionVectorProcessor lambda$longDivide$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleLongInFunctionVectorProcessor lambda$longDivide$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongDoubleInFunctionVectorProcessor lambda$longDivide$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$longDivide$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$divide$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$divide$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$divide$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$divide$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$multiply$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$multiply$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$multiply$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$multiply$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$minus$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$minus$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$minus$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$minus$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$plus$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$plus$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$plus$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$plus$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThan$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThan$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThan$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThan$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThanOrEqual$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThanOrEqual$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThanOrEqual$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThanOrEqual$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThan$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThan$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThan$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThan$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThanOrEqual$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThanOrEqual$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThanOrEqual$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThanOrEqual$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$notEqual$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$notEqual$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$notEqual$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$notEqual$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$equal$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$equal$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$equal$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$equal$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.BinMinusExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor parseLong(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,int)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ulp$115(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ulp$114(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toRadians$113(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toRadians$112(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toDegrees$111(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toDegrees$110(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sqrt$109(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sqrt$108(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$signum$107(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$signum$106(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$rint$105(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$rint$104(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$nextUp$103(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$nextUp$102(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log1p$101(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log1p$100(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log10$99(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log10$98(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log$97(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log$96(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleInFunctionVectorProcessor lambda$getExponent$95(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$getExponent$94(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$expm1$93(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$expm1$92(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$exp$91(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$exp$90(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$floor$89(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$floor$88(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ceil$87(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ceil$86(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cbrt$85(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cbrt$84(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$abs$83(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$abs$82(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tanh$81(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tanh$80(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tan$79(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tan$78(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sinh$77(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sinh$76(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sin$75(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sin$74(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cot$73(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cot$72(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cosh$71(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cosh$70(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cos$69(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cos$68(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$atan$67(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$atan$66(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$asin$65(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$asin$64(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$acos$63(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$acos$62(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$scalb$61(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$scalb$60(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$scalb$59(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$scalb$58(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$nextAfter$57(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$nextAfter$56(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$nextAfter$55(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$nextAfter$54(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$remainder$53(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$remainder$52(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$remainder$51(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$remainder$50(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$hypot$49(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$hypot$48(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$hypot$47(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$hypot$46(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$copySign$45(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$copySign$44(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$copySign$43(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$copySign$42(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$atan2$41(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$atan2$40(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$atan2$39(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$atan2$38(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$min$37(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$min$36(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$min$35(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$min$34(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$max$33(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$max$32(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$max$31(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$max$30(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$power$29(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$power$28(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$power$27(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$power$26(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$negate$25(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$negate$24(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$modulo$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$modulo$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$modulo$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$modulo$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoublesInFunctionVectorProcessor lambda$longDivide$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleLongInFunctionVectorProcessor lambda$longDivide$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongDoubleInFunctionVectorProcessor lambda$longDivide$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$longDivide$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$divide$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$divide$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$divide$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$divide$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$multiply$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$multiply$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$multiply$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$multiply$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$minus$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$minus$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$minus$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$minus$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$plus$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$plus$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$plus$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$plus$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThan$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThan$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThan$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThan$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThanOrEqual$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThanOrEqual$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThanOrEqual$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThanOrEqual$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThan$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThan$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThan$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThan$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThanOrEqual$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThanOrEqual$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThanOrEqual$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThanOrEqual$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$notEqual$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$notEqual$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$notEqual$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$notEqual$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$equal$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$equal$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$equal$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$equal$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.BinMulExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor parseLong(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,int)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ulp$115(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ulp$114(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toRadians$113(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toRadians$112(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toDegrees$111(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toDegrees$110(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sqrt$109(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sqrt$108(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$signum$107(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$signum$106(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$rint$105(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$rint$104(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$nextUp$103(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$nextUp$102(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log1p$101(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log1p$100(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log10$99(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log10$98(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log$97(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log$96(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleInFunctionVectorProcessor lambda$getExponent$95(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$getExponent$94(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$expm1$93(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$expm1$92(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$exp$91(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$exp$90(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$floor$89(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$floor$88(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ceil$87(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ceil$86(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cbrt$85(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cbrt$84(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$abs$83(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$abs$82(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tanh$81(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tanh$80(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tan$79(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tan$78(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sinh$77(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sinh$76(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sin$75(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sin$74(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cot$73(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cot$72(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cosh$71(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cosh$70(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cos$69(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cos$68(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$atan$67(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$atan$66(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$asin$65(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$asin$64(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$acos$63(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$acos$62(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$scalb$61(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$scalb$60(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$scalb$59(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$scalb$58(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$nextAfter$57(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$nextAfter$56(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$nextAfter$55(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$nextAfter$54(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$remainder$53(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$remainder$52(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$remainder$51(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$remainder$50(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$hypot$49(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$hypot$48(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$hypot$47(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$hypot$46(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$copySign$45(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$copySign$44(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$copySign$43(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$copySign$42(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$atan2$41(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$atan2$40(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$atan2$39(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$atan2$38(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$min$37(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$min$36(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$min$35(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$min$34(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$max$33(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$max$32(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$max$31(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$max$30(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$power$29(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$power$28(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$power$27(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$power$26(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$negate$25(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$negate$24(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$modulo$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$modulo$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$modulo$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$modulo$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoublesInFunctionVectorProcessor lambda$longDivide$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleLongInFunctionVectorProcessor lambda$longDivide$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongDoubleInFunctionVectorProcessor lambda$longDivide$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$longDivide$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$divide$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$divide$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$divide$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$divide$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$multiply$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$multiply$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$multiply$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$multiply$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$minus$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$minus$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$minus$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$minus$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$plus$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$plus$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$plus$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$plus$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThan$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThan$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThan$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThan$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThanOrEqual$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThanOrEqual$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThanOrEqual$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThanOrEqual$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThan$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThan$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThan$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThan$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThanOrEqual$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThanOrEqual$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThanOrEqual$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThanOrEqual$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$notEqual$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$notEqual$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$notEqual$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$notEqual$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$equal$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$equal$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$equal$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$equal$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.BinDivExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor parseLong(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,int)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ulp$115(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ulp$114(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toRadians$113(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toRadians$112(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toDegrees$111(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toDegrees$110(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sqrt$109(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sqrt$108(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$signum$107(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$signum$106(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$rint$105(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$rint$104(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$nextUp$103(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$nextUp$102(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log1p$101(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log1p$100(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log10$99(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log10$98(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log$97(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log$96(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleInFunctionVectorProcessor lambda$getExponent$95(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$getExponent$94(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$expm1$93(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$expm1$92(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$exp$91(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$exp$90(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$floor$89(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$floor$88(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ceil$87(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ceil$86(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cbrt$85(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cbrt$84(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$abs$83(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$abs$82(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tanh$81(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tanh$80(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tan$79(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tan$78(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sinh$77(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sinh$76(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sin$75(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sin$74(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cot$73(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cot$72(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cosh$71(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cosh$70(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cos$69(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cos$68(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$atan$67(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$atan$66(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$asin$65(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$asin$64(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$acos$63(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$acos$62(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$scalb$61(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$scalb$60(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$scalb$59(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$scalb$58(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$nextAfter$57(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$nextAfter$56(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$nextAfter$55(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$nextAfter$54(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$remainder$53(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$remainder$52(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$remainder$51(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$remainder$50(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$hypot$49(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$hypot$48(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$hypot$47(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$hypot$46(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$copySign$45(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$copySign$44(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$copySign$43(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$copySign$42(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$atan2$41(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$atan2$40(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$atan2$39(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$atan2$38(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$min$37(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$min$36(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$min$35(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$min$34(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$max$33(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$max$32(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$max$31(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$max$30(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$power$29(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$power$28(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$power$27(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$power$26(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$negate$25(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$negate$24(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$modulo$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$modulo$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$modulo$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$modulo$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoublesInFunctionVectorProcessor lambda$longDivide$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleLongInFunctionVectorProcessor lambda$longDivide$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongDoubleInFunctionVectorProcessor lambda$longDivide$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$longDivide$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$divide$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$divide$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$divide$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$divide$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$multiply$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$multiply$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$multiply$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$multiply$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$minus$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$minus$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$minus$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$minus$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$plus$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$plus$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$plus$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$plus$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThan$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThan$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThan$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThan$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThanOrEqual$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThanOrEqual$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThanOrEqual$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThanOrEqual$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThan$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThan$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThan$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThan$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThanOrEqual$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThanOrEqual$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThanOrEqual$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThanOrEqual$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$notEqual$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$notEqual$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$notEqual$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$notEqual$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$equal$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$equal$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$equal$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$equal$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.BinModuloExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor parseLong(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,int)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ulp$115(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ulp$114(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toRadians$113(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toRadians$112(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toDegrees$111(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toDegrees$110(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sqrt$109(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sqrt$108(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$signum$107(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$signum$106(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$rint$105(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$rint$104(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$nextUp$103(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$nextUp$102(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log1p$101(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log1p$100(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log10$99(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log10$98(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log$97(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log$96(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleInFunctionVectorProcessor lambda$getExponent$95(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$getExponent$94(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$expm1$93(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$expm1$92(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$exp$91(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$exp$90(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$floor$89(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$floor$88(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ceil$87(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ceil$86(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cbrt$85(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cbrt$84(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$abs$83(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$abs$82(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tanh$81(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tanh$80(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tan$79(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tan$78(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sinh$77(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sinh$76(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sin$75(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sin$74(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cot$73(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cot$72(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cosh$71(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cosh$70(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cos$69(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cos$68(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$atan$67(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$atan$66(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$asin$65(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$asin$64(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$acos$63(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$acos$62(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$scalb$61(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$scalb$60(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$scalb$59(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$scalb$58(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$nextAfter$57(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$nextAfter$56(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$nextAfter$55(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$nextAfter$54(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$remainder$53(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$remainder$52(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$remainder$51(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$remainder$50(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$hypot$49(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$hypot$48(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$hypot$47(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$hypot$46(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$copySign$45(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$copySign$44(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$copySign$43(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$copySign$42(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$atan2$41(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$atan2$40(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$atan2$39(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$atan2$38(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$min$37(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$min$36(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$min$35(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$min$34(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$max$33(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$max$32(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$max$31(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$max$30(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$power$29(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$power$28(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$power$27(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$power$26(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$negate$25(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$negate$24(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$modulo$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$modulo$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$modulo$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$modulo$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoublesInFunctionVectorProcessor lambda$longDivide$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleLongInFunctionVectorProcessor lambda$longDivide$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongDoubleInFunctionVectorProcessor lambda$longDivide$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$longDivide$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$divide$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$divide$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$divide$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$divide$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$multiply$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$multiply$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$multiply$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$multiply$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$minus$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$minus$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$minus$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$minus$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$plus$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$plus$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$plus$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$plus$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThan$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThan$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThan$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThan$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThanOrEqual$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThanOrEqual$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThanOrEqual$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThanOrEqual$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThan$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThan$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThan$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThan$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThanOrEqual$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThanOrEqual$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThanOrEqual$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThanOrEqual$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$notEqual$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$notEqual$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$notEqual$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$notEqual$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$equal$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$equal$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$equal$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$equal$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.BinPowExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor parseLong(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,int)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ulp$115(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ulp$114(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toRadians$113(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toRadians$112(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toDegrees$111(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toDegrees$110(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sqrt$109(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sqrt$108(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$signum$107(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$signum$106(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$rint$105(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$rint$104(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$nextUp$103(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$nextUp$102(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log1p$101(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log1p$100(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log10$99(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log10$98(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log$97(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log$96(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleInFunctionVectorProcessor lambda$getExponent$95(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$getExponent$94(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$expm1$93(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$expm1$92(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$exp$91(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$exp$90(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$floor$89(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$floor$88(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ceil$87(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ceil$86(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cbrt$85(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cbrt$84(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$abs$83(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$abs$82(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tanh$81(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tanh$80(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tan$79(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tan$78(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sinh$77(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sinh$76(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sin$75(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sin$74(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cot$73(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cot$72(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cosh$71(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cosh$70(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cos$69(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cos$68(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$atan$67(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$atan$66(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$asin$65(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$asin$64(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$acos$63(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$acos$62(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$scalb$61(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$scalb$60(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$scalb$59(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$scalb$58(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$nextAfter$57(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$nextAfter$56(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$nextAfter$55(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$nextAfter$54(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$remainder$53(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$remainder$52(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$remainder$51(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$remainder$50(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$hypot$49(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$hypot$48(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$hypot$47(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$hypot$46(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$copySign$45(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$copySign$44(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$copySign$43(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$copySign$42(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$atan2$41(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$atan2$40(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$atan2$39(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$atan2$38(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$min$37(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$min$36(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$min$35(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$min$34(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$max$33(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$max$32(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$max$31(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$max$30(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$power$29(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$power$28(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$power$27(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$power$26(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$negate$25(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$negate$24(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$modulo$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$modulo$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$modulo$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$modulo$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoublesInFunctionVectorProcessor lambda$longDivide$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleLongInFunctionVectorProcessor lambda$longDivide$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongDoubleInFunctionVectorProcessor lambda$longDivide$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$longDivide$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$divide$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$divide$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$divide$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$divide$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$multiply$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$multiply$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$multiply$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$multiply$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$minus$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$minus$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$minus$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$minus$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$plus$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$plus$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$plus$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$plus$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThan$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThan$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThan$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThan$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThanOrEqual$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThanOrEqual$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThanOrEqual$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThanOrEqual$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThan$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThan$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThan$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThan$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThanOrEqual$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThanOrEqual$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThanOrEqual$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThanOrEqual$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$notEqual$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$notEqual$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$notEqual$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$notEqual$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$equal$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$equal$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$equal$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$equal$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.Function$Max:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Min:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.BinEqExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor parseLong(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,int)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ulp$115(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ulp$114(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toRadians$113(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toRadians$112(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toDegrees$111(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toDegrees$110(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sqrt$109(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sqrt$108(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$signum$107(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$signum$106(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$rint$105(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$rint$104(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$nextUp$103(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$nextUp$102(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log1p$101(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log1p$100(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log10$99(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log10$98(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log$97(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log$96(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleInFunctionVectorProcessor lambda$getExponent$95(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$getExponent$94(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$expm1$93(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$expm1$92(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$exp$91(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$exp$90(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$floor$89(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$floor$88(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ceil$87(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ceil$86(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cbrt$85(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cbrt$84(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$abs$83(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$abs$82(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tanh$81(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tanh$80(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tan$79(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tan$78(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sinh$77(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sinh$76(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sin$75(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sin$74(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cot$73(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cot$72(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cosh$71(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cosh$70(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cos$69(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cos$68(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$atan$67(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$atan$66(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$asin$65(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$asin$64(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$acos$63(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$acos$62(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$scalb$61(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$scalb$60(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$scalb$59(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$scalb$58(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$nextAfter$57(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$nextAfter$56(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$nextAfter$55(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$nextAfter$54(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$remainder$53(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$remainder$52(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$remainder$51(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$remainder$50(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$hypot$49(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$hypot$48(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$hypot$47(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$hypot$46(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$copySign$45(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$copySign$44(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$copySign$43(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$copySign$42(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$atan2$41(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$atan2$40(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$atan2$39(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$atan2$38(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$min$37(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$min$36(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$min$35(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$min$34(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$max$33(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$max$32(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$max$31(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$max$30(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$power$29(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$power$28(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$power$27(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$power$26(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$negate$25(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$negate$24(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$modulo$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$modulo$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$modulo$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$modulo$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoublesInFunctionVectorProcessor lambda$longDivide$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleLongInFunctionVectorProcessor lambda$longDivide$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongDoubleInFunctionVectorProcessor lambda$longDivide$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$longDivide$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$divide$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$divide$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$divide$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$divide$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$multiply$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$multiply$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$multiply$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$multiply$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$minus$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$minus$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$minus$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$minus$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$plus$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$plus$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$plus$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$plus$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThan$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThan$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThan$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThan$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThanOrEqual$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThanOrEqual$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThanOrEqual$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThanOrEqual$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThan$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThan$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThan$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThan$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThanOrEqual$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThanOrEqual$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThanOrEqual$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThanOrEqual$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$notEqual$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$notEqual$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$notEqual$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$notEqual$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$equal$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$equal$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$equal$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$equal$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.BinNeqExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor parseLong(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,int)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ulp$115(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ulp$114(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toRadians$113(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toRadians$112(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toDegrees$111(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toDegrees$110(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sqrt$109(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sqrt$108(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$signum$107(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$signum$106(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$rint$105(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$rint$104(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$nextUp$103(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$nextUp$102(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log1p$101(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log1p$100(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log10$99(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log10$98(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log$97(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log$96(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleInFunctionVectorProcessor lambda$getExponent$95(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$getExponent$94(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$expm1$93(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$expm1$92(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$exp$91(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$exp$90(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$floor$89(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$floor$88(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ceil$87(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ceil$86(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cbrt$85(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cbrt$84(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$abs$83(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$abs$82(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tanh$81(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tanh$80(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tan$79(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tan$78(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sinh$77(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sinh$76(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sin$75(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sin$74(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cot$73(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cot$72(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cosh$71(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cosh$70(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cos$69(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cos$68(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$atan$67(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$atan$66(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$asin$65(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$asin$64(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$acos$63(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$acos$62(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$scalb$61(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$scalb$60(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$scalb$59(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$scalb$58(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$nextAfter$57(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$nextAfter$56(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$nextAfter$55(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$nextAfter$54(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$remainder$53(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$remainder$52(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$remainder$51(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$remainder$50(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$hypot$49(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$hypot$48(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$hypot$47(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$hypot$46(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$copySign$45(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$copySign$44(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$copySign$43(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$copySign$42(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$atan2$41(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$atan2$40(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$atan2$39(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$atan2$38(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$min$37(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$min$36(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$min$35(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$min$34(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$max$33(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$max$32(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$max$31(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$max$30(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$power$29(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$power$28(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$power$27(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$power$26(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$negate$25(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$negate$24(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$modulo$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$modulo$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$modulo$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$modulo$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoublesInFunctionVectorProcessor lambda$longDivide$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleLongInFunctionVectorProcessor lambda$longDivide$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongDoubleInFunctionVectorProcessor lambda$longDivide$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$longDivide$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$divide$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$divide$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$divide$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$divide$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$multiply$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$multiply$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$multiply$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$multiply$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$minus$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$minus$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$minus$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$minus$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$plus$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$plus$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$plus$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$plus$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThan$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThan$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThan$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThan$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThanOrEqual$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThanOrEqual$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThanOrEqual$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThanOrEqual$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThan$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThan$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThan$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThan$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThanOrEqual$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThanOrEqual$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThanOrEqual$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThanOrEqual$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$notEqual$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$notEqual$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$notEqual$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$notEqual$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$equal$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$equal$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$equal$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$equal$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.BinGeqExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor parseLong(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,int)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ulp$115(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ulp$114(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toRadians$113(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toRadians$112(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toDegrees$111(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toDegrees$110(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sqrt$109(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sqrt$108(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$signum$107(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$signum$106(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$rint$105(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$rint$104(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$nextUp$103(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$nextUp$102(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log1p$101(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log1p$100(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log10$99(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log10$98(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log$97(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log$96(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleInFunctionVectorProcessor lambda$getExponent$95(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$getExponent$94(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$expm1$93(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$expm1$92(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$exp$91(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$exp$90(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$floor$89(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$floor$88(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ceil$87(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ceil$86(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cbrt$85(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cbrt$84(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$abs$83(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$abs$82(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tanh$81(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tanh$80(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tan$79(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tan$78(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sinh$77(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sinh$76(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sin$75(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sin$74(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cot$73(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cot$72(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cosh$71(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cosh$70(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cos$69(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cos$68(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$atan$67(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$atan$66(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$asin$65(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$asin$64(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$acos$63(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$acos$62(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$scalb$61(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$scalb$60(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$scalb$59(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$scalb$58(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$nextAfter$57(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$nextAfter$56(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$nextAfter$55(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$nextAfter$54(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$remainder$53(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$remainder$52(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$remainder$51(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$remainder$50(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$hypot$49(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$hypot$48(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$hypot$47(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$hypot$46(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$copySign$45(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$copySign$44(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$copySign$43(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$copySign$42(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$atan2$41(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$atan2$40(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$atan2$39(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$atan2$38(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$min$37(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$min$36(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$min$35(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$min$34(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$max$33(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$max$32(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$max$31(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$max$30(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$power$29(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$power$28(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$power$27(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$power$26(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$negate$25(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$negate$24(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$modulo$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$modulo$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$modulo$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$modulo$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoublesInFunctionVectorProcessor lambda$longDivide$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleLongInFunctionVectorProcessor lambda$longDivide$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongDoubleInFunctionVectorProcessor lambda$longDivide$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$longDivide$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$divide$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$divide$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$divide$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$divide$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$multiply$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$multiply$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$multiply$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$multiply$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$minus$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$minus$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$minus$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$minus$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$plus$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$plus$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$plus$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$plus$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThan$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThan$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThan$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThan$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThanOrEqual$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThanOrEqual$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThanOrEqual$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThanOrEqual$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThan$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThan$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThan$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThan$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThanOrEqual$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThanOrEqual$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThanOrEqual$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThanOrEqual$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$notEqual$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$notEqual$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$notEqual$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$notEqual$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$equal$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$equal$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$equal$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$equal$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.BinGtExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor parseLong(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,int)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ulp$115(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ulp$114(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toRadians$113(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toRadians$112(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toDegrees$111(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toDegrees$110(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sqrt$109(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sqrt$108(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$signum$107(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$signum$106(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$rint$105(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$rint$104(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$nextUp$103(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$nextUp$102(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log1p$101(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log1p$100(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log10$99(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log10$98(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log$97(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log$96(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleInFunctionVectorProcessor lambda$getExponent$95(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$getExponent$94(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$expm1$93(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$expm1$92(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$exp$91(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$exp$90(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$floor$89(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$floor$88(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ceil$87(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ceil$86(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cbrt$85(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cbrt$84(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$abs$83(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$abs$82(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tanh$81(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tanh$80(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tan$79(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tan$78(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sinh$77(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sinh$76(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sin$75(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sin$74(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cot$73(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cot$72(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cosh$71(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cosh$70(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cos$69(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cos$68(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$atan$67(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$atan$66(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$asin$65(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$asin$64(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$acos$63(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$acos$62(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$scalb$61(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$scalb$60(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$scalb$59(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$scalb$58(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$nextAfter$57(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$nextAfter$56(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$nextAfter$55(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$nextAfter$54(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$remainder$53(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$remainder$52(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$remainder$51(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$remainder$50(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$hypot$49(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$hypot$48(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$hypot$47(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$hypot$46(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$copySign$45(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$copySign$44(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$copySign$43(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$copySign$42(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$atan2$41(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$atan2$40(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$atan2$39(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$atan2$38(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$min$37(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$min$36(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$min$35(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$min$34(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$max$33(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$max$32(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$max$31(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$max$30(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$power$29(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$power$28(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$power$27(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$power$26(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$negate$25(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$negate$24(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$modulo$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$modulo$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$modulo$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$modulo$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoublesInFunctionVectorProcessor lambda$longDivide$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleLongInFunctionVectorProcessor lambda$longDivide$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongDoubleInFunctionVectorProcessor lambda$longDivide$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$longDivide$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$divide$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$divide$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$divide$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$divide$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$multiply$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$multiply$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$multiply$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$multiply$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$minus$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$minus$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$minus$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$minus$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$plus$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$plus$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$plus$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$plus$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThan$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThan$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThan$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThan$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThanOrEqual$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThanOrEqual$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThanOrEqual$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThanOrEqual$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThan$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThan$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThan$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThan$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThanOrEqual$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThanOrEqual$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThanOrEqual$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThanOrEqual$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$notEqual$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$notEqual$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$notEqual$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$notEqual$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$equal$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$equal$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$equal$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$equal$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.BinLeqExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor parseLong(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,int)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ulp$115(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ulp$114(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toRadians$113(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toRadians$112(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toDegrees$111(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toDegrees$110(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sqrt$109(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sqrt$108(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$signum$107(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$signum$106(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$rint$105(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$rint$104(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$nextUp$103(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$nextUp$102(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log1p$101(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log1p$100(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log10$99(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log10$98(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log$97(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log$96(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleInFunctionVectorProcessor lambda$getExponent$95(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$getExponent$94(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$expm1$93(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$expm1$92(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$exp$91(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$exp$90(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$floor$89(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$floor$88(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ceil$87(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ceil$86(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cbrt$85(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cbrt$84(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$abs$83(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$abs$82(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tanh$81(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tanh$80(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tan$79(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tan$78(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sinh$77(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sinh$76(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sin$75(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sin$74(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cot$73(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cot$72(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cosh$71(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cosh$70(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cos$69(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cos$68(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$atan$67(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$atan$66(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$asin$65(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$asin$64(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$acos$63(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$acos$62(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$scalb$61(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$scalb$60(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$scalb$59(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$scalb$58(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$nextAfter$57(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$nextAfter$56(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$nextAfter$55(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$nextAfter$54(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$remainder$53(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$remainder$52(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$remainder$51(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$remainder$50(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$hypot$49(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$hypot$48(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$hypot$47(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$hypot$46(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$copySign$45(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$copySign$44(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$copySign$43(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$copySign$42(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$atan2$41(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$atan2$40(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$atan2$39(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$atan2$38(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$min$37(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$min$36(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$min$35(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$min$34(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$max$33(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$max$32(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$max$31(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$max$30(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$power$29(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$power$28(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$power$27(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$power$26(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$negate$25(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$negate$24(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$modulo$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$modulo$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$modulo$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$modulo$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoublesInFunctionVectorProcessor lambda$longDivide$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleLongInFunctionVectorProcessor lambda$longDivide$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongDoubleInFunctionVectorProcessor lambda$longDivide$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$longDivide$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$divide$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$divide$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$divide$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$divide$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$multiply$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$multiply$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$multiply$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$multiply$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$minus$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$minus$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$minus$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$minus$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$plus$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$plus$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$plus$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$plus$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThan$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThan$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThan$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThan$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThanOrEqual$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThanOrEqual$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThanOrEqual$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThanOrEqual$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThan$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThan$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThan$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThan$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThanOrEqual$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThanOrEqual$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThanOrEqual$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThanOrEqual$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$notEqual$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$notEqual$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$notEqual$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$notEqual$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$equal$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$equal$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$equal$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$equal$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.BinLtExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor parseLong(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,int)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ulp$115(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ulp$114(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toRadians$113(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toRadians$112(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toDegrees$111(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toDegrees$110(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sqrt$109(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sqrt$108(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$signum$107(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$signum$106(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$rint$105(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$rint$104(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$nextUp$103(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$nextUp$102(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log1p$101(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log1p$100(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log10$99(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log10$98(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log$97(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log$96(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleInFunctionVectorProcessor lambda$getExponent$95(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$getExponent$94(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$expm1$93(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$expm1$92(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$exp$91(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$exp$90(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$floor$89(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$floor$88(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ceil$87(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ceil$86(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cbrt$85(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cbrt$84(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$abs$83(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$abs$82(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tanh$81(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tanh$80(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tan$79(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tan$78(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sinh$77(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sinh$76(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sin$75(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sin$74(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cot$73(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cot$72(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cosh$71(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cosh$70(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cos$69(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cos$68(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$atan$67(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$atan$66(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$asin$65(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$asin$64(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$acos$63(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$acos$62(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$scalb$61(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$scalb$60(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$scalb$59(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$scalb$58(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$nextAfter$57(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$nextAfter$56(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$nextAfter$55(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$nextAfter$54(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$remainder$53(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$remainder$52(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$remainder$51(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$remainder$50(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$hypot$49(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$hypot$48(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$hypot$47(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$hypot$46(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$copySign$45(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$copySign$44(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$copySign$43(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$copySign$42(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$atan2$41(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$atan2$40(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$atan2$39(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$atan2$38(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$min$37(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$min$36(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$min$35(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$min$34(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$max$33(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$max$32(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$max$31(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$max$30(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$power$29(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$power$28(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$power$27(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$power$26(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$negate$25(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$negate$24(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$modulo$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$modulo$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$modulo$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$modulo$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoublesInFunctionVectorProcessor lambda$longDivide$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleLongInFunctionVectorProcessor lambda$longDivide$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongDoubleInFunctionVectorProcessor lambda$longDivide$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$longDivide$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$divide$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$divide$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$divide$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$divide$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$multiply$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$multiply$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$multiply$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$multiply$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$minus$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$minus$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$minus$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$minus$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$plus$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$plus$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$plus$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$plus$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThan$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThan$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThan$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThan$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThanOrEqual$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThanOrEqual$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThanOrEqual$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThanOrEqual$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThan$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThan$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThan$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThan$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThanOrEqual$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThanOrEqual$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThanOrEqual$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThanOrEqual$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$notEqual$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$notEqual$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$notEqual$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$notEqual$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$equal$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$equal$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$equal$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$equal$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.Function$Atan2:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$CopySign:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Hypot:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Remainder:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$NextAfter:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Scalb:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Function$Div:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor parseLong(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,int)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ulp$115(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ulp$114(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toRadians$113(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toRadians$112(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toDegrees$111(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toDegrees$110(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sqrt$109(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sqrt$108(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$signum$107(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$signum$106(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$rint$105(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$rint$104(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$nextUp$103(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$nextUp$102(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log1p$101(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log1p$100(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log10$99(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log10$98(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log$97(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log$96(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleInFunctionVectorProcessor lambda$getExponent$95(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$getExponent$94(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$expm1$93(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$expm1$92(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$exp$91(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$exp$90(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$floor$89(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$floor$88(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ceil$87(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ceil$86(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cbrt$85(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cbrt$84(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$abs$83(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$abs$82(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tanh$81(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tanh$80(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tan$79(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tan$78(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sinh$77(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sinh$76(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sin$75(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sin$74(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cot$73(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cot$72(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cosh$71(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cosh$70(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cos$69(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cos$68(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$atan$67(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$atan$66(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$asin$65(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$asin$64(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$acos$63(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$acos$62(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$scalb$61(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$scalb$60(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$scalb$59(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$scalb$58(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$nextAfter$57(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$nextAfter$56(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$nextAfter$55(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$nextAfter$54(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$remainder$53(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$remainder$52(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$remainder$51(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$remainder$50(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$hypot$49(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$hypot$48(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$hypot$47(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$hypot$46(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$copySign$45(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$copySign$44(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$copySign$43(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$copySign$42(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$atan2$41(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$atan2$40(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$atan2$39(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$atan2$38(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$min$37(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$min$36(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$min$35(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$min$34(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$max$33(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$max$32(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$max$31(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$max$30(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$power$29(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$power$28(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$power$27(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$power$26(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$negate$25(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$negate$24(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$modulo$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$modulo$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$modulo$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$modulo$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoublesInFunctionVectorProcessor lambda$longDivide$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleLongInFunctionVectorProcessor lambda$longDivide$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongDoubleInFunctionVectorProcessor lambda$longDivide$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$longDivide$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$divide$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$divide$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$divide$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$divide$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$multiply$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$multiply$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$multiply$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$multiply$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$minus$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$minus$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$minus$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$minus$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$plus$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$plus$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$plus$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$plus$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThan$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThan$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThan$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThan$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThanOrEqual$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThanOrEqual$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThanOrEqual$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThanOrEqual$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThan$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThan$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThan$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThan$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThanOrEqual$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThanOrEqual$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThanOrEqual$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThanOrEqual$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$notEqual$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$notEqual$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$notEqual$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$notEqual$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$equal$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$equal$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$equal$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$equal$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunctionExpr:boolean lambda$canVectorize$0(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.LambdaExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:boolean lambda$canVectorize$0(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.UnaryMinusExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.UnaryMinusExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:boolean lambda$canVectorize$0(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.UnaryMinusExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.Function$CastFunc:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr parse(java.lang.String,org.apache.druid.math.expr.ExprMacroTable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.parsers.DelimitedParser:void <init>(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.parsers.CSVParser:void <init>(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.partition.HashPartitioner:org.apache.druid.timeline.partition.ShardSpec lambda$createHashLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:void transitAtomicUpdateGroupState(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State,org.apache.druid.timeline.partition.OvershadowableManager$State)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager:void moveNewStandbyToVisibleIfNecessary(org.apache.druid.timeline.partition.AtomicUpdateGroup,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:void lambda$determineVisibleGroupAfterRemove$20(org.apache.druid.timeline.partition.AtomicUpdateGroup)",
            "org.apache.druid.timeline.partition.OvershadowableManager:void lambda$determineVisibleGroupAfterRemove$19(org.apache.druid.timeline.partition.AtomicUpdateGroup)",
            "org.apache.druid.timeline.partition.OvershadowableManager:void lambda$determineVisibleGroupAfterRemove$16(org.apache.druid.timeline.partition.AtomicUpdateGroup)",
            "org.apache.druid.timeline.partition.OvershadowableManager:void lambda$moveNewStandbyToVisibleIfNecessary$11(org.apache.druid.timeline.partition.AtomicUpdateGroup)",
            "org.apache.druid.timeline.partition.OvershadowableManager:void lambda$moveNewStandbyToVisibleIfNecessary$10(org.apache.druid.timeline.partition.AtomicUpdateGroup)",
            "org.apache.druid.timeline.partition.OvershadowableManager:void lambda$moveNewStandbyToVisibleIfNecessary$9(org.apache.druid.timeline.partition.AtomicUpdateGroup)",
            "org.apache.druid.timeline.partition.OvershadowableManager:void lambda$replaceVisibleWith$7(org.apache.druid.timeline.partition.OvershadowableManager$State,org.apache.druid.timeline.partition.AtomicUpdateGroup)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:void lambda$replaceVisibleWith$8(org.apache.druid.timeline.partition.OvershadowableManager$State,org.apache.druid.timeline.partition.AtomicUpdateGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager$lambda_replaceVisibleWith_8__367:void accept(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.TimestampParser$lambda_createObjectTimestampParser_10__73:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.JavaScriptParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createObjectTimestampParser$10(boolean,com.google.common.base.Function,com.google.common.base.Function,java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$3(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$2(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.java.util.common.guava.Sequences$apply__78:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.TimestampParser$lambda_createTimestampParser_3__65:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.JavaScriptParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createObjectTimestampParser$10(boolean,com.google.common.base.Function,com.google.common.base.Function,java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$3(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$2(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.java.util.common.guava.Sequences$apply__78:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.TimestampParser$lambda_createTimestampParser_2__63:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.JavaScriptParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createObjectTimestampParser$10(boolean,com.google.common.base.Function,com.google.common.base.Function,java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$3(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$2(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.java.util.common.guava.Sequences$apply__78:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.DataSegment:org.apache.druid.timeline.DataSegment withLoadSpec(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.DataSegment:org.apache.druid.timeline.DataSegment withDimensions(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.DataSegment:org.apache.druid.timeline.DataSegment withMetrics(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.DataSegment:org.apache.druid.timeline.DataSegment withShardSpec(org.apache.druid.timeline.partition.ShardSpec)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.DataSegment:org.apache.druid.timeline.DataSegment withSize(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.DataSegment:org.apache.druid.timeline.DataSegment withVersion(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.DataSegment:org.apache.druid.timeline.DataSegment withBinaryVersion(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.DataSegment:org.apache.druid.timeline.DataSegment withLastCompactionState(org.apache.druid.timeline.CompactionState)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.metrics.JvmMonitor:org.apache.druid.java.util.metrics.JvmMonitor$GcCounters tryCreateGcCounters()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor:void <init>(java.util.Map,java.lang.String,org.apache.druid.java.util.metrics.PidDiscoverer)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.TimestampParser$lambda_createTimestampParser_0__67:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.JavaScriptParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createObjectTimestampParser$10(boolean,com.google.common.base.Function,com.google.common.base.Function,java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$3(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$2(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.java.util.common.guava.Sequences$apply__78:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.RangeBucketShardSpec:boolean isInChunk(org.apache.druid.data.input.InputRow)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)"
        ]
    },
    "org.apache.druid.timeline.partition.SingleDimensionShardSpec:boolean isInChunk(org.apache.druid.data.input.InputRow)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)"
        ]
    },
    "org.apache.druid.common.guava.CombiningSequence:org.apache.druid.java.util.common.guava.Yielder access$100(org.apache.druid.common.guava.CombiningSequence,org.apache.druid.java.util.common.guava.Yielder,org.apache.druid.common.guava.CombiningSequence$CombiningYieldingAccumulator,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.common.guava.CombiningSequence$1:org.apache.druid.java.util.common.guava.Yielder next(java.lang.Object)"
        ]
    },
    "org.apache.druid.segment.loading.DataSegmentKiller:void killQuietly(org.apache.druid.timeline.DataSegment)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:boolean sendWithRetries(byte[],int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void emit(org.apache.druid.java.util.emitter.core.Batch)",
            "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void emitLargeEvent(byte[])",
            "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void tryEmitOneFailedBuffer()",
            "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void tryEmitAndDrainAllFailedBuffers()"
        ]
    },
    "org.apache.druid.java.util.common.RetryUtils:void awaitNextRetry(java.lang.Throwable,java.lang.String,int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.RetryUtils:java.lang.Object retry(org.apache.druid.java.util.common.RetryUtils$Task,com.google.common.base.Predicate,int,int,org.apache.druid.java.util.common.RetryUtils$CleanupAfterFailure,java.lang.String)",
            "org.apache.druid.data.input.impl.RetryingInputStream:void waitOrThrow(java.lang.Throwable,int)"
        ]
    },
    "org.apache.druid.java.util.http.client.response.SequenceInputStreamResponseHandler:void exceptionCaught(org.apache.druid.java.util.http.client.response.ClientResponse,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.http.client.NettyHttpClient$1:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.druid.java.util.http.client.NettyHttpClient$1:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)"
        ]
    },
    "org.apache.druid.java.util.http.client.NettyHttpClient$1:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.metrics.AllocationMetricCollectors:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor:void <init>(java.util.Map,java.lang.String,org.apache.druid.java.util.metrics.PidDiscoverer)",
            "org.apache.druid.java.util.metrics.AllocationMetricCollectors:org.apache.druid.java.util.metrics.AllocationMetricCollector getAllocationMetricCollector()",
            "org.apache.druid.java.util.metrics.AllocationMetricCollectors:void <clinit>()"
        ]
    },
    "org.apache.druid.java.util.emitter.core.LoggingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.service.ServiceEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)"
        ]
    },
    "org.apache.druid.java.util.common.logger.Logger:void warn(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.io.NativeIO:void trySkipCache(int,long,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.io.NativeIO:void chunkedCopy(java.io.InputStream,java.io.File)"
        ]
    },
    "org.apache.druid.java.util.common.io.NativeIO:void trySyncFileRange(int,long,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.io.NativeIO:void chunkedCopy(java.io.InputStream,java.io.File)"
        ]
    },
    "org.apache.druid.java.util.http.client.response.SequenceInputStreamResponseHandler$1:java.io.InputStream nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.http.client.response.SequenceInputStreamResponseHandler$1:java.lang.Object nextElement()"
        ]
    },
    "org.apache.druid.java.util.http.client.response.SequenceInputStreamResponseHandler:org.apache.druid.java.util.http.client.response.ClientResponse done(org.apache.druid.java.util.http.client.response.ClientResponse)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.http.client.NettyHttpClient$1:void finishRequest()"
        ]
    },
    "org.apache.druid.java.util.http.client.pool.ResourcePool$ImmediateCreationResourceHolder:void giveBack(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.http.client.pool.ResourcePool$2:void returnResource()"
        ]
    },
    "org.apache.druid.common.guava.GuavaUtils:void lambda$cancelAll$0(boolean,java.util.concurrent.Future)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.common.guava.GuavaUtils$lambda_cancelAll_0__238:void accept(java.lang.Object)"
        ]
    },
    "org.apache.druid.common.config.ConfigManager:org.apache.druid.common.config.ConfigManager$SetResult set(java.lang.String,org.apache.druid.common.config.ConfigSerde,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.common.config.JacksonConfigManager:org.apache.druid.common.config.ConfigManager$SetResult set(java.lang.String,java.lang.Object,org.apache.druid.audit.AuditInfo)"
        ]
    },
    "org.apache.druid.common.config.ConfigManager$1:org.apache.druid.common.config.ConfigManager$ConfigHolder call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.common.config.ConfigManager$1:java.lang.Object call()"
        ]
    },
    "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void <init>(org.apache.druid.java.util.metrics.SysMonitor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void <init>(org.apache.druid.java.util.metrics.SysMonitor,org.apache.druid.java.util.metrics.SysMonitor$1)"
        ]
    },
    "org.apache.druid.java.util.metrics.AllocationMetricCollector:long calculateDelta()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitThreadAllocationMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)"
        ]
    },
    "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.HttpPostEmitter:void start()",
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$3:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$1:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()",
            "org.apache.druid.java.util.common.concurrent.DirectExecutorService:void execute(java.lang.Runnable)",
            "org.apache.druid.common.config.Log4jShutdown:org.apache.logging.log4j.core.util.Cancellable addShutdownCallback(java.lang.Runnable)",
            "org.apache.druid.common.config.Log4jShutdown:void runCallbacks()",
            "org.apache.druid.common.config.Log4jShutdown$1:void run()"
        ]
    },
    "org.apache.druid.java.util.emitter.core.HttpPostEmitter:void onSealExclusive(org.apache.druid.java.util.emitter.core.Batch,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.Batch:boolean tryReleaseShared(long)"
        ]
    },
    "org.apache.druid.java.util.emitter.EmittingLogger:org.apache.druid.java.util.emitter.service.AlertBuilder makeAlert(java.lang.Throwable,java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.EmittingLogger:org.apache.druid.java.util.emitter.service.AlertBuilder makeAlert(java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.druid.java.util.emitter.EmittingLogger$EmittingAlertBuilder:void logIt(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.EmittingLogger$EmittingAlertBuilder:void emit()",
            "org.apache.druid.java.util.emitter.EmittingLogger$EmittingAlertBuilder:void finalize()"
        ]
    },
    "org.apache.druid.java.util.common.logger.Logger:void error(java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.lifecycle.Lifecycle$AnnotationBasedHandler:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()"
        ]
    },
    "org.apache.druid.java.util.common.lifecycle.Lifecycle$StartCloseHandler:void stop()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()"
        ]
    },
    "org.apache.druid.math.expr.Parser:void <clinit>()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Function getFunction(java.lang.String)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.ApplyFunction getApplyFunction(java.lang.String)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr parse(java.lang.String,org.apache.druid.math.expr.ExprMacroTable)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr parse(java.lang.String,org.apache.druid.math.expr.ExprMacroTable,boolean)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnappliedBindings(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$BindingAnalysis,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.ApplyFunctionExpr liftApplyLambda(org.apache.druid.math.expr.ApplyFunctionExpr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Parser:void <clinit>()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitApplyFunctionExpr(org.apache.druid.math.expr.antlr.ExprParser$ApplyFunctionExprContext)",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionExpr(org.apache.druid.math.expr.antlr.ExprParser$FunctionExprContext)",
            "org.apache.druid.math.expr.Parser$lambda_flatten_0__303:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Parser$lambda_applyUnappliedBindings_2__305:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Parser$lambda_applyUnapplied_5__308:org.apache.druid.math.expr.Expr visit(org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Parser$lambda_liftApplyLambda_9__313:java.lang.Object apply(java.lang.Object)",
            "org.apache.druid.math.expr.Parser$lambda_withSuppliers_10__315:java.lang.Object get(java.lang.String)"
        ]
    },
    "org.apache.druid.collections.StupidPool:void impossibleOffsetFailed(java.lang.Object,org.apache.druid.collections.StupidPool$ObjectId,org.apache.druid.java.util.common.Cleaners$Cleanable,org.apache.druid.collections.StupidPool$ObjectLeakNotifier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.collections.StupidPool:void tryReturnToPool(java.lang.Object,org.apache.druid.collections.StupidPool$ObjectId,org.apache.druid.java.util.common.Cleaners$Cleanable,org.apache.druid.collections.StupidPool$ObjectLeakNotifier)"
        ]
    },
    "org.apache.druid.collections.StupidPool$ObjectLeakNotifier:void run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ExecuteWhenDoneYielder:void close()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$3:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$1:org.apache.druid.java.util.common.concurrent.ScheduledExecutors$Signal call()",
            "org.apache.druid.java.util.common.concurrent.DirectExecutorService:void execute(java.lang.Runnable)",
            "org.apache.druid.common.config.Log4jShutdown:org.apache.logging.log4j.core.util.Cancellable addShutdownCallback(java.lang.Runnable)",
            "org.apache.druid.common.config.Log4jShutdown:void runCallbacks()",
            "org.apache.druid.common.config.Log4jShutdown$1:void run()"
        ]
    },
    "org.apache.druid.java.util.metrics.ParametrizedUriEmitterMonitor$lambda_doMonitor_2__45:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void lambda$toYielder$0(org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator)"
        ]
    },
    "org.apache.druid.java.util.emitter.EmittingLogger$EmittingAlertBuilder:void <init>(org.apache.druid.java.util.emitter.EmittingLogger,java.lang.Throwable,java.lang.String,org.apache.druid.java.util.emitter.service.ServiceEmitter)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.EmittingLogger$EmittingAlertBuilder:void <init>(org.apache.druid.java.util.emitter.EmittingLogger,java.lang.Throwable,java.lang.String,org.apache.druid.java.util.emitter.service.ServiceEmitter,org.apache.druid.java.util.emitter.EmittingLogger$1)"
        ]
    },
    "org.apache.druid.java.util.emitter.EmittingLogger$EmittingAlertBuilder:void <init>(org.apache.druid.java.util.emitter.EmittingLogger,java.lang.Throwable,java.lang.String,org.apache.druid.java.util.emitter.service.ServiceEmitter,org.apache.druid.java.util.emitter.EmittingLogger$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.EmittingLogger:org.apache.druid.java.util.emitter.service.AlertBuilder makeAlert(java.lang.Throwable,java.lang.String,java.lang.Object[])"
        ]
    },
    "org.apache.druid.data.input.impl.DelimitedParseSpec:org.apache.druid.java.util.common.parsers.Parser makeParser()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:void initializeParser()"
        ]
    },
    "org.apache.druid.data.input.impl.CSVParseSpec:org.apache.druid.java.util.common.parsers.Parser makeParser()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.StringInputRowParser:void initializeParser()"
        ]
    },
    "org.apache.druid.data.input.IntermediateRowParsingReader:org.apache.druid.java.util.common.parsers.CloseableIterator read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.InputEntityIteratingReader:org.apache.druid.java.util.common.parsers.CloseableIterator lambda$read$0(org.apache.druid.data.input.InputEntity)"
        ]
    },
    "org.apache.druid.data.input.IntermediateRowParsingReader:org.apache.druid.java.util.common.parsers.CloseableIterator sample()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.InputEntityIteratingReader:org.apache.druid.java.util.common.parsers.CloseableIterator lambda$sample$1(org.apache.druid.data.input.InputEntity)"
        ]
    },
    "org.apache.druid.guice.ConditionalMultibind:org.apache.druid.guice.ConditionalMultibind addConditionBinding(java.lang.String,com.google.common.base.Predicate,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.guice.ConditionalMultibind:org.apache.druid.guice.ConditionalMultibind addConditionBinding(java.lang.String,com.google.common.base.Predicate,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.guice.ConditionalMultibind:org.apache.druid.guice.ConditionalMultibind addConditionBinding(java.lang.String,com.google.common.base.Predicate,com.google.inject.TypeLiteral)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.common.RetryUtils:java.lang.Object retry(org.apache.druid.java.util.common.RetryUtils$Task,com.google.common.base.Predicate,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:boolean sendWithRetries(byte[],int,int,boolean)",
            "org.apache.druid.java.util.common.StreamUtils:long retryCopy(com.google.common.io.ByteSource,com.google.common.io.ByteSink,com.google.common.base.Predicate,int)",
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult unzip(com.google.common.io.ByteSource,java.io.File,com.google.common.base.Predicate,boolean)"
        ]
    },
    "org.apache.druid.java.util.common.FileUtils:long copyLarge(java.lang.Object,org.apache.druid.data.input.impl.prefetch.ObjectOpenFunction,java.io.File,byte[],com.google.common.base.Predicate,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.prefetch.FileFetcher:long download(java.lang.Object,java.io.File)"
        ]
    },
    "org.apache.druid.java.util.common.FileUtils:long copyLarge(java.io.InputStream,java.io.File,byte[],com.google.common.base.Predicate,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.InputEntity:org.apache.druid.data.input.InputEntity$CleanableFile fetch(java.io.File,byte[])"
        ]
    },
    "org.apache.druid.java.util.common.io.NativeIO:void chunkedCopy(java.io.InputStream,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult unzip(java.io.InputStream,java.io.File)",
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult gunzip(java.io.InputStream,java.io.File)"
        ]
    },
    "org.apache.druid.data.input.impl.HttpEntity:java.io.InputStream openInputStream(java.net.URI,java.lang.String,org.apache.druid.metadata.PasswordProvider,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.HttpEntity:java.io.InputStream readFrom(long)"
        ]
    },
    "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult gunzip(com.google.common.io.ByteSource,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult gunzip(java.io.File,java.io.File)"
        ]
    },
    "org.apache.druid.utils.CompressionUtils$lambda_unzip_1__97:java.lang.Object perform()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.RetryUtils:java.lang.Object retry(org.apache.druid.java.util.common.RetryUtils$Task,com.google.common.base.Predicate,int,int,org.apache.druid.java.util.common.RetryUtils$CleanupAfterFailure,java.lang.String)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor parseLong(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.Function$ParseLong:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ulp$115(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_ulp_115__214:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ulp$114(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_ulp_114__213:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toRadians$113(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_toRadians_113__212:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toRadians$112(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_toRadians_112__211:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toDegrees$111(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_toDegrees_111__210:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toDegrees$110(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_toDegrees_110__209:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sqrt$109(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_sqrt_109__208:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sqrt$108(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_sqrt_108__207:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$signum$107(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_signum_107__206:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$signum$106(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_signum_106__205:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$rint$105(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_rint_105__204:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$rint$104(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_rint_104__203:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$nextUp$103(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_nextUp_103__202:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$nextUp$102(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_nextUp_102__201:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log1p$101(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_log1p_101__200:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log1p$100(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_log1p_100__199:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log10$99(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_log10_99__198:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log10$98(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_log10_98__197:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log$97(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_log_97__196:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log$96(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_log_96__195:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleInFunctionVectorProcessor lambda$getExponent$95(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_getExponent_95__194:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$getExponent$94(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_getExponent_94__193:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$expm1$93(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_expm1_93__192:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$expm1$92(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_expm1_92__191:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$exp$91(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_exp_91__190:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$exp$90(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_exp_90__189:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$floor$89(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_floor_89__188:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$floor$88(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_floor_88__187:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ceil$87(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_ceil_87__186:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ceil$86(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_ceil_86__185:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cbrt$85(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_cbrt_85__184:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cbrt$84(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_cbrt_84__183:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$abs$83(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_abs_83__182:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$abs$82(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_abs_82__181:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tanh$81(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_tanh_81__180:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tanh$80(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_tanh_80__179:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tan$79(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_tan_79__178:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tan$78(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_tan_78__177:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sinh$77(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_sinh_77__176:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sinh$76(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_sinh_76__175:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sin$75(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_sin_75__174:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sin$74(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_sin_74__173:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cot$73(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_cot_73__172:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cot$72(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_cot_72__171:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cosh$71(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_cosh_71__170:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cosh$70(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_cosh_70__169:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cos$69(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_cos_69__168:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cos$68(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_cos_68__167:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$atan$67(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_atan_67__166:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$atan$66(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_atan_66__165:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$asin$65(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_asin_65__164:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$asin$64(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_asin_64__163:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$acos$63(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_acos_63__162:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$acos$62(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_acos_62__161:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$scalb$61(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_scalb_61__160:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$scalb$60(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_scalb_60__159:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$scalb$59(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_scalb_59__158:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$scalb$58(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_scalb_58__157:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$nextAfter$57(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_nextAfter_57__156:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$nextAfter$56(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_nextAfter_56__155:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$nextAfter$55(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_nextAfter_55__154:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$nextAfter$54(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_nextAfter_54__153:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$remainder$53(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_remainder_53__152:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$remainder$52(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_remainder_52__151:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$remainder$51(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_remainder_51__150:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$remainder$50(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_remainder_50__149:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$hypot$49(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_hypot_49__148:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$hypot$48(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_hypot_48__147:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$hypot$47(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_hypot_47__146:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$hypot$46(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_hypot_46__145:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$copySign$45(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_copySign_45__144:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$copySign$44(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_copySign_44__143:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$copySign$43(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_copySign_43__142:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$copySign$42(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_copySign_42__141:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$atan2$41(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_atan2_41__140:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$atan2$40(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_atan2_40__139:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$atan2$39(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_atan2_39__138:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$atan2$38(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_atan2_38__137:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$min$37(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_min_37__136:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$min$36(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_min_36__135:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$min$35(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_min_35__134:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$min$34(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_min_34__133:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$max$33(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_max_33__132:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$max$32(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_max_32__131:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$max$31(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_max_31__130:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$max$30(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_max_30__129:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$power$29(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_power_29__128:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$power$28(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_power_28__127:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$power$27(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_power_27__126:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$power$26(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_power_26__125:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$negate$25(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_negate_25__124:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$negate$24(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_negate_24__123:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$modulo$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_modulo_23__122:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$modulo$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_modulo_22__121:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$modulo$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_modulo_21__120:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$modulo$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_modulo_20__119:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoublesInFunctionVectorProcessor lambda$longDivide$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_longDivide_19__118:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleLongInFunctionVectorProcessor lambda$longDivide$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_longDivide_18__117:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongDoubleInFunctionVectorProcessor lambda$longDivide$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_longDivide_17__116:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$longDivide$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_longDivide_16__115:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$divide$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_divide_15__114:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$divide$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_divide_14__113:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$divide$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_divide_13__112:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$divide$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_divide_12__111:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$multiply$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_multiply_11__110:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$multiply$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_multiply_10__109:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$multiply$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_multiply_9__108:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$multiply$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_multiply_8__107:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$minus$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_minus_7__106:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$minus$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_minus_6__105:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$minus$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_minus_5__104:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$minus$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_minus_4__103:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$plus$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_plus_3__102:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$plus$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_plus_2__101:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$plus$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_plus_1__100:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$plus$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_plus_0__99:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThan$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_lessThan_23__279:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThan$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_lessThan_22__278:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThan$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_lessThan_21__277:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThan$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_lessThan_20__276:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThanOrEqual$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_lessThanOrEqual_19__275:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThanOrEqual$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_lessThanOrEqual_18__274:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThanOrEqual$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_lessThanOrEqual_17__273:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThanOrEqual$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_lessThanOrEqual_16__272:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThan$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_greaterThan_15__271:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThan$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_greaterThan_14__270:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThan$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_greaterThan_13__269:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThan$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_greaterThan_12__268:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThanOrEqual$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_greaterThanOrEqual_11__267:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThanOrEqual$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_greaterThanOrEqual_10__266:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThanOrEqual$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_greaterThanOrEqual_9__265:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThanOrEqual$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_greaterThanOrEqual_8__264:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$notEqual$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_notEqual_7__263:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$notEqual$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_notEqual_6__262:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$notEqual$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_notEqual_5__261:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$notEqual$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_notEqual_4__260:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$equal$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_equal_3__259:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$equal$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_equal_2__258:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$equal$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_equal_1__257:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$equal$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_equal_0__256:java.lang.Object get()"
        ]
    },
    "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.vector.VectorProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor parseLong(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,int)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor doublePower(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ulp$115(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ulp$114(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toRadians$113(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toRadians$112(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$toDegrees$111(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$toDegrees$110(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sqrt$109(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sqrt$108(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$signum$107(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$signum$106(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$rint$105(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$rint$104(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$nextUp$103(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$nextUp$102(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log1p$101(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log1p$100(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log10$99(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log10$98(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$log$97(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$log$96(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleInFunctionVectorProcessor lambda$getExponent$95(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$getExponent$94(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$expm1$93(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$expm1$92(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$exp$91(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$exp$90(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$floor$89(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$floor$88(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$ceil$87(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$ceil$86(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cbrt$85(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cbrt$84(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$abs$83(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$abs$82(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tanh$81(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tanh$80(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$tan$79(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$tan$78(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sinh$77(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sinh$76(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$sin$75(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$sin$74(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cot$73(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cot$72(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cosh$71(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cosh$70(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$cos$69(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$cos$68(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$atan$67(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$atan$66(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$asin$65(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$asin$64(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$acos$63(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongInFunctionVectorProcessor lambda$acos$62(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$scalb$61(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$scalb$60(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$scalb$59(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$scalb$58(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$nextAfter$57(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$nextAfter$56(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$nextAfter$55(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$nextAfter$54(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$remainder$53(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$remainder$52(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$remainder$51(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$remainder$50(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$hypot$49(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$hypot$48(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$hypot$47(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$hypot$46(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$copySign$45(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$copySign$44(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$copySign$43(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$copySign$42(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$atan2$41(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$atan2$40(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$atan2$39(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongsInFunctionVectorProcessor lambda$atan2$38(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$min$37(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$min$36(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$min$35(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$min$34(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$max$33(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$max$32(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$max$31(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$max$30(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$power$29(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$power$28(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$power$27(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$power$26(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleInFunctionVectorProcessor lambda$negate$25(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongInFunctionVectorProcessor lambda$negate$24(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$modulo$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$modulo$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$modulo$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$modulo$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoublesInFunctionVectorProcessor lambda$longDivide$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutDoubleLongInFunctionVectorProcessor lambda$longDivide$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongDoubleInFunctionVectorProcessor lambda$longDivide$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$longDivide$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$divide$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$divide$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$divide$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$divide$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$multiply$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$multiply$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$multiply$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$multiply$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$minus$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$minus$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$minus$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$minus$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$plus$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$plus$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$plus$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$plus$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThan$23(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThan$22(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThan$21(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThan$20(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$lessThanOrEqual$19(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$lessThanOrEqual$18(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$lessThanOrEqual$17(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$lessThanOrEqual$16(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThan$15(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThan$14(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThan$13(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThan$12(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$greaterThanOrEqual$11(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$greaterThanOrEqual$10(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$greaterThanOrEqual$9(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$greaterThanOrEqual$8(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$notEqual$7(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$notEqual$6(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$notEqual$5(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$notEqual$4(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoublesInFunctionVectorProcessor lambda$equal$3(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutDoubleLongInFunctionVectorProcessor lambda$equal$2(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.DoubleOutLongDoubleInFunctionVectorProcessor lambda$equal$1(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.vector.VectorComparisonProcessors:org.apache.druid.math.expr.vector.LongOutLongsInFunctionVectorProcessor lambda$equal$0(org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.Function$CastFunc:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.ApplyFunctionExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:boolean lambda$canVectorize$0(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.UnaryMinusExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.math.expr.FunctionExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.ApplyFunctionExpr:boolean lambda$canVectorize$0(org.apache.druid.math.expr.Expr$InputBindingTypes,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.LambdaExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.UnaryMinusExpr:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes)",
            "org.apache.druid.math.expr.Function$CastFunc:boolean canVectorize(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:void lambda$determineVisibleGroupAfterRemove$20(org.apache.druid.timeline.partition.AtomicUpdateGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager$lambda_determineVisibleGroupAfterRemove_20__373:void accept(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:void lambda$determineVisibleGroupAfterRemove$19(org.apache.druid.timeline.partition.AtomicUpdateGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager$lambda_determineVisibleGroupAfterRemove_19__376:void accept(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:void lambda$determineVisibleGroupAfterRemove$16(org.apache.druid.timeline.partition.AtomicUpdateGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager$lambda_determineVisibleGroupAfterRemove_16__379:void accept(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:void lambda$moveNewStandbyToVisibleIfNecessary$11(org.apache.druid.timeline.partition.AtomicUpdateGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager$lambda_moveNewStandbyToVisibleIfNecessary_11__368:void accept(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:void lambda$moveNewStandbyToVisibleIfNecessary$10(org.apache.druid.timeline.partition.AtomicUpdateGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager$lambda_moveNewStandbyToVisibleIfNecessary_10__369:void accept(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:void lambda$moveNewStandbyToVisibleIfNecessary$9(org.apache.druid.timeline.partition.AtomicUpdateGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager$lambda_moveNewStandbyToVisibleIfNecessary_9__370:void accept(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:void lambda$replaceVisibleWith$7(org.apache.druid.timeline.partition.OvershadowableManager$State,org.apache.druid.timeline.partition.AtomicUpdateGroup)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.OvershadowableManager$lambda_replaceVisibleWith_7__366:void accept(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager$lambda_replaceVisibleWith_8__367:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void lambda$toYielder$0(org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator)"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmMonitor:void <init>(java.util.Map,java.lang.String,org.apache.druid.java.util.metrics.PidDiscoverer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor:void <init>(java.util.Map,java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void emit(org.apache.druid.java.util.emitter.core.Batch)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void emitBatches()"
        ]
    },
    "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void emitLargeEvent(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void emitLargeEvents()"
        ]
    },
    "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void tryEmitOneFailedBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void run()"
        ]
    },
    "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void tryEmitAndDrainAllFailedBuffers()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void run()"
        ]
    },
    "org.apache.druid.java.util.http.client.NettyHttpClient$1:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.metrics.AllocationMetricCollectors:org.apache.druid.java.util.metrics.AllocationMetricCollector getAllocationMetricCollector()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor:void <init>(java.util.Map,java.lang.String,org.apache.druid.java.util.metrics.PidDiscoverer)"
        ]
    },
    "org.apache.druid.java.util.http.client.response.SequenceInputStreamResponseHandler$1:java.lang.Object nextElement()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult unzip(java.io.File,java.io.File)"
        ]
    },
    "org.apache.druid.java.util.http.client.NettyHttpClient$1:void finishRequest()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.http.client.NettyHttpClient$1:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)"
        ]
    },
    "org.apache.druid.java.util.http.client.pool.ResourcePool$2:void returnResource()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.http.client.pool.ResourcePool$2:void finalize()",
            "org.apache.druid.java.util.http.client.NettyHttpClient$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)",
            "org.apache.druid.java.util.http.client.NettyHttpClient$1:void messageReceived(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.MessageEvent)",
            "org.apache.druid.java.util.http.client.NettyHttpClient$1:void finishRequest()",
            "org.apache.druid.java.util.http.client.NettyHttpClient$1:void exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ExceptionEvent)",
            "org.apache.druid.java.util.http.client.NettyHttpClient$1:void channelDisconnected(org.jboss.netty.channel.ChannelHandlerContext,org.jboss.netty.channel.ChannelStateEvent)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)"
        ]
    },
    "org.apache.druid.common.guava.GuavaUtils$lambda_cancelAll_0__238:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void lambda$toYielder$0(org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator)"
        ]
    },
    "org.apache.druid.common.config.JacksonConfigManager:org.apache.druid.common.config.ConfigManager$SetResult set(java.lang.String,java.lang.Object,org.apache.druid.audit.AuditInfo)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.common.config.ConfigManager$1:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$2:void run()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$4:void run()"
        ]
    },
    "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void <init>(org.apache.druid.java.util.metrics.SysMonitor,org.apache.druid.java.util.metrics.SysMonitor$1)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.SysMonitor:void <init>(java.util.Map,java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.emitter.core.HttpPostEmitter:void start()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.service.ServiceEmitter:void start()"
        ]
    },
    "org.apache.druid.java.util.emitter.core.Batch:boolean tryReleaseShared(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.emitter.EmittingLogger:org.apache.druid.java.util.emitter.service.AlertBuilder makeAlert(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.Parser$lambda_liftApplyLambda_9__313:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapKeys$1(java.util.function.Function,java.util.Map,java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapValues$0(java.util.Map,java.util.function.Function,java.lang.Object,java.lang.Object)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec:boolean lambda$split$0(java.util.function.Function,java.lang.Object)"
        ]
    },
    "org.apache.druid.collections.StupidPool:void tryReturnToPool(java.lang.Object,org.apache.druid.collections.StupidPool$ObjectId,org.apache.druid.java.util.common.Cleaners$Cleanable,org.apache.druid.collections.StupidPool$ObjectLeakNotifier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.collections.StupidPool:void access$100(org.apache.druid.collections.StupidPool,java.lang.Object,org.apache.druid.collections.StupidPool$ObjectId,org.apache.druid.java.util.common.Cleaners$Cleanable,org.apache.druid.collections.StupidPool$ObjectLeakNotifier)"
        ]
    },
    "org.apache.druid.java.util.common.StreamUtils:long retryCopy(com.google.common.io.ByteSource,com.google.common.io.ByteSink,com.google.common.base.Predicate,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.FileUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult retryCopy(com.google.common.io.ByteSource,java.io.File,com.google.common.base.Predicate,int)",
            "org.apache.druid.utils.CompressionUtils:long gzip(com.google.common.io.ByteSource,com.google.common.io.ByteSink,com.google.common.base.Predicate)"
        ]
    },
    "org.apache.druid.data.input.impl.prefetch.FileFetcher:long download(java.lang.Object,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.prefetch.Fetcher:void fetch()"
        ]
    },
    "org.apache.druid.data.input.InputEntity:org.apache.druid.data.input.InputEntity$CleanableFile fetch(java.io.File,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.HttpEntity:java.io.InputStream readFrom(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.RetryingInputEntity$RetryingInputEntityOpenFunction:java.io.InputStream open(org.apache.druid.data.input.RetryingInputEntity,long)",
            "org.apache.druid.data.input.RetryingInputEntity:java.io.InputStream readFromStart()"
        ]
    },
    "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult gunzip(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.math.expr.Function$ParseLong:org.apache.druid.math.expr.vector.ExprVectorProcessor asVectorProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.vector.ExprVectorProcessor buildVectorized(org.apache.druid.math.expr.Expr$VectorInputBindingTypes)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_ulp_115__214:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_ulp_114__213:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_toRadians_113__212:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_toRadians_112__211:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_toDegrees_111__210:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_toDegrees_110__209:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_sqrt_109__208:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_sqrt_108__207:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_signum_107__206:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_signum_106__205:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_rint_105__204:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_rint_104__203:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_nextUp_103__202:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_nextUp_102__201:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_log1p_101__200:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_log1p_100__199:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_log10_99__198:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_log10_98__197:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_log_97__196:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_log_96__195:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_getExponent_95__194:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_getExponent_94__193:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_expm1_93__192:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_expm1_92__191:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_exp_91__190:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_exp_90__189:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_floor_89__188:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_floor_88__187:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_ceil_87__186:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_ceil_86__185:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_cbrt_85__184:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_cbrt_84__183:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_abs_83__182:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_abs_82__181:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_tanh_81__180:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_tanh_80__179:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_tan_79__178:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_tan_78__177:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_sinh_77__176:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_sinh_76__175:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_sin_75__174:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_sin_74__173:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_cot_73__172:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_cot_72__171:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_cosh_71__170:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_cosh_70__169:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_cos_69__168:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_cos_68__167:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_atan_67__166:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_atan_66__165:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_asin_65__164:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_asin_64__163:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_acos_63__162:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_acos_62__161:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_scalb_61__160:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_scalb_60__159:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_scalb_59__158:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_scalb_58__157:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_nextAfter_57__156:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_nextAfter_56__155:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_nextAfter_55__154:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_nextAfter_54__153:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_remainder_53__152:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_remainder_52__151:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_remainder_51__150:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_remainder_50__149:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_hypot_49__148:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_hypot_48__147:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_hypot_47__146:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_hypot_46__145:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_copySign_45__144:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_copySign_44__143:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_copySign_43__142:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_copySign_42__141:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_atan2_41__140:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_atan2_40__139:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_atan2_39__138:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_atan2_38__137:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_min_37__136:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_min_36__135:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_min_35__134:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_min_34__133:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_max_33__132:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_max_32__131:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_max_31__130:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_max_30__129:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_power_29__128:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_power_28__127:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_power_27__126:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_power_26__125:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_negate_25__124:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_negate_24__123:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_modulo_23__122:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_modulo_22__121:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_modulo_21__120:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_modulo_20__119:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_longDivide_19__118:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_longDivide_18__117:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_longDivide_17__116:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_longDivide_16__115:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_divide_15__114:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_divide_14__113:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_divide_13__112:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_divide_12__111:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_multiply_11__110:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_multiply_10__109:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_multiply_9__108:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_multiply_8__107:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_minus_7__106:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_minus_6__105:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_minus_5__104:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_minus_4__103:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_plus_3__102:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_plus_2__101:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_plus_1__100:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorMathProcessors$lambda_plus_0__99:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_lessThan_23__279:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_lessThan_22__278:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_lessThan_21__277:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_lessThan_20__276:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_lessThanOrEqual_19__275:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_lessThanOrEqual_18__274:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_lessThanOrEqual_17__273:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_lessThanOrEqual_16__272:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_greaterThan_15__271:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_greaterThan_14__270:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_greaterThan_13__269:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_greaterThan_12__268:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_greaterThanOrEqual_11__267:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_greaterThanOrEqual_10__266:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_greaterThanOrEqual_9__265:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_greaterThanOrEqual_8__264:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_notEqual_7__263:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_notEqual_6__262:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_notEqual_5__261:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_notEqual_4__260:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_equal_3__259:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_equal_2__258:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_equal_1__257:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.math.expr.vector.VectorComparisonProcessors$lambda_equal_0__256:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager$lambda_determineVisibleGroupAfterRemove_20__373:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void lambda$toYielder$0(org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager$lambda_determineVisibleGroupAfterRemove_19__376:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void lambda$toYielder$0(org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager$lambda_determineVisibleGroupAfterRemove_16__379:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void lambda$toYielder$0(org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager$lambda_moveNewStandbyToVisibleIfNecessary_11__368:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void lambda$toYielder$0(org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager$lambda_moveNewStandbyToVisibleIfNecessary_10__369:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void lambda$toYielder$0(org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager$lambda_moveNewStandbyToVisibleIfNecessary_9__370:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void lambda$toYielder$0(org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager$lambda_replaceVisibleWith_7__366:void accept(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence:void lambda$toYielder$0(org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator)"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmMonitor:void <init>(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor:void <init>(java.util.Map)",
            "org.apache.druid.java.util.metrics.Monitors:org.apache.druid.java.util.metrics.Monitor createCompoundJvmMonitor(java.util.Map,java.lang.String)"
        ]
    },
    "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void emitBatches()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void run()"
        ]
    },
    "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void emitLargeEvents()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.emitter.core.HttpPostEmitter$EmittingThread:void run()"
        ]
    },
    "org.apache.druid.java.util.http.client.pool.ResourcePool$2:void finalize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.http.client.pool.ResourcePool$2:void <init>(org.apache.druid.java.util.http.client.pool.ResourcePool,java.lang.Object,java.lang.Object,org.apache.druid.java.util.http.client.pool.ResourcePool$ImmediateCreationResourceHolder)"
        ]
    },
    "org.apache.druid.java.util.http.client.NettyHttpClient$2:void operationComplete(org.jboss.netty.channel.ChannelFuture)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.metrics.SysMonitor:void <init>(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.SysMonitor:void <init>(java.util.Map)"
        ]
    },
    "org.apache.druid.collections.StupidPool:void access$100(org.apache.druid.collections.StupidPool,java.lang.Object,org.apache.druid.collections.StupidPool$ObjectId,org.apache.druid.java.util.common.Cleaners$Cleanable,org.apache.druid.collections.StupidPool$ObjectLeakNotifier)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.collections.StupidPool$ObjectResourceHolder:void close()"
        ]
    },
    "org.apache.druid.utils.CompressionUtils:long gzip(com.google.common.io.ByteSource,com.google.common.io.ByteSink,com.google.common.base.Predicate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CompressionUtils:org.apache.druid.java.util.common.FileUtils$FileCopyResult gzip(java.io.File,java.io.File,com.google.common.base.Predicate)"
        ]
    },
    "org.apache.druid.data.input.impl.prefetch.Fetcher:void fetch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.prefetch.Fetcher:org.apache.druid.data.input.impl.prefetch.OpenObject openObjectFromRemote()",
            "org.apache.druid.data.input.impl.prefetch.Fetcher:java.lang.Void lambda$fetchIfNeeded$0()"
        ]
    },
    "org.apache.druid.data.input.RetryingInputEntity$RetryingInputEntityOpenFunction:java.io.InputStream open(org.apache.druid.data.input.RetryingInputEntity,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.RetryingInputEntity$RetryingInputEntityOpenFunction:java.io.InputStream open(java.lang.Object,long)"
        ]
    },
    "org.apache.druid.data.input.RetryingInputEntity:java.io.InputStream readFromStart()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.RetryingInputEntity$RetryingInputEntityOpenFunction:java.io.InputStream open(org.apache.druid.data.input.RetryingInputEntity)"
        ]
    },
    "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.DroppingIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.Sequences$1:java.util.Iterator make()",
            "org.apache.druid.java.util.common.guava.FunctionalIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.collections.CombiningIterable:java.util.Iterator iterator()",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isComplete()",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.VersionedIntervalTimeline forSegments(java.lang.Iterable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()"
        ]
    },
    "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.lang.Object lambda$getMultiValueFunction$0(java.lang.String,com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.RegexParser$1:java.lang.Object apply(java.lang.String)",
            "org.apache.druid.utils.Streams:java.util.stream.Stream sequentialStreamFrom(java.lang.Iterable)"
        ]
    },
    "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.logger.Logger:void logSegments(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.Collection,java.lang.String)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.stream.Stream lambda$findFullyOvershadowed$6(java.util.Map)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.stream.Stream lambda$iterateAllObjects$3()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.stream.Stream lambda$null$1(java.util.TreeMap)"
        ]
    },
    "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.metrics.JvmMonitor:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.JvmMonitor:void <init>()"
        ]
    },
    "org.apache.druid.java.util.metrics.Monitors:org.apache.druid.java.util.metrics.Monitor createCompoundJvmMonitor(java.util.Map,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.Monitors:org.apache.druid.java.util.metrics.Monitor createCompoundJvmMonitor(java.util.Map)"
        ]
    },
    "org.apache.druid.java.util.http.client.pool.ResourcePool$2:void <init>(org.apache.druid.java.util.http.client.pool.ResourcePool,java.lang.Object,java.lang.Object,org.apache.druid.java.util.http.client.pool.ResourcePool$ImmediateCreationResourceHolder)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.http.client.pool.ResourcePool:org.apache.druid.java.util.http.client.pool.ResourceContainer take(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.metrics.SysMonitor:void <init>(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.metrics.SysMonitor:void <init>()"
        ]
    },
    "org.apache.druid.collections.StupidPool$ObjectResourceHolder:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.guava.Sequences$2:void after(boolean,java.lang.Throwable)",
            "org.apache.druid.java.util.common.guava.Yielders$2:void close()",
            "org.apache.druid.java.util.common.guava.CloseQuietly:void close(java.io.Closeable)",
            "org.apache.druid.java.util.common.io.Closer:void close()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle$CloseableHandler:void stop()",
            "org.apache.druid.java.util.common.CloseableIterators$1:void close()",
            "org.apache.druid.java.util.common.FileUtils:java.lang.Object writeAtomically(java.io.File,java.io.File,org.apache.druid.java.util.common.FileUtils$OutputStreamConsumer)",
            "org.apache.druid.utils.CloseableUtils:void closeBoth(java.io.Closeable,java.io.Closeable)",
            "org.apache.druid.collections.ReferenceCountingResourceHolder:void decrement()",
            "org.apache.druid.collections.ReferenceCountingResourceHolder$CloserRunnable:void run()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$ResourceCloseableLineIterator:void close()",
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:void close()"
        ]
    },
    "org.apache.druid.data.input.impl.prefetch.Fetcher:org.apache.druid.data.input.impl.prefetch.OpenObject openObjectFromRemote()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.prefetch.Fetcher:org.apache.druid.data.input.impl.prefetch.OpenObject next()"
        ]
    },
    "org.apache.druid.data.input.impl.prefetch.Fetcher:java.lang.Void lambda$fetchIfNeeded$0()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.prefetch.Fetcher$lambda_fetchIfNeeded_0__326:java.lang.Object call()"
        ]
    },
    "org.apache.druid.data.input.RetryingInputEntity$RetryingInputEntityOpenFunction:java.io.InputStream open(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.RetryingInputStream:void waitOrThrow(java.lang.Throwable,int)"
        ]
    },
    "org.apache.druid.data.input.RetryingInputEntity$RetryingInputEntityOpenFunction:java.io.InputStream open(org.apache.druid.data.input.RetryingInputEntity)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.RetryingInputEntity$RetryingInputEntityOpenFunction:java.io.InputStream open(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.partition.OvershadowableManager:boolean isComplete()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()"
        ]
    },
    "org.apache.druid.java.util.common.parsers.ParserUtils:java.lang.Object lambda$getMultiValueFunction$0(java.lang.String,com.google.common.base.Splitter,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.ParserUtils$lambda_getMultiValueFunction_0__56:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.RegexParser$1:java.lang.Object apply(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.RegexParser$1:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.utils.Streams:java.util.stream.Stream sequentialStreamFrom(java.lang.Iterable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.stream.Stream lambda$findFullyOvershadowed$6(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline$lambda_findFullyOvershadowed_6__400:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.stream.Stream lambda$iterateAllObjects$3()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline$lambda_iterateAllObjects_3__395:java.lang.Object get()"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.stream.Stream lambda$null$1(java.util.TreeMap)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.timeline.VersionedIntervalTimeline$lambda_null_1__406:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.metrics.JvmMonitor:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.metrics.Monitors:org.apache.druid.java.util.metrics.Monitor createCompoundJvmMonitor(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.java.util.http.client.pool.ResourcePool:org.apache.druid.java.util.http.client.pool.ResourceContainer take(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)"
        ]
    },
    "org.apache.druid.java.util.metrics.SysMonitor:void <init>()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.prefetch.Fetcher:org.apache.druid.data.input.impl.prefetch.OpenObject next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.prefetch.PrefetchableTextFilesFirehoseFactory$2:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.prefetch.Fetcher:java.lang.Object next()"
        ]
    },
    "org.apache.druid.data.input.impl.prefetch.Fetcher$lambda_fetchIfNeeded_0__326:java.lang.Object call()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$2:void run()",
            "org.apache.druid.java.util.common.concurrent.ScheduledExecutors$4:void run()"
        ]
    },
    "org.apache.druid.data.input.RetryingInputEntity$RetryingInputEntityOpenFunction:java.io.InputStream open(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.FileUtils:java.lang.Long lambda$copyLarge$1(org.apache.druid.data.input.impl.prefetch.ObjectOpenFunction,java.lang.Object,java.io.File,byte[])",
            "org.apache.druid.data.input.impl.prefetch.ObjectOpenFunction:java.io.InputStream open(java.lang.Object,long)",
            "org.apache.druid.data.input.impl.prefetch.ObjectOpenFunction:java.io.InputStream open(java.lang.Object,java.io.File)",
            "org.apache.druid.data.input.impl.RetryingInputStream:void <init>(java.lang.Object,org.apache.druid.data.input.impl.prefetch.ObjectOpenFunction,com.google.common.base.Predicate,int)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.ParserUtils$lambda_getMultiValueFunction_0__56:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.JavaScriptParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createObjectTimestampParser$10(boolean,com.google.common.base.Function,com.google.common.base.Function,java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$3(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$2(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.java.util.common.guava.Sequences$apply__78:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.java.util.common.parsers.RegexParser$1:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.JavaScriptParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createObjectTimestampParser$10(boolean,com.google.common.base.Function,com.google.common.base.Function,java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$3(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.java.util.common.parsers.TimestampParser:org.joda.time.DateTime lambda$createTimestampParser$2(com.google.common.base.Function,java.lang.String)",
            "org.apache.druid.data.input.impl.TimestampSpec:org.joda.time.DateTime parseDateTime(java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.java.util.common.guava.Sequences$apply__78:java.lang.Object apply(java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline$lambda_findFullyOvershadowed_6__400:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapKeys$1(java.util.function.Function,java.util.Map,java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapValues$0(java.util.Map,java.util.function.Function,java.lang.Object,java.lang.Object)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec:boolean lambda$split$0(java.util.function.Function,java.lang.Object)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline$lambda_iterateAllObjects_3__395:java.lang.Object get()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.utils.CollectionUtils$1:java.util.Iterator iterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.Spliterator spliterator()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream stream()",
            "org.apache.druid.utils.CollectionUtils$1:java.util.stream.Stream parallelStream()",
            "org.apache.druid.utils.JvmUtils:java.lang.Object safeAccumulateThreadCpuTime(java.util.concurrent.atomic.AtomicLong,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeDoubleMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)",
            "org.apache.druid.math.expr.vector.VectorMathProcessors:org.apache.druid.math.expr.vector.ExprVectorProcessor makeLongMathProcessor(org.apache.druid.math.expr.Expr$VectorInputBindingTypes,org.apache.druid.math.expr.Expr,org.apache.druid.math.expr.Expr,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier,java.util.function.Supplier)"
        ]
    },
    "org.apache.druid.timeline.VersionedIntervalTimeline$lambda_null_1__406:java.lang.Object apply(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.parsers.CloseableIterator$2:org.apache.druid.java.util.common.parsers.CloseableIterator findNextIteratorIfNecessary()",
            "org.apache.druid.java.util.common.parsers.CloseableIterator$1:java.lang.Object next()",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$1$1:java.lang.Object get(java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingYieldingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.java.util.common.guava.MappingAccumulator:java.lang.Object accumulate(java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapKeys$1(java.util.function.Function,java.util.Map,java.lang.Object,java.lang.Object)",
            "org.apache.druid.utils.CollectionUtils:void lambda$mapValues$0(java.util.Map,java.util.function.Function,java.lang.Object,java.lang.Object)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec:boolean lambda$split$0(java.util.function.Function,java.lang.Object)"
        ]
    },
    "org.apache.druid.data.input.impl.prefetch.Fetcher:java.lang.Object next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.guice.GuiceAnnotationIntrospector:java.lang.Object findInjectableValueId(com.fasterxml.jackson.databind.introspect.AnnotatedMember)",
            "org.apache.druid.guice.LifecycleScope:void setLifecycle(org.apache.druid.java.util.common.lifecycle.Lifecycle)",
            "org.apache.druid.guice.LifecycleModule$2:void start()",
            "org.apache.druid.guice.JsonConfigurator:java.lang.Object configurate(java.util.Properties,java.lang.String,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.JsonConfigurator:void verifyClazzIsConfigurable(com.fasterxml.jackson.databind.ObjectMapper,java.lang.Class,java.lang.Class)",
            "org.apache.druid.guice.ListProvider:java.util.List get()",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$PidCgroupEntry getCgroupEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer:org.apache.druid.java.util.metrics.cgroups.ProcCgroupDiscoverer$ProcMountsEntry getMountEntry(java.io.File,java.lang.String)",
            "org.apache.druid.java.util.metrics.KeyedDiff:java.util.Map subtract(java.util.Map,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$SwapStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorUtils:void addDimensionsToBuilder(org.apache.druid.java.util.emitter.service.ServiceMetricEvent$Builder,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$TcpStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$MemStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitJvmMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor:void emitDirectMemMetrics(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void start()",
            "org.apache.druid.java.util.metrics.CompoundMonitor:void stop()",
            "org.apache.druid.java.util.metrics.Monitors$1:boolean shouldReschedule(java.util.List)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcCounters:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$DirStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$CpuStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$DiskStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void start()",
            "org.apache.druid.java.util.metrics.MonitorScheduler:void stop()",
            "org.apache.druid.java.util.metrics.SysMonitor$SysStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.SysMonitor$FsStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmMonitor$GcGeneration:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter,java.util.Map)",
            "org.apache.druid.java.util.metrics.SysMonitor$NetStats:void emit(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.metrics.JvmCpuMonitor:boolean doMonitor(org.apache.druid.java.util.emitter.service.ServiceEmitter)",
            "org.apache.druid.java.util.emitter.core.Emitters:java.util.Map makeCustomFactoryMap(java.util.Properties)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void start()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void emit(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ComposingEmitter:void close()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriEmitter:void flush()",
            "org.apache.druid.java.util.emitter.core.ParametrizedUriExtractor:java.net.URI apply(org.apache.druid.java.util.emitter.core.Event)",
            "org.apache.druid.java.util.common.collect.Utils:java.util.Map zipMapPartial(java.lang.Iterable,java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ParserUtils:java.util.Set findDuplicates(java.lang.Iterable)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker:java.lang.Object toMapHelper(java.lang.Object)",
            "org.apache.druid.java.util.common.parsers.JSONToLowerParser:java.util.Map parseToMap(java.lang.String)",
            "org.apache.druid.java.util.common.parsers.ObjectFlatteners:org.apache.druid.java.util.common.parsers.ObjectFlattener create(org.apache.druid.java.util.common.parsers.JSONPathSpec,org.apache.druid.java.util.common.parsers.ObjectFlatteners$FlattenerMaker)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:java.lang.Object valueConversionFunction(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.parsers.JSONFlattenerMaker:boolean isFlatList(com.fasterxml.jackson.databind.JsonNode)",
            "org.apache.druid.java.util.common.logger.Logger:void logSegmentIds(org.apache.druid.java.util.common.logger.Logger$LogFunction,java.util.stream.Stream,java.lang.String)",
            "org.apache.druid.java.util.common.guava.nary.TrinaryTransformIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombinePartitioningAction:void spawnParallelTasks(int)",
            "org.apache.druid.java.util.common.guava.DroppingIterator:boolean hasNext()",
            "org.apache.druid.java.util.common.guava.DroppingIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$PrepareMergeCombineInputsAction:void compute()",
            "org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetricsAccumulator:org.apache.druid.java.util.common.guava.ParallelMergeCombiningSequence$MergeCombineMetrics build()",
            "org.apache.druid.java.util.common.guava.BaseSequence:java.lang.Object accumulate(java.lang.Object,org.apache.druid.java.util.common.guava.Accumulator)",
            "org.apache.druid.java.util.common.guava.BaseSequence:org.apache.druid.java.util.common.guava.Yielder makeYielder(java.lang.Object,org.apache.druid.java.util.common.guava.YieldingAccumulator,java.util.Iterator)",
            "org.apache.druid.java.util.common.guava.MergeIterator:void <init>(java.util.Comparator,java.util.List)",
            "org.apache.druid.java.util.common.guava.FunctionalIterator:java.lang.Object next()",
            "org.apache.druid.java.util.common.guava.MergeIterable:java.util.Iterator iterator()",
            "org.apache.druid.java.util.common.io.smoosh.SmooshedFileMapper:void close()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void add(java.lang.String,java.util.List)",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void mergeWithSmoosher()",
            "org.apache.druid.java.util.common.io.smoosh.FileSmoosher:void close()",
            "org.apache.druid.java.util.common.io.Closer:void registerAll(java.util.Collection)",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void start()",
            "org.apache.druid.java.util.common.lifecycle.Lifecycle:void stop()",
            "org.apache.druid.java.util.common.JodaUtils:java.util.ArrayList condenseIntervals(java.lang.Iterable)",
            "org.apache.druid.java.util.common.JodaUtils:org.joda.time.Interval umbrellaInterval(java.lang.Iterable)",
            "org.apache.druid.java.util.common.FileUtils$FileCopyResult:void addSizedFiles(java.util.Collection)",
            "org.apache.druid.java.util.common.CloseableIterators$1:java.lang.Object next()",
            "org.apache.druid.java.util.http.client.response.BytesFullResponseHolder:byte[] getContent()",
            "org.apache.druid.java.util.http.client.pool.ResourcePool:void close()",
            "org.apache.druid.java.util.http.client.Request:org.apache.druid.java.util.http.client.Request addHeaderValues(com.google.common.collect.Multimap)",
            "org.apache.druid.java.util.http.client.NettyHttpClient:com.google.common.util.concurrent.ListenableFuture go(org.apache.druid.java.util.http.client.Request,org.apache.druid.java.util.http.client.response.HttpResponseHandler,org.joda.time.Duration)",
            "org.apache.druid.math.expr.ApplyFunction$SettableLambdaBinding:void <init>(org.apache.druid.math.expr.LambdaExpr,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Function$ReduceFunction:org.apache.druid.math.expr.ExprEval apply(java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.CartesianList:java.util.List create(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunctionExpr:void <init>(org.apache.druid.math.expr.ApplyFunction,java.lang.String,org.apache.druid.math.expr.LambdaExpr,java.util.List)",
            "org.apache.druid.math.expr.ExprTypeConversion:org.apache.druid.math.expr.ExprType conditional(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr applyUnapplied(org.apache.druid.math.expr.Expr,java.util.List)",
            "org.apache.druid.math.expr.Parser:org.apache.druid.math.expr.Expr lambda$applyUnappliedBindings$2(java.util.List,org.apache.druid.math.expr.Expr$BindingAnalysis,org.apache.druid.math.expr.Expr)",
            "org.apache.druid.math.expr.Function$ArrayConstructorFunction:org.apache.druid.math.expr.ExprType getOutputType(org.apache.druid.math.expr.Expr$InputBindingTypes,java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean areNumeric(java.util.List)",
            "org.apache.druid.math.expr.Expr$InputBindingTypes:boolean canVectorize(java.util.List)",
            "org.apache.druid.math.expr.ApplyFunction$CartesianMapFunction:org.apache.druid.math.expr.ExprEval apply(org.apache.druid.math.expr.LambdaExpr,java.util.List,org.apache.druid.math.expr.Expr$ObjectBinding)",
            "org.apache.druid.math.expr.Evals:boolean isAllConstants(java.util.List)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withScalarArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:org.apache.druid.math.expr.Expr$BindingAnalysis withArrayArguments(java.util.Set)",
            "org.apache.druid.math.expr.Expr$BindingAnalysis:java.util.Set map(java.util.Set,java.util.function.Function)",
            "org.apache.druid.math.expr.ExprMacroTable$BaseScalarMacroFunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis supplyAnalyzeInputs()",
            "org.apache.druid.math.expr.FunctionExpr:org.apache.druid.math.expr.Expr$BindingAnalysis analyzeInputs()",
            "org.apache.druid.math.expr.ExprListenerImpl:void exitFunctionArgs(org.apache.druid.math.expr.antlr.ExprParser$FunctionArgsContext)",
            "org.apache.druid.annotations.SubclassesMustBePublicAnnotationProcessor:boolean process(java.util.Set,javax.'annotation'.processing.RoundEnvironment)",
            "org.apache.druid.common.config.ConfigManager:void poll()",
            "org.apache.druid.data.input.impl.DimensionsSpec:void <init>(java.util.List,java.util.List,java.util.List)",
            "org.apache.druid.data.input.impl.JsonInputFormat:void <init>(org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.CSVParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.impl.FileIteratingFirehose:org.apache.commons.io.LineIterator getNextLineIterator()",
            "org.apache.druid.data.input.impl.FlatTextInputFormat:void <init>(java.util.List,java.lang.String,java.lang.String,java.lang.Boolean,java.lang.Boolean,int)",
            "org.apache.druid.data.input.impl.DelimitedInputFormat:java.util.List splitToList(com.google.common.base.Splitter,java.lang.String)",
            "org.apache.druid.data.input.impl.AbstractTextFilesFirehoseFactory$1:org.apache.commons.io.LineIterator next()",
            "org.apache.druid.data.input.impl.JSONParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,org.apache.druid.java.util.common.parsers.JSONPathSpec,java.util.Map,java.lang.Boolean)",
            "org.apache.druid.data.input.impl.DelimitedParseSpec:void <init>(org.apache.druid.data.input.impl.TimestampSpec,org.apache.druid.data.input.impl.DimensionsSpec,java.lang.String,java.lang.String,java.util.List,boolean,int)",
            "org.apache.druid.data.input.HandlingInputRowIterator:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.data.input.Rows:java.util.List toGroupKey(long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.data.input.MaxSizeSplitHintSpec$1:java.util.List next()",
            "org.apache.druid.data.input.IntermediateRowParsingReader$1:org.apache.druid.data.input.InputRow next()",
            "org.apache.druid.timeline.partition.PartitionHolder:void <init>(java.util.List)",
            "org.apache.druid.timeline.partition.PartitionHolder:boolean isComplete()",
            "org.apache.druid.timeline.partition.OvershadowableManager$SingleEntryShort2ObjectSortedMap:void putAll(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean possibleInDomain(java.util.Map)",
            "org.apache.druid.timeline.partition.HashBasedNumberedShardSpec:boolean chunkPossibleInDomain(org.apache.druid.timeline.partition.HashPartitionFunction,java.util.Map,java.util.Map)",
            "org.apache.druid.timeline.partition.AtomicUpdateGroup:void add(org.apache.druid.timeline.partition.PartitionChunk)",
            "org.apache.druid.timeline.partition.RangeBucketShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$getLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.SingleDimensionShardSpec:org.apache.druid.timeline.partition.ShardSpec lambda$createLookup$0(java.util.List,long,org.apache.druid.data.input.InputRow)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadowedBy(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findOvershadows(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short,org.apache.druid.timeline.partition.OvershadowableManager$State)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean isOvershadowedByVisibleGroup(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:boolean doGroupsFullyCoverPartitionRange(java.util.List,int,int)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestNonFullyAvailableAtomicUpdateGroups(java.util.List)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List findLatestFullyAvailableOvershadowedAtomicUpdateGroups(org.apache.druid.timeline.partition.OvershadowableManager$RootPartitionRange,short)",
            "org.apache.druid.timeline.partition.OvershadowableManager:java.util.List getAllChunks(java.util.TreeMap)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void addAll(java.util.Iterator,com.google.common.base.Function,com.google.common.base.Function)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:org.apache.druid.timeline.partition.PartitionHolder findEntry(org.joda.time.Interval,java.lang.Object)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Set findFullyOvershadowed()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.Map computeOvershadowedPartitionsTimeline()",
            "org.apache.druid.timeline.VersionedIntervalTimeline:boolean isOvershadowed(org.joda.time.Interval,java.lang.Object,org.apache.druid.timeline.Overshadowable)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,org.apache.druid.timeline.VersionedIntervalTimeline$TimelineEntry,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:void remove(java.util.NavigableMap,org.joda.time.Interval,boolean)",
            "org.apache.druid.timeline.VersionedIntervalTimeline:java.util.List lookup(org.joda.time.Interval,org.apache.druid.timeline.Partitions)",
            "org.apache.druid.timeline.DataSegment:java.util.Map prepareLoadSpec(java.util.Map)",
            "org.apache.druid.indexer.Checks:org.apache.druid.indexer.Property checkOneNotNullOrEmpty(java.util.List)"
        ]
    },
    "org.apache.druid.java.util.common.FileUtils:java.lang.Long lambda$copyLarge$1(org.apache.druid.data.input.impl.prefetch.ObjectOpenFunction,java.lang.Object,java.io.File,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.FileUtils$lambda_copyLarge_1__33:java.lang.Object perform()"
        ]
    },
    "org.apache.druid.data.input.impl.prefetch.ObjectOpenFunction:java.io.InputStream open(java.lang.Object,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.prefetch.ObjectOpenFunction:java.io.InputStream open(java.lang.Object,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.apache.druid.data.input.impl.RetryingInputStream:void <init>(java.lang.Object,org.apache.druid.data.input.impl.prefetch.ObjectOpenFunction,com.google.common.base.Predicate,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.prefetch.FileFetcher:org.apache.druid.data.input.impl.prefetch.OpenObject generateOpenObject(java.lang.Object)",
            "org.apache.druid.data.input.RetryingInputEntity:java.io.InputStream open()"
        ]
    },
    "org.apache.druid.java.util.common.FileUtils$lambda_copyLarge_1__33:java.lang.Object perform()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.java.util.common.RetryUtils:java.lang.Object retry(org.apache.druid.java.util.common.RetryUtils$Task,com.google.common.base.Predicate,int,int,org.apache.druid.java.util.common.RetryUtils$CleanupAfterFailure,java.lang.String)"
        ]
    },
    "org.apache.druid.data.input.impl.prefetch.FileFetcher:org.apache.druid.data.input.impl.prefetch.OpenObject generateOpenObject(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.impl.prefetch.Fetcher:org.apache.druid.data.input.impl.prefetch.OpenObject openObjectFromRemote()"
        ]
    },
    "org.apache.druid.data.input.RetryingInputEntity:java.io.InputStream open()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.apache.druid.data.input.InputEntity:org.apache.druid.data.input.InputEntity$CleanableFile fetch(java.io.File,byte[])",
            "org.apache.druid.data.input.TextReader:org.apache.druid.java.util.common.parsers.CloseableIterator intermediateRowIterator()"
        ]
    }
}