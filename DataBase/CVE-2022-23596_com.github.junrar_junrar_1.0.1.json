{
    "com.github.junrar.Archive:void readHeaders(long)": {
        "isVulRoot": true,
        "vulCaller": [
            "com.github.junrar.Archive:void setFile(com.github.junrar.io.IReadOnlyAccess,long)"
        ]
    },
    "com.github.junrar.Archive:void setFile(com.github.junrar.io.IReadOnlyAccess,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Archive:void setVolume(com.github.junrar.Volume)"
        ]
    },
    "com.github.junrar.Archive:void setVolume(com.github.junrar.Volume)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.ComprDataIO:int unpRead(byte[],int,int)",
            "com.github.junrar.Archive:void <init>(com.github.junrar.VolumeManager,com.github.junrar.UnrarCallback)"
        ]
    },
    "com.github.junrar.unpack.ComprDataIO:int unpRead(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void unstoreFile()",
            "com.github.junrar.unpack.Unpack15:boolean unpReadBuf()"
        ]
    },
    "com.github.junrar.Archive:void <init>(com.github.junrar.VolumeManager,com.github.junrar.UnrarCallback)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Archive:void <init>(com.github.junrar.VolumeManager)",
            "com.github.junrar.Archive:void <init>(java.io.File)",
            "com.github.junrar.Archive:void <init>(java.io.File,com.github.junrar.UnrarCallback)"
        ]
    },
    "com.github.junrar.unpack.Unpack:void unstoreFile()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void doUnpack(int,boolean)"
        ]
    },
    "com.github.junrar.unpack.Unpack15:boolean unpReadBuf()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void unpack29(boolean)",
            "com.github.junrar.unpack.Unpack:boolean readTables()",
            "com.github.junrar.unpack.Unpack:boolean readVMCode()",
            "com.github.junrar.unpack.Unpack:int getChar()",
            "com.github.junrar.unpack.Unpack15:void unpack15(boolean)",
            "com.github.junrar.unpack.Unpack20:void unpack20(boolean)",
            "com.github.junrar.unpack.Unpack20:boolean ReadTables20()"
        ]
    },
    "com.github.junrar.Archive:void <init>(com.github.junrar.VolumeManager)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.vfs2.provider.rar.RARFileSystem:void init()"
        ]
    },
    "com.github.junrar.Archive:void <init>(java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.extract.ExtractArchive:void extractArchive(java.io.File,java.io.File)"
        ]
    },
    "com.github.junrar.Archive:void <init>(java.io.File,com.github.junrar.UnrarCallback)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.github.junrar.unpack.Unpack:void doUnpack(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Archive:void doExtractFile(com.github.junrar.rarfile.FileHeader,java.io.OutputStream)"
        ]
    },
    "com.github.junrar.unpack.Unpack:void unpack29(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void doUnpack(int,boolean)"
        ]
    },
    "com.github.junrar.unpack.Unpack:boolean readTables()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void unpack29(boolean)",
            "com.github.junrar.unpack.Unpack:boolean readEndOfBlock()"
        ]
    },
    "com.github.junrar.unpack.Unpack:boolean readVMCode()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void unpack29(boolean)"
        ]
    },
    "com.github.junrar.unpack.Unpack:int getChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.ppm.ModelPPM:boolean decodeInit(com.github.junrar.unpack.Unpack,int)",
            "com.github.junrar.unpack.ppm.RangeCoder:int getChar()"
        ]
    },
    "com.github.junrar.unpack.Unpack15:void unpack15(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void doUnpack(int,boolean)"
        ]
    },
    "com.github.junrar.unpack.Unpack20:void unpack20(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void doUnpack(int,boolean)"
        ]
    },
    "com.github.junrar.unpack.Unpack20:boolean ReadTables20()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack20:void unpack20(boolean)",
            "com.github.junrar.unpack.Unpack20:void ReadLastTables()"
        ]
    },
    "com.github.junrar.vfs2.provider.rar.RARFileSystem:void init()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.github.junrar.extract.ExtractArchive:void extractArchive(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.testutil.ExtractArchive:void extractArchive(java.io.File,java.io.File)"
        ]
    },
    "com.github.junrar.Archive:void doExtractFile(com.github.junrar.rarfile.FileHeader,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.Archive:void extractFile(com.github.junrar.rarfile.FileHeader,java.io.OutputStream)"
        ]
    },
    "com.github.junrar.unpack.Unpack:boolean readEndOfBlock()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void unpack29(boolean)"
        ]
    },
    "com.github.junrar.unpack.ppm.ModelPPM:boolean decodeInit(com.github.junrar.unpack.Unpack,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:boolean readTables()"
        ]
    },
    "com.github.junrar.unpack.ppm.RangeCoder:int getChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.ppm.RangeCoder:void initDecoder(com.github.junrar.unpack.Unpack)",
            "com.github.junrar.unpack.ppm.RangeCoder:void ariDecNormalize()"
        ]
    },
    "com.github.junrar.unpack.Unpack20:void ReadLastTables()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack20:void unpack20(boolean)"
        ]
    },
    "com.github.junrar.testutil.ExtractArchive:void extractArchive(java.io.File,java.io.File)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.testutil.ExtractArchive:void extractArchive(java.lang.String,java.lang.String)"
        ]
    },
    "com.github.junrar.Archive:void extractFile(com.github.junrar.rarfile.FileHeader,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.extract.ExtractArchive:void extractArchive(java.io.File,java.io.File)",
            "com.github.junrar.Archive$1:void run()"
        ]
    },
    "com.github.junrar.unpack.ppm.RangeCoder:void initDecoder(com.github.junrar.unpack.Unpack)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.ppm.ModelPPM:boolean decodeInit(com.github.junrar.unpack.Unpack,int)"
        ]
    },
    "com.github.junrar.unpack.ppm.RangeCoder:void ariDecNormalize()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.ppm.ModelPPM:int decodeChar()"
        ]
    },
    "com.github.junrar.testutil.ExtractArchive:void extractArchive(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.testutil.ExtractArchive:void main(java.lang.String[])"
        ]
    },
    "com.github.junrar.Archive$1:void run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.github.junrar.unpack.ppm.ModelPPM:int decodeChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void unpack29(boolean)",
            "com.github.junrar.unpack.Unpack:boolean readVMCodePPM()"
        ]
    },
    "com.github.junrar.testutil.ExtractArchive:void main(java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "com.github.junrar.unpack.Unpack:boolean readVMCodePPM()": {
        "isVulRoot": false,
        "vulCaller": [
            "com.github.junrar.unpack.Unpack:void unpack29(boolean)"
        ]
    }
}