{
    "org.bouncycastle.tls.crypto.impl.jcajce.JceDefaultTlsCredentialedDecryptor:org.bouncycastle.tls.crypto.TlsSecret safeDecryptPreMasterSecret(org.bouncycastle.tls.crypto.TlsCryptoParameters,java.security.PrivateKey,byte[])": {
        "isVulRoot": true,
        "vulCaller": [
            "org.bouncycastle.tls.crypto.impl.jcajce.JceDefaultTlsCredentialedDecryptor:org.bouncycastle.tls.crypto.TlsSecret decrypt(org.bouncycastle.tls.crypto.TlsCryptoParameters,byte[])"
        ]
    },
    "org.bouncycastle.tls.crypto.impl.jcajce.JceDefaultTlsCredentialedDecryptor:org.bouncycastle.tls.crypto.TlsSecret decrypt(org.bouncycastle.tls.crypto.TlsCryptoParameters,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsPSKKeyExchange:void processClientKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsRSAKeyExchange:void processClientKeyExchange(java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsPSKKeyExchange:void processClientKeyExchange(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:void processClientKeyExchange(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveClientKeyExchangeMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsRSAKeyExchange:void processClientKeyExchange(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:void processClientKeyExchange(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveClientKeyExchangeMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.DTLSServerProtocol:void processClientKeyExchange(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.TlsServerProtocol:void receiveClientKeyExchangeMessage(java.io.ByteArrayInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport accept(org.bouncycastle.tls.TlsServer,org.bouncycastle.tls.DatagramTransport)"
        ]
    },
    "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void processHandshakeQueue(org.bouncycastle.tls.ByteQueue)"
        ]
    },
    "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport accept(org.bouncycastle.tls.TlsServer,org.bouncycastle.tls.DatagramTransport)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.TlsProtocol:void processHandshakeQueue(org.bouncycastle.tls.ByteQueue)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void processRecord(short,byte[],int,int)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void processRecord(short,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.RecordStream:boolean readRecord()"
        ]
    },
    "org.bouncycastle.tls.RecordStream:boolean readRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void safeReadRecord()"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void safeReadRecord()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void blockForHandshake()",
            "org.bouncycastle.tls.TlsProtocol:int readApplicationData(byte[],int,int)",
            "org.bouncycastle.tls.TlsProtocol:void offerInput(byte[])"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void blockForHandshake()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsClientProtocol:void connect(org.bouncycastle.tls.TlsClient)",
            "org.bouncycastle.tls.TlsServerProtocol:void accept(org.bouncycastle.tls.TlsServer)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:int readApplicationData(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect$AppDataInput:int read()",
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect$AppDataInput:int read(byte[],int,int)",
            "org.bouncycastle.tls.TlsInputStream:int read(byte[],int,int)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void offerInput(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jsse.provider.ProvSSLEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)"
        ]
    },
    "org.bouncycastle.tls.TlsClientProtocol:void connect(org.bouncycastle.tls.TlsClient)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jsse.provider.ProvSSLEngine:void beginHandshake()",
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect:void startHandshake()"
        ]
    },
    "org.bouncycastle.tls.TlsServerProtocol:void accept(org.bouncycastle.tls.TlsServer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jsse.provider.ProvSSLEngine:void beginHandshake()",
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect:void startHandshake()"
        ]
    },
    "org.bouncycastle.jsse.provider.ProvSSLSocketDirect$AppDataInput:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsUtils:short readUint8(java.io.InputStream)",
            "org.bouncycastle.tls.TlsUtils:int readUint16(java.io.InputStream)",
            "org.bouncycastle.tls.TlsUtils:int readUint24(java.io.InputStream)",
            "org.bouncycastle.tls.TlsUtils:long readUint32(java.io.InputStream)",
            "org.bouncycastle.tls.TlsUtils:org.bouncycastle.tls.ProtocolVersion readVersion(java.io.InputStream)",
            "org.bouncycastle.tls.TlsUtils:int readVersionRaw(java.io.InputStream)"
        ]
    },
    "org.bouncycastle.jsse.provider.ProvSSLSocketDirect$AppDataInput:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.TlsInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jsse.provider.ProvSSLEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jsse.provider.ProvSSLEngine:void beginHandshake()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jsse.provider.ProvSSLEngine:javax.net.ssl.SSLEngineResult unwrap(java.nio.ByteBuffer,java.nio.ByteBuffer[],int,int)",
            "org.bouncycastle.jsse.provider.ProvSSLEngine:javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)"
        ]
    },
    "org.bouncycastle.jsse.provider.ProvSSLSocketDirect:void startHandshake()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect:void handshakeIfNecessary()"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:short readUint8(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.CertificateRequest:org.bouncycastle.tls.CertificateRequest parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)",
            "org.bouncycastle.tls.CertificateStatus:org.bouncycastle.tls.CertificateStatus parse(java.io.InputStream)",
            "org.bouncycastle.tls.CertificateStatusRequest:org.bouncycastle.tls.CertificateStatusRequest parse(java.io.InputStream)",
            "org.bouncycastle.tls.CertificateURL:org.bouncycastle.tls.CertificateURL parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)",
            "org.bouncycastle.tls.DTLSClientProtocol:void processServerHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.DTLSServerProtocol:void processClientHello(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])",
            "org.bouncycastle.tls.HeartbeatExtension:org.bouncycastle.tls.HeartbeatExtension parse(java.io.InputStream)",
            "org.bouncycastle.tls.HeartbeatMessage:org.bouncycastle.tls.HeartbeatMessage parse(java.io.InputStream)",
            "org.bouncycastle.tls.ServerName:org.bouncycastle.tls.ServerName parse(java.io.InputStream)",
            "org.bouncycastle.tls.SignatureAndHashAlgorithm:org.bouncycastle.tls.SignatureAndHashAlgorithm parse(java.io.InputStream)",
            "org.bouncycastle.tls.TlsClientProtocol:void receiveServerHelloMessage(java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsDHUtils:short[] readNegotiatedDHEGroupsClientExtension(byte[])",
            "org.bouncycastle.tls.TlsECCUtils:short[] readSupportedPointFormatsExtension(byte[])",
            "org.bouncycastle.tls.TlsECCUtils:org.bouncycastle.tls.crypto.TlsECConfig readECConfig(short[],java.io.InputStream)",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveClientHelloMessage(java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsUtils:byte[] readOpaque8(java.io.InputStream)",
            "org.bouncycastle.tls.TlsUtils:short[] readUint8Array(int,java.io.InputStream)",
            "org.bouncycastle.tls.URLAndHash:org.bouncycastle.tls.URLAndHash parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:int readUint16(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.CertificateURL:org.bouncycastle.tls.CertificateURL parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)",
            "org.bouncycastle.tls.DTLSClientProtocol:void processServerHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.DTLSServerProtocol:void processClientHello(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])",
            "org.bouncycastle.tls.HeartbeatMessage:org.bouncycastle.tls.HeartbeatMessage parse(java.io.InputStream)",
            "org.bouncycastle.tls.OCSPStatusRequest:org.bouncycastle.tls.OCSPStatusRequest parse(java.io.InputStream)",
            "org.bouncycastle.tls.ServerNameList:org.bouncycastle.tls.ServerNameList parse(java.io.InputStream)",
            "org.bouncycastle.tls.TlsClientProtocol:void receiveServerHelloMessage(java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsECCUtils:int[] readSupportedEllipticCurvesExtension(byte[])",
            "org.bouncycastle.tls.TlsECCUtils:org.bouncycastle.tls.crypto.TlsECConfig readECConfig(short[],java.io.InputStream)",
            "org.bouncycastle.tls.TlsProtocol:java.util.Hashtable readExtensions(java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsProtocol:java.util.Vector readSupplementalDataMessage(java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsSRTPUtils:org.bouncycastle.tls.UseSRTPData readUseSRTPExtension(byte[])",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveClientHelloMessage(java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsUtils:byte[] readOpaque16(java.io.InputStream)",
            "org.bouncycastle.tls.TlsUtils:int[] readUint16Array(int,java.io.InputStream)",
            "org.bouncycastle.tls.TlsUtils:java.util.Vector parseSupportedSignatureAlgorithms(boolean,java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:int readUint24(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.Certificate:org.bouncycastle.tls.Certificate parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)",
            "org.bouncycastle.tls.TlsUtils:long readUint48(java.io.InputStream)",
            "org.bouncycastle.tls.TlsUtils:byte[] readOpaque24(java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:long readUint32(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.NewSessionTicket:org.bouncycastle.tls.NewSessionTicket parse(java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:org.bouncycastle.tls.ProtocolVersion readVersion(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:byte[] processHelloVerifyRequest(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.DTLSClientProtocol:void processServerHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.DTLSServerProtocol:void processClientHello(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsClientProtocol:void receiveServerHelloMessage(java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveClientHelloMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:int readVersionRaw(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jsse.provider.ProvSSLEngine:javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jsse.provider.ProvSSLSocketDirect:void handshakeIfNecessary()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect$AppDataInput:int read()",
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect$AppDataInput:int read(byte[],int,int)",
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect$AppDataOutput:void write(int)",
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect$AppDataOutput:void write(byte[],int,int)",
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect:org.bouncycastle.jsse.BCSSLConnection getConnection()"
        ]
    },
    "org.bouncycastle.tls.CertificateRequest:org.bouncycastle.tls.CertificateRequest parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:void processCertificateRequest(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.CertificateStatus:org.bouncycastle.tls.CertificateStatus parse(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:void processCertificateStatus(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.CertificateStatusRequest:org.bouncycastle.tls.CertificateStatusRequest parse(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsExtensionsUtils:org.bouncycastle.tls.CertificateStatusRequest readStatusRequestExtension(byte[])"
        ]
    },
    "org.bouncycastle.tls.CertificateURL:org.bouncycastle.tls.CertificateURL parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.DTLSClientProtocol:void processServerHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.DTLSServerProtocol:void processClientHello(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.HeartbeatExtension:org.bouncycastle.tls.HeartbeatExtension parse(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsExtensionsUtils:org.bouncycastle.tls.HeartbeatExtension readHeartbeatExtension(byte[])"
        ]
    },
    "org.bouncycastle.tls.HeartbeatMessage:org.bouncycastle.tls.HeartbeatMessage parse(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.ServerName:org.bouncycastle.tls.ServerName parse(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.ServerNameList:org.bouncycastle.tls.ServerNameList parse(java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.SignatureAndHashAlgorithm:org.bouncycastle.tls.SignatureAndHashAlgorithm parse(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DigitallySigned:org.bouncycastle.tls.DigitallySigned parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)",
            "org.bouncycastle.tls.TlsUtils:java.util.Vector parseSupportedSignatureAlgorithms(boolean,java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsClientProtocol:void receiveServerHelloMessage(java.io.ByteArrayInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsDHUtils:short[] readNegotiatedDHEGroupsClientExtension(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsDHUtils:short[] getNegotiatedDHEGroupsClientExtension(java.util.Hashtable)"
        ]
    },
    "org.bouncycastle.tls.TlsECCUtils:short[] readSupportedPointFormatsExtension(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsECCUtils:short[] getSupportedPointFormatsExtension(java.util.Hashtable)"
        ]
    },
    "org.bouncycastle.tls.TlsECCUtils:org.bouncycastle.tls.crypto.TlsECConfig readECConfig(short[],java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsECCUtils:org.bouncycastle.tls.crypto.TlsECConfig receiveECConfig(org.bouncycastle.tls.TlsECConfigVerifier,short[],java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsServerProtocol:void receiveClientHelloMessage(java.io.ByteArrayInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:byte[] readOpaque8(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:byte[] processHelloVerifyRequest(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.DTLSClientProtocol:void processServerHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.DTLSServerProtocol:void processClientHello(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])",
            "org.bouncycastle.tls.ServerSRPParams:org.bouncycastle.tls.ServerSRPParams parse(java.io.InputStream)",
            "org.bouncycastle.tls.TlsClientProtocol:void receiveServerHelloMessage(java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsECDHEKeyExchange:void processServerKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsECDHKeyExchange:void processServerKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsECDHKeyExchange:void processClientKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsPSKKeyExchange:void processServerKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsPSKKeyExchange:void processClientKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsSRPUtils:byte[] readSRPExtension(byte[])",
            "org.bouncycastle.tls.TlsSRTPUtils:org.bouncycastle.tls.UseSRTPData readUseSRTPExtension(byte[])",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveClientHelloMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:short[] readUint8Array(int,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:void processClientHello(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsDHUtils:short[] readNegotiatedDHEGroupsClientExtension(byte[])",
            "org.bouncycastle.tls.TlsECCUtils:short[] readSupportedPointFormatsExtension(byte[])",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveClientHelloMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.URLAndHash:org.bouncycastle.tls.URLAndHash parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.CertificateURL:org.bouncycastle.tls.CertificateURL parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.OCSPStatusRequest:org.bouncycastle.tls.OCSPStatusRequest parse(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.CertificateStatusRequest:org.bouncycastle.tls.CertificateStatusRequest parse(java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.ServerNameList:org.bouncycastle.tls.ServerNameList parse(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsExtensionsUtils:org.bouncycastle.tls.ServerNameList readServerNameExtension(byte[])"
        ]
    },
    "org.bouncycastle.tls.TlsECCUtils:int[] readSupportedEllipticCurvesExtension(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.AbstractTlsClient:boolean allowUnexpectedServerExtension(java.lang.Integer,byte[])",
            "org.bouncycastle.tls.TlsECCUtils:int[] getSupportedEllipticCurvesExtension(java.util.Hashtable)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:java.util.Hashtable readExtensions(java.io.ByteArrayInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:void processServerHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.DTLSServerProtocol:void processClientHello(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])",
            "org.bouncycastle.tls.SessionParameters:java.util.Hashtable readServerExtensions()",
            "org.bouncycastle.tls.TlsClientProtocol:void receiveServerHelloMessage(java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveClientHelloMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:java.util.Vector readSupplementalDataMessage(java.io.ByteArrayInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:void processServerSupplementalData(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.DTLSServerProtocol:void processClientSupplementalData(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsSRTPUtils:org.bouncycastle.tls.UseSRTPData readUseSRTPExtension(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsSRTPUtils:org.bouncycastle.tls.UseSRTPData getUseSRTPExtension(java.util.Hashtable)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:byte[] readOpaque16(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.CertificateRequest:org.bouncycastle.tls.CertificateRequest parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)",
            "org.bouncycastle.tls.DigitallySigned:org.bouncycastle.tls.DigitallySigned parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)",
            "org.bouncycastle.tls.NewSessionTicket:org.bouncycastle.tls.NewSessionTicket parse(java.io.InputStream)",
            "org.bouncycastle.tls.OCSPStatusRequest:org.bouncycastle.tls.OCSPStatusRequest parse(java.io.InputStream)",
            "org.bouncycastle.tls.ServerName:org.bouncycastle.tls.ServerName parse(java.io.InputStream)",
            "org.bouncycastle.tls.TlsDHEKeyExchange:void processServerKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsDHKeyExchange:void processServerKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsDHKeyExchange:void processClientKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsDHUtils:java.math.BigInteger readDHParameter(java.io.InputStream)",
            "org.bouncycastle.tls.TlsPSKKeyExchange:void processServerKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsPSKKeyExchange:void processClientKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsProtocol:java.util.Hashtable readExtensions(java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsProtocol:java.util.Vector readSupplementalDataMessage(java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsRSAKeyExchange:void processClientKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsSRPUtils:java.math.BigInteger readSRPParameter(java.io.InputStream)",
            "org.bouncycastle.tls.URLAndHash:org.bouncycastle.tls.URLAndHash parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:int[] readUint16Array(int,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:void processClientHello(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsECCUtils:int[] readSupportedEllipticCurvesExtension(byte[])",
            "org.bouncycastle.tls.TlsSRTPUtils:org.bouncycastle.tls.UseSRTPData readUseSRTPExtension(byte[])",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveClientHelloMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:java.util.Vector parseSupportedSignatureAlgorithms(boolean,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.CertificateRequest:org.bouncycastle.tls.CertificateRequest parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)",
            "org.bouncycastle.tls.TlsUtils:java.util.Vector readSignatureAlgorithmsExtension(byte[])"
        ]
    },
    "org.bouncycastle.tls.Certificate:org.bouncycastle.tls.Certificate parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.Certificate processServerCertificate(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.DTLSServerProtocol:void processClientCertificate(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveCertificateMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:long readUint48(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.TlsUtils:byte[] readOpaque24(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.Certificate:org.bouncycastle.tls.Certificate parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)",
            "org.bouncycastle.tls.CertificateStatus:org.bouncycastle.tls.CertificateStatus parse(java.io.InputStream)",
            "org.bouncycastle.tls.TlsProtocol:java.util.Vector readSupplementalDataMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.NewSessionTicket:org.bouncycastle.tls.NewSessionTicket parse(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:void processNewSessionTicket(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsClientProtocol:void receiveNewSessionTicketMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.DTLSClientProtocol:byte[] processHelloVerifyRequest(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.jsse.provider.ProvSSLSocketDirect$AppDataOutput:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsUtils:void writeUint8(short,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeUint8(int,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeUint16(int,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeUint24(int,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeUint32(long,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeUint48(long,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeUint64(long,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeVersion(org.bouncycastle.tls.ProtocolVersion,java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.jsse.provider.ProvSSLSocketDirect$AppDataOutput:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.ByteQueue:void copyTo(java.io.OutputStream,int)",
            "org.bouncycastle.tls.CertificateURL$ListBuffer16:void encodeTo(java.io.OutputStream)",
            "org.bouncycastle.tls.RecordStream:byte[] decodeAndVerify(short,java.io.InputStream,int)",
            "org.bouncycastle.tls.RecordStream:void writeRecord(short,byte[],int,int)",
            "org.bouncycastle.tls.TlsProtocol:void writeHandshakeMessage(byte[],int,int)"
        ]
    },
    "org.bouncycastle.jsse.provider.ProvSSLSocketDirect:org.bouncycastle.jsse.BCSSLConnection getConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect:javax.net.ssl.SSLSession getSession()"
        ]
    },
    "org.bouncycastle.tls.DTLSClientProtocol:void processCertificateRequest(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void processHandshakeQueue(org.bouncycastle.tls.ByteQueue)"
        ]
    },
    "org.bouncycastle.tls.DTLSClientProtocol:void processCertificateStatus(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.TlsExtensionsUtils:org.bouncycastle.tls.CertificateStatusRequest readStatusRequestExtension(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsExtensionsUtils:org.bouncycastle.tls.CertificateStatusRequest getStatusRequestExtension(java.util.Hashtable)"
        ]
    },
    "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport connect(org.bouncycastle.tls.TlsClient,org.bouncycastle.tls.DatagramTransport)"
        ]
    },
    "org.bouncycastle.tls.TlsExtensionsUtils:org.bouncycastle.tls.HeartbeatExtension readHeartbeatExtension(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsExtensionsUtils:org.bouncycastle.tls.HeartbeatExtension getHeartbeatExtension(java.util.Hashtable)"
        ]
    },
    "org.bouncycastle.tls.DigitallySigned:org.bouncycastle.tls.DigitallySigned parse(org.bouncycastle.tls.TlsContext,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.AbstractTlsKeyExchange:org.bouncycastle.tls.DigitallySigned parseSignature(java.io.InputStream)",
            "org.bouncycastle.tls.DTLSServerProtocol:void processCertificateVerify(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[],org.bouncycastle.tls.TlsHandshakeHash)",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveCertificateVerifyMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsDHUtils:short[] getNegotiatedDHEGroupsClientExtension(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.TlsECCUtils:short[] getSupportedPointFormatsExtension(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.AbstractTlsClient:void processServerExtensions(java.util.Hashtable)",
            "org.bouncycastle.tls.AbstractTlsServer:void processClientExtensions(java.util.Hashtable)"
        ]
    },
    "org.bouncycastle.tls.TlsECCUtils:org.bouncycastle.tls.crypto.TlsECConfig receiveECConfig(org.bouncycastle.tls.TlsECConfigVerifier,short[],java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsECDHEKeyExchange:void processServerKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsECDHKeyExchange:void processServerKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsPSKKeyExchange:void processServerKeyExchange(java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.ServerSRPParams:org.bouncycastle.tls.ServerSRPParams parse(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsSRPKeyExchange:void processServerKeyExchange(java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsECDHEKeyExchange:void processServerKeyExchange(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:void processServerKeyExchange(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsECDHKeyExchange:void processServerKeyExchange(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:void processServerKeyExchange(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsECDHKeyExchange:void processClientKeyExchange(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:void processClientKeyExchange(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveClientKeyExchangeMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsPSKKeyExchange:void processServerKeyExchange(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:void processServerKeyExchange(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsSRPUtils:byte[] readSRPExtension(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsSRPUtils:byte[] getSRPExtension(java.util.Hashtable)"
        ]
    },
    "org.bouncycastle.tls.TlsExtensionsUtils:org.bouncycastle.tls.ServerNameList readServerNameExtension(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsExtensionsUtils:org.bouncycastle.tls.ServerNameList getServerNameExtension(java.util.Hashtable)"
        ]
    },
    "org.bouncycastle.tls.AbstractTlsClient:boolean allowUnexpectedServerExtension(java.lang.Integer,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.AbstractTlsClient:void checkForUnexpectedServerExtension(java.util.Hashtable,java.lang.Integer)"
        ]
    },
    "org.bouncycastle.tls.TlsECCUtils:int[] getSupportedEllipticCurvesExtension(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.AbstractTlsServer:void processClientExtensions(java.util.Hashtable)"
        ]
    },
    "org.bouncycastle.tls.SessionParameters:java.util.Hashtable readServerExtensions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:void processServerHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsClientProtocol:void receiveServerHelloMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.DTLSClientProtocol:void processServerSupplementalData(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.DTLSServerProtocol:void processClientSupplementalData(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.TlsSRTPUtils:org.bouncycastle.tls.UseSRTPData getUseSRTPExtension(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.TlsDHEKeyExchange:void processServerKeyExchange(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:void processServerKeyExchange(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsDHKeyExchange:void processServerKeyExchange(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:void processServerKeyExchange(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsDHKeyExchange:void processClientKeyExchange(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:void processClientKeyExchange(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveClientKeyExchangeMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsDHUtils:java.math.BigInteger readDHParameter(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsDHUtils:org.bouncycastle.tls.crypto.TlsDHConfig readDHConfig(java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsSRPUtils:java.math.BigInteger readSRPParameter(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.ServerSRPParams:org.bouncycastle.tls.ServerSRPParams parse(java.io.InputStream)",
            "org.bouncycastle.tls.TlsSRPKeyExchange:void processClientKeyExchange(java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:java.util.Vector readSignatureAlgorithmsExtension(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsUtils:java.util.Vector getSignatureAlgorithmsExtension(java.util.Hashtable)"
        ]
    },
    "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.Certificate processServerCertificate(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.DTLSServerProtocol:void processClientCertificate(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.TlsServerProtocol:void receiveCertificateMessage(java.io.ByteArrayInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.DTLSClientProtocol:void processNewSessionTicket(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.TlsClientProtocol:void receiveNewSessionTicketMessage(java.io.ByteArrayInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void writeUint8(short,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.CertificateStatus:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.CertificateStatusRequest:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.CertificateURL:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.DTLSReliableHandshake:void writeHandshakeFragment(org.bouncycastle.tls.DTLSReliableHandshake$Message,int,int)",
            "org.bouncycastle.tls.DTLSServerProtocol:byte[] generateServerHello(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState)",
            "org.bouncycastle.tls.HeartbeatExtension:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.HeartbeatMessage:void encode(org.bouncycastle.tls.TlsContext,java.io.OutputStream)",
            "org.bouncycastle.tls.ServerName:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.SignatureAndHashAlgorithm:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.TlsECCUtils:void writeNamedECParameters(int,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsProtocol$HandshakeMessage:void <init>(org.bouncycastle.tls.TlsProtocol,short,int)",
            "org.bouncycastle.tls.TlsServerProtocol:void sendServerHelloMessage()",
            "org.bouncycastle.tls.TlsUtils:void writeUint8Array(short[],java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void writeUint8(int,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.CertificateRequest:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeOpaque8(byte[],java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeUint8ArrayWithUint8Length(short[],java.io.OutputStream)",
            "org.bouncycastle.tls.URLAndHash:void encode(java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void writeUint16(int,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.CertificateRequest:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.CertificateURL$ListBuffer16:void <init>(org.bouncycastle.tls.CertificateURL)",
            "org.bouncycastle.tls.DTLSReliableHandshake:void writeHandshakeFragment(org.bouncycastle.tls.DTLSReliableHandshake$Message,int,int)",
            "org.bouncycastle.tls.DTLSServerProtocol:byte[] generateServerHello(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState)",
            "org.bouncycastle.tls.HeartbeatMessage:void encode(org.bouncycastle.tls.TlsContext,java.io.OutputStream)",
            "org.bouncycastle.tls.OCSPStatusRequest:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.ServerNameList:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.TlsECCUtils:void writeNamedECParameters(int,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsProtocol:void writeSelectedExtensions(java.io.OutputStream,java.util.Hashtable,boolean)",
            "org.bouncycastle.tls.TlsProtocol:void writeSupplementalData(java.io.OutputStream,java.util.Vector)",
            "org.bouncycastle.tls.TlsServerProtocol:void sendServerHelloMessage()",
            "org.bouncycastle.tls.TlsUtils:void writeOpaque16(byte[],java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeUint16Array(int[],java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeUint16ArrayWithUint16Length(int[],java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void encodeSupportedSignatureAlgorithms(java.util.Vector,boolean,java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void writeUint24(int,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.Certificate:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.DTLSReliableHandshake:void writeHandshakeFragment(org.bouncycastle.tls.DTLSReliableHandshake$Message,int,int)",
            "org.bouncycastle.tls.TlsUtils:void writeOpaque24(byte[],java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void writeUint32(long,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.NewSessionTicket:void encode(java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void writeUint48(long,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.TlsUtils:void writeUint64(long,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.TlsUtils:void writeVersion(org.bouncycastle.tls.ProtocolVersion,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateClientHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.TlsClient)",
            "org.bouncycastle.tls.DTLSServerProtocol:byte[] generateServerHello(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState)",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientHelloMessage()",
            "org.bouncycastle.tls.TlsServerProtocol:void sendServerHelloMessage()"
        ]
    },
    "org.bouncycastle.tls.ByteQueue:void copyTo(java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void processHandshakeQueue(org.bouncycastle.tls.ByteQueue)"
        ]
    },
    "org.bouncycastle.tls.CertificateURL$ListBuffer16:void encodeTo(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.CertificateURL:void encode(java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.RecordStream:byte[] decodeAndVerify(short,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.RecordStream:boolean readRecord()"
        ]
    },
    "org.bouncycastle.tls.RecordStream:void writeRecord(short,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void safeWriteRecord(short,byte[],int,int)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void writeHandshakeMessage(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol$HandshakeMessage:void writeToRecordStream()",
            "org.bouncycastle.tls.TlsServerProtocol:void sendServerHelloDoneMessage()"
        ]
    },
    "org.bouncycastle.jsse.provider.ProvSSLSocketDirect:javax.net.ssl.SSLSession getSession()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.TlsExtensionsUtils:org.bouncycastle.tls.CertificateStatusRequest getStatusRequestExtension(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport connect(org.bouncycastle.tls.TlsClient,org.bouncycastle.tls.DatagramTransport)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.TlsExtensionsUtils:org.bouncycastle.tls.HeartbeatExtension getHeartbeatExtension(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.AbstractTlsKeyExchange:org.bouncycastle.tls.DigitallySigned parseSignature(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsDHEKeyExchange:void processServerKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsECDHEKeyExchange:void processServerKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsSRPKeyExchange:void processServerKeyExchange(java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.DTLSServerProtocol:void processCertificateVerify(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[],org.bouncycastle.tls.TlsHandshakeHash)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.TlsServerProtocol:void receiveCertificateVerifyMessage(java.io.ByteArrayInputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.AbstractTlsClient:void processServerExtensions(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:void processServerHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.SRPTlsClient:void processServerExtensions(java.util.Hashtable)",
            "org.bouncycastle.tls.TlsClientProtocol:void receiveServerHelloMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.AbstractTlsServer:void processClientExtensions(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:void processClientHello(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])",
            "org.bouncycastle.tls.SRPTlsServer:void processClientExtensions(java.util.Hashtable)",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveClientHelloMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsSRPKeyExchange:void processServerKeyExchange(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:void processServerKeyExchange(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.DTLSClientProtocol:void processServerKeyExchange(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.TlsSRPUtils:byte[] getSRPExtension(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.SRPTlsServer:void processClientExtensions(java.util.Hashtable)"
        ]
    },
    "org.bouncycastle.tls.TlsExtensionsUtils:org.bouncycastle.tls.ServerNameList getServerNameExtension(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.AbstractTlsClient:void checkForUnexpectedServerExtension(java.util.Hashtable,java.lang.Integer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.AbstractTlsClient:void processServerExtensions(java.util.Hashtable)"
        ]
    },
    "org.bouncycastle.tls.TlsDHUtils:org.bouncycastle.tls.crypto.TlsDHConfig readDHConfig(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsDHUtils:org.bouncycastle.tls.crypto.TlsDHConfig receiveDHConfig(org.bouncycastle.tls.TlsDHConfigVerifier,java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsSRPKeyExchange:void processClientKeyExchange(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:void processClientKeyExchange(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveClientKeyExchangeMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:java.util.Vector getSignatureAlgorithmsExtension(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.AbstractTlsServer:void processClientExtensions(java.util.Hashtable)"
        ]
    },
    "org.bouncycastle.tls.CertificateStatus:void encode(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:byte[] generateCertificateStatus(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.CertificateStatus)",
            "org.bouncycastle.tls.TlsServerProtocol:void sendCertificateStatusMessage(org.bouncycastle.tls.CertificateStatus)"
        ]
    },
    "org.bouncycastle.tls.CertificateStatusRequest:void encode(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsExtensionsUtils:byte[] createStatusRequestExtension(org.bouncycastle.tls.CertificateStatusRequest)"
        ]
    },
    "org.bouncycastle.tls.CertificateURL:void encode(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.DTLSReliableHandshake:void writeHandshakeFragment(org.bouncycastle.tls.DTLSReliableHandshake$Message,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSReliableHandshake:void writeMessage(org.bouncycastle.tls.DTLSReliableHandshake$Message)"
        ]
    },
    "org.bouncycastle.tls.DTLSServerProtocol:byte[] generateServerHello(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.HeartbeatExtension:void encode(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsExtensionsUtils:byte[] createHeartbeatExtension(org.bouncycastle.tls.HeartbeatExtension)"
        ]
    },
    "org.bouncycastle.tls.HeartbeatMessage:void encode(org.bouncycastle.tls.TlsContext,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.ServerName:void encode(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.ServerNameList:void encode(java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.SignatureAndHashAlgorithm:void encode(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DigitallySigned:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void encodeSupportedSignatureAlgorithms(java.util.Vector,boolean,java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsECCUtils:void writeNamedECParameters(int,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsECCUtils:void writeECConfig(org.bouncycastle.tls.crypto.TlsECConfig,java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol$HandshakeMessage:void <init>(org.bouncycastle.tls.TlsProtocol,short,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol$HandshakeMessage:void <init>(org.bouncycastle.tls.TlsProtocol,short)",
            "org.bouncycastle.tls.TlsProtocol:void sendFinishedMessage()",
            "org.bouncycastle.tls.TlsServerProtocol:void sendServerKeyExchangeMessage(byte[])"
        ]
    },
    "org.bouncycastle.tls.TlsServerProtocol:void sendServerHelloMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void writeUint8Array(short[],java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsUtils:void writeUint8ArrayWithUint8Length(short[],java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.CertificateRequest:void encode(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:byte[] generateCertificateRequest(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.CertificateRequest)",
            "org.bouncycastle.tls.TlsServerProtocol:void sendCertificateRequestMessage(org.bouncycastle.tls.CertificateRequest)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void writeOpaque8(byte[],java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateClientHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.TlsClient)",
            "org.bouncycastle.tls.DTLSServerProtocol:byte[] generateServerHello(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState)",
            "org.bouncycastle.tls.ServerSRPParams:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientHelloMessage()",
            "org.bouncycastle.tls.TlsECDHKeyExchange:void generateEphemeral(java.io.OutputStream)",
            "org.bouncycastle.tls.TlsPSKKeyExchange:void generateEphemeralECDH(java.io.OutputStream)",
            "org.bouncycastle.tls.TlsSRTPUtils:byte[] createUseSRTPExtension(org.bouncycastle.tls.UseSRTPData)",
            "org.bouncycastle.tls.TlsServerProtocol:void sendServerHelloMessage()"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void writeUint8ArrayWithUint8Length(short[],java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.CertificateRequest:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateClientHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.TlsClient)",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientHelloMessage()"
        ]
    },
    "org.bouncycastle.tls.URLAndHash:void encode(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.CertificateURL:void encode(java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.CertificateURL$ListBuffer16:void <init>(org.bouncycastle.tls.CertificateURL)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.CertificateURL:void encode(java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.OCSPStatusRequest:void encode(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.CertificateStatusRequest:void encode(java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.ServerNameList:void encode(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsExtensionsUtils:byte[] createServerNameExtension(org.bouncycastle.tls.ServerNameList)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void writeSelectedExtensions(java.io.OutputStream,java.util.Hashtable,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void writeExtensions(java.io.OutputStream,java.util.Hashtable)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void writeSupplementalData(java.io.OutputStream,java.util.Vector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSProtocol:byte[] generateSupplementalData(java.util.Vector)",
            "org.bouncycastle.tls.TlsProtocol:void sendSupplementalDataMessage(java.util.Vector)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void writeOpaque16(byte[],java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.CertificateRequest:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.DigitallySigned:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.NewSessionTicket:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.OCSPStatusRequest:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.ServerName:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.TlsDHKeyExchange:void generateEphemeral(java.io.OutputStream)",
            "org.bouncycastle.tls.TlsDHUtils:void writeDHParameter(java.math.BigInteger,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsPSKKeyExchange:byte[] generateServerKeyExchange()",
            "org.bouncycastle.tls.TlsPSKKeyExchange:void generateClientKeyExchange(java.io.OutputStream)",
            "org.bouncycastle.tls.TlsPSKKeyExchange:org.bouncycastle.tls.crypto.TlsSecret generatePreMasterSecret()",
            "org.bouncycastle.tls.TlsPSKKeyExchange:void generateEphemeralDH(java.io.OutputStream)",
            "org.bouncycastle.tls.TlsProtocol:void writeExtensions(java.io.OutputStream,java.util.Hashtable)",
            "org.bouncycastle.tls.TlsProtocol:void writeSelectedExtensions(java.io.OutputStream,java.util.Hashtable,boolean)",
            "org.bouncycastle.tls.TlsProtocol:void writeSupplementalData(java.io.OutputStream,java.util.Vector)",
            "org.bouncycastle.tls.TlsRSAUtils:org.bouncycastle.tls.crypto.TlsSecret generateEncryptedPreMasterSecret(org.bouncycastle.tls.TlsContext,org.bouncycastle.tls.crypto.TlsCertificate,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsSRPUtils:void writeSRPParameter(java.math.BigInteger,java.io.OutputStream)",
            "org.bouncycastle.tls.URLAndHash:void encode(java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void writeUint16Array(int[],java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsUtils:void writeUint16ArrayWithUint16Length(int[],java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void writeUint16ArrayWithUint16Length(int[],java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateClientHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.TlsClient)",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientHelloMessage()",
            "org.bouncycastle.tls.TlsSRTPUtils:byte[] createUseSRTPExtension(org.bouncycastle.tls.UseSRTPData)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void encodeSupportedSignatureAlgorithms(java.util.Vector,boolean,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.CertificateRequest:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:byte[] createSignatureAlgorithmsExtension(java.util.Vector)"
        ]
    },
    "org.bouncycastle.tls.Certificate:void encode(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSProtocol:byte[] generateCertificate(org.bouncycastle.tls.Certificate)",
            "org.bouncycastle.tls.TlsProtocol:void sendCertificateMessage(org.bouncycastle.tls.Certificate)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void writeOpaque24(byte[],java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.Certificate:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.CertificateStatus:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.TlsProtocol:void writeSupplementalData(java.io.OutputStream,java.util.Vector)"
        ]
    },
    "org.bouncycastle.tls.NewSessionTicket:void encode(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:byte[] generateNewSessionTicket(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.NewSessionTicket)",
            "org.bouncycastle.tls.TlsServerProtocol:void sendNewSessionTicketMessage(org.bouncycastle.tls.NewSessionTicket)"
        ]
    },
    "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateClientHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.TlsClient)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.TlsClientProtocol:void sendClientHelloMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsClientProtocol:void connect(org.bouncycastle.tls.TlsClient)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void safeWriteRecord(short,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void writeApplicationData(byte[],int,int)",
            "org.bouncycastle.tls.TlsProtocol:void writeHandshakeMessage(byte[],int,int)",
            "org.bouncycastle.tls.TlsProtocol:void raiseAlert(short,short,java.lang.String,java.lang.Throwable)",
            "org.bouncycastle.tls.TlsProtocol:void sendChangeCipherSpecMessage()"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol$HandshakeMessage:void writeToRecordStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsClientProtocol:void sendCertificateVerifyMessage(org.bouncycastle.tls.DigitallySigned)",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientHelloMessage()",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientKeyExchangeMessage()",
            "org.bouncycastle.tls.TlsProtocol:void sendCertificateMessage(org.bouncycastle.tls.Certificate)",
            "org.bouncycastle.tls.TlsProtocol:void sendFinishedMessage()",
            "org.bouncycastle.tls.TlsProtocol:void sendSupplementalDataMessage(java.util.Vector)",
            "org.bouncycastle.tls.TlsServerProtocol:void sendCertificateRequestMessage(org.bouncycastle.tls.CertificateRequest)",
            "org.bouncycastle.tls.TlsServerProtocol:void sendCertificateStatusMessage(org.bouncycastle.tls.CertificateStatus)",
            "org.bouncycastle.tls.TlsServerProtocol:void sendNewSessionTicketMessage(org.bouncycastle.tls.NewSessionTicket)",
            "org.bouncycastle.tls.TlsServerProtocol:void sendServerHelloMessage()",
            "org.bouncycastle.tls.TlsServerProtocol:void sendServerKeyExchangeMessage(byte[])"
        ]
    },
    "org.bouncycastle.tls.TlsServerProtocol:void sendServerHelloDoneMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.SRPTlsClient:void processServerExtensions(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:void processServerHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsClientProtocol:void receiveServerHelloMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.SRPTlsServer:void processClientExtensions(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:void processClientHello(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,byte[])",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveClientHelloMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsDHUtils:org.bouncycastle.tls.crypto.TlsDHConfig receiveDHConfig(org.bouncycastle.tls.TlsDHConfigVerifier,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsDHEKeyExchange:void processServerKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsDHKeyExchange:void processServerKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsPSKKeyExchange:void processServerKeyExchange(java.io.InputStream)"
        ]
    },
    "org.bouncycastle.tls.DTLSServerProtocol:byte[] generateCertificateStatus(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.CertificateStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.TlsServerProtocol:void sendCertificateStatusMessage(org.bouncycastle.tls.CertificateStatus)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsExtensionsUtils:byte[] createStatusRequestExtension(org.bouncycastle.tls.CertificateStatusRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsExtensionsUtils:void addStatusRequestExtension(java.util.Hashtable,org.bouncycastle.tls.CertificateStatusRequest)"
        ]
    },
    "org.bouncycastle.tls.DTLSReliableHandshake:void writeMessage(org.bouncycastle.tls.DTLSReliableHandshake$Message)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSReliableHandshake:void sendMessage(short,byte[])",
            "org.bouncycastle.tls.DTLSReliableHandshake:void resendOutboundFlight()"
        ]
    },
    "org.bouncycastle.tls.TlsExtensionsUtils:byte[] createHeartbeatExtension(org.bouncycastle.tls.HeartbeatExtension)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsExtensionsUtils:void addHeartbeatExtension(java.util.Hashtable,org.bouncycastle.tls.HeartbeatExtension)"
        ]
    },
    "org.bouncycastle.tls.DigitallySigned:void encode(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateCertificateVerify(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DigitallySigned)",
            "org.bouncycastle.tls.TlsClientProtocol:void sendCertificateVerifyMessage(org.bouncycastle.tls.DigitallySigned)",
            "org.bouncycastle.tls.TlsDHEKeyExchange:byte[] generateServerKeyExchange()",
            "org.bouncycastle.tls.TlsECDHEKeyExchange:byte[] generateServerKeyExchange()",
            "org.bouncycastle.tls.TlsSRPKeyExchange:byte[] generateServerKeyExchange()"
        ]
    },
    "org.bouncycastle.tls.TlsECCUtils:void writeECConfig(org.bouncycastle.tls.crypto.TlsECConfig,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsECDHEKeyExchange:byte[] generateServerKeyExchange()",
            "org.bouncycastle.tls.TlsECDHKeyExchange:byte[] generateServerKeyExchange()",
            "org.bouncycastle.tls.TlsPSKKeyExchange:byte[] generateServerKeyExchange()"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol$HandshakeMessage:void <init>(org.bouncycastle.tls.TlsProtocol,short)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsClientProtocol:void sendCertificateVerifyMessage(org.bouncycastle.tls.DigitallySigned)",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientHelloMessage()",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientKeyExchangeMessage()",
            "org.bouncycastle.tls.TlsProtocol:void sendCertificateMessage(org.bouncycastle.tls.Certificate)",
            "org.bouncycastle.tls.TlsProtocol:void sendSupplementalDataMessage(java.util.Vector)",
            "org.bouncycastle.tls.TlsServerProtocol:void sendCertificateRequestMessage(org.bouncycastle.tls.CertificateRequest)",
            "org.bouncycastle.tls.TlsServerProtocol:void sendCertificateStatusMessage(org.bouncycastle.tls.CertificateStatus)",
            "org.bouncycastle.tls.TlsServerProtocol:void sendNewSessionTicketMessage(org.bouncycastle.tls.NewSessionTicket)",
            "org.bouncycastle.tls.TlsServerProtocol:void sendServerHelloMessage()"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void sendFinishedMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsServerProtocol:void sendServerKeyExchangeMessage(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.DTLSServerProtocol:byte[] generateCertificateRequest(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.CertificateRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.TlsServerProtocol:void sendCertificateRequestMessage(org.bouncycastle.tls.CertificateRequest)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.ServerSRPParams:void encode(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsSRPKeyExchange:byte[] generateServerKeyExchange()"
        ]
    },
    "org.bouncycastle.tls.TlsECDHKeyExchange:void generateEphemeral(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsECDHEKeyExchange:byte[] generateServerKeyExchange()",
            "org.bouncycastle.tls.TlsECDHKeyExchange:byte[] generateServerKeyExchange()",
            "org.bouncycastle.tls.TlsECDHKeyExchange:void generateClientKeyExchange(java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsPSKKeyExchange:void generateEphemeralECDH(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsPSKKeyExchange:byte[] generateServerKeyExchange()",
            "org.bouncycastle.tls.TlsPSKKeyExchange:void generateClientKeyExchange(java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsSRTPUtils:byte[] createUseSRTPExtension(org.bouncycastle.tls.UseSRTPData)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsSRTPUtils:void addUseSRTPExtension(java.util.Hashtable,org.bouncycastle.tls.UseSRTPData)"
        ]
    },
    "org.bouncycastle.tls.TlsExtensionsUtils:byte[] createServerNameExtension(org.bouncycastle.tls.ServerNameList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsExtensionsUtils:void addServerNameExtension(java.util.Hashtable,org.bouncycastle.tls.ServerNameList)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void writeExtensions(java.io.OutputStream,java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateClientHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.TlsClient)",
            "org.bouncycastle.tls.DTLSServerProtocol:byte[] generateServerHello(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState)",
            "org.bouncycastle.tls.SessionParameters$Builder:org.bouncycastle.tls.SessionParameters$Builder setServerExtensions(java.util.Hashtable)",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientHelloMessage()",
            "org.bouncycastle.tls.TlsServerProtocol:void sendServerHelloMessage()"
        ]
    },
    "org.bouncycastle.tls.DTLSProtocol:byte[] generateSupplementalData(java.util.Vector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)",
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void sendSupplementalDataMessage(java.util.Vector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsDHKeyExchange:void generateEphemeral(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsDHEKeyExchange:byte[] generateServerKeyExchange()",
            "org.bouncycastle.tls.TlsDHKeyExchange:byte[] generateServerKeyExchange()",
            "org.bouncycastle.tls.TlsDHKeyExchange:void generateClientKeyExchange(java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsDHUtils:void writeDHParameter(java.math.BigInteger,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsDHUtils:void writeDHConfig(org.bouncycastle.tls.crypto.TlsDHConfig,java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsPSKKeyExchange:byte[] generateServerKeyExchange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)",
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsPSKKeyExchange:void generateClientKeyExchange(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateClientKeyExchange(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState)",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientKeyExchangeMessage()"
        ]
    },
    "org.bouncycastle.tls.TlsPSKKeyExchange:org.bouncycastle.tls.crypto.TlsSecret generatePreMasterSecret()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void establishMasterSecret(org.bouncycastle.tls.TlsContext,org.bouncycastle.tls.TlsKeyExchange)"
        ]
    },
    "org.bouncycastle.tls.TlsPSKKeyExchange:void generateEphemeralDH(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsPSKKeyExchange:byte[] generateServerKeyExchange()",
            "org.bouncycastle.tls.TlsPSKKeyExchange:void generateClientKeyExchange(java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsRSAUtils:org.bouncycastle.tls.crypto.TlsSecret generateEncryptedPreMasterSecret(org.bouncycastle.tls.TlsContext,org.bouncycastle.tls.crypto.TlsCertificate,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsPSKKeyExchange:void generateClientKeyExchange(java.io.OutputStream)",
            "org.bouncycastle.tls.TlsRSAKeyExchange:void generateClientKeyExchange(java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsSRPUtils:void writeSRPParameter(java.math.BigInteger,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.ServerSRPParams:void encode(java.io.OutputStream)",
            "org.bouncycastle.tls.TlsSRPKeyExchange:void generateClientKeyExchange(java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:byte[] createSignatureAlgorithmsExtension(java.util.Vector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsUtils:void addSignatureAlgorithmsExtension(java.util.Hashtable,java.util.Vector)"
        ]
    },
    "org.bouncycastle.tls.DTLSProtocol:byte[] generateCertificate(org.bouncycastle.tls.Certificate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)",
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void sendCertificateMessage(org.bouncycastle.tls.Certificate)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.DTLSServerProtocol:byte[] generateNewSessionTicket(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.NewSessionTicket)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.TlsServerProtocol:void sendNewSessionTicketMessage(org.bouncycastle.tls.NewSessionTicket)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void writeApplicationData(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jsse.provider.ProvSSLEngine:javax.net.ssl.SSLEngineResult wrap(java.nio.ByteBuffer[],int,int,java.nio.ByteBuffer)",
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect$AppDataOutput:void write(int)",
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect$AppDataOutput:void write(byte[],int,int)",
            "org.bouncycastle.tls.TlsOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void raiseAlert(short,short,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void failWithError(short,short,java.lang.String,java.lang.Throwable)",
            "org.bouncycastle.tls.TlsProtocol:void raiseWarning(short,java.lang.String)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void sendChangeCipherSpecMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveClientKeyExchangeMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsClientProtocol:void sendCertificateVerifyMessage(org.bouncycastle.tls.DigitallySigned)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsClientProtocol:void sendClientKeyExchangeMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsExtensionsUtils:void addStatusRequestExtension(java.util.Hashtable,org.bouncycastle.tls.CertificateStatusRequest)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.DTLSReliableHandshake:void sendMessage(short,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)",
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.DTLSReliableHandshake:void resendOutboundFlight()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSReliableHandshake:org.bouncycastle.tls.DTLSReliableHandshake$Message receiveMessage()",
            "org.bouncycastle.tls.DTLSReliableHandshake:void access$400(org.bouncycastle.tls.DTLSReliableHandshake)"
        ]
    },
    "org.bouncycastle.tls.TlsExtensionsUtils:void addHeartbeatExtension(java.util.Hashtable,org.bouncycastle.tls.HeartbeatExtension)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateCertificateVerify(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DigitallySigned)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.TlsDHEKeyExchange:byte[] generateServerKeyExchange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)",
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsECDHEKeyExchange:byte[] generateServerKeyExchange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)",
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsSRPKeyExchange:byte[] generateServerKeyExchange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)",
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsECDHKeyExchange:byte[] generateServerKeyExchange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)",
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsECDHKeyExchange:void generateClientKeyExchange(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateClientKeyExchange(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState)",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientKeyExchangeMessage()"
        ]
    },
    "org.bouncycastle.tls.TlsSRTPUtils:void addUseSRTPExtension(java.util.Hashtable,org.bouncycastle.tls.UseSRTPData)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.tls.TlsExtensionsUtils:void addServerNameExtension(java.util.Hashtable,org.bouncycastle.tls.ServerNameList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jsse.provider.ProvTlsClient:java.util.Hashtable getClientExtensions()"
        ]
    },
    "org.bouncycastle.tls.SessionParameters$Builder:org.bouncycastle.tls.SessionParameters$Builder setServerExtensions(java.util.Hashtable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)",
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)",
            "org.bouncycastle.tls.TlsProtocol:void completeHandshake()"
        ]
    },
    "org.bouncycastle.tls.TlsDHKeyExchange:byte[] generateServerKeyExchange()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)",
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsDHKeyExchange:void generateClientKeyExchange(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateClientKeyExchange(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState)",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientKeyExchangeMessage()"
        ]
    },
    "org.bouncycastle.tls.TlsDHUtils:void writeDHConfig(org.bouncycastle.tls.crypto.TlsDHConfig,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsDHEKeyExchange:byte[] generateServerKeyExchange()",
            "org.bouncycastle.tls.TlsDHKeyExchange:byte[] generateServerKeyExchange()",
            "org.bouncycastle.tls.TlsPSKKeyExchange:byte[] generateServerKeyExchange()"
        ]
    },
    "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateClientKeyExchange(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void establishMasterSecret(org.bouncycastle.tls.TlsContext,org.bouncycastle.tls.TlsKeyExchange)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)",
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)",
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsServerProtocol:void receiveClientKeyExchangeMessage(java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsRSAKeyExchange:void generateClientKeyExchange(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateClientKeyExchange(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState)",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientKeyExchangeMessage()"
        ]
    },
    "org.bouncycastle.tls.TlsSRPKeyExchange:void generateClientKeyExchange(java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateClientKeyExchange(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState)",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientKeyExchangeMessage()"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void addSignatureAlgorithmsExtension(java.util.Hashtable,java.util.Vector)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.AbstractTlsClient:java.util.Hashtable getClientExtensions()"
        ]
    },
    "org.bouncycastle.tls.TlsOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.ByteQueue:void copyTo(java.io.OutputStream,int)",
            "org.bouncycastle.tls.CertificateURL$ListBuffer16:void encodeTo(java.io.OutputStream)",
            "org.bouncycastle.tls.RecordStream:byte[] decodeAndVerify(short,java.io.InputStream,int)",
            "org.bouncycastle.tls.RecordStream:void writeRecord(short,byte[],int,int)",
            "org.bouncycastle.tls.TlsOutputStream:void write(int)",
            "org.bouncycastle.tls.TlsProtocol:void writeHandshakeMessage(byte[],int,int)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void failWithError(short,short,java.lang.String,java.lang.Throwable)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void safeCheckRecordHeader(byte[])",
            "org.bouncycastle.tls.TlsProtocol:void safeReadRecord()",
            "org.bouncycastle.tls.TlsProtocol:void safeWriteRecord(short,byte[],int,int)",
            "org.bouncycastle.tls.TlsProtocol:void handleClose(boolean)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void raiseWarning(short,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void sendCertificateMessage(org.bouncycastle.tls.Certificate)",
            "org.bouncycastle.tls.TlsProtocol:void handleClose(boolean)",
            "org.bouncycastle.tls.TlsProtocol:void refuseRenegotiation()"
        ]
    },
    "org.bouncycastle.tls.DTLSReliableHandshake:org.bouncycastle.tls.DTLSReliableHandshake$Message receiveMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)",
            "org.bouncycastle.tls.DTLSReliableHandshake:byte[] receiveMessageBody(short)",
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.DTLSReliableHandshake:void access$400(org.bouncycastle.tls.DTLSReliableHandshake)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSReliableHandshake$1:void receivedHandshakeRecord(int,byte[],int,int)"
        ]
    },
    "org.bouncycastle.jsse.provider.ProvTlsClient:java.util.Hashtable getClientExtensions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateClientHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.TlsClient)",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientHelloMessage()"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void completeHandshake()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.AbstractTlsClient:java.util.Hashtable getClientExtensions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jsse.provider.ProvTlsClient:java.util.Hashtable getClientExtensions()",
            "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateClientHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.TlsClient)",
            "org.bouncycastle.tls.SRPTlsClient:java.util.Hashtable getClientExtensions()",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientHelloMessage()"
        ]
    },
    "org.bouncycastle.tls.TlsOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsUtils:void writeUint8(short,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeUint8(int,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeUint16(int,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeUint24(int,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeUint32(long,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeUint48(long,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeUint64(long,java.io.OutputStream)",
            "org.bouncycastle.tls.TlsUtils:void writeVersion(org.bouncycastle.tls.ProtocolVersion,java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void safeCheckRecordHeader(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void offerInput(byte[])"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void handleClose(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void processAlertQueue()",
            "org.bouncycastle.tls.TlsProtocol:void close()"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void refuseRenegotiation()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsClientProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)",
            "org.bouncycastle.tls.TlsServerProtocol:void handleHandshakeMessage(short,java.io.ByteArrayInputStream)"
        ]
    },
    "org.bouncycastle.tls.DTLSReliableHandshake:byte[] receiveMessageBody(short)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:org.bouncycastle.tls.DTLSTransport clientHandshake(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)",
            "org.bouncycastle.tls.DTLSServerProtocol:org.bouncycastle.tls.DTLSTransport serverHandshake(org.bouncycastle.tls.DTLSServerProtocol$ServerHandshakeState,org.bouncycastle.tls.DTLSRecordLayer)"
        ]
    },
    "org.bouncycastle.tls.DTLSReliableHandshake$1:void receivedHandshakeRecord(int,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSRecordLayer:int receive(byte[],int,int,int)"
        ]
    },
    "org.bouncycastle.tls.SRPTlsClient:java.util.Hashtable getClientExtensions()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSClientProtocol:byte[] generateClientHello(org.bouncycastle.tls.DTLSClientProtocol$ClientHandshakeState,org.bouncycastle.tls.TlsClient)",
            "org.bouncycastle.tls.TlsClientProtocol:void sendClientHelloMessage()"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void processAlertQueue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void processRecord(short,byte[],int,int)"
        ]
    },
    "org.bouncycastle.tls.TlsProtocol:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jsse.provider.ProvSSLEngine:void closeOutbound()",
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect:void close()",
            "org.bouncycastle.tls.TlsInputStream:void close()",
            "org.bouncycastle.tls.TlsOutputStream:void close()"
        ]
    },
    "org.bouncycastle.tls.DTLSRecordLayer:int receive(byte[],int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSRecordLayer:int receiveRecord(byte[],int,int,int)",
            "org.bouncycastle.tls.DTLSReliableHandshake:org.bouncycastle.tls.DTLSReliableHandshake$Message receiveMessage()",
            "org.bouncycastle.tls.DTLSTransport:int receive(byte[],int,int,int)"
        ]
    },
    "org.bouncycastle.jsse.provider.ProvSSLEngine:void closeOutbound()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jsse.provider.ProvSSLSocket:void close()"
        ]
    },
    "org.bouncycastle.jsse.provider.ProvSSLSocketDirect:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect$AppDataInput:void close()",
            "org.bouncycastle.jsse.provider.ProvSSLSocketDirect$AppDataOutput:void close()"
        ]
    },
    "org.bouncycastle.tls.TlsInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.RecordStream:void safeClose()"
        ]
    },
    "org.bouncycastle.tls.TlsOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.RecordStream:void safeClose()",
            "org.bouncycastle.tls.TlsUtils:void sendSignatureInput(org.bouncycastle.tls.TlsContext,org.bouncycastle.tls.DigestInputBuffer,java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.DTLSRecordLayer:int receiveRecord(byte[],int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSRecordLayer:int receive(byte[],int,int,int)"
        ]
    },
    "org.bouncycastle.tls.DTLSTransport:int receive(byte[],int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.DTLSRecordLayer:int receiveRecord(byte[],int,int,int)"
        ]
    },
    "org.bouncycastle.jsse.provider.ProvSSLSocket:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.bouncycastle.jsse.provider.ProvSSLSocketDirect$AppDataInput:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.RecordStream:void safeClose()"
        ]
    },
    "org.bouncycastle.jsse.provider.ProvSSLSocketDirect$AppDataOutput:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.RecordStream:void safeClose()",
            "org.bouncycastle.tls.TlsUtils:void sendSignatureInput(org.bouncycastle.tls.TlsContext,org.bouncycastle.tls.DigestInputBuffer,java.io.OutputStream)"
        ]
    },
    "org.bouncycastle.tls.RecordStream:void safeClose()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsProtocol:void processAlertQueue()",
            "org.bouncycastle.tls.TlsProtocol:void failWithError(short,short,java.lang.String,java.lang.Throwable)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void sendSignatureInput(org.bouncycastle.tls.TlsContext,org.bouncycastle.tls.DigestInputBuffer,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsUtils:org.bouncycastle.tls.DigitallySigned generateServerKeyExchangeSignature(org.bouncycastle.tls.TlsContext,org.bouncycastle.tls.TlsCredentialedSigner,org.bouncycastle.tls.DigestInputBuffer)",
            "org.bouncycastle.tls.TlsUtils:void verifyServerKeyExchangeSignature(org.bouncycastle.tls.TlsContext,org.bouncycastle.tls.crypto.TlsVerifier,org.bouncycastle.tls.DigestInputBuffer,org.bouncycastle.tls.DigitallySigned)"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:org.bouncycastle.tls.DigitallySigned generateServerKeyExchangeSignature(org.bouncycastle.tls.TlsContext,org.bouncycastle.tls.TlsCredentialedSigner,org.bouncycastle.tls.DigestInputBuffer)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsDHEKeyExchange:byte[] generateServerKeyExchange()",
            "org.bouncycastle.tls.TlsECDHEKeyExchange:byte[] generateServerKeyExchange()",
            "org.bouncycastle.tls.TlsSRPKeyExchange:byte[] generateServerKeyExchange()"
        ]
    },
    "org.bouncycastle.tls.TlsUtils:void verifyServerKeyExchangeSignature(org.bouncycastle.tls.TlsContext,org.bouncycastle.tls.crypto.TlsVerifier,org.bouncycastle.tls.DigestInputBuffer,org.bouncycastle.tls.DigitallySigned)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.bouncycastle.tls.TlsDHEKeyExchange:void processServerKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsECDHEKeyExchange:void processServerKeyExchange(java.io.InputStream)",
            "org.bouncycastle.tls.TlsSRPKeyExchange:void processServerKeyExchange(java.io.InputStream)"
        ]
    }
}