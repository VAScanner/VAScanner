{
    "org.postgresql.core.PGStream:boolean hasMessagePending()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void processNotifies(int)",
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.v3.CopyOperationImpl processCopyResults(org.postgresql.core.v3.CopyOperationImpl,boolean)"
        ]
    },
    "org.postgresql.ssl.jdbc4.LazyKeyManager:java.lang.String chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.postgresql.ssl.jdbc4.LazyKeyManager:java.lang.String[] getClientAliases(java.lang.String,java.security.Principal[])"
        ]
    },
    "org.postgresql.ssl.MakeSSL:void convert(org.postgresql.core.PGStream,java.util.Properties)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:org.postgresql.core.PGStream enableSSL(org.postgresql.core.PGStream,boolean,java.util.Properties,int)"
        ]
    },
    "org.postgresql.ssl.jdbc4.LibPQFactory:void throwKeyManagerException()": {
        "isVulRoot": true,
        "vulCaller": [
            "org.postgresql.ssl.MakeSSL:void convert(org.postgresql.core.PGStream,java.util.Properties)"
        ]
    },
    "org.postgresql.ssl.jdbc4.LibPQFactory:boolean verify(java.lang.String,javax.net.ssl.SSLSession)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.postgresql.ssl.MakeSSL:void convert(org.postgresql.core.PGStream,java.util.Properties)"
        ]
    },
    "org.postgresql.ssl.jdbc4.LibPQFactory:boolean verifyHostName(java.lang.String,java.lang.String)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.postgresql.ssl.jdbc4.LibPQFactory:boolean verify(java.lang.String,javax.net.ssl.SSLSession)"
        ]
    },
    "org.postgresql.core.v3.ConnectionFactoryImpl:org.postgresql.core.PGStream enableSSL(org.postgresql.core.PGStream,boolean,java.util.Properties,int)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:org.postgresql.core.QueryExecutor openConnectionImpl(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.core.v3.ConnectionFactoryImpl:void doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:org.postgresql.core.QueryExecutor openConnectionImpl(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.core.v3.ConnectionFactoryImpl:org.postgresql.core.QueryExecutor openConnectionImpl(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties)": {
        "isVulRoot": true,
        "vulCaller": [
            "org.postgresql.core.ConnectionFactory:org.postgresql.core.QueryExecutor openConnection(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void processNotifies(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void processNotifies()",
            "org.postgresql.jdbc.PgConnection:org.postgresql.PGNotification[] getNotifications(int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.v3.CopyOperationImpl processCopyResults(org.postgresql.core.v3.CopyOperationImpl,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.copy.CopyOperation startCopy(java.lang.String,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void cancelCopy(org.postgresql.core.v3.CopyOperationImpl)",
            "org.postgresql.core.v3.QueryExecutorImpl:long endCopy(org.postgresql.core.v3.CopyOperationImpl)",
            "org.postgresql.core.v3.QueryExecutorImpl:void writeToCopy(org.postgresql.core.v3.CopyOperationImpl,byte[],int,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void flushCopy(org.postgresql.core.v3.CopyOperationImpl)",
            "org.postgresql.core.v3.QueryExecutorImpl:void readFromCopy(org.postgresql.core.v3.CopyOperationImpl,boolean)"
        ]
    },
    "org.postgresql.ssl.jdbc4.LazyKeyManager:java.lang.String[] getClientAliases(java.lang.String,java.security.Principal[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.core.ConnectionFactory:org.postgresql.core.QueryExecutor openConnection(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:void <init>(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties,java.lang.String)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void processNotifies()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgConnection:org.postgresql.PGNotification[] getNotifications(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:org.postgresql.PGNotification[] getNotifications()"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.copy.CopyOperation startCopy(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:org.postgresql.copy.CopyIn copyIn(java.lang.String)",
            "org.postgresql.copy.CopyManager:org.postgresql.copy.CopyOut copyOut(java.lang.String)",
            "org.postgresql.copy.CopyManager:org.postgresql.copy.CopyDual copyDual(java.lang.String)",
            "org.postgresql.core.v3.replication.V3ReplicationProtocol:org.postgresql.replication.PGReplicationStream initializeReplication(java.lang.String,org.postgresql.replication.fluent.CommonOptions,org.postgresql.replication.ReplicationType)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void cancelCopy(org.postgresql.core.v3.CopyOperationImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.CopyOperationImpl:void cancelCopy()"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:long endCopy(org.postgresql.core.v3.CopyOperationImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.CopyDualImpl:long endCopy()",
            "org.postgresql.core.v3.CopyInImpl:long endCopy()"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void writeToCopy(org.postgresql.core.v3.CopyOperationImpl,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.CopyDualImpl:void writeToCopy(byte[],int,int)",
            "org.postgresql.core.v3.CopyInImpl:void writeToCopy(byte[],int,int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void flushCopy(org.postgresql.core.v3.CopyOperationImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.CopyDualImpl:void flushCopy()",
            "org.postgresql.core.v3.CopyInImpl:void flushCopy()"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void readFromCopy(org.postgresql.core.v3.CopyOperationImpl,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.CopyDualImpl:byte[] readFromCopy()",
            "org.postgresql.core.v3.CopyDualImpl:byte[] readFromCopy(boolean)",
            "org.postgresql.core.v3.CopyOutImpl:byte[] readFromCopy(boolean)"
        ]
    },
    "org.postgresql.jdbc.PgConnection:void <init>(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.Driver:java.sql.Connection makeConnection(java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.jdbc.PgConnection:org.postgresql.PGNotification[] getNotifications()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.copy.CopyManager:org.postgresql.copy.CopyIn copyIn(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.Reader,int)",
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.InputStream,int)",
            "org.postgresql.copy.PGCopyOutputStream:void <init>(org.postgresql.PGConnection,java.lang.String,int)"
        ]
    },
    "org.postgresql.copy.CopyManager:org.postgresql.copy.CopyOut copyOut(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:long copyOut(java.lang.String,java.io.Writer)",
            "org.postgresql.copy.CopyManager:long copyOut(java.lang.String,java.io.OutputStream)",
            "org.postgresql.copy.PGCopyInputStream:void <init>(org.postgresql.PGConnection,java.lang.String)"
        ]
    },
    "org.postgresql.copy.CopyManager:org.postgresql.copy.CopyDual copyDual(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.core.v3.replication.V3ReplicationProtocol:org.postgresql.replication.PGReplicationStream initializeReplication(java.lang.String,org.postgresql.replication.fluent.CommonOptions,org.postgresql.replication.ReplicationType)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.replication.V3ReplicationProtocol:org.postgresql.replication.PGReplicationStream startLogical(org.postgresql.replication.fluent.logical.LogicalReplicationOptions)",
            "org.postgresql.core.v3.replication.V3ReplicationProtocol:org.postgresql.replication.PGReplicationStream startPhysical(org.postgresql.replication.fluent.physical.PhysicalReplicationOptions)"
        ]
    },
    "org.postgresql.core.v3.CopyOperationImpl:void cancelCopy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:org.postgresql.copy.CopyIn copyIn(java.lang.String)",
            "org.postgresql.copy.CopyManager:org.postgresql.copy.CopyOut copyOut(java.lang.String)",
            "org.postgresql.copy.CopyManager:org.postgresql.copy.CopyDual copyDual(java.lang.String)",
            "org.postgresql.copy.CopyManager:long copyOut(java.lang.String,java.io.Writer)",
            "org.postgresql.copy.CopyManager:long copyOut(java.lang.String,java.io.OutputStream)",
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.Reader,int)",
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.InputStream,int)",
            "org.postgresql.copy.PGCopyInputStream:void close()",
            "org.postgresql.copy.PGCopyInputStream:void cancelCopy()",
            "org.postgresql.copy.PGCopyOutputStream:void cancelCopy()"
        ]
    },
    "org.postgresql.core.v3.CopyDualImpl:long endCopy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.Reader,int)",
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.InputStream,int)",
            "org.postgresql.copy.PGCopyOutputStream:long endCopy()",
            "org.postgresql.core.v3.replication.V3PGReplicationStream:void close()"
        ]
    },
    "org.postgresql.core.v3.CopyInImpl:long endCopy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.Reader,int)",
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.InputStream,int)",
            "org.postgresql.copy.PGCopyOutputStream:long endCopy()"
        ]
    },
    "org.postgresql.core.v3.CopyDualImpl:void writeToCopy(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.Reader,int)",
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.InputStream,int)",
            "org.postgresql.copy.PGCopyOutputStream:void flush()",
            "org.postgresql.copy.PGCopyOutputStream:void writeToCopy(byte[],int,int)",
            "org.postgresql.copy.PGCopyOutputStream:long endCopy()",
            "org.postgresql.core.v3.replication.V3PGReplicationStream:void updateStatusInternal(org.postgresql.replication.LogSequenceNumber,org.postgresql.replication.LogSequenceNumber,org.postgresql.replication.LogSequenceNumber,boolean)"
        ]
    },
    "org.postgresql.core.v3.CopyInImpl:void writeToCopy(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.Reader,int)",
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.InputStream,int)",
            "org.postgresql.copy.PGCopyOutputStream:void flush()",
            "org.postgresql.copy.PGCopyOutputStream:void writeToCopy(byte[],int,int)",
            "org.postgresql.copy.PGCopyOutputStream:long endCopy()"
        ]
    },
    "org.postgresql.core.v3.CopyDualImpl:void flushCopy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.PGCopyOutputStream:void flush()",
            "org.postgresql.copy.PGCopyOutputStream:void flushCopy()",
            "org.postgresql.core.v3.replication.V3PGReplicationStream:void updateStatusInternal(org.postgresql.replication.LogSequenceNumber,org.postgresql.replication.LogSequenceNumber,org.postgresql.replication.LogSequenceNumber,boolean)"
        ]
    },
    "org.postgresql.core.v3.CopyInImpl:void flushCopy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.PGCopyOutputStream:void flush()",
            "org.postgresql.copy.PGCopyOutputStream:void flushCopy()"
        ]
    },
    "org.postgresql.core.v3.CopyDualImpl:byte[] readFromCopy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:long copyOut(java.lang.String,java.io.Writer)",
            "org.postgresql.copy.CopyManager:long copyOut(java.lang.String,java.io.OutputStream)",
            "org.postgresql.copy.PGCopyInputStream:boolean gotBuf()"
        ]
    },
    "org.postgresql.core.v3.CopyDualImpl:byte[] readFromCopy(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.replication.V3PGReplicationStream:java.nio.ByteBuffer receiveNextData(boolean)"
        ]
    },
    "org.postgresql.core.v3.CopyOutImpl:byte[] readFromCopy(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.CopyOutImpl:byte[] readFromCopy()"
        ]
    },
    "org.postgresql.Driver:java.sql.Connection makeConnection(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.Driver:java.sql.Connection connect(java.lang.String,java.util.Properties)",
            "org.postgresql.Driver:java.sql.Connection access$100(java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.Reader,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.Reader)"
        ]
    },
    "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.InputStream)"
        ]
    },
    "org.postgresql.copy.PGCopyOutputStream:void <init>(org.postgresql.PGConnection,java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.PGCopyOutputStream:void <init>(org.postgresql.PGConnection,java.lang.String)"
        ]
    },
    "org.postgresql.copy.CopyManager:long copyOut(java.lang.String,java.io.Writer)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.copy.CopyManager:long copyOut(java.lang.String,java.io.OutputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.copy.PGCopyInputStream:void <init>(org.postgresql.PGConnection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.core.v3.replication.V3ReplicationProtocol:org.postgresql.replication.PGReplicationStream startLogical(org.postgresql.replication.fluent.logical.LogicalReplicationOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.replication.fluent.ReplicationStreamBuilder$1:org.postgresql.replication.PGReplicationStream start(org.postgresql.replication.fluent.logical.LogicalReplicationOptions)"
        ]
    },
    "org.postgresql.core.v3.replication.V3ReplicationProtocol:org.postgresql.replication.PGReplicationStream startPhysical(org.postgresql.replication.fluent.physical.PhysicalReplicationOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.replication.fluent.ReplicationStreamBuilder$2:org.postgresql.replication.PGReplicationStream start(org.postgresql.replication.fluent.physical.PhysicalReplicationOptions)"
        ]
    },
    "org.postgresql.copy.PGCopyInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.Driver:java.util.Properties loadDefaultProperties()",
            "org.postgresql.core.VisibleBufferedInputStream:void close()",
            "org.postgresql.jdbc.PgPreparedStatement:void setBlob(int,java.sql.Blob)",
            "org.postgresql.ssl.SingleCertValidatingFactory:void <init>(java.lang.String)"
        ]
    },
    "org.postgresql.copy.PGCopyInputStream:void cancelCopy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:org.postgresql.copy.CopyIn copyIn(java.lang.String)",
            "org.postgresql.copy.CopyManager:org.postgresql.copy.CopyOut copyOut(java.lang.String)",
            "org.postgresql.copy.CopyManager:org.postgresql.copy.CopyDual copyDual(java.lang.String)",
            "org.postgresql.copy.CopyManager:long copyOut(java.lang.String,java.io.Writer)",
            "org.postgresql.copy.CopyManager:long copyOut(java.lang.String,java.io.OutputStream)",
            "org.postgresql.copy.PGCopyInputStream:void close()",
            "org.postgresql.copy.PGCopyInputStream:void cancelCopy()"
        ]
    },
    "org.postgresql.copy.PGCopyOutputStream:void cancelCopy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:org.postgresql.copy.CopyIn copyIn(java.lang.String)",
            "org.postgresql.copy.CopyManager:org.postgresql.copy.CopyOut copyOut(java.lang.String)",
            "org.postgresql.copy.CopyManager:org.postgresql.copy.CopyDual copyDual(java.lang.String)",
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.Reader,int)",
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.InputStream,int)",
            "org.postgresql.copy.PGCopyOutputStream:void cancelCopy()"
        ]
    },
    "org.postgresql.copy.PGCopyOutputStream:long endCopy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.Reader,int)",
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.InputStream,int)",
            "org.postgresql.copy.PGCopyOutputStream:void close()",
            "org.postgresql.copy.PGCopyOutputStream:long endCopy()"
        ]
    },
    "org.postgresql.core.v3.replication.V3PGReplicationStream:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.copy.PGCopyOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.PGStream:void flush()"
        ]
    },
    "org.postgresql.copy.PGCopyOutputStream:void writeToCopy(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.Reader,int)",
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.InputStream,int)",
            "org.postgresql.copy.PGCopyOutputStream:void write(byte[],int,int)",
            "org.postgresql.copy.PGCopyOutputStream:void flush()",
            "org.postgresql.copy.PGCopyOutputStream:void writeToCopy(byte[],int,int)",
            "org.postgresql.copy.PGCopyOutputStream:long endCopy()"
        ]
    },
    "org.postgresql.core.v3.replication.V3PGReplicationStream:void updateStatusInternal(org.postgresql.replication.LogSequenceNumber,org.postgresql.replication.LogSequenceNumber,org.postgresql.replication.LogSequenceNumber,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.replication.V3PGReplicationStream:void forceUpdateStatus()",
            "org.postgresql.core.v3.replication.V3PGReplicationStream:void timeUpdateStatus()"
        ]
    },
    "org.postgresql.copy.PGCopyOutputStream:void flushCopy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.PGCopyOutputStream:void flush()",
            "org.postgresql.copy.PGCopyOutputStream:void flushCopy()"
        ]
    },
    "org.postgresql.copy.PGCopyInputStream:boolean gotBuf()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.PGCopyInputStream:int read()",
            "org.postgresql.copy.PGCopyInputStream:int read(byte[],int,int)",
            "org.postgresql.copy.PGCopyInputStream:byte[] readFromCopy()"
        ]
    },
    "org.postgresql.core.v3.replication.V3PGReplicationStream:java.nio.ByteBuffer receiveNextData(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.replication.V3PGReplicationStream:java.nio.ByteBuffer readInternal(boolean)"
        ]
    },
    "org.postgresql.core.v3.CopyOutImpl:byte[] readFromCopy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:long copyOut(java.lang.String,java.io.Writer)",
            "org.postgresql.copy.CopyManager:long copyOut(java.lang.String,java.io.OutputStream)",
            "org.postgresql.copy.PGCopyInputStream:boolean gotBuf()"
        ]
    },
    "org.postgresql.Driver:java.sql.Connection connect(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.Driver:java.sql.Connection access$100(java.lang.String,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.Driver$ConnectThread:void run()"
        ]
    },
    "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.copy.PGCopyOutputStream:void <init>(org.postgresql.PGConnection,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.replication.fluent.ReplicationStreamBuilder$1:org.postgresql.replication.PGReplicationStream start(org.postgresql.replication.fluent.logical.LogicalReplicationOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.replication.fluent.logical.LogicalStreamBuilder:org.postgresql.replication.PGReplicationStream start()"
        ]
    },
    "org.postgresql.replication.fluent.ReplicationStreamBuilder$2:org.postgresql.replication.PGReplicationStream start(org.postgresql.replication.fluent.physical.PhysicalReplicationOptions)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.replication.fluent.physical.PhysicalStreamBuilder:org.postgresql.replication.PGReplicationStream start()"
        ]
    },
    "org.postgresql.Driver:java.util.Properties loadDefaultProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.Driver:java.util.Properties access$000(org.postgresql.Driver)"
        ]
    },
    "org.postgresql.core.VisibleBufferedInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.Driver:java.util.Properties loadDefaultProperties()",
            "org.postgresql.core.PGStream:void close()",
            "org.postgresql.core.VisibleBufferedInputStream:void close()",
            "org.postgresql.jdbc.PgPreparedStatement:void setBlob(int,java.sql.Blob)",
            "org.postgresql.ssl.SingleCertValidatingFactory:void <init>(java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:void setBlob(int,java.sql.Blob)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object)"
        ]
    },
    "org.postgresql.ssl.SingleCertValidatingFactory:void <init>(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.copy.PGCopyOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.PGStream:void close()",
            "org.postgresql.jdbc.PgPreparedStatement:long createBlob(int,java.io.InputStream,long)"
        ]
    },
    "org.postgresql.core.PGStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.QueryExecutorBase:void close()",
            "org.postgresql.core.QueryExecutorBase:void sendQueryCancel()",
            "org.postgresql.core.v3.ConnectionFactoryImpl:org.postgresql.core.PGStream enableSSL(org.postgresql.core.PGStream,boolean,java.util.Properties,int)",
            "org.postgresql.core.v3.ConnectionFactoryImpl:void sendStartupPacket(org.postgresql.core.PGStream,java.util.List)",
            "org.postgresql.core.v3.ConnectionFactoryImpl:void doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendFastpathCall(int,org.postgresql.core.v3.SimpleParameterList)",
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.copy.CopyOperation startCopy(java.lang.String,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void cancelCopy(org.postgresql.core.v3.CopyOperationImpl)",
            "org.postgresql.core.v3.QueryExecutorImpl:long endCopy(org.postgresql.core.v3.CopyOperationImpl)",
            "org.postgresql.core.v3.QueryExecutorImpl:void flushCopy(org.postgresql.core.v3.CopyOperationImpl)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendSync()",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendSimpleQuery(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.gss.GssAction:java.lang.Exception run()",
            "org.postgresql.jre8.sasl.ScramAuthenticator:void sendAuthenticationMessage(int,org.postgresql.jre8.sasl.ScramAuthenticator$BodySender)",
            "org.postgresql.sspi.SSPIClient:void sendSSPIResponse(byte[])"
        ]
    },
    "org.postgresql.copy.PGCopyOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.PGCopyOutputStream:void write(int)",
            "org.postgresql.copy.PGCopyOutputStream:void write(byte[])",
            "org.postgresql.core.PGStream:void send(byte[],int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:long createBlob(int,java.io.InputStream,long)",
            "org.postgresql.util.StreamWrapper:int copyStream(java.io.InputStream,java.io.OutputStream,int)"
        ]
    },
    "org.postgresql.core.v3.replication.V3PGReplicationStream:void forceUpdateStatus()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.core.v3.replication.V3PGReplicationStream:void timeUpdateStatus()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.replication.V3PGReplicationStream:java.nio.ByteBuffer readInternal(boolean)"
        ]
    },
    "org.postgresql.copy.PGCopyInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.copy.PGCopyInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.PGCopyInputStream:int read(byte[])",
            "org.postgresql.core.PGStream:void sendStream(java.io.InputStream,int)",
            "org.postgresql.core.VisibleBufferedInputStream:boolean readMore(int)",
            "org.postgresql.core.VisibleBufferedInputStream:int read(byte[],int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:long createBlob(int,java.io.InputStream,long)",
            "org.postgresql.jdbc.PgResultSet:void updateBinaryStream(int,java.io.InputStream,int)"
        ]
    },
    "org.postgresql.copy.PGCopyInputStream:byte[] readFromCopy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:long copyOut(java.lang.String,java.io.Writer)",
            "org.postgresql.copy.CopyManager:long copyOut(java.lang.String,java.io.OutputStream)",
            "org.postgresql.copy.PGCopyInputStream:boolean gotBuf()",
            "org.postgresql.copy.PGCopyInputStream:byte[] readFromCopy(boolean)"
        ]
    },
    "org.postgresql.core.v3.replication.V3PGReplicationStream:java.nio.ByteBuffer readInternal(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.replication.V3PGReplicationStream:java.nio.ByteBuffer read()",
            "org.postgresql.core.v3.replication.V3PGReplicationStream:java.nio.ByteBuffer readPending()"
        ]
    },
    "org.postgresql.Driver$ConnectThread:void run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.replication.fluent.logical.LogicalStreamBuilder:org.postgresql.replication.PGReplicationStream start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.replication.fluent.physical.PhysicalStreamBuilder:org.postgresql.replication.PGReplicationStream start()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.Driver:java.util.Properties access$000(org.postgresql.Driver)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.Driver$1:java.util.Properties run()"
        ]
    },
    "org.postgresql.core.PGStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.ConnectionFactory:void closeStream(org.postgresql.core.PGStream)",
            "org.postgresql.core.QueryExecutorBase:void close()",
            "org.postgresql.core.QueryExecutorBase:void sendQueryCancel()",
            "org.postgresql.core.v3.ConnectionFactoryImpl:org.postgresql.core.PGStream enableSSL(org.postgresql.core.PGStream,boolean,java.util.Properties,int)"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int)"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)",
            "org.postgresql.jdbc.PgResultSet:void deleteRow()",
            "org.postgresql.jdbc.PgResultSet:void insertRow()",
            "org.postgresql.jdbc.PgResultSet:void refreshRow()",
            "org.postgresql.jdbc.PgResultSet:void updateRow()"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:long createBlob(int,java.io.InputStream,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:void setBlob(int,java.sql.Blob)",
            "org.postgresql.jdbc.PgPreparedStatement:void setBlob(int,java.io.InputStream,long)",
            "org.postgresql.jdbc.PgPreparedStatement:void setBlob(int,java.io.InputStream)"
        ]
    },
    "org.postgresql.core.QueryExecutorBase:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:org.postgresql.core.QueryExecutor openConnectionImpl(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties)",
            "org.postgresql.core.v3.QueryExecutorImpl:void receiveParameterStatus()",
            "org.postgresql.jdbc.PgConnection:void close()"
        ]
    },
    "org.postgresql.core.QueryExecutorBase:void sendQueryCancel()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void cancelCopy(org.postgresql.core.v3.CopyOperationImpl)",
            "org.postgresql.jdbc.PgConnection:void cancelQuery()"
        ]
    },
    "org.postgresql.core.v3.ConnectionFactoryImpl:void sendStartupPacket(org.postgresql.core.PGStream,java.util.List)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:org.postgresql.core.QueryExecutor openConnectionImpl(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void sendFastpathCall(int,org.postgresql.core.v3.SimpleParameterList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:byte[] fastpathCall(int,org.postgresql.core.ParameterList,boolean)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void sendSync()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query,org.postgresql.core.ParameterList,org.postgresql.core.ResultHandler,int,int,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query[],org.postgresql.core.ParameterList[],org.postgresql.jdbc.BatchResultHandler,int,int,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void doSubprotocolBegin()",
            "org.postgresql.core.v3.QueryExecutorImpl:void flushIfDeadlockRisk(org.postgresql.core.Query,boolean,org.postgresql.core.ResultHandler,org.postgresql.jdbc.BatchResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void fetch(org.postgresql.core.ResultCursor,org.postgresql.core.ResultHandler,int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void sendSimpleQuery(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void sendOneQuery(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,int,int,int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query,org.postgresql.core.ParameterList,org.postgresql.core.ResultHandler,int,int,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query[],org.postgresql.core.ParameterList[],org.postgresql.jdbc.BatchResultHandler,int,int,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void doSubprotocolBegin()",
            "org.postgresql.core.v3.QueryExecutorImpl:void flushIfDeadlockRisk(org.postgresql.core.Query,boolean,org.postgresql.core.ResultHandler,org.postgresql.jdbc.BatchResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void fetch(org.postgresql.core.ResultCursor,org.postgresql.core.ResultHandler,int)"
        ]
    },
    "org.postgresql.gss.GssAction:java.lang.Exception run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.gss.GssAction:java.lang.Object run()"
        ]
    },
    "org.postgresql.jre8.sasl.ScramAuthenticator:void sendAuthenticationMessage(int,org.postgresql.jre8.sasl.ScramAuthenticator$BodySender)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jre8.sasl.ScramAuthenticator:void sendScramClientFirstMessage()",
            "org.postgresql.jre8.sasl.ScramAuthenticator:void processServerFirstMessage(int)"
        ]
    },
    "org.postgresql.sspi.SSPIClient:void sendSSPIResponse(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.sspi.SSPIClient:void startSSPI()",
            "org.postgresql.sspi.SSPIClient:void continueSSPI(int)"
        ]
    },
    "org.postgresql.copy.PGCopyOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.PGStream:void sendChar(int)",
            "org.postgresql.core.PGStream:void send(byte[],int,int)"
        ]
    },
    "org.postgresql.copy.PGCopyOutputStream:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:long copyOut(java.lang.String,java.io.OutputStream)",
            "org.postgresql.core.PGStream:void sendInteger4(int)",
            "org.postgresql.core.PGStream:void sendInteger2(int)",
            "org.postgresql.core.PGStream:void send(byte[])"
        ]
    },
    "org.postgresql.core.PGStream:void send(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.PGStream:void send(byte[],int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void writeToCopy(org.postgresql.core.v3.CopyOperationImpl,byte[],int,int)",
            "org.postgresql.core.v3.SimpleParameterList:void streamBytea(org.postgresql.core.PGStream,org.postgresql.util.StreamWrapper)"
        ]
    },
    "org.postgresql.util.StreamWrapper:int copyStream(java.io.InputStream,java.io.OutputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.util.StreamWrapper:void <init>(java.io.InputStream)"
        ]
    },
    "org.postgresql.copy.PGCopyInputStream:int read(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.copy.CopyManager:long copyIn(java.lang.String,java.io.InputStream,int)",
            "org.postgresql.util.StreamWrapper:int copyStream(java.io.InputStream,java.io.OutputStream,int)"
        ]
    },
    "org.postgresql.core.PGStream:void sendStream(java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.SimpleParameterList:void streamBytea(org.postgresql.core.PGStream,org.postgresql.util.StreamWrapper)"
        ]
    },
    "org.postgresql.core.VisibleBufferedInputStream:boolean readMore(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.VisibleBufferedInputStream:boolean ensureBytes(int)",
            "org.postgresql.core.VisibleBufferedInputStream:int scanCStringLength()"
        ]
    },
    "org.postgresql.core.VisibleBufferedInputStream:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.PGStream:void receive(byte[],int,int)",
            "org.postgresql.core.PGStream:void sendStream(java.io.InputStream,int)",
            "org.postgresql.core.VisibleBufferedInputStream:boolean readMore(int)",
            "org.postgresql.core.VisibleBufferedInputStream:int read(byte[],int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:long createBlob(int,java.io.InputStream,long)",
            "org.postgresql.jdbc.PgResultSet:void updateBinaryStream(int,java.io.InputStream,int)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateBinaryStream(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateBinaryStream(java.lang.String,java.io.InputStream,int)"
        ]
    },
    "org.postgresql.copy.PGCopyInputStream:byte[] readFromCopy(boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.core.v3.replication.V3PGReplicationStream:java.nio.ByteBuffer read()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.core.v3.replication.V3PGReplicationStream:java.nio.ByteBuffer readPending()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.Driver$1:java.util.Properties run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.Driver$1:java.lang.Object run()"
        ]
    },
    "org.postgresql.core.ConnectionFactory:void closeStream(org.postgresql.core.PGStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:org.postgresql.core.QueryExecutor openConnectionImpl(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setCharacterStream(int,java.io.Reader)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void deleteRow()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void insertRow()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void refreshRow()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateRow()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgPreparedStatement:void setBlob(int,java.io.InputStream,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgPreparedStatement:void setBlob(int,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void receiveParameterStatus()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.v3.CopyOperationImpl processCopyResults(org.postgresql.core.v3.CopyOperationImpl,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void readStartupMessages()"
        ]
    },
    "org.postgresql.jdbc.PgConnection:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.Driver$ConnectThread:void run()",
            "org.postgresql.ds.PGPooledConnection:void close()",
            "org.postgresql.jdbc.PgConnection:void finalize()",
            "org.postgresql.util.JdbcBlackHole:void close(java.sql.Connection)"
        ]
    },
    "org.postgresql.jdbc.PgConnection:void cancelQuery()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgStatement:void cancel()"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:byte[] fastpathCall(int,org.postgresql.core.ParameterList,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.fastpath.Fastpath:byte[] fastpath(int,org.postgresql.fastpath.FastpathArg[])"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query,org.postgresql.core.ParameterList,org.postgresql.core.ResultHandler,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.SetupQueryRunner:byte[][] run(org.postgresql.core.QueryExecutor,java.lang.String,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void rollbackIfRequired(boolean,java.sql.SQLException)",
            "org.postgresql.jdbc.PgConnection:void executeTransactionCommand(org.postgresql.core.Query)",
            "org.postgresql.jdbc.PgPreparedStatement:java.sql.ResultSetMetaData getMetaData()",
            "org.postgresql.jdbc.PgPreparedStatement:java.sql.ParameterMetaData getParameterMetaData()",
            "org.postgresql.jdbc.PgStatement:void executeInternal(org.postgresql.core.CachedQuery,org.postgresql.core.ParameterList,int)",
            "org.postgresql.jdbc.PgStatement:int[] executeBatch()"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query[],org.postgresql.core.ParameterList[],org.postgresql.jdbc.BatchResultHandler,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgStatement:int[] executeBatch()"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void doSubprotocolBegin()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:byte[] fastpathCall(int,org.postgresql.core.ParameterList,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.copy.CopyOperation startCopy(java.lang.String,boolean)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void flushIfDeadlockRisk(org.postgresql.core.Query,boolean,org.postgresql.core.ResultHandler,org.postgresql.jdbc.BatchResultHandler,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void sendQuery(org.postgresql.core.Query,org.postgresql.core.v3.V3ParameterList,int,int,int,org.postgresql.core.ResultHandler,org.postgresql.jdbc.BatchResultHandler)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void fetch(org.postgresql.core.ResultCursor,org.postgresql.core.ResultHandler,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:boolean isLast()",
            "org.postgresql.jdbc.PgResultSet:boolean next()"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void sendOneQuery(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,int,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:boolean sendAutomaticSavepoint(org.postgresql.core.Query,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.ResultHandler sendQueryPreamble(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void doSubprotocolBegin()",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendQuery(org.postgresql.core.Query,org.postgresql.core.v3.V3ParameterList,int,int,int,org.postgresql.core.ResultHandler,org.postgresql.jdbc.BatchResultHandler)"
        ]
    },
    "org.postgresql.gss.GssAction:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jre8.sasl.ScramAuthenticator:void sendScramClientFirstMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:void doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.jre8.sasl.ScramAuthenticator:void processServerFirstMessage(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:void doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.sspi.SSPIClient:void startSSPI()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:void doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.sspi.SSPIClient:void continueSSPI(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:void doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.core.PGStream:void sendChar(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:void sendStartupPacket(org.postgresql.core.PGStream,java.util.List)",
            "org.postgresql.core.v3.ConnectionFactoryImpl:void doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendFastpathCall(int,org.postgresql.core.v3.SimpleParameterList)",
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.copy.CopyOperation startCopy(java.lang.String,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void cancelCopy(org.postgresql.core.v3.CopyOperationImpl)",
            "org.postgresql.core.v3.QueryExecutorImpl:long endCopy(org.postgresql.core.v3.CopyOperationImpl)",
            "org.postgresql.core.v3.QueryExecutorImpl:void writeToCopy(org.postgresql.core.v3.CopyOperationImpl,byte[],int,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendSync()",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendParse(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendBind(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,org.postgresql.core.v3.Portal,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendDescribePortal(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.Portal)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendDescribeStatement(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendExecute(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.Portal,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendClosePortal(java.lang.String)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendCloseStatement(java.lang.String)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendSimpleQuery(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendCloseMessage()",
            "org.postgresql.gss.GssAction:java.lang.Exception run()",
            "org.postgresql.jre8.sasl.ScramAuthenticator:void sendAuthenticationMessage(int,org.postgresql.jre8.sasl.ScramAuthenticator$BodySender)",
            "org.postgresql.jre8.sasl.ScramAuthenticator:void lambda$sendScramClientFirstMessage$0(byte[],byte[],org.postgresql.core.PGStream)",
            "org.postgresql.sspi.SSPIClient:void sendSSPIResponse(byte[])"
        ]
    },
    "org.postgresql.core.PGStream:void sendInteger4(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.QueryExecutorBase:void sendQueryCancel()",
            "org.postgresql.core.v3.ConnectionFactoryImpl:org.postgresql.core.PGStream enableSSL(org.postgresql.core.PGStream,boolean,java.util.Properties,int)",
            "org.postgresql.core.v3.ConnectionFactoryImpl:void sendStartupPacket(org.postgresql.core.PGStream,java.util.List)",
            "org.postgresql.core.v3.ConnectionFactoryImpl:void doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendFastpathCall(int,org.postgresql.core.v3.SimpleParameterList)",
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.copy.CopyOperation startCopy(java.lang.String,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void cancelCopy(org.postgresql.core.v3.CopyOperationImpl)",
            "org.postgresql.core.v3.QueryExecutorImpl:long endCopy(org.postgresql.core.v3.CopyOperationImpl)",
            "org.postgresql.core.v3.QueryExecutorImpl:void writeToCopy(org.postgresql.core.v3.CopyOperationImpl,byte[],int,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendSync()",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendParse(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendBind(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,org.postgresql.core.v3.Portal,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendDescribePortal(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.Portal)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendDescribeStatement(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendExecute(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.Portal,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendClosePortal(java.lang.String)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendCloseStatement(java.lang.String)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendSimpleQuery(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendCloseMessage()",
            "org.postgresql.gss.GssAction:java.lang.Exception run()",
            "org.postgresql.jre8.sasl.ScramAuthenticator:void sendAuthenticationMessage(int,org.postgresql.jre8.sasl.ScramAuthenticator$BodySender)",
            "org.postgresql.jre8.sasl.ScramAuthenticator:void lambda$sendScramClientFirstMessage$0(byte[],byte[],org.postgresql.core.PGStream)",
            "org.postgresql.sspi.SSPIClient:void sendSSPIResponse(byte[])"
        ]
    },
    "org.postgresql.core.PGStream:void sendInteger2(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.QueryExecutorBase:void sendQueryCancel()",
            "org.postgresql.core.v3.ConnectionFactoryImpl:org.postgresql.core.PGStream enableSSL(org.postgresql.core.PGStream,boolean,java.util.Properties,int)",
            "org.postgresql.core.v3.ConnectionFactoryImpl:void sendStartupPacket(org.postgresql.core.PGStream,java.util.List)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendFastpathCall(int,org.postgresql.core.v3.SimpleParameterList)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendParse(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendBind(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,org.postgresql.core.v3.Portal,boolean)"
        ]
    },
    "org.postgresql.core.PGStream:void send(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:void sendStartupPacket(org.postgresql.core.PGStream,java.util.List)",
            "org.postgresql.core.v3.ConnectionFactoryImpl:void doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties)",
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.copy.CopyOperation startCopy(java.lang.String,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void cancelCopy(org.postgresql.core.v3.CopyOperationImpl)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendParse(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendBind(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,org.postgresql.core.v3.Portal,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendDescribePortal(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.Portal)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendDescribeStatement(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendExecute(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.Portal,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendClosePortal(java.lang.String)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendCloseStatement(java.lang.String)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendSimpleQuery(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.SimpleParameterList:void writeV3Value(int,org.postgresql.core.PGStream)",
            "org.postgresql.gss.GssAction:java.lang.Exception run()",
            "org.postgresql.jre8.sasl.ScramAuthenticator:void lambda$processServerFirstMessage$1(byte[],org.postgresql.core.PGStream)",
            "org.postgresql.jre8.sasl.ScramAuthenticator:void lambda$sendScramClientFirstMessage$0(byte[],byte[],org.postgresql.core.PGStream)",
            "org.postgresql.sspi.SSPIClient:void sendSSPIResponse(byte[])"
        ]
    },
    "org.postgresql.core.PGStream:void send(byte[],int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.PGStream:void sendStream(java.io.InputStream,int)"
        ]
    },
    "org.postgresql.core.v3.SimpleParameterList:void streamBytea(org.postgresql.core.PGStream,org.postgresql.util.StreamWrapper)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.SimpleParameterList:void writeV3Value(int,org.postgresql.core.PGStream)"
        ]
    },
    "org.postgresql.util.StreamWrapper:void <init>(java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.SimpleParameterList:void setBytea(int,java.io.InputStream)",
            "org.postgresql.core.v3.SimpleParameterList:void setText(int,java.io.InputStream)"
        ]
    },
    "org.postgresql.core.VisibleBufferedInputStream:boolean ensureBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.PGStream:java.lang.String receiveString(int)",
            "org.postgresql.core.PGStream:org.postgresql.core.EncodingPredictor$DecodeResult receiveErrorString(int)",
            "org.postgresql.core.VisibleBufferedInputStream:int read()",
            "org.postgresql.core.VisibleBufferedInputStream:int peek()",
            "org.postgresql.core.VisibleBufferedInputStream:int read(byte[],int,int)"
        ]
    },
    "org.postgresql.core.VisibleBufferedInputStream:int scanCStringLength()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.PGStream:java.lang.String receiveString()"
        ]
    },
    "org.postgresql.core.PGStream:void receive(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.PGStream:byte[][] receiveTupleV3()",
            "org.postgresql.core.PGStream:byte[] receive(int)",
            "org.postgresql.core.v3.QueryExecutorImpl:byte[] receiveFastpathResult()"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateBinaryStream(java.lang.String,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.Driver$1:java.lang.Object run()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.Driver:java.util.Properties getDefaultProperties()"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:void setCharacterStream(int,java.io.Reader)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void readStartupMessages()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void <init>(org.postgresql.core.PGStream,java.lang.String,java.lang.String,int,java.util.Properties)"
        ]
    },
    "org.postgresql.ds.PGPooledConnection:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.ds.PGPoolingDataSource:void close()"
        ]
    },
    "org.postgresql.jdbc.PgConnection:void finalize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:void <init>(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties,java.lang.String)"
        ]
    },
    "org.postgresql.util.JdbcBlackHole:void close(java.sql.Connection)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgStatement:void cancel()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgStatement$1:void run()",
            "org.postgresql.jdbc.PgStatement:void close()"
        ]
    },
    "org.postgresql.fastpath.Fastpath:byte[] fastpath(int,org.postgresql.fastpath.FastpathArg[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.fastpath.Fastpath:java.lang.Object fastpath(int,boolean,org.postgresql.fastpath.FastpathArg[])",
            "org.postgresql.fastpath.Fastpath:byte[] fastpath(java.lang.String,org.postgresql.fastpath.FastpathArg[])"
        ]
    },
    "org.postgresql.core.SetupQueryRunner:byte[][] run(org.postgresql.core.QueryExecutor,java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:void runInitialQueries(org.postgresql.core.QueryExecutor,java.util.Properties)",
            "org.postgresql.core.v3.ConnectionFactoryImpl:boolean isMaster(org.postgresql.core.QueryExecutor)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void rollbackIfRequired(boolean,java.sql.SQLException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query,org.postgresql.core.ParameterList,org.postgresql.core.ResultHandler,int,int,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query[],org.postgresql.core.ParameterList[],org.postgresql.jdbc.BatchResultHandler,int,int,int)"
        ]
    },
    "org.postgresql.jdbc.PgConnection:void executeTransactionCommand(org.postgresql.core.Query)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:void commit()",
            "org.postgresql.jdbc.PgConnection:void rollback()"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:java.sql.ResultSetMetaData getMetaData()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgPreparedStatement:java.sql.ParameterMetaData getParameterMetaData()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgStatement:void executeInternal(org.postgresql.core.CachedQuery,org.postgresql.core.ParameterList,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgStatement:void execute(org.postgresql.core.CachedQuery,org.postgresql.core.ParameterList,int)"
        ]
    },
    "org.postgresql.jdbc.PgStatement:int[] executeBatch()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:int[] executeBatch()"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void sendQuery(org.postgresql.core.Query,org.postgresql.core.v3.V3ParameterList,int,int,int,org.postgresql.core.ResultHandler,org.postgresql.jdbc.BatchResultHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query,org.postgresql.core.ParameterList,org.postgresql.core.ResultHandler,int,int,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query[],org.postgresql.core.ParameterList[],org.postgresql.jdbc.BatchResultHandler,int,int,int)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:boolean isLast()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:boolean next()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.fastpath.Fastpath:void addFunctions(java.sql.ResultSet)",
            "org.postgresql.jdbc.PgCallableStatement:boolean executeWithFlags(int)",
            "org.postgresql.jdbc.PgConnection:int getTransactionIsolation()",
            "org.postgresql.jdbc.PgConnection:java.lang.String getSchema()",
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxIndexKeys()",
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxNameLength()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.lang.String getSQLKeywords()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTypeInfo()",
            "org.postgresql.jdbc.PgResultSet:void refreshRow()",
            "org.postgresql.jdbc.PgResultSet:boolean isUpdateable()",
            "org.postgresql.jdbc.PgResultSetMetaData:void fetchFieldMetaData()",
            "org.postgresql.jdbc.TypeInfoCache:int getSQLType(java.lang.String)",
            "org.postgresql.jdbc.TypeInfoCache:int getPGType(java.lang.String)",
            "org.postgresql.jdbc.TypeInfoCache:java.lang.String getPGType(int)",
            "org.postgresql.jdbc.TypeInfoCache:char getArrayDelimiter(int)",
            "org.postgresql.jdbc.TypeInfoCache:int getPGArrayElement(int)",
            "org.postgresql.xa.PGXAConnection:javax.transaction.xa.Xid[] recover(int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:boolean sendAutomaticSavepoint(org.postgresql.core.Query,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query,org.postgresql.core.ParameterList,org.postgresql.core.ResultHandler,int,int,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query[],org.postgresql.core.ParameterList[],org.postgresql.jdbc.BatchResultHandler,int,int,int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.ResultHandler sendQueryPreamble(org.postgresql.core.ResultHandler,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query,org.postgresql.core.ParameterList,org.postgresql.core.ResultHandler,int,int,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query[],org.postgresql.core.ParameterList[],org.postgresql.jdbc.BatchResultHandler,int,int,int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void sendParse(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void sendOneQuery(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,int,int,int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void sendBind(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,org.postgresql.core.v3.Portal,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void sendOneQuery(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,int,int,int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void sendDescribePortal(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.Portal)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void sendOneQuery(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,int,int,int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void sendDescribeStatement(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void sendOneQuery(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,int,int,int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void sendExecute(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.Portal,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void sendOneQuery(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,int,int,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void fetch(org.postgresql.core.ResultCursor,org.postgresql.core.ResultHandler,int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void sendClosePortal(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void processDeadPortals()"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void sendCloseStatement(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void processDeadParsedQueries()"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void sendCloseMessage()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.QueryExecutorBase:void close()"
        ]
    },
    "org.postgresql.jre8.sasl.ScramAuthenticator:void lambda$sendScramClientFirstMessage$0(byte[],byte[],org.postgresql.core.PGStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jre8.sasl.ScramAuthenticator$lambda_sendScramClientFirstMessage_0__1:void sendBody(org.postgresql.core.PGStream)"
        ]
    },
    "org.postgresql.core.v3.SimpleParameterList:void writeV3Value(int,org.postgresql.core.PGStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void sendFastpathCall(int,org.postgresql.core.v3.SimpleParameterList)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendBind(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,org.postgresql.core.v3.Portal,boolean)"
        ]
    },
    "org.postgresql.jre8.sasl.ScramAuthenticator:void lambda$processServerFirstMessage$1(byte[],org.postgresql.core.PGStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jre8.sasl.ScramAuthenticator$lambda_processServerFirstMessage_1__2:void sendBody(org.postgresql.core.PGStream)"
        ]
    },
    "org.postgresql.core.v3.SimpleParameterList:void setBytea(int,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.CompositeParameterList:void setBytea(int,java.io.InputStream)",
            "org.postgresql.jdbc.PgPreparedStatement:void setBinaryStream(int,java.io.InputStream)"
        ]
    },
    "org.postgresql.core.v3.SimpleParameterList:void setText(int,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.CompositeParameterList:void setText(int,java.io.InputStream)",
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)"
        ]
    },
    "org.postgresql.core.PGStream:java.lang.String receiveString(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:java.sql.SQLWarning receiveNoticeResponse()",
            "org.postgresql.core.v3.QueryExecutorImpl:java.lang.String receiveCommandStatus()",
            "org.postgresql.jre8.sasl.ScramAuthenticator:void processServerFirstMessage(int)",
            "org.postgresql.jre8.sasl.ScramAuthenticator:void verifyServerSignature(int)"
        ]
    },
    "org.postgresql.core.PGStream:org.postgresql.core.EncodingPredictor$DecodeResult receiveErrorString(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:void doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties)",
            "org.postgresql.core.v3.QueryExecutorImpl:java.sql.SQLException receiveErrorResponse()",
            "org.postgresql.gss.GssAction:java.lang.Exception run()"
        ]
    },
    "org.postgresql.core.VisibleBufferedInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.PGStream:int receiveChar()",
            "org.postgresql.core.PGStream:void receiveEOF()"
        ]
    },
    "org.postgresql.core.VisibleBufferedInputStream:int peek()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.PGStream:int peekChar()"
        ]
    },
    "org.postgresql.core.PGStream:java.lang.String receiveString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.Field[] receiveFields()",
            "org.postgresql.core.v3.QueryExecutorImpl:void receiveAsyncNotify()",
            "org.postgresql.core.v3.QueryExecutorImpl:void receiveParameterStatus()",
            "org.postgresql.jre8.sasl.ScramAuthenticator:void processServerMechanismsAndInit()"
        ]
    },
    "org.postgresql.core.PGStream:byte[][] receiveTupleV3()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)"
        ]
    },
    "org.postgresql.core.PGStream:byte[] receive(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:void doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties)",
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.v3.CopyOperationImpl processCopyResults(org.postgresql.core.v3.CopyOperationImpl,boolean)",
            "org.postgresql.gss.GssAction:java.lang.Exception run()",
            "org.postgresql.sspi.SSPIClient:void continueSSPI(int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:byte[] receiveFastpathResult()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:byte[] fastpathCall(int,org.postgresql.core.ParameterList,boolean)"
        ]
    },
    "org.postgresql.Driver:java.util.Properties getDefaultProperties()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.Driver:java.sql.Connection connect(java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void <init>(org.postgresql.core.PGStream,java.lang.String,java.lang.String,int,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:org.postgresql.core.QueryExecutor openConnectionImpl(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.ds.PGPoolingDataSource:void close()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgStatement$1:void run()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgStatement:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.ds.PGPooledConnection$StatementHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.postgresql.jdbc.PgConnection:void execSQLUpdate(java.lang.String)",
            "org.postgresql.jdbc.PgConnection:boolean isValid(int)",
            "org.postgresql.jdbc.PgConnection:java.lang.String getSchema()",
            "org.postgresql.jdbc.PgConnection:void setSchema(java.lang.String)",
            "org.postgresql.jdbc.PgConnection:java.sql.Savepoint setSavepoint()",
            "org.postgresql.jdbc.PgConnection:java.sql.Savepoint setSavepoint(java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxIndexKeys()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTypeInfo()",
            "org.postgresql.jdbc.PgResultSet:void refreshRow()",
            "org.postgresql.jdbc.PgResultSet:void updateRow()",
            "org.postgresql.jdbc.PgStatement:void checkCompletion()",
            "org.postgresql.largeobject.LargeObjectManager:void <init>(org.postgresql.core.BaseConnection)",
            "org.postgresql.replication.PGReplicationConnectionImpl:void dropReplicationSlot(java.lang.String)",
            "org.postgresql.replication.fluent.logical.LogicalCreateSlotBuilder:void make()",
            "org.postgresql.replication.fluent.physical.PhysicalCreateSlotBuilder:void make()",
            "org.postgresql.util.JdbcBlackHole:void close(java.sql.Statement)",
            "org.postgresql.xa.PGXAConnection:int prepare(javax.transaction.xa.Xid)",
            "org.postgresql.xa.PGXAConnection:javax.transaction.xa.Xid[] recover(int)",
            "org.postgresql.xa.PGXAConnection:void rollback(javax.transaction.xa.Xid)",
            "org.postgresql.xa.PGXAConnection:void commitPrepared(javax.transaction.xa.Xid)"
        ]
    },
    "org.postgresql.fastpath.Fastpath:java.lang.Object fastpath(int,boolean,org.postgresql.fastpath.FastpathArg[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.fastpath.Fastpath:java.lang.Object fastpath(java.lang.String,boolean,org.postgresql.fastpath.FastpathArg[])"
        ]
    },
    "org.postgresql.fastpath.Fastpath:byte[] fastpath(java.lang.String,org.postgresql.fastpath.FastpathArg[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.fastpath.Fastpath:int getInteger(java.lang.String,org.postgresql.fastpath.FastpathArg[])",
            "org.postgresql.fastpath.Fastpath:long getLong(java.lang.String,org.postgresql.fastpath.FastpathArg[])",
            "org.postgresql.fastpath.Fastpath:byte[] getData(java.lang.String,org.postgresql.fastpath.FastpathArg[])",
            "org.postgresql.largeobject.LargeObject:void close()",
            "org.postgresql.largeobject.LargeObject:void write(byte[])",
            "org.postgresql.largeobject.LargeObject:void write(byte[],int,int)",
            "org.postgresql.largeobject.LargeObject:void seek(int,int)",
            "org.postgresql.largeobject.LargeObject:void seek64(long,int)",
            "org.postgresql.largeobject.LargeObjectManager:void delete(long)"
        ]
    },
    "org.postgresql.core.v3.ConnectionFactoryImpl:void runInitialQueries(org.postgresql.core.QueryExecutor,java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:org.postgresql.core.QueryExecutor openConnectionImpl(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.core.v3.ConnectionFactoryImpl:boolean isMaster(org.postgresql.core.QueryExecutor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:org.postgresql.core.QueryExecutor openConnectionImpl(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.jdbc.PgConnection:void commit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:void setAutoCommit(boolean)",
            "org.postgresql.largeobject.LargeObject:void close()",
            "org.postgresql.xa.PGXAConnection:void commitOnePhase(javax.transaction.xa.Xid)"
        ]
    },
    "org.postgresql.jdbc.PgConnection:void rollback()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.ds.PGPooledConnection$ConnectionHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])",
            "org.postgresql.ds.PGPooledConnection:void close()",
            "org.postgresql.ds.PGPooledConnection:java.sql.Connection getConnection()",
            "org.postgresql.xa.PGXAConnection:void rollback(javax.transaction.xa.Xid)"
        ]
    },
    "org.postgresql.jdbc.PgStatement:void execute(org.postgresql.core.CachedQuery,org.postgresql.core.ParameterList,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:boolean executeWithFlags(int)",
            "org.postgresql.jdbc.PgStatement:boolean executeWithFlags(org.postgresql.core.CachedQuery,int)"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:int[] executeBatch()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.fastpath.Fastpath:void addFunctions(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.largeobject.LargeObjectManager:void <init>(org.postgresql.core.BaseConnection)"
        ]
    },
    "org.postgresql.jdbc.PgCallableStatement:boolean executeWithFlags(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgCallableStatement:int executeUpdate()",
            "org.postgresql.jdbc.PgPreparedStatement:java.sql.ResultSet executeQuery()",
            "org.postgresql.jdbc.PgPreparedStatement:int executeUpdate()",
            "org.postgresql.jdbc.PgPreparedStatement:boolean execute()",
            "org.postgresql.jdbc.TypeInfoCache:int getSQLType(java.lang.String)",
            "org.postgresql.jdbc.TypeInfoCache:int getPGType(java.lang.String)",
            "org.postgresql.jdbc.TypeInfoCache:java.lang.String getPGType(int)",
            "org.postgresql.jdbc.TypeInfoCache:char getArrayDelimiter(int)",
            "org.postgresql.jdbc.TypeInfoCache:int getPGArrayElement(int)"
        ]
    },
    "org.postgresql.jdbc.PgConnection:int getTransactionIsolation()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgConnection:java.lang.String getSchema()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxIndexKeys()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxColumnsInIndex()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getImportedExportedKeys(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxNameLength()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxColumnNameLength()",
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxCursorNameLength()",
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxSchemaNameLength()",
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxProcedureNameLength()",
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxCatalogNameLength()",
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxTableNameLength()",
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxUserNameLength()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getClientInfoProperties()"
        ]
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.lang.String getSQLKeywords()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getFunctionColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTypeInfo()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:boolean isUpdateable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void checkUpdateable()"
        ]
    },
    "org.postgresql.jdbc.PgResultSetMetaData:void fetchFieldMetaData()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSetMetaData:boolean isAutoIncrement(int)",
            "org.postgresql.jdbc.PgResultSetMetaData:int isNullable(int)",
            "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getBaseColumnName(int)",
            "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getBaseSchemaName(int)",
            "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getBaseTableName(int)"
        ]
    },
    "org.postgresql.jdbc.TypeInfoCache:int getSQLType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgArray:int getBaseType()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getVersionColumns(java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTypeInfo()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])",
            "org.postgresql.jdbc.PgResultSet:void initSqlType(org.postgresql.core.Field)",
            "org.postgresql.jdbc.TypeInfoCache:int getSQLType(int)",
            "org.postgresql.jdbc.TypeInfoCache:java.lang.String getJavaClass(int)"
        ]
    },
    "org.postgresql.jdbc.TypeInfoCache:int getPGType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setPGobject(int,org.postgresql.util.PGobject)",
            "org.postgresql.jdbc.PgPreparedStatement:void setMap(int,java.util.Map)",
            "org.postgresql.jdbc.PgPreparedStatement:void setNull(int,int,java.lang.String)",
            "org.postgresql.jdbc.TypeInfoCache:int getPGArrayType(java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.TypeInfoCache:java.lang.String getPGType(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgArray:java.lang.String getBaseTypeName()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)",
            "org.postgresql.jdbc.PgParameterMetaData:java.lang.String getParameterTypeName(int)",
            "org.postgresql.jdbc.PgResultSet:void initSqlType(org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getPGType(int)",
            "org.postgresql.jdbc.TypeInfoCache:int getSQLType(int)",
            "org.postgresql.jdbc.TypeInfoCache:java.lang.String getJavaClass(int)"
        ]
    },
    "org.postgresql.jdbc.TypeInfoCache:char getArrayDelimiter(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgArray:void buildArrayList()",
            "org.postgresql.jdbc.PgArray:java.lang.String toString()",
            "org.postgresql.jdbc.PgArray:java.lang.String toString(org.postgresql.jdbc.PgArray$PgArrayList)",
            "org.postgresql.jdbc.PgConnection:java.sql.Array createArrayOf(java.lang.String,java.lang.Object)",
            "org.postgresql.jdbc.PgConnection:java.sql.Array createArrayOf(java.lang.String,java.lang.Object[])",
            "org.postgresql.jdbc.PgPreparedStatement:void setPrimitiveArray(int,java.lang.Object)"
        ]
    },
    "org.postgresql.jdbc.TypeInfoCache:int getPGArrayElement(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgArray:java.lang.Object buildArray(org.postgresql.jdbc.PgArray$PgArrayList,int,int)",
            "org.postgresql.jdbc.PgArray:java.lang.String getBaseTypeName()",
            "org.postgresql.jdbc.PgArray:java.sql.ResultSet getResultSetImpl(long,int,java.util.Map)"
        ]
    },
    "org.postgresql.xa.PGXAConnection:javax.transaction.xa.Xid[] recover(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void processDeadPortals()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.ResultHandler sendQueryPreamble(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void fetch(org.postgresql.core.ResultCursor,org.postgresql.core.ResultHandler,int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void processDeadParsedQueries()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.ResultHandler sendQueryPreamble(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendParse(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void fetch(org.postgresql.core.ResultCursor,org.postgresql.core.ResultHandler,int)"
        ]
    },
    "org.postgresql.jre8.sasl.ScramAuthenticator$lambda_sendScramClientFirstMessage_0__1:void sendBody(org.postgresql.core.PGStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jre8.sasl.ScramAuthenticator:void sendAuthenticationMessage(int,org.postgresql.jre8.sasl.ScramAuthenticator$BodySender)"
        ]
    },
    "org.postgresql.jre8.sasl.ScramAuthenticator$lambda_processServerFirstMessage_1__2:void sendBody(org.postgresql.core.PGStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jre8.sasl.ScramAuthenticator:void sendAuthenticationMessage(int,org.postgresql.jre8.sasl.ScramAuthenticator$BodySender)"
        ]
    },
    "org.postgresql.core.v3.CompositeParameterList:void setBytea(int,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setBinaryStream(int,java.io.InputStream)"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:void setBinaryStream(int,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.core.v3.CompositeParameterList:void setText(int,java.io.InputStream)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:java.sql.SQLWarning receiveNoticeResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void processNotifies(int)",
            "org.postgresql.core.v3.QueryExecutorImpl:byte[] receiveFastpathResult()",
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.v3.CopyOperationImpl processCopyResults(org.postgresql.core.v3.CopyOperationImpl,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void readStartupMessages()"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:java.lang.String receiveCommandStatus()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.v3.CopyOperationImpl processCopyResults(org.postgresql.core.v3.CopyOperationImpl,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)"
        ]
    },
    "org.postgresql.jre8.sasl.ScramAuthenticator:void verifyServerSignature(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:void doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:java.sql.SQLException receiveErrorResponse()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void processNotifies(int)",
            "org.postgresql.core.v3.QueryExecutorImpl:byte[] receiveFastpathResult()",
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.v3.CopyOperationImpl processCopyResults(org.postgresql.core.v3.CopyOperationImpl,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void readStartupMessages()"
        ]
    },
    "org.postgresql.core.PGStream:int receiveChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:org.postgresql.core.PGStream enableSSL(org.postgresql.core.PGStream,boolean,java.util.Properties,int)",
            "org.postgresql.core.v3.ConnectionFactoryImpl:void doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processNotifies(int)",
            "org.postgresql.core.v3.QueryExecutorImpl:byte[] receiveFastpathResult()",
            "org.postgresql.core.v3.QueryExecutorImpl:void initCopy(org.postgresql.core.v3.CopyOperationImpl)",
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.v3.CopyOperationImpl processCopyResults(org.postgresql.core.v3.CopyOperationImpl,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:java.lang.String receiveCommandStatus()",
            "org.postgresql.core.v3.QueryExecutorImpl:void receiveRFQ()",
            "org.postgresql.core.v3.QueryExecutorImpl:void readStartupMessages()",
            "org.postgresql.gss.GssAction:java.lang.Exception run()",
            "org.postgresql.jre8.sasl.ScramAuthenticator:void processServerMechanismsAndInit()"
        ]
    },
    "org.postgresql.core.PGStream:void receiveEOF()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.QueryExecutorBase:void sendQueryCancel()"
        ]
    },
    "org.postgresql.core.PGStream:int peekChar()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.v3.CopyOperationImpl processCopyResults(org.postgresql.core.v3.CopyOperationImpl,boolean)",
            "org.postgresql.jre8.sasl.ScramAuthenticator:void processServerMechanismsAndInit()"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.Field[] receiveFields()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void receiveAsyncNotify()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void processNotifies(int)",
            "org.postgresql.core.v3.QueryExecutorImpl:byte[] receiveFastpathResult()",
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.v3.CopyOperationImpl processCopyResults(org.postgresql.core.v3.CopyOperationImpl,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)"
        ]
    },
    "org.postgresql.jre8.sasl.ScramAuthenticator:void processServerMechanismsAndInit()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.ConnectionFactoryImpl:void doAuthentication(org.postgresql.core.PGStream,java.lang.String,java.lang.String,java.util.Properties)"
        ]
    },
    "org.postgresql.ds.PGPooledConnection$StatementHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgConnection:void execSQLUpdate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:void setReadOnly(boolean)",
            "org.postgresql.jdbc.PgConnection:void setTransactionIsolation(int)",
            "org.postgresql.jdbc.PgConnection:void setClientInfo(java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgConnection:void rollback(java.sql.Savepoint)",
            "org.postgresql.jdbc.PgConnection:void releaseSavepoint(java.sql.Savepoint)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)"
        ]
    },
    "org.postgresql.jdbc.PgConnection:boolean isValid(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgConnection:void setSchema(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgConnection:java.sql.Savepoint setSavepoint()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgConnection:java.sql.Savepoint setSavepoint(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgStatement:void checkCompletion()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void close()"
        ]
    },
    "org.postgresql.largeobject.LargeObjectManager:void <init>(org.postgresql.core.BaseConnection)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:org.postgresql.largeobject.LargeObjectManager getLargeObjectAPI()"
        ]
    },
    "org.postgresql.replication.PGReplicationConnectionImpl:void dropReplicationSlot(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.replication.fluent.logical.LogicalCreateSlotBuilder:void make()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.replication.fluent.physical.PhysicalCreateSlotBuilder:void make()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.util.JdbcBlackHole:void close(java.sql.Statement)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxIndexKeys()",
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxNameLength()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.lang.String getSQLKeywords()",
            "org.postgresql.jdbc.PgResultSetMetaData:void fetchFieldMetaData()"
        ]
    },
    "org.postgresql.xa.PGXAConnection:int prepare(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.xa.PGXAConnection:void rollback(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.xa.PGXAConnection:void commitPrepared(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.xa.PGXAConnection:void commit(javax.transaction.xa.Xid,boolean)"
        ]
    },
    "org.postgresql.fastpath.Fastpath:java.lang.Object fastpath(java.lang.String,boolean,org.postgresql.fastpath.FastpathArg[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.fastpath.Fastpath:int getInteger(java.lang.String,org.postgresql.fastpath.FastpathArg[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.fastpath.Fastpath:long getOID(java.lang.String,org.postgresql.fastpath.FastpathArg[])",
            "org.postgresql.largeobject.LargeObject:void <init>(org.postgresql.fastpath.Fastpath,long,int,org.postgresql.core.BaseConnection,boolean)",
            "org.postgresql.largeobject.LargeObject:int tell()",
            "org.postgresql.largeobject.LargeObject:void truncate(int)",
            "org.postgresql.largeobject.LargeObject:void truncate64(long)"
        ]
    },
    "org.postgresql.fastpath.Fastpath:long getLong(java.lang.String,org.postgresql.fastpath.FastpathArg[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.largeobject.LargeObject:long tell64()"
        ]
    },
    "org.postgresql.fastpath.Fastpath:byte[] getData(java.lang.String,org.postgresql.fastpath.FastpathArg[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.largeobject.LargeObject:byte[] read(int)"
        ]
    },
    "org.postgresql.largeobject.LargeObject:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob:void free()",
            "org.postgresql.largeobject.BlobInputStream:void close()",
            "org.postgresql.largeobject.BlobOutputStream:void close()"
        ]
    },
    "org.postgresql.largeobject.LargeObject:void write(byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.largeobject.BlobOutputStream:void write(int)",
            "org.postgresql.largeobject.BlobOutputStream:void write(byte[],int,int)"
        ]
    },
    "org.postgresql.largeobject.LargeObject:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgBlob:int setBytes(long,byte[],int,int)",
            "org.postgresql.largeobject.BlobOutputStream:void write(byte[],int,int)",
            "org.postgresql.largeobject.BlobOutputStream:void flush()"
        ]
    },
    "org.postgresql.largeobject.LargeObject:void seek(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob:byte[] getBytes(long,int)",
            "org.postgresql.jdbc.AbstractBlobClob:java.io.InputStream getBinaryStream()",
            "org.postgresql.jdbc.PgBlob:java.io.InputStream getBinaryStream(long,long)",
            "org.postgresql.largeobject.LargeObject:void seek(int)",
            "org.postgresql.largeobject.LargeObject:int size()"
        ]
    },
    "org.postgresql.largeobject.LargeObject:void seek64(long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgBlob:java.io.InputStream getBinaryStream(long,long)",
            "org.postgresql.largeobject.BlobInputStream:void reset()",
            "org.postgresql.largeobject.LargeObject:long size64()"
        ]
    },
    "org.postgresql.largeobject.LargeObjectManager:void delete(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.largeobject.LargeObjectManager:void unlink(int)",
            "org.postgresql.largeobject.LargeObjectManager:void unlink(long)",
            "org.postgresql.largeobject.LargeObjectManager:void delete(int)"
        ]
    },
    "org.postgresql.jdbc.PgConnection:void setAutoCommit(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.ds.PGPooledConnection:java.sql.Connection getConnection()",
            "org.postgresql.xa.PGXAConnection:java.sql.Connection getConnection()",
            "org.postgresql.xa.PGXAConnection:void start(javax.transaction.xa.Xid,int)",
            "org.postgresql.xa.PGXAConnection:int prepare(javax.transaction.xa.Xid)",
            "org.postgresql.xa.PGXAConnection:void rollback(javax.transaction.xa.Xid)",
            "org.postgresql.xa.PGXAConnection:void commitOnePhase(javax.transaction.xa.Xid)",
            "org.postgresql.xa.PGXAConnection:void commitPrepared(javax.transaction.xa.Xid)"
        ]
    },
    "org.postgresql.xa.PGXAConnection:void commitOnePhase(javax.transaction.xa.Xid)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.xa.PGXAConnection:void commit(javax.transaction.xa.Xid,boolean)"
        ]
    },
    "org.postgresql.ds.PGPooledConnection$ConnectionHandler:java.lang.Object invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.ds.PGPooledConnection:java.sql.Connection getConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.ds.PGPoolingDataSource:java.sql.Connection getPooledConnection()",
            "org.postgresql.xa.PGXAConnection:java.sql.Connection getConnection()"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:boolean executeWithFlags(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgCallableStatement:boolean executeWithFlags(int)",
            "org.postgresql.jdbc.PgPreparedStatement:java.sql.ResultSet executeQuery()",
            "org.postgresql.jdbc.PgPreparedStatement:int executeUpdate()",
            "org.postgresql.jdbc.PgPreparedStatement:boolean execute()",
            "org.postgresql.jdbc.TypeInfoCache:int getSQLType(java.lang.String)",
            "org.postgresql.jdbc.TypeInfoCache:int getPGType(java.lang.String)",
            "org.postgresql.jdbc.TypeInfoCache:java.lang.String getPGType(int)",
            "org.postgresql.jdbc.TypeInfoCache:char getArrayDelimiter(int)",
            "org.postgresql.jdbc.TypeInfoCache:int getPGArrayElement(int)"
        ]
    },
    "org.postgresql.jdbc.PgStatement:boolean executeWithFlags(org.postgresql.core.CachedQuery,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgStatement:boolean executeCachedSql(java.lang.String,int,java.lang.String[])"
        ]
    },
    "org.postgresql.jdbc.PgCallableStatement:int executeUpdate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:boolean isValid(int)",
            "org.postgresql.jdbc.PgResultSet:void deleteRow()",
            "org.postgresql.jdbc.PgResultSet:void insertRow()",
            "org.postgresql.jdbc.PgResultSet:void updateRow()"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:java.sql.ResultSet executeQuery()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void refreshRow()"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:int executeUpdate()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgCallableStatement:int executeUpdate()",
            "org.postgresql.jdbc.PgConnection:boolean isValid(int)",
            "org.postgresql.jdbc.PgResultSet:void deleteRow()",
            "org.postgresql.jdbc.PgResultSet:void insertRow()",
            "org.postgresql.jdbc.PgResultSet:void updateRow()"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:boolean execute()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxColumnsInIndex()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getImportedExportedKeys(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxColumnNameLength()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxCursorNameLength()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxSchemaNameLength()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxProcedureNameLength()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxCatalogNameLength()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxTableNameLength()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxUserNameLength()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getClientInfoProperties()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getFunctionColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void checkUpdateable()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void deleteRow()",
            "org.postgresql.jdbc.PgResultSet:void insertRow()",
            "org.postgresql.jdbc.PgResultSet:void moveToCurrentRow()",
            "org.postgresql.jdbc.PgResultSet:void moveToInsertRow()",
            "org.postgresql.jdbc.PgResultSet:void refreshRow()",
            "org.postgresql.jdbc.PgResultSet:void updateRow()",
            "org.postgresql.jdbc.PgResultSet:void updateValue(int,java.lang.Object)"
        ]
    },
    "org.postgresql.jdbc.PgResultSetMetaData:boolean isAutoIncrement(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getColumnTypeName(int)"
        ]
    },
    "org.postgresql.jdbc.PgResultSetMetaData:int isNullable(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getBaseColumnName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void refreshRow()",
            "org.postgresql.jdbc.PgResultSet:void updateValue(int,java.lang.Object)"
        ]
    },
    "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getBaseSchemaName(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getBaseTableName(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getTableName(int)"
        ]
    },
    "org.postgresql.jdbc.PgArray:int getBaseType()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getVersionColumns(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void initSqlType(org.postgresql.core.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.String getPGType(int)",
            "org.postgresql.jdbc.PgResultSet:int getSQLType(int)"
        ]
    },
    "org.postgresql.jdbc.TypeInfoCache:int getSQLType(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgArray:java.lang.Object buildArray(org.postgresql.jdbc.PgArray$PgArrayList,int,int)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)",
            "org.postgresql.jdbc.PgParameterMetaData:int getParameterType(int)",
            "org.postgresql.jdbc.PgResultSetMetaData:int getSQLType(int)",
            "org.postgresql.jdbc.TypeInfoCache:boolean requiresQuoting(int)"
        ]
    },
    "org.postgresql.jdbc.TypeInfoCache:java.lang.String getJavaClass(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgParameterMetaData:java.lang.String getParameterClassName(int)",
            "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getColumnClassName(int)"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:void setPGobject(int,org.postgresql.util.PGobject)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object)"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:void setMap(int,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object)"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:void setNull(int,int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.TypeInfoCache:int getPGArrayType(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:java.sql.Array createArrayOf(java.lang.String,java.lang.Object)",
            "org.postgresql.jdbc.PgConnection:java.sql.Array createArrayOf(java.lang.String,java.lang.Object[])",
            "org.postgresql.jdbc.PgPreparedStatement:void setArray(int,java.sql.Array)"
        ]
    },
    "org.postgresql.jdbc.PgArray:java.lang.String getBaseTypeName()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgArray:java.lang.Object buildArray(org.postgresql.jdbc.PgArray$PgArrayList,int,int)",
            "org.postgresql.jdbc.PgArray:int getBaseType()",
            "org.postgresql.jdbc.PgArray:java.lang.String toString()",
            "org.postgresql.jdbc.PgPreparedStatement:void setArray(int,java.sql.Array)"
        ]
    },
    "org.postgresql.jdbc.PgParameterMetaData:java.lang.String getParameterTypeName(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getPGType(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSetMetaData:boolean isCurrency(int)",
            "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getColumnTypeName(int)",
            "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getColumnClassName(int)"
        ]
    },
    "org.postgresql.jdbc.PgArray:void buildArrayList()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgArray:java.lang.Object getArrayImpl(long,int,java.util.Map)",
            "org.postgresql.jdbc.PgArray:java.lang.String getBaseTypeName()",
            "org.postgresql.jdbc.PgArray:java.sql.ResultSet getResultSetImpl(long,int,java.util.Map)"
        ]
    },
    "org.postgresql.jdbc.PgArray:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.SimpleParameterList:java.lang.String toString(int,boolean)",
            "org.postgresql.core.v3.SimpleParameterList:int getV3Length(int)",
            "org.postgresql.jdbc.EscapedFunctions:java.lang.String sqltimestampadd(java.util.List)",
            "org.postgresql.jdbc.EscapedFunctions:java.lang.String sqltimestampdiff(java.util.List)",
            "org.postgresql.jdbc.PgArray:java.lang.String toString()",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Date getDate(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Time getTime(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Timestamp getTimestamp(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgConnection:void appendArray(java.lang.StringBuilder,java.lang.Object,char)",
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:int castToInt(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:short castToShort(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:long castToLong(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:float castToFloat(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:double castToDouble(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:java.lang.String castToString(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:void setArray(int,java.sql.Array)",
            "org.postgresql.jdbc.PgResultSet:java.lang.String getString(int)",
            "org.postgresql.util.HStoreConverter:byte[] toBytes(java.util.Map,org.postgresql.core.Encoding)",
            "org.postgresql.util.HStoreConverter:void appendEscaped(java.lang.StringBuilder,java.lang.Object)"
        ]
    },
    "org.postgresql.jdbc.PgArray:java.lang.String toString(org.postgresql.jdbc.PgArray$PgArrayList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgArray:java.sql.ResultSet getResultSetImpl(long,int,java.util.Map)",
            "org.postgresql.jdbc.PgArray:java.lang.String toString(org.postgresql.jdbc.PgArray$PgArrayList)"
        ]
    },
    "org.postgresql.jdbc.PgConnection:java.sql.Array createArrayOf(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgConnection:java.sql.Array createArrayOf(java.lang.String,java.lang.Object[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgArray:java.lang.String toString()"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:void setPrimitiveArray(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object)"
        ]
    },
    "org.postgresql.jdbc.PgArray:java.lang.Object buildArray(org.postgresql.jdbc.PgArray$PgArrayList,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgArray:java.lang.Object getArrayImpl(long,int,java.util.Map)",
            "org.postgresql.jdbc.PgArray:java.lang.Object buildArray(org.postgresql.jdbc.PgArray$PgArrayList,int,int)"
        ]
    },
    "org.postgresql.jdbc.PgArray:java.sql.ResultSet getResultSetImpl(long,int,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgArray:java.sql.ResultSet getResultSet()",
            "org.postgresql.jdbc.PgArray:java.sql.ResultSet getResultSet(long,int)",
            "org.postgresql.jdbc.PgArray:java.sql.ResultSet getResultSet(long,int,java.util.Map)",
            "org.postgresql.jdbc.PgArray:java.sql.ResultSet getResultSetImpl(java.util.Map)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void initCopy(org.postgresql.core.v3.CopyOperationImpl)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.v3.CopyOperationImpl processCopyResults(org.postgresql.core.v3.CopyOperationImpl,boolean)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void receiveRFQ()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:byte[] receiveFastpathResult()",
            "org.postgresql.core.v3.QueryExecutorImpl:org.postgresql.core.v3.CopyOperationImpl processCopyResults(org.postgresql.core.v3.CopyOperationImpl,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void readStartupMessages()"
        ]
    },
    "org.postgresql.jdbc.PgConnection:void setReadOnly(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:void <init>(org.postgresql.util.HostSpec[],java.lang.String,java.lang.String,java.util.Properties,java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgConnection:void setTransactionIsolation(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgConnection:void setClientInfo(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:void setClientInfo(java.util.Properties)"
        ]
    },
    "org.postgresql.jdbc.PgConnection:void rollback(java.sql.Savepoint)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgConnection:void releaseSavepoint(java.sql.Savepoint)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.String getString(int)",
            "org.postgresql.jdbc.PgResultSet:java.math.BigDecimal getBigDecimal(int,int)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgCallableStatement:boolean executeWithFlags(int)",
            "org.postgresql.jdbc.PgConnection:int getTransactionIsolation()",
            "org.postgresql.jdbc.PgConnection:java.lang.String getSchema()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTypeInfo()",
            "org.postgresql.jdbc.PgResultSet:void refreshRow()",
            "org.postgresql.jdbc.PgResultSet:boolean isUpdateable()",
            "org.postgresql.jdbc.PgStatement:void closeForNextExecution()",
            "org.postgresql.jdbc.PgStatement:void executeInternal(org.postgresql.core.CachedQuery,org.postgresql.core.ParameterList,int)",
            "org.postgresql.jdbc.PgStatement:boolean getMoreResults()",
            "org.postgresql.jdbc.PgStatement:int[] executeBatch()",
            "org.postgresql.jdbc.PgStatement:boolean getMoreResults(int)",
            "org.postgresql.jdbc.TypeInfoCache:int getSQLType(java.lang.String)",
            "org.postgresql.jdbc.TypeInfoCache:int getPGType(java.lang.String)",
            "org.postgresql.jdbc.TypeInfoCache:java.lang.String getPGType(int)",
            "org.postgresql.jdbc.TypeInfoCache:char getArrayDelimiter(int)",
            "org.postgresql.jdbc.TypeInfoCache:int getPGArrayElement(int)",
            "org.postgresql.largeobject.LargeObjectManager:void <init>(org.postgresql.core.BaseConnection)",
            "org.postgresql.util.JdbcBlackHole:void close(java.sql.ResultSet)",
            "org.postgresql.xa.PGXAConnection:javax.transaction.xa.Xid[] recover(int)"
        ]
    },
    "org.postgresql.jdbc.PgConnection:org.postgresql.largeobject.LargeObjectManager getLargeObjectAPI()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob:org.postgresql.largeobject.LargeObject getLo(boolean)",
            "org.postgresql.jdbc.PgPreparedStatement:long createBlob(int,java.io.InputStream,long)",
            "org.postgresql.jdbc.PgPreparedStatement:void setClob(int,java.sql.Clob)"
        ]
    },
    "org.postgresql.xa.PGXAConnection:void commit(javax.transaction.xa.Xid,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.fastpath.Fastpath:long getOID(java.lang.String,org.postgresql.fastpath.FastpathArg[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.largeobject.LargeObjectManager:long createLO(int)"
        ]
    },
    "org.postgresql.largeobject.LargeObject:void <init>(org.postgresql.fastpath.Fastpath,long,int,org.postgresql.core.BaseConnection,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.largeobject.LargeObject:void <init>(org.postgresql.fastpath.Fastpath,long,int)",
            "org.postgresql.largeobject.LargeObjectManager:org.postgresql.largeobject.LargeObject open(long,int,boolean)"
        ]
    },
    "org.postgresql.largeobject.LargeObject:int tell()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob:org.postgresql.largeobject.LargeObject getLo(boolean)",
            "org.postgresql.largeobject.LargeObject:int size()"
        ]
    },
    "org.postgresql.largeobject.LargeObject:void truncate(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob:void truncate(long)"
        ]
    },
    "org.postgresql.largeobject.LargeObject:void truncate64(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob:void truncate(long)"
        ]
    },
    "org.postgresql.largeobject.LargeObject:long tell64()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.largeobject.LargeObject:long size64()"
        ]
    },
    "org.postgresql.largeobject.LargeObject:byte[] read(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob:byte[] getBytes(long,int)",
            "org.postgresql.jdbc.PgClob:java.lang.String getSubString(long,int)",
            "org.postgresql.largeobject.BlobInputStream:int read()",
            "org.postgresql.largeobject.LargeObject:int read(byte[],int,int)"
        ]
    },
    "org.postgresql.jdbc.AbstractBlobClob:void free()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.largeobject.BlobInputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.Driver:java.util.Properties loadDefaultProperties()",
            "org.postgresql.core.VisibleBufferedInputStream:void close()",
            "org.postgresql.jdbc.PgPreparedStatement:void setBlob(int,java.sql.Blob)",
            "org.postgresql.ssl.SingleCertValidatingFactory:void <init>(java.lang.String)"
        ]
    },
    "org.postgresql.largeobject.BlobOutputStream:void close()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.PGStream:void close()",
            "org.postgresql.jdbc.PgPreparedStatement:long createBlob(int,java.io.InputStream,long)"
        ]
    },
    "org.postgresql.largeobject.BlobOutputStream:void write(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.PGStream:void sendChar(int)",
            "org.postgresql.core.PGStream:void send(byte[],int,int)"
        ]
    },
    "org.postgresql.largeobject.BlobOutputStream:void write(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.PGStream:void send(byte[],int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:long createBlob(int,java.io.InputStream,long)",
            "org.postgresql.util.StreamWrapper:int copyStream(java.io.InputStream,java.io.OutputStream,int)"
        ]
    },
    "org.postgresql.jdbc.PgBlob:int setBytes(long,byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgBlob:int setBytes(long,byte[])"
        ]
    },
    "org.postgresql.largeobject.BlobOutputStream:void flush()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.PGStream:void flush()",
            "org.postgresql.largeobject.BlobOutputStream:void write(byte[],int,int)",
            "org.postgresql.largeobject.BlobOutputStream:void close()",
            "org.postgresql.largeobject.LargeObject:void close()"
        ]
    },
    "org.postgresql.jdbc.AbstractBlobClob:byte[] getBytes(long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob:long position(java.sql.Blob,long)"
        ]
    },
    "org.postgresql.jdbc.AbstractBlobClob:java.io.InputStream getBinaryStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgClob:java.io.InputStream getAsciiStream()",
            "org.postgresql.jdbc.PgClob:java.io.Reader getCharacterStream()",
            "org.postgresql.jdbc.PgPreparedStatement:void setBlob(int,java.sql.Blob)"
        ]
    },
    "org.postgresql.jdbc.PgBlob:java.io.InputStream getBinaryStream(long,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.largeobject.LargeObject:void seek(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob$LOIterator:void <init>(org.postgresql.jdbc.AbstractBlobClob,long)",
            "org.postgresql.jdbc.AbstractBlobClob:java.io.OutputStream setBinaryStream(long)",
            "org.postgresql.jdbc.AbstractBlobClob:org.postgresql.largeobject.LargeObject getLo(boolean)",
            "org.postgresql.jdbc.PgBlob:int setBytes(long,byte[],int,int)",
            "org.postgresql.jdbc.PgClob:java.lang.String getSubString(long,int)",
            "org.postgresql.largeobject.BlobInputStream:void reset()"
        ]
    },
    "org.postgresql.largeobject.LargeObject:int size()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob:long length()"
        ]
    },
    "org.postgresql.largeobject.BlobInputStream:void reset()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.largeobject.LargeObject:long size64()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob:long length()"
        ]
    },
    "org.postgresql.largeobject.LargeObjectManager:void unlink(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.largeobject.LargeObjectManager:void unlink(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.largeobject.LargeObjectManager:void delete(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.xa.PGXAConnection:java.sql.Connection getConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.ds.PGPoolingDataSource:java.sql.Connection getPooledConnection()"
        ]
    },
    "org.postgresql.xa.PGXAConnection:void start(javax.transaction.xa.Xid,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.ds.PGPoolingDataSource:java.sql.Connection getPooledConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.ds.PGPoolingDataSource:java.sql.Connection getConnection()"
        ]
    },
    "org.postgresql.jdbc.PgStatement:boolean executeCachedSql(java.lang.String,int,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgStatement:boolean executeWithFlags(java.lang.String,int)",
            "org.postgresql.jdbc.PgStatement:int executeUpdate(java.lang.String,java.lang.String[])",
            "org.postgresql.jdbc.PgStatement:boolean execute(java.lang.String,java.lang.String[])"
        ]
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getImportedKeys(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getExportedKeys(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getCrossReference(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void moveToCurrentRow()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void deleteRow()"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void moveToInsertRow()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateValue(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateBigDecimal(int,java.math.BigDecimal)",
            "org.postgresql.jdbc.PgResultSet:void updateBoolean(int,boolean)",
            "org.postgresql.jdbc.PgResultSet:void updateByte(int,byte)",
            "org.postgresql.jdbc.PgResultSet:void updateBytes(int,byte[])",
            "org.postgresql.jdbc.PgResultSet:void updateDate(int,java.sql.Date)",
            "org.postgresql.jdbc.PgResultSet:void updateDouble(int,double)",
            "org.postgresql.jdbc.PgResultSet:void updateFloat(int,float)",
            "org.postgresql.jdbc.PgResultSet:void updateInt(int,int)",
            "org.postgresql.jdbc.PgResultSet:void updateLong(int,long)",
            "org.postgresql.jdbc.PgResultSet:void updateNull(int)",
            "org.postgresql.jdbc.PgResultSet:void updateObject(int,java.lang.Object)",
            "org.postgresql.jdbc.PgResultSet:void updateShort(int,short)",
            "org.postgresql.jdbc.PgResultSet:void updateString(int,java.lang.String)",
            "org.postgresql.jdbc.PgResultSet:void updateTime(int,java.sql.Time)",
            "org.postgresql.jdbc.PgResultSet:void updateTimestamp(int,java.sql.Timestamp)",
            "org.postgresql.jdbc.PgResultSet:void updateSQLXML(int,java.sql.SQLXML)"
        ]
    },
    "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getColumnTypeName(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getTableName(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.lang.String getPGType(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:void updateNull(int)",
            "org.postgresql.jdbc.PgResultSet:java.lang.String getString(int)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:int getSQLType(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:void updateRowBuffer()",
            "org.postgresql.jdbc.PgResultSet:java.lang.String getString(int)",
            "org.postgresql.jdbc.PgResultSet:java.math.BigDecimal getBigDecimal(int,int)",
            "org.postgresql.jdbc.PgResultSet:boolean isColumnTrimmable(int)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgParameterMetaData:int getParameterType(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSetMetaData:int getSQLType(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSetMetaData:int getColumnType(int)",
            "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getColumnClassName(int)"
        ]
    },
    "org.postgresql.jdbc.TypeInfoCache:boolean requiresQuoting(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgParameterMetaData:java.lang.String getParameterClassName(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSetMetaData:java.lang.String getColumnClassName(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgPreparedStatement:void setArray(int,java.sql.Array)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object)"
        ]
    },
    "org.postgresql.jdbc.PgResultSetMetaData:boolean isCurrency(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgArray:java.lang.Object getArrayImpl(long,int,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgArray:java.lang.Object getArray()",
            "org.postgresql.jdbc.PgArray:java.lang.Object getArray(long,int)",
            "org.postgresql.jdbc.PgArray:java.lang.Object getArrayImpl(java.util.Map)",
            "org.postgresql.jdbc.PgArray:java.lang.Object getArray(long,int,java.util.Map)"
        ]
    },
    "org.postgresql.core.v3.SimpleParameterList:java.lang.String toString(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.NativeQuery:java.lang.String toString(org.postgresql.core.ParameterList)",
            "org.postgresql.core.v3.BatchedQuery:java.lang.String buildNativeSql(org.postgresql.core.ParameterList)",
            "org.postgresql.core.v3.CompositeParameterList:java.lang.String toString(int,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendBind(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,org.postgresql.core.v3.Portal,boolean)",
            "org.postgresql.core.v3.SimpleParameterList:java.lang.String toString()"
        ]
    },
    "org.postgresql.core.v3.SimpleParameterList:int getV3Length(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void sendFastpathCall(int,org.postgresql.core.v3.SimpleParameterList)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendBind(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,org.postgresql.core.v3.Portal,boolean)"
        ]
    },
    "org.postgresql.jdbc.EscapedFunctions:java.lang.String sqltimestampadd(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.EscapedFunctions:java.lang.String sqltimestampdiff(java.util.List)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgCallableStatement:java.sql.Date getDate(int,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgCallableStatement:java.sql.Time getTime(int,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgCallableStatement:java.sql.Timestamp getTimestamp(int,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgConnection:void appendArray(java.lang.StringBuilder,java.lang.Object,char)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:void appendArray(java.lang.StringBuilder,java.lang.Object,char)",
            "org.postgresql.jdbc.PgConnection:java.sql.Array createArrayOf(java.lang.String,java.lang.Object)",
            "org.postgresql.jdbc.PgConnection:java.sql.Array createArrayOf(java.lang.String,java.lang.Object[])"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:int castToInt(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:short castToShort(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:long castToLong(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:float castToFloat(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:double castToDouble(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:java.lang.String castToString(java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.lang.String getString(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.fastpath.Fastpath:void addFunctions(java.sql.ResultSet)",
            "org.postgresql.jdbc.PgConnection:int getTransactionIsolation()",
            "org.postgresql.jdbc.PgConnection:java.lang.String getSchema()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.lang.String getSQLKeywords()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTypeInfo()",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:java.io.Reader getCharacterStream(int)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Date getDate(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Time getTime(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgResultSet:java.time.LocalTime getLocalTime(int)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Timestamp getTimestamp(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgResultSet:java.time.LocalDateTime getLocalDateTime(int)",
            "org.postgresql.jdbc.PgResultSet:boolean isUpdateable()",
            "org.postgresql.jdbc.PgResultSet:boolean getBoolean(int)",
            "org.postgresql.jdbc.PgResultSet:byte getByte(int)",
            "org.postgresql.jdbc.PgResultSet:java.io.InputStream getAsciiStream(int)",
            "org.postgresql.jdbc.PgResultSet:java.io.InputStream getUnicodeStream(int)",
            "org.postgresql.jdbc.PgResultSet:java.lang.String getString(java.lang.String)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int)",
            "org.postgresql.jdbc.PgResultSet:java.lang.String getFixedString(int)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)",
            "org.postgresql.jdbc.PgResultSet:java.sql.SQLXML getSQLXML(int)",
            "org.postgresql.jdbc.PgResultSetMetaData:void fetchFieldMetaData()",
            "org.postgresql.jdbc.TypeInfoCache:int getSQLType(java.lang.String)",
            "org.postgresql.jdbc.TypeInfoCache:int getPGType(java.lang.String)",
            "org.postgresql.jdbc.TypeInfoCache:java.lang.String getPGType(int)",
            "org.postgresql.jdbc.TypeInfoCache:char getArrayDelimiter(int)",
            "org.postgresql.jdbc.TypeInfoCache:int getPGArrayElement(int)",
            "org.postgresql.xa.PGXAConnection:javax.transaction.xa.Xid[] recover(int)"
        ]
    },
    "org.postgresql.util.HStoreConverter:byte[] toBytes(java.util.Map,org.postgresql.core.Encoding)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setMap(int,java.util.Map)"
        ]
    },
    "org.postgresql.util.HStoreConverter:void appendEscaped(java.lang.StringBuilder,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.util.HStoreConverter:java.lang.String toString(java.util.Map)"
        ]
    },
    "org.postgresql.jdbc.PgArray:java.sql.ResultSet getResultSet()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgArray:java.sql.ResultSet getResultSet(long,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgArray:java.sql.ResultSet getResultSet(long,int,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgArray:java.sql.ResultSet getResultSetImpl(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgArray:java.sql.ResultSet getResultSet(java.util.Map)"
        ]
    },
    "org.postgresql.jdbc.PgConnection:void setClientInfo(java.util.Properties)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.math.BigDecimal getBigDecimal(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:java.math.BigDecimal getBigDecimal(int)",
            "org.postgresql.jdbc.PgResultSet:java.math.BigDecimal getBigDecimal(java.lang.String,int)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgCallableStatement:boolean executeWithFlags(int)",
            "org.postgresql.jdbc.PgResultSet$PrimaryKey:java.lang.Object getValue()",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObjectImpl(int,java.util.Map)",
            "org.postgresql.jdbc.PgResultSet:java.lang.String getString(int)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(java.lang.String)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgStatement:void closeForNextExecution()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgStatement:void executeInternal(org.postgresql.core.CachedQuery,org.postgresql.core.ParameterList,int)",
            "org.postgresql.jdbc.PgStatement:void close()",
            "org.postgresql.jdbc.PgStatement:int[] executeBatch()"
        ]
    },
    "org.postgresql.jdbc.PgStatement:boolean getMoreResults()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:java.sql.ResultSet execSQLQuery(java.lang.String,int,int)"
        ]
    },
    "org.postgresql.jdbc.PgStatement:boolean getMoreResults(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.util.JdbcBlackHole:void close(java.sql.ResultSet)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxIndexKeys()",
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxNameLength()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.lang.String getSQLKeywords()",
            "org.postgresql.jdbc.PgResultSetMetaData:void fetchFieldMetaData()"
        ]
    },
    "org.postgresql.jdbc.AbstractBlobClob:org.postgresql.largeobject.LargeObject getLo(boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob$LOIterator:void <init>(org.postgresql.jdbc.AbstractBlobClob,long)",
            "org.postgresql.jdbc.AbstractBlobClob$LOIterator:boolean hasNext()",
            "org.postgresql.jdbc.AbstractBlobClob:void truncate(long)",
            "org.postgresql.jdbc.AbstractBlobClob:long length()",
            "org.postgresql.jdbc.AbstractBlobClob:byte[] getBytes(long,int)",
            "org.postgresql.jdbc.AbstractBlobClob:java.io.InputStream getBinaryStream()",
            "org.postgresql.jdbc.AbstractBlobClob:java.io.OutputStream setBinaryStream(long)",
            "org.postgresql.jdbc.PgBlob:java.io.InputStream getBinaryStream(long,long)",
            "org.postgresql.jdbc.PgBlob:int setBytes(long,byte[],int,int)",
            "org.postgresql.jdbc.PgClob:java.lang.String getSubString(long,int)"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:void setClob(int,java.sql.Clob)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object)"
        ]
    },
    "org.postgresql.largeobject.LargeObjectManager:long createLO(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.largeobject.LargeObjectManager:long createLO()",
            "org.postgresql.largeobject.LargeObjectManager:int create(int)"
        ]
    },
    "org.postgresql.largeobject.LargeObject:void <init>(org.postgresql.fastpath.Fastpath,long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.largeobject.LargeObject:org.postgresql.largeobject.LargeObject copy()"
        ]
    },
    "org.postgresql.largeobject.LargeObjectManager:org.postgresql.largeobject.LargeObject open(long,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.largeobject.LargeObjectManager:org.postgresql.largeobject.LargeObject open(long)",
            "org.postgresql.largeobject.LargeObjectManager:org.postgresql.largeobject.LargeObject open(long,boolean)",
            "org.postgresql.largeobject.LargeObjectManager:org.postgresql.largeobject.LargeObject open(int,int)",
            "org.postgresql.largeobject.LargeObjectManager:org.postgresql.largeobject.LargeObject open(int,int,boolean)",
            "org.postgresql.largeobject.LargeObjectManager:org.postgresql.largeobject.LargeObject open(long,int)"
        ]
    },
    "org.postgresql.jdbc.AbstractBlobClob:void truncate(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgClob:java.lang.String getSubString(long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:java.lang.String asString(java.sql.Clob)"
        ]
    },
    "org.postgresql.largeobject.BlobInputStream:int read()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.largeobject.LargeObject:int read(byte[],int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob$LOIterator:boolean hasNext()"
        ]
    },
    "org.postgresql.jdbc.PgBlob:int setBytes(long,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.AbstractBlobClob:long position(java.sql.Blob,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgClob:java.io.InputStream getAsciiStream()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgClob:java.io.Reader getCharacterStream()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setClob(int,java.sql.Clob)"
        ]
    },
    "org.postgresql.jdbc.AbstractBlobClob$LOIterator:void <init>(org.postgresql.jdbc.AbstractBlobClob,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob:long position(byte[],long)"
        ]
    },
    "org.postgresql.jdbc.AbstractBlobClob:java.io.OutputStream setBinaryStream(long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.AbstractBlobClob:long length()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob:long position(java.sql.Blob,long)",
            "org.postgresql.jdbc.PgPreparedStatement:java.lang.String asString(java.sql.Clob)",
            "org.postgresql.jdbc.PgPreparedStatement:void setBlob(int,java.sql.Blob)",
            "org.postgresql.jdbc.PgPreparedStatement:void setClob(int,java.sql.Clob)"
        ]
    },
    "org.postgresql.ds.PGPoolingDataSource:java.sql.Connection getConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.ds.PGPoolingDataSource:java.sql.Connection getConnection(java.lang.String,java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgStatement:boolean executeWithFlags(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:java.sql.ResultSet execSQLQuery(java.lang.String,int,int)",
            "org.postgresql.jdbc.PgConnection:void execSQLUpdate(java.lang.String)",
            "org.postgresql.jdbc.PgStatement:java.sql.ResultSet executeQuery(java.lang.String)",
            "org.postgresql.jdbc.PgStatement:int executeUpdate(java.lang.String)",
            "org.postgresql.jdbc.PgStatement:boolean execute(java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgStatement:int executeUpdate(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgStatement:int executeUpdate(java.lang.String,int)"
        ]
    },
    "org.postgresql.jdbc.PgStatement:boolean execute(java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgStatement:boolean execute(java.lang.String,int)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateBigDecimal(int,java.math.BigDecimal)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateBigDecimal(java.lang.String,java.math.BigDecimal)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateBoolean(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateBoolean(java.lang.String,boolean)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateByte(int,byte)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateByte(java.lang.String,byte)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateBinaryStream(int,java.io.InputStream,int)",
            "org.postgresql.jdbc.PgResultSet:void updateBytes(java.lang.String,byte[])"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateDate(int,java.sql.Date)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateDate(java.lang.String,java.sql.Date)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateDouble(int,double)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateDouble(java.lang.String,double)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateFloat(int,float)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateFloat(java.lang.String,float)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateInt(int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateInt(java.lang.String,int)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateLong(int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateLong(java.lang.String,long)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateNull(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateAsciiStream(int,java.io.InputStream,int)",
            "org.postgresql.jdbc.PgResultSet:void updateBinaryStream(int,java.io.InputStream,int)",
            "org.postgresql.jdbc.PgResultSet:void updateCharacterStream(int,java.io.Reader,int)",
            "org.postgresql.jdbc.PgResultSet:void updateNull(java.lang.String)",
            "org.postgresql.jdbc.PgResultSet:void updateValue(int,java.lang.Object)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateObject(int,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateObject(int,java.lang.Object,int)",
            "org.postgresql.jdbc.PgResultSet:void updateObject(java.lang.String,java.lang.Object,int)",
            "org.postgresql.jdbc.PgResultSet:void updateObject(java.lang.String,java.lang.Object)",
            "org.postgresql.jdbc.PgResultSet:void updateArray(int,java.sql.Array)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateShort(int,short)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateShort(java.lang.String,short)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateString(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateAsciiStream(int,java.io.InputStream,int)",
            "org.postgresql.jdbc.PgResultSet:void updateCharacterStream(int,java.io.Reader,int)",
            "org.postgresql.jdbc.PgResultSet:void updateString(java.lang.String,java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateTime(int,java.sql.Time)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateTime(java.lang.String,java.sql.Time)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateTimestamp(int,java.sql.Timestamp)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateTimestamp(java.lang.String,java.sql.Timestamp)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateSQLXML(int,java.sql.SQLXML)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateSQLXML(java.lang.String,java.sql.SQLXML)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(java.lang.String,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateRowBuffer()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void insertRow()",
            "org.postgresql.jdbc.PgResultSet:void updateRow()"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:boolean isColumnTrimmable(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:byte[] trimBytes(int,byte[])",
            "org.postgresql.jdbc.PgResultSet:java.lang.String trimString(int,java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgResultSetMetaData:int getColumnType(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgCallableStatement:boolean executeWithFlags(int)"
        ]
    },
    "org.postgresql.jdbc.PgArray:java.lang.Object getArray()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgArray:java.lang.Object getArray(long,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgArray:java.lang.Object getArrayImpl(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgArray:java.lang.Object getArray(java.util.Map)"
        ]
    },
    "org.postgresql.jdbc.PgArray:java.lang.Object getArray(long,int,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.core.NativeQuery:java.lang.String toString(org.postgresql.core.ParameterList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.SimpleQuery:java.lang.String toString(org.postgresql.core.ParameterList)"
        ]
    },
    "org.postgresql.core.v3.BatchedQuery:java.lang.String buildNativeSql(org.postgresql.core.ParameterList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.BatchedQuery:java.lang.String getNativeSql()",
            "org.postgresql.core.v3.BatchedQuery:java.lang.String toString(org.postgresql.core.ParameterList)"
        ]
    },
    "org.postgresql.core.v3.CompositeParameterList:java.lang.String toString(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.NativeQuery:java.lang.String toString(org.postgresql.core.ParameterList)",
            "org.postgresql.core.v3.BatchedQuery:java.lang.String buildNativeSql(org.postgresql.core.ParameterList)"
        ]
    },
    "org.postgresql.core.v3.SimpleParameterList:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.SimpleParameterList:java.lang.String toString(int,boolean)",
            "org.postgresql.core.v3.SimpleParameterList:int getV3Length(int)",
            "org.postgresql.jdbc.EscapedFunctions:java.lang.String sqltimestampadd(java.util.List)",
            "org.postgresql.jdbc.EscapedFunctions:java.lang.String sqltimestampdiff(java.util.List)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Date getDate(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Time getTime(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Timestamp getTimestamp(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgConnection:void appendArray(java.lang.StringBuilder,java.lang.Object,char)",
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:int castToInt(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:short castToShort(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:long castToLong(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:float castToFloat(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:double castToDouble(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:java.lang.String castToString(java.lang.Object)",
            "org.postgresql.jdbc.PgResultSet:java.lang.String getString(int)",
            "org.postgresql.util.HStoreConverter:byte[] toBytes(java.util.Map,org.postgresql.core.Encoding)",
            "org.postgresql.util.HStoreConverter:void appendEscaped(java.lang.StringBuilder,java.lang.Object)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.io.Reader getCharacterStream(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.io.Reader getCharacterStream(java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Date getDate(int,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.sql.Timestamp getTimestamp(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Date getDate(java.lang.String,java.util.Calendar)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Date getDate(int)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Date getDate(java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Time getTime(int,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.sql.Timestamp getTimestamp(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Time getTime(java.lang.String,java.util.Calendar)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Time getTime(int)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Time getTime(java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.time.LocalTime getLocalTime(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Timestamp getTimestamp(int,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Date getDate(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Time getTime(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Timestamp getTimestamp(int)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Timestamp getTimestamp(java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.time.LocalDateTime getLocalDateTime(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:boolean getBoolean(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:boolean getBoolean(java.lang.String)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)",
            "org.postgresql.jdbc.PgResultSetMetaData:void fetchFieldMetaData()",
            "org.postgresql.jdbc.TypeInfoCache:int getSQLType(java.lang.String)",
            "org.postgresql.jdbc.TypeInfoCache:java.lang.String getPGType(int)",
            "org.postgresql.jdbc.TypeInfoCache:int getPGArrayElement(int)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:byte getByte(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:byte getByte(java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.io.InputStream getAsciiStream(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.io.InputStream getAsciiStream(java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.io.InputStream getUnicodeStream(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.io.InputStream getUnicodeStream(java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.lang.String getString(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.lang.String getFixedString(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.sql.Array getArray(int)",
            "org.postgresql.jdbc.PgResultSet:short getShort(int)",
            "org.postgresql.jdbc.PgResultSet:int getInt(int)",
            "org.postgresql.jdbc.PgResultSet:long getLong(int)",
            "org.postgresql.jdbc.PgResultSet:float getFloat(int)",
            "org.postgresql.jdbc.PgResultSet:double getDouble(int)",
            "org.postgresql.jdbc.PgResultSet:java.math.BigDecimal getBigDecimal(int,int)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.SQLXML getSQLXML(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)",
            "org.postgresql.jdbc.PgResultSet:java.sql.SQLXML getSQLXML(java.lang.String)"
        ]
    },
    "org.postgresql.util.HStoreConverter:java.lang.String toString(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setMap(int,java.util.Map)",
            "org.postgresql.jdbc.PgResultSet:java.lang.String getString(int)"
        ]
    },
    "org.postgresql.jdbc.PgArray:java.sql.ResultSet getResultSet(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.math.BigDecimal getBigDecimal(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.math.BigDecimal getBigDecimal(java.lang.String)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.math.BigDecimal getBigDecimal(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet$PrimaryKey:java.lang.Object getValue()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void deleteRow()",
            "org.postgresql.jdbc.PgResultSet:void refreshRow()",
            "org.postgresql.jdbc.PgResultSet:void updateRow()"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.lang.Object getObjectImpl(int,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObjectImpl(java.lang.String,java.util.Map)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.util.Map)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgConnection:java.sql.ResultSet execSQLQuery(java.lang.String,int,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:java.sql.ResultSet execSQLQuery(java.lang.String)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)"
        ]
    },
    "org.postgresql.jdbc.AbstractBlobClob$LOIterator:boolean hasNext()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob:long position(byte[],long)"
        ]
    },
    "org.postgresql.largeobject.LargeObjectManager:long createLO()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:long createBlob(int,java.io.InputStream,long)",
            "org.postgresql.jdbc.PgPreparedStatement:void setClob(int,java.sql.Clob)"
        ]
    },
    "org.postgresql.largeobject.LargeObjectManager:int create(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.largeobject.LargeObjectManager:int create()"
        ]
    },
    "org.postgresql.largeobject.LargeObject:org.postgresql.largeobject.LargeObject copy()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob:java.io.InputStream getBinaryStream()",
            "org.postgresql.jdbc.AbstractBlobClob:java.io.OutputStream setBinaryStream(long)",
            "org.postgresql.jdbc.PgBlob:java.io.InputStream getBinaryStream(long,long)"
        ]
    },
    "org.postgresql.largeobject.LargeObjectManager:org.postgresql.largeobject.LargeObject open(long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:long createBlob(int,java.io.InputStream,long)",
            "org.postgresql.jdbc.PgPreparedStatement:void setClob(int,java.sql.Clob)"
        ]
    },
    "org.postgresql.largeobject.LargeObjectManager:org.postgresql.largeobject.LargeObject open(long,boolean)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.largeobject.LargeObjectManager:org.postgresql.largeobject.LargeObject open(int)",
            "org.postgresql.largeobject.LargeObjectManager:org.postgresql.largeobject.LargeObject open(int,boolean)"
        ]
    },
    "org.postgresql.largeobject.LargeObjectManager:org.postgresql.largeobject.LargeObject open(int,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.largeobject.LargeObjectManager:org.postgresql.largeobject.LargeObject open(int,int,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.largeobject.LargeObjectManager:org.postgresql.largeobject.LargeObject open(long,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob:org.postgresql.largeobject.LargeObject getLo(boolean)"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:java.lang.String asString(java.sql.Clob)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:int castToInt(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:short castToShort(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:long castToLong(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:float castToFloat(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:double castToDouble(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:java.math.BigDecimal castToBigDecimal(java.lang.Object,int)",
            "org.postgresql.jdbc.PgPreparedStatement:java.lang.String castToString(java.lang.Object)"
        ]
    },
    "org.postgresql.jdbc.AbstractBlobClob:long position(byte[],long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.AbstractBlobClob:long position(java.sql.Blob,long)"
        ]
    },
    "org.postgresql.ds.PGPoolingDataSource:java.sql.Connection getConnection(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.ds.common.BaseDataSource:java.sql.Connection getConnection()"
        ]
    },
    "org.postgresql.jdbc.PgStatement:java.sql.ResultSet executeQuery(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:java.lang.String getSchema()",
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxIndexKeys()",
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxNameLength()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.lang.String getSQLKeywords()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getProcedures(java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getSchemas(java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getImportedExportedKeys(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTypeInfo()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getUDTs(java.lang.String,java.lang.String,java.lang.String,int[])",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getFunctions(java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgResultSetMetaData:void fetchFieldMetaData()",
            "org.postgresql.largeobject.LargeObjectManager:void <init>(org.postgresql.core.BaseConnection)",
            "org.postgresql.xa.PGXAConnection:javax.transaction.xa.Xid[] recover(int)"
        ]
    },
    "org.postgresql.jdbc.PgStatement:int executeUpdate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:void setSchema(java.lang.String)",
            "org.postgresql.jdbc.PgConnection:java.sql.Savepoint setSavepoint()",
            "org.postgresql.jdbc.PgConnection:java.sql.Savepoint setSavepoint(java.lang.String)",
            "org.postgresql.jdbc.PgStatement:int executeUpdate(java.lang.String,int)",
            "org.postgresql.jdbc.PgStatement:int executeUpdate(java.lang.String,int[])",
            "org.postgresql.jdbc.PgStatement:int executeUpdate(java.lang.String,java.lang.String[])",
            "org.postgresql.xa.PGXAConnection:int prepare(javax.transaction.xa.Xid)",
            "org.postgresql.xa.PGXAConnection:void rollback(javax.transaction.xa.Xid)",
            "org.postgresql.xa.PGXAConnection:void commitPrepared(javax.transaction.xa.Xid)"
        ]
    },
    "org.postgresql.jdbc.PgStatement:boolean execute(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:boolean isValid(int)",
            "org.postgresql.jdbc.PgStatement:boolean execute(java.lang.String,int)",
            "org.postgresql.jdbc.PgStatement:boolean execute(java.lang.String,int[])",
            "org.postgresql.jdbc.PgStatement:boolean execute(java.lang.String,java.lang.String[])",
            "org.postgresql.replication.PGReplicationConnectionImpl:void dropReplicationSlot(java.lang.String)",
            "org.postgresql.replication.fluent.logical.LogicalCreateSlotBuilder:void make()",
            "org.postgresql.replication.fluent.physical.PhysicalCreateSlotBuilder:void make()"
        ]
    },
    "org.postgresql.jdbc.PgStatement:int executeUpdate(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgStatement:boolean execute(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateBigDecimal(java.lang.String,java.math.BigDecimal)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateBoolean(java.lang.String,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateByte(java.lang.String,byte)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateBytes(java.lang.String,byte[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateDate(java.lang.String,java.sql.Date)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateDouble(java.lang.String,double)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateFloat(java.lang.String,float)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateInt(java.lang.String,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateLong(java.lang.String,long)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateAsciiStream(int,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateAsciiStream(java.lang.String,java.io.InputStream,int)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateCharacterStream(int,java.io.Reader,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateCharacterStream(java.lang.String,java.io.Reader,int)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateNull(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateObject(int,java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateObject(java.lang.String,java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateObject(java.lang.String,java.lang.Object)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateArray(int,java.sql.Array)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:void updateArray(java.lang.String,java.sql.Array)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void updateShort(java.lang.String,short)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateString(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateTime(java.lang.String,java.sql.Time)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateTimestamp(java.lang.String,java.sql.Timestamp)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateSQLXML(java.lang.String,java.sql.SQLXML)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(java.lang.String,java.lang.Class)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:byte[] trimBytes(int,byte[])": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:byte[] getBytes(int)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.lang.String trimString(int,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.String getString(int)"
        ]
    },
    "org.postgresql.jdbc.PgArray:java.lang.Object getArray(java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.core.v3.SimpleQuery:java.lang.String toString(org.postgresql.core.ParameterList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.BatchedQuery:java.lang.String toString(org.postgresql.core.ParameterList)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendSimpleQuery(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList)",
            "org.postgresql.core.v3.SimpleQuery:java.lang.String toString()",
            "org.postgresql.jdbc.BatchResultHandler:void handleError(java.sql.SQLException)",
            "org.postgresql.jdbc.PgPreparedStatement:java.lang.String toString()",
            "org.postgresql.jdbc.PgResultSet:void parseQuery()"
        ]
    },
    "org.postgresql.core.v3.BatchedQuery:java.lang.String getNativeSql()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.CompositeQuery:java.lang.String getNativeSql()",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendParse(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,boolean)",
            "org.postgresql.core.v3.QueryExecutorImpl:void sendOneQuery(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList,int,int,int)",
            "org.postgresql.core.v3.SimpleQuery:boolean isEmpty()",
            "org.postgresql.jdbc.PgConnection:java.lang.String nativeSQL(java.lang.String)"
        ]
    },
    "org.postgresql.core.v3.BatchedQuery:java.lang.String toString(org.postgresql.core.ParameterList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void sendSimpleQuery(org.postgresql.core.v3.SimpleQuery,org.postgresql.core.v3.SimpleParameterList)",
            "org.postgresql.core.v3.SimpleQuery:java.lang.String toString()",
            "org.postgresql.jdbc.BatchResultHandler:void handleError(java.sql.SQLException)",
            "org.postgresql.jdbc.PgPreparedStatement:java.lang.String toString()",
            "org.postgresql.jdbc.PgResultSet:void parseQuery()"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.io.Reader getCharacterStream(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Date getDate(java.lang.String,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Date getDate(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Date getDate(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Time getTime(java.lang.String,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Time getTime(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Time getTime(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Timestamp getTimestamp(java.lang.String,java.util.Calendar)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Timestamp getTimestamp(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Timestamp getTimestamp(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:boolean getBoolean(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:byte getByte(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.io.InputStream getAsciiStream(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.io.InputStream getUnicodeStream(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Array getArray(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Array getArray(java.lang.String)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:short getShort(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:short getShort(java.lang.String)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:int getInt(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.fastpath.Fastpath:void addFunctions(java.sql.ResultSet)",
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxIndexKeys()",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:int getInt(java.lang.String)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:long getLong(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTypeInfo()",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Blob getBlob(int)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Clob getClob(int)",
            "org.postgresql.jdbc.PgResultSet:long getLong(java.lang.String)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)",
            "org.postgresql.jdbc.PgResultSetMetaData:void fetchFieldMetaData()",
            "org.postgresql.jdbc.TypeInfoCache:int getPGType(java.lang.String)",
            "org.postgresql.jdbc.TypeInfoCache:int getPGArrayElement(int)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:float getFloat(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:float getFloat(java.lang.String)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:double getDouble(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:double getDouble(java.lang.String)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.SQLXML getSQLXML(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.math.BigDecimal getBigDecimal(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.lang.Object getObjectImpl(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(java.lang.String,java.util.Map)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgConnection:java.sql.ResultSet execSQLQuery(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:int getTransactionIsolation()"
        ]
    },
    "org.postgresql.largeobject.LargeObjectManager:int create()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.largeobject.LargeObjectManager:org.postgresql.largeobject.LargeObject open(int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.largeobject.LargeObjectManager:org.postgresql.largeobject.LargeObject open(int,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgPreparedStatement:java.math.BigDecimal castToBigDecimal(java.lang.Object,int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)"
        ]
    },
    "org.postgresql.ds.common.BaseDataSource:java.sql.Connection getConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.ds.PGConnectionPoolDataSource:javax.sql.PooledConnection getPooledConnection()"
        ]
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getProcedures(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTables(java.lang.String,java.lang.String,java.lang.String,java.lang.String[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getSchemas(java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getSchemas()"
        ]
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getPrimaryKeys(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:boolean isUpdateable()"
        ]
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getIndexInfo(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getFunctions(java.lang.String,java.lang.String,java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgStatement:int executeUpdate(java.lang.String,int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgStatement:boolean execute(java.lang.String,int[])": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateAsciiStream(java.lang.String,java.io.InputStream,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateCharacterStream(java.lang.String,java.io.Reader,int)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:void updateArray(java.lang.String,java.sql.Array)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:byte[] getBytes(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:java.io.InputStream getBinaryStream(int)",
            "org.postgresql.jdbc.PgResultSet:byte[] getBytes(java.lang.String)"
        ]
    },
    "org.postgresql.core.v3.SimpleQuery:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.BatchedQuery:java.lang.String toString()",
            "org.postgresql.core.v3.CompositeQuery:java.lang.String toString(org.postgresql.core.ParameterList)",
            "org.postgresql.core.v3.SimpleParameterList:java.lang.String toString(int,boolean)",
            "org.postgresql.core.v3.SimpleParameterList:int getV3Length(int)",
            "org.postgresql.jdbc.EscapedFunctions:java.lang.String sqltimestampadd(java.util.List)",
            "org.postgresql.jdbc.EscapedFunctions:java.lang.String sqltimestampdiff(java.util.List)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Date getDate(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Time getTime(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Timestamp getTimestamp(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgConnection:void appendArray(java.lang.StringBuilder,java.lang.Object,char)",
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:int castToInt(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:short castToShort(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:long castToLong(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:float castToFloat(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:double castToDouble(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:java.lang.String castToString(java.lang.Object)",
            "org.postgresql.jdbc.PgResultSet:java.lang.String getString(int)",
            "org.postgresql.util.HStoreConverter:byte[] toBytes(java.util.Map,org.postgresql.core.Encoding)",
            "org.postgresql.util.HStoreConverter:void appendEscaped(java.lang.StringBuilder,java.lang.Object)"
        ]
    },
    "org.postgresql.jdbc.BatchResultHandler:void handleError(java.sql.SQLException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.ResultHandlerDelegate:void handleError(java.sql.SQLException)",
            "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query,org.postgresql.core.ParameterList,org.postgresql.core.ResultHandler,int,int,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query[],org.postgresql.core.ParameterList[],org.postgresql.jdbc.BatchResultHandler,int,int,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void interpretCommandStatus(java.lang.String,org.postgresql.core.ResultHandler)",
            "org.postgresql.jdbc.BatchResultHandler:void handleResultRows(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)",
            "org.postgresql.jdbc.BatchResultHandler:void handleCommandStatus(java.lang.String,int,long)",
            "org.postgresql.jdbc.PgStatement:int[] executeBatch()"
        ]
    },
    "org.postgresql.jdbc.PgPreparedStatement:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.SimpleParameterList:java.lang.String toString(int,boolean)",
            "org.postgresql.core.v3.SimpleParameterList:int getV3Length(int)",
            "org.postgresql.jdbc.EscapedFunctions:java.lang.String sqltimestampadd(java.util.List)",
            "org.postgresql.jdbc.EscapedFunctions:java.lang.String sqltimestampdiff(java.util.List)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Date getDate(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Time getTime(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Timestamp getTimestamp(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgConnection:void appendArray(java.lang.StringBuilder,java.lang.Object,char)",
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:int castToInt(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:short castToShort(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:long castToLong(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:float castToFloat(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:double castToDouble(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:java.lang.String castToString(java.lang.Object)",
            "org.postgresql.jdbc.PgResultSet:java.lang.String getString(int)",
            "org.postgresql.util.HStoreConverter:byte[] toBytes(java.util.Map,org.postgresql.core.Encoding)",
            "org.postgresql.util.HStoreConverter:void appendEscaped(java.lang.StringBuilder,java.lang.Object)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:void parseQuery()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:boolean isUpdateable()"
        ]
    },
    "org.postgresql.core.v3.CompositeQuery:java.lang.String getNativeSql()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgConnection:java.lang.String nativeSQL(java.lang.String)"
        ]
    },
    "org.postgresql.core.v3.SimpleQuery:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.BatchedQuery:boolean isEmpty()",
            "org.postgresql.core.v3.CompositeQuery:boolean isEmpty()",
            "org.postgresql.jdbc.PgStatement:void executeInternal(org.postgresql.core.CachedQuery,org.postgresql.core.ParameterList,int)"
        ]
    },
    "org.postgresql.jdbc.PgConnection:java.lang.String nativeSQL(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Array getArray(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:short getShort(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:int getInt(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgDatabaseMetaData:int getMaxNameLength()",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Blob getBlob(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Blob getBlob(java.lang.String)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Clob getClob(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.lang.Object internalGetObject(int,org.postgresql.core.Field)",
            "org.postgresql.jdbc.PgResultSet:java.sql.Clob getClob(java.lang.String)",
            "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(int,java.lang.Class)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:long getLong(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:float getFloat(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:double getDouble(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.lang.Object getObject(java.lang.String,java.util.Map)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.ds.PGConnectionPoolDataSource:javax.sql.PooledConnection getPooledConnection()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.ds.PGPoolingDataSource:void initialize()",
            "org.postgresql.ds.PGPoolingDataSource:java.sql.Connection getPooledConnection()"
        ]
    },
    "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getSchemas()": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.io.InputStream getBinaryStream(int)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgResultSet:java.io.InputStream getBinaryStream(java.lang.String)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:byte[] getBytes(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getProcedureColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumns(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getColumnPrivileges(java.lang.String,java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getTablePrivileges(java.lang.String,java.lang.String,java.lang.String)",
            "org.postgresql.jdbc.PgDatabaseMetaData:java.sql.ResultSet getBestRowIdentifier(java.lang.String,java.lang.String,java.lang.String,int,boolean)"
        ]
    },
    "org.postgresql.core.v3.BatchedQuery:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.CompositeQuery:java.lang.String toString(org.postgresql.core.ParameterList)",
            "org.postgresql.core.v3.SimpleParameterList:java.lang.String toString(int,boolean)",
            "org.postgresql.core.v3.SimpleParameterList:int getV3Length(int)",
            "org.postgresql.jdbc.EscapedFunctions:java.lang.String sqltimestampadd(java.util.List)",
            "org.postgresql.jdbc.EscapedFunctions:java.lang.String sqltimestampdiff(java.util.List)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Date getDate(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Time getTime(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Timestamp getTimestamp(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgConnection:void appendArray(java.lang.StringBuilder,java.lang.Object,char)",
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:int castToInt(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:short castToShort(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:long castToLong(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:float castToFloat(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:double castToDouble(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:java.lang.String castToString(java.lang.Object)",
            "org.postgresql.jdbc.PgResultSet:java.lang.String getString(int)",
            "org.postgresql.util.HStoreConverter:byte[] toBytes(java.util.Map,org.postgresql.core.Encoding)",
            "org.postgresql.util.HStoreConverter:void appendEscaped(java.lang.StringBuilder,java.lang.Object)"
        ]
    },
    "org.postgresql.core.v3.CompositeQuery:java.lang.String toString(org.postgresql.core.ParameterList)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.CompositeQuery:java.lang.String toString()",
            "org.postgresql.jdbc.BatchResultHandler:void handleError(java.sql.SQLException)",
            "org.postgresql.jdbc.PgPreparedStatement:java.lang.String toString()",
            "org.postgresql.jdbc.PgResultSet:void parseQuery()"
        ]
    },
    "org.postgresql.core.ResultHandlerDelegate:void handleError(java.sql.SQLException)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.ResultHandlerDelegate:void handleError(java.sql.SQLException)",
            "org.postgresql.core.v3.QueryExecutorImpl$1:void handleCommandStatus(java.lang.String,int,long)",
            "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query,org.postgresql.core.ParameterList,org.postgresql.core.ResultHandler,int,int,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void execute(org.postgresql.core.Query[],org.postgresql.core.ParameterList[],org.postgresql.jdbc.BatchResultHandler,int,int,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void fetch(org.postgresql.core.ResultCursor,org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void interpretCommandStatus(java.lang.String,org.postgresql.core.ResultHandler)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl:void interpretCommandStatus(java.lang.String,org.postgresql.core.ResultHandler)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)"
        ]
    },
    "org.postgresql.jdbc.BatchResultHandler:void handleResultRows(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.ResultHandlerDelegate:void handleResultRows(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)"
        ]
    },
    "org.postgresql.jdbc.BatchResultHandler:void handleCommandStatus(java.lang.String,int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.ResultHandlerDelegate:void handleCommandStatus(java.lang.String,int,long)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void interpretCommandStatus(java.lang.String,org.postgresql.core.ResultHandler)"
        ]
    },
    "org.postgresql.core.v3.BatchedQuery:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.CompositeQuery:boolean isEmpty()",
            "org.postgresql.jdbc.PgStatement:void executeInternal(org.postgresql.core.CachedQuery,org.postgresql.core.ParameterList,int)"
        ]
    },
    "org.postgresql.core.v3.CompositeQuery:boolean isEmpty()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.jdbc.PgStatement:void executeInternal(org.postgresql.core.CachedQuery,org.postgresql.core.ParameterList,int)"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Blob getBlob(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.jdbc.PgResultSet:java.sql.Clob getClob(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.ds.PGPoolingDataSource:void initialize()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.ds.PGPoolingDataSource:java.sql.Connection getConnection(java.lang.String,java.lang.String)",
            "org.postgresql.ds.PGPoolingDataSource:java.sql.Connection getConnection()"
        ]
    },
    "org.postgresql.jdbc.PgResultSet:java.io.InputStream getBinaryStream(java.lang.String)": {
        "isVulRoot": false,
        "vulCaller": []
    },
    "org.postgresql.core.v3.CompositeQuery:java.lang.String toString()": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.v3.SimpleParameterList:java.lang.String toString(int,boolean)",
            "org.postgresql.core.v3.SimpleParameterList:int getV3Length(int)",
            "org.postgresql.jdbc.EscapedFunctions:java.lang.String sqltimestampadd(java.util.List)",
            "org.postgresql.jdbc.EscapedFunctions:java.lang.String sqltimestampdiff(java.util.List)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Date getDate(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Time getTime(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgCallableStatement:java.sql.Timestamp getTimestamp(int,java.util.Calendar)",
            "org.postgresql.jdbc.PgConnection:void appendArray(java.lang.StringBuilder,java.lang.Object,char)",
            "org.postgresql.jdbc.PgPreparedStatement:void setObject(int,java.lang.Object,int,int)",
            "org.postgresql.jdbc.PgPreparedStatement:int castToInt(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:short castToShort(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:long castToLong(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:float castToFloat(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:double castToDouble(java.lang.Object)",
            "org.postgresql.jdbc.PgPreparedStatement:java.lang.String castToString(java.lang.Object)",
            "org.postgresql.jdbc.PgResultSet:java.lang.String getString(int)",
            "org.postgresql.util.HStoreConverter:byte[] toBytes(java.util.Map,org.postgresql.core.Encoding)",
            "org.postgresql.util.HStoreConverter:void appendEscaped(java.lang.StringBuilder,java.lang.Object)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl$1:void handleCommandStatus(java.lang.String,int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.ResultHandlerDelegate:void handleCommandStatus(java.lang.String,int,long)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void interpretCommandStatus(java.lang.String,org.postgresql.core.ResultHandler)"
        ]
    },
    "org.postgresql.core.ResultHandlerDelegate:void handleResultRows(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.ResultHandlerDelegate:void handleResultRows(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)",
            "org.postgresql.core.v3.QueryExecutorImpl$1:void handleResultRows(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)",
            "org.postgresql.core.v3.QueryExecutorImpl$3:void handleCommandStatus(java.lang.String,int,long)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)"
        ]
    },
    "org.postgresql.core.ResultHandlerDelegate:void handleCommandStatus(java.lang.String,int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.ResultHandlerDelegate:void handleCommandStatus(java.lang.String,int,long)",
            "org.postgresql.core.v3.QueryExecutorImpl$1:void handleCommandStatus(java.lang.String,int,long)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void interpretCommandStatus(java.lang.String,org.postgresql.core.ResultHandler)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl$1:void handleResultRows(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.ResultHandlerDelegate:void handleResultRows(org.postgresql.core.Query,org.postgresql.core.Field[],java.util.List,org.postgresql.core.ResultCursor)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)"
        ]
    },
    "org.postgresql.core.v3.QueryExecutorImpl$3:void handleCommandStatus(java.lang.String,int,long)": {
        "isVulRoot": false,
        "vulCaller": [
            "org.postgresql.core.ResultHandlerDelegate:void handleCommandStatus(java.lang.String,int,long)",
            "org.postgresql.core.v3.QueryExecutorImpl:void processResults(org.postgresql.core.ResultHandler,int)",
            "org.postgresql.core.v3.QueryExecutorImpl:void interpretCommandStatus(java.lang.String,org.postgresql.core.ResultHandler)"
        ]
    }
}